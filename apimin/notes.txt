Process Notes
--------------
--------------

NOTE: j2objc needs ALL the source so it can provide compiled versions to Obj-C 
(can't just import a class file there, or a jar with classes, etc).
TODO confirm j2objc all steps understanding

NOTE: out of the box j2objc includes:
*Static libs (.a files in ./lib)
guava
jre emul (and sub packages)
JSR 305
junit
javax inject
mockito
protbufs
xalan
android utils (log, pair, lrucache, maps, sparsearray and some other stuff)

*Frameworks (dirs in ./Frameworks)
Guava.framework
JRE.framework
JSR305.framework
JUnit.framework
JavaxInject.framework
Mockito.framework
ProtobufRuntime.framework
Xalan.framework

bunch more j2objc failures with 1.3 default
switch to JAVAC frontend for j2objc fixes the java 8 issues 
export J2OBJC_FRONT_END=JAVAC

COMPILE THEM into a static library easiest to grok for me 
$ cd build_output
$ j2objcc -c -I. `find . -name '*.m'`
$ libtool -static -o libdagger.a *.o



STEP 1 OBTAIN SOURCE LIST 
--------------------------
Get all local source.   
(AND sources for any dependencies j2objc does not already have libs for.)
(If you need sources for java jars see mvn dependency target notes below, seems to get sources better than gradle?)

cd j2objc
find ../src -name "*.java" > sources.txt


STEP 2 GET JAVAC TO WORK 
(this ensures you have all the pieces for j2objc later)
-------------------------------------------------------

Get maven to show the classpath the compiler needs:
mvn -X compiler:compile
(may need to add test scope classes too)

-classpath 
 /Users/charliecollins/projects/travelbriefing-api/apimin/target/classes
:/Users/charliecollins/.m2/repository/com/google/guava/guava/21.0/guava-21.0.jar
:/Users/charliecollins/.m2/repository/com/google/code/gson/gson/2.8.0/gson-2.8.0.jar

javac -d build_javac -classpath <CLASSPATH> @sources.txt

NO ERRORS, move on to j2objc (errors, gotta get javac to work)


STEP 3 TRANSPILE JAVA TO OBJC WITH J2OBJC
-----------------------------------------

Replace the javac command with j2objc and change output dir to build_j2objc.

export J2OBJC_FRONT_END=JAVAC
(can use javac as front end for first pass j2objc, was using eclipse jdt, this is new)

j2objc -d ./build_j2objc -classpath <CLASSPATH> @sources.txt
(may want --no-package-directories)


STEP 4 COPY FILES INTO XCODE PROJECT
------------------------------------
Xcode tries to hide all the things so I don't want to build java from xcode, yet. 
Copy files into "fromjava" directory inside xcode project dir. 
Then "add files" to xcode project. 
Then make sure "build phases" includes the files added. 
Then make sure other libs/frameworks needed (like guava, gson, etc) are present. 







MAVEN TRANSITIVE DEP NOTES
--------------------------
SHOW ALL transistive deps
mvn depdendency:tree
[INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ travelbriefing-api ---
[INFO] com.totsp:travelbriefing-api:jar:1.0-SNAPSHOT
[INFO] +- com.google.guava:guava:jar:19.0:compile
[INFO] +- com.google.code.gson:gson:jar:2.8.0:compile

GET all the dep sources:
mvn dependency:unpack-dependencies -Dclassifier=sources
(this puts all the stuff in target/dependency)
can create another sources file from there:
find ./target -name "*.java" > sources_deps.txt
(then remove package-info.java from that -- need to automate)




