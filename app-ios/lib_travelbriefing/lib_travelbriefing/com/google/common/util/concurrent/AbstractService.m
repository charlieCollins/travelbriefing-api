//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/com/google/common/util/concurrent/AbstractService.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/util/concurrent/AbstractService.h"
#include "com/google/common/util/concurrent/ListenerCallQueue.h"
#include "com/google/common/util/concurrent/Monitor.h"
#include "com/google/common/util/concurrent/Service.h"
#include "java/lang/AssertionError.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/concurrent/Executor.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/TimeoutException.h"
#include "javax/annotation/Nullable.h"

@class ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot;

@interface ComGoogleCommonUtilConcurrentAbstractService () {
 @public
  ComGoogleCommonUtilConcurrentMonitor *monitor_;
  ComGoogleCommonUtilConcurrentMonitor_Guard *isStartable_;
  ComGoogleCommonUtilConcurrentMonitor_Guard *isStoppable_;
  ComGoogleCommonUtilConcurrentMonitor_Guard *hasReachedRunning_;
  ComGoogleCommonUtilConcurrentMonitor_Guard *isStopped_;
  id<JavaUtilList> listeners_;
  volatile_id snapshot_;
}

+ (ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *)terminatedCallbackWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)from;

+ (ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *)stoppingCallbackWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)from;

- (void)checkCurrentStateWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)expected;

- (void)executeListeners;

- (void)starting;

- (void)running;

- (void)stoppingWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)from;

- (void)terminatedWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)from;

- (void)failedWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)from
                                             withNSException:(NSException *)cause;

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractService, monitor_, ComGoogleCommonUtilConcurrentMonitor *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractService, isStartable_, ComGoogleCommonUtilConcurrentMonitor_Guard *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractService, isStoppable_, ComGoogleCommonUtilConcurrentMonitor_Guard *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractService, hasReachedRunning_, ComGoogleCommonUtilConcurrentMonitor_Guard *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractService, isStopped_, ComGoogleCommonUtilConcurrentMonitor_Guard *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractService, listeners_, id<JavaUtilList>)
J2OBJC_VOLATILE_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractService, snapshot_, ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *)

inline ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *ComGoogleCommonUtilConcurrentAbstractService_get_STARTING_CALLBACK();
static ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *ComGoogleCommonUtilConcurrentAbstractService_STARTING_CALLBACK;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentAbstractService, STARTING_CALLBACK, ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *)

inline ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *ComGoogleCommonUtilConcurrentAbstractService_get_RUNNING_CALLBACK();
static ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *ComGoogleCommonUtilConcurrentAbstractService_RUNNING_CALLBACK;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentAbstractService, RUNNING_CALLBACK, ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *)

inline ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *ComGoogleCommonUtilConcurrentAbstractService_get_STOPPING_FROM_STARTING_CALLBACK();
static ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *ComGoogleCommonUtilConcurrentAbstractService_STOPPING_FROM_STARTING_CALLBACK;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentAbstractService, STOPPING_FROM_STARTING_CALLBACK, ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *)

inline ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *ComGoogleCommonUtilConcurrentAbstractService_get_STOPPING_FROM_RUNNING_CALLBACK();
static ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *ComGoogleCommonUtilConcurrentAbstractService_STOPPING_FROM_RUNNING_CALLBACK;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentAbstractService, STOPPING_FROM_RUNNING_CALLBACK, ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *)

inline ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *ComGoogleCommonUtilConcurrentAbstractService_get_TERMINATED_FROM_NEW_CALLBACK();
static ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *ComGoogleCommonUtilConcurrentAbstractService_TERMINATED_FROM_NEW_CALLBACK;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentAbstractService, TERMINATED_FROM_NEW_CALLBACK, ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *)

inline ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *ComGoogleCommonUtilConcurrentAbstractService_get_TERMINATED_FROM_RUNNING_CALLBACK();
static ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *ComGoogleCommonUtilConcurrentAbstractService_TERMINATED_FROM_RUNNING_CALLBACK;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentAbstractService, TERMINATED_FROM_RUNNING_CALLBACK, ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *)

inline ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *ComGoogleCommonUtilConcurrentAbstractService_get_TERMINATED_FROM_STOPPING_CALLBACK();
static ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *ComGoogleCommonUtilConcurrentAbstractService_TERMINATED_FROM_STOPPING_CALLBACK;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentAbstractService, TERMINATED_FROM_STOPPING_CALLBACK, ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *)

__attribute__((unused)) static ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *ComGoogleCommonUtilConcurrentAbstractService_terminatedCallbackWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentService_State *from);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *ComGoogleCommonUtilConcurrentAbstractService_stoppingCallbackWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentService_State *from);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_checkCurrentStateWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentAbstractService *self, ComGoogleCommonUtilConcurrentService_State *expected);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_notifyFailedWithNSException_(ComGoogleCommonUtilConcurrentAbstractService *self, NSException *cause);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentService_State *ComGoogleCommonUtilConcurrentAbstractService_state(ComGoogleCommonUtilConcurrentAbstractService *self);

__attribute__((unused)) static NSException *ComGoogleCommonUtilConcurrentAbstractService_failureCause(ComGoogleCommonUtilConcurrentAbstractService *self);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_executeListeners(ComGoogleCommonUtilConcurrentAbstractService *self);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_starting(ComGoogleCommonUtilConcurrentAbstractService *self);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_running(ComGoogleCommonUtilConcurrentAbstractService *self);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_stoppingWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentAbstractService *self, ComGoogleCommonUtilConcurrentService_State *from);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_terminatedWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentAbstractService *self, ComGoogleCommonUtilConcurrentService_State *from);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_failedWithComGoogleCommonUtilConcurrentService_State_withNSException_(ComGoogleCommonUtilConcurrentAbstractService *self, ComGoogleCommonUtilConcurrentService_State *from, NSException *cause);

@interface ComGoogleCommonUtilConcurrentAbstractService_1 : ComGoogleCommonUtilConcurrentListenerCallQueue_Callback

- (instancetype)initWithNSString:(NSString *)param0;

- (void)callWithId:(ComGoogleCommonUtilConcurrentService_Listener *)listener;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractService_1)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_1_initWithNSString_(ComGoogleCommonUtilConcurrentAbstractService_1 *self, NSString *param0);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_1 *new_ComGoogleCommonUtilConcurrentAbstractService_1_initWithNSString_(NSString *param0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_1 *create_ComGoogleCommonUtilConcurrentAbstractService_1_initWithNSString_(NSString *param0);

@interface ComGoogleCommonUtilConcurrentAbstractService_2 : ComGoogleCommonUtilConcurrentListenerCallQueue_Callback

- (instancetype)initWithNSString:(NSString *)param0;

- (void)callWithId:(ComGoogleCommonUtilConcurrentService_Listener *)listener;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractService_2)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_2_initWithNSString_(ComGoogleCommonUtilConcurrentAbstractService_2 *self, NSString *param0);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_2 *new_ComGoogleCommonUtilConcurrentAbstractService_2_initWithNSString_(NSString *param0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_2 *create_ComGoogleCommonUtilConcurrentAbstractService_2_initWithNSString_(NSString *param0);

@interface ComGoogleCommonUtilConcurrentAbstractService_3 : ComGoogleCommonUtilConcurrentListenerCallQueue_Callback {
 @public
  ComGoogleCommonUtilConcurrentService_State *val$from_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)capture$0
                                                      withNSString:(NSString *)param0;

- (void)callWithId:(ComGoogleCommonUtilConcurrentService_Listener *)listener;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractService_3)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_3_initWithComGoogleCommonUtilConcurrentService_State_withNSString_(ComGoogleCommonUtilConcurrentAbstractService_3 *self, ComGoogleCommonUtilConcurrentService_State *capture$0, NSString *param0);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_3 *new_ComGoogleCommonUtilConcurrentAbstractService_3_initWithComGoogleCommonUtilConcurrentService_State_withNSString_(ComGoogleCommonUtilConcurrentService_State *capture$0, NSString *param0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_3 *create_ComGoogleCommonUtilConcurrentAbstractService_3_initWithComGoogleCommonUtilConcurrentService_State_withNSString_(ComGoogleCommonUtilConcurrentService_State *capture$0, NSString *param0);

@interface ComGoogleCommonUtilConcurrentAbstractService_4 : ComGoogleCommonUtilConcurrentListenerCallQueue_Callback {
 @public
  ComGoogleCommonUtilConcurrentService_State *val$from_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)capture$0
                                                      withNSString:(NSString *)param0;

- (void)callWithId:(ComGoogleCommonUtilConcurrentService_Listener *)listener;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractService_4)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_4_initWithComGoogleCommonUtilConcurrentService_State_withNSString_(ComGoogleCommonUtilConcurrentAbstractService_4 *self, ComGoogleCommonUtilConcurrentService_State *capture$0, NSString *param0);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_4 *new_ComGoogleCommonUtilConcurrentAbstractService_4_initWithComGoogleCommonUtilConcurrentService_State_withNSString_(ComGoogleCommonUtilConcurrentService_State *capture$0, NSString *param0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_4 *create_ComGoogleCommonUtilConcurrentAbstractService_4_initWithComGoogleCommonUtilConcurrentService_State_withNSString_(ComGoogleCommonUtilConcurrentService_State *capture$0, NSString *param0);

@interface ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard : ComGoogleCommonUtilConcurrentMonitor_Guard {
 @public
  __unsafe_unretained ComGoogleCommonUtilConcurrentAbstractService *this$0_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractService:(ComGoogleCommonUtilConcurrentAbstractService *)outer$;

- (jboolean)isSatisfied;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard *self, ComGoogleCommonUtilConcurrentAbstractService *outer$);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard *new_ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard *create_ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard)

@interface ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard : ComGoogleCommonUtilConcurrentMonitor_Guard {
 @public
  __unsafe_unretained ComGoogleCommonUtilConcurrentAbstractService *this$0_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractService:(ComGoogleCommonUtilConcurrentAbstractService *)outer$;

- (jboolean)isSatisfied;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard *self, ComGoogleCommonUtilConcurrentAbstractService *outer$);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard *new_ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard *create_ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard)

@interface ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard : ComGoogleCommonUtilConcurrentMonitor_Guard {
 @public
  __unsafe_unretained ComGoogleCommonUtilConcurrentAbstractService *this$0_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractService:(ComGoogleCommonUtilConcurrentAbstractService *)outer$;

- (jboolean)isSatisfied;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard *self, ComGoogleCommonUtilConcurrentAbstractService *outer$);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard *new_ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard *create_ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard)

@interface ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard : ComGoogleCommonUtilConcurrentMonitor_Guard {
 @public
  __unsafe_unretained ComGoogleCommonUtilConcurrentAbstractService *this$0_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractService:(ComGoogleCommonUtilConcurrentAbstractService *)outer$;

- (jboolean)isSatisfied;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard *self, ComGoogleCommonUtilConcurrentAbstractService *outer$);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard *new_ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard *create_ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard)

@interface ComGoogleCommonUtilConcurrentAbstractService_5 : ComGoogleCommonUtilConcurrentListenerCallQueue_Callback {
 @public
  ComGoogleCommonUtilConcurrentService_State *val$from_;
  NSException *val$cause_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)capture$0
                                                   withNSException:(NSException *)capture$1
                                                      withNSString:(NSString *)param0;

- (void)callWithId:(ComGoogleCommonUtilConcurrentService_Listener *)listener;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractService_5)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_5_initWithComGoogleCommonUtilConcurrentService_State_withNSException_withNSString_(ComGoogleCommonUtilConcurrentAbstractService_5 *self, ComGoogleCommonUtilConcurrentService_State *capture$0, NSException *capture$1, NSString *param0);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_5 *new_ComGoogleCommonUtilConcurrentAbstractService_5_initWithComGoogleCommonUtilConcurrentService_State_withNSException_withNSString_(ComGoogleCommonUtilConcurrentService_State *capture$0, NSException *capture$1, NSString *param0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_5 *create_ComGoogleCommonUtilConcurrentAbstractService_5_initWithComGoogleCommonUtilConcurrentService_State_withNSException_withNSString_(ComGoogleCommonUtilConcurrentService_State *capture$0, NSException *capture$1, NSString *param0);

@interface ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot : NSObject {
 @public
  ComGoogleCommonUtilConcurrentService_State *state_;
  jboolean shutdownWhenStartupFinishes_;
  NSException *failure_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)internalState;

- (instancetype)initWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)internalState
                                                       withBoolean:(jboolean)shutdownWhenStartupFinishes
                                                   withNSException:(NSException *)failure;

- (ComGoogleCommonUtilConcurrentService_State *)externalState;

- (NSException *)failureCause;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot)

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot, state_, ComGoogleCommonUtilConcurrentService_State *)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot, failure_, NSException *)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *self, ComGoogleCommonUtilConcurrentService_State *internalState);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *new_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentService_State *internalState) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *create_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentService_State *internalState);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_withBoolean_withNSException_(ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *self, ComGoogleCommonUtilConcurrentService_State *internalState, jboolean shutdownWhenStartupFinishes, NSException *failure);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *new_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_withBoolean_withNSException_(ComGoogleCommonUtilConcurrentService_State *internalState, jboolean shutdownWhenStartupFinishes, NSException *failure) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *create_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_withBoolean_withNSException_(ComGoogleCommonUtilConcurrentService_State *internalState, jboolean shutdownWhenStartupFinishes, NSException *failure);

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot__Annotations$0();

__attribute__((unused)) static IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot__Annotations$1();

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonUtilConcurrentAbstractService)

@implementation ComGoogleCommonUtilConcurrentAbstractService

+ (ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *)terminatedCallbackWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)from {
  return ComGoogleCommonUtilConcurrentAbstractService_terminatedCallbackWithComGoogleCommonUtilConcurrentService_State_(from);
}

+ (ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *)stoppingCallbackWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)from {
  return ComGoogleCommonUtilConcurrentAbstractService_stoppingCallbackWithComGoogleCommonUtilConcurrentService_State_(from);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonUtilConcurrentAbstractService_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)doStart {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)doStop {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<ComGoogleCommonUtilConcurrentService>)startAsync {
  if ([((ComGoogleCommonUtilConcurrentMonitor *) nil_chk(monitor_)) enterIfWithComGoogleCommonUtilConcurrentMonitor_Guard:isStartable_]) {
    @try {
      JreVolatileStrongAssign(&snapshot_, create_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_(JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, STARTING)));
      ComGoogleCommonUtilConcurrentAbstractService_starting(self);
      [self doStart];
    }
    @catch (NSException *startupFailure) {
      ComGoogleCommonUtilConcurrentAbstractService_notifyFailedWithNSException_(self, startupFailure);
    }
    @finally {
      [monitor_ leave];
      ComGoogleCommonUtilConcurrentAbstractService_executeListeners(self);
    }
  }
  else {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$", @"Service ", self, @" has already been started"));
  }
  return self;
}

- (id<ComGoogleCommonUtilConcurrentService>)stopAsync {
  if ([((ComGoogleCommonUtilConcurrentMonitor *) nil_chk(monitor_)) enterIfWithComGoogleCommonUtilConcurrentMonitor_Guard:isStoppable_]) {
    @try {
      ComGoogleCommonUtilConcurrentService_State *previous = ComGoogleCommonUtilConcurrentAbstractService_state(self);
      switch ([previous ordinal]) {
        case ComGoogleCommonUtilConcurrentService_State_Enum_NEW:
        JreVolatileStrongAssign(&snapshot_, create_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_(JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, TERMINATED)));
        ComGoogleCommonUtilConcurrentAbstractService_terminatedWithComGoogleCommonUtilConcurrentService_State_(self, JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, NEW));
        break;
        case ComGoogleCommonUtilConcurrentService_State_Enum_STARTING:
        JreVolatileStrongAssign(&snapshot_, create_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_withBoolean_withNSException_(JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, STARTING), true, nil));
        ComGoogleCommonUtilConcurrentAbstractService_stoppingWithComGoogleCommonUtilConcurrentService_State_(self, JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, STARTING));
        break;
        case ComGoogleCommonUtilConcurrentService_State_Enum_RUNNING:
        JreVolatileStrongAssign(&snapshot_, create_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_(JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, STOPPING)));
        ComGoogleCommonUtilConcurrentAbstractService_stoppingWithComGoogleCommonUtilConcurrentService_State_(self, JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, RUNNING));
        [self doStop];
        break;
        case ComGoogleCommonUtilConcurrentService_State_Enum_STOPPING:
        case ComGoogleCommonUtilConcurrentService_State_Enum_TERMINATED:
        case ComGoogleCommonUtilConcurrentService_State_Enum_FAILED:
        @throw create_JavaLangAssertionError_initWithId_(JreStrcat("$@", @"isStoppable is incorrectly implemented, saw: ", previous));
        default:
        @throw create_JavaLangAssertionError_initWithId_(JreStrcat("$@", @"Unexpected state: ", previous));
      }
    }
    @catch (NSException *shutdownFailure) {
      ComGoogleCommonUtilConcurrentAbstractService_notifyFailedWithNSException_(self, shutdownFailure);
    }
    @finally {
      [monitor_ leave];
      ComGoogleCommonUtilConcurrentAbstractService_executeListeners(self);
    }
  }
  return self;
}

- (void)awaitRunning {
  [((ComGoogleCommonUtilConcurrentMonitor *) nil_chk(monitor_)) enterWhenUninterruptiblyWithComGoogleCommonUtilConcurrentMonitor_Guard:hasReachedRunning_];
  @try {
    ComGoogleCommonUtilConcurrentAbstractService_checkCurrentStateWithComGoogleCommonUtilConcurrentService_State_(self, JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, RUNNING));
  }
  @finally {
    [monitor_ leave];
  }
}

- (void)awaitRunningWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  if ([((ComGoogleCommonUtilConcurrentMonitor *) nil_chk(monitor_)) enterWhenUninterruptiblyWithComGoogleCommonUtilConcurrentMonitor_Guard:hasReachedRunning_ withLong:timeout withJavaUtilConcurrentTimeUnit:unit]) {
    @try {
      ComGoogleCommonUtilConcurrentAbstractService_checkCurrentStateWithComGoogleCommonUtilConcurrentService_State_(self, JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, RUNNING));
    }
    @finally {
      [monitor_ leave];
    }
  }
  else {
    @throw create_JavaUtilConcurrentTimeoutException_initWithNSString_(JreStrcat("$@$", @"Timed out waiting for ", self, @" to reach the RUNNING state."));
  }
}

- (void)awaitTerminated {
  [((ComGoogleCommonUtilConcurrentMonitor *) nil_chk(monitor_)) enterWhenUninterruptiblyWithComGoogleCommonUtilConcurrentMonitor_Guard:isStopped_];
  @try {
    ComGoogleCommonUtilConcurrentAbstractService_checkCurrentStateWithComGoogleCommonUtilConcurrentService_State_(self, JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, TERMINATED));
  }
  @finally {
    [monitor_ leave];
  }
}

- (void)awaitTerminatedWithLong:(jlong)timeout
 withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  if ([((ComGoogleCommonUtilConcurrentMonitor *) nil_chk(monitor_)) enterWhenUninterruptiblyWithComGoogleCommonUtilConcurrentMonitor_Guard:isStopped_ withLong:timeout withJavaUtilConcurrentTimeUnit:unit]) {
    @try {
      ComGoogleCommonUtilConcurrentAbstractService_checkCurrentStateWithComGoogleCommonUtilConcurrentService_State_(self, JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, TERMINATED));
    }
    @finally {
      [monitor_ leave];
    }
  }
  else {
    @throw create_JavaUtilConcurrentTimeoutException_initWithNSString_(JreStrcat("$@$@", @"Timed out waiting for ", self, @" to reach a terminal state. Current state: ", ComGoogleCommonUtilConcurrentAbstractService_state(self)));
  }
}

- (void)checkCurrentStateWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)expected {
  ComGoogleCommonUtilConcurrentAbstractService_checkCurrentStateWithComGoogleCommonUtilConcurrentService_State_(self, expected);
}

- (void)notifyStarted {
  [((ComGoogleCommonUtilConcurrentMonitor *) nil_chk(monitor_)) enter];
  @try {
    if (((ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *) nil_chk(JreLoadVolatileId(&snapshot_)))->state_ != JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, STARTING)) {
      JavaLangIllegalStateException *failure = create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Cannot notifyStarted() when the service is ", ((ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *) nil_chk(JreLoadVolatileId(&snapshot_)))->state_));
      ComGoogleCommonUtilConcurrentAbstractService_notifyFailedWithNSException_(self, failure);
      @throw failure;
    }
    if (((ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *) nil_chk(JreLoadVolatileId(&snapshot_)))->shutdownWhenStartupFinishes_) {
      JreVolatileStrongAssign(&snapshot_, create_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_(JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, STOPPING)));
      [self doStop];
    }
    else {
      JreVolatileStrongAssign(&snapshot_, create_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_(JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, RUNNING)));
      ComGoogleCommonUtilConcurrentAbstractService_running(self);
    }
  }
  @finally {
    [monitor_ leave];
    ComGoogleCommonUtilConcurrentAbstractService_executeListeners(self);
  }
}

- (void)notifyStopped {
  [((ComGoogleCommonUtilConcurrentMonitor *) nil_chk(monitor_)) enter];
  @try {
    ComGoogleCommonUtilConcurrentService_State *previous = ((ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *) nil_chk(JreLoadVolatileId(&snapshot_)))->state_;
    if (previous != JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, STOPPING) && previous != JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, RUNNING)) {
      JavaLangIllegalStateException *failure = create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Cannot notifyStopped() when the service is ", previous));
      ComGoogleCommonUtilConcurrentAbstractService_notifyFailedWithNSException_(self, failure);
      @throw failure;
    }
    JreVolatileStrongAssign(&snapshot_, create_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_(JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, TERMINATED)));
    ComGoogleCommonUtilConcurrentAbstractService_terminatedWithComGoogleCommonUtilConcurrentService_State_(self, previous);
  }
  @finally {
    [monitor_ leave];
    ComGoogleCommonUtilConcurrentAbstractService_executeListeners(self);
  }
}

- (void)notifyFailedWithNSException:(NSException *)cause {
  ComGoogleCommonUtilConcurrentAbstractService_notifyFailedWithNSException_(self, cause);
}

- (jboolean)isRunning {
  return ComGoogleCommonUtilConcurrentAbstractService_state(self) == JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, RUNNING);
}

- (ComGoogleCommonUtilConcurrentService_State *)state {
  return ComGoogleCommonUtilConcurrentAbstractService_state(self);
}

- (NSException *)failureCause {
  return ComGoogleCommonUtilConcurrentAbstractService_failureCause(self);
}

- (void)addListenerWithComGoogleCommonUtilConcurrentService_Listener:(ComGoogleCommonUtilConcurrentService_Listener *)listener
                                      withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor {
  ComGoogleCommonBasePreconditions_checkNotNullWithId_withId_(listener, @"listener");
  ComGoogleCommonBasePreconditions_checkNotNullWithId_withId_(executor, @"executor");
  [((ComGoogleCommonUtilConcurrentMonitor *) nil_chk(monitor_)) enter];
  @try {
    if (![((ComGoogleCommonUtilConcurrentService_State *) nil_chk(ComGoogleCommonUtilConcurrentAbstractService_state(self))) isTerminal]) {
      [((id<JavaUtilList>) nil_chk(listeners_)) addWithId:create_ComGoogleCommonUtilConcurrentListenerCallQueue_initWithId_withJavaUtilConcurrentExecutor_(listener, executor)];
    }
  }
  @finally {
    [monitor_ leave];
  }
}

- (NSString *)description {
  return JreStrcat("$$@C", [[self java_getClass] getSimpleName], @" [", ComGoogleCommonUtilConcurrentAbstractService_state(self), ']');
}

- (void)executeListeners {
  ComGoogleCommonUtilConcurrentAbstractService_executeListeners(self);
}

- (void)starting {
  ComGoogleCommonUtilConcurrentAbstractService_starting(self);
}

- (void)running {
  ComGoogleCommonUtilConcurrentAbstractService_running(self);
}

- (void)stoppingWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)from {
  ComGoogleCommonUtilConcurrentAbstractService_stoppingWithComGoogleCommonUtilConcurrentService_State_(self, from);
}

- (void)terminatedWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)from {
  ComGoogleCommonUtilConcurrentAbstractService_terminatedWithComGoogleCommonUtilConcurrentService_State_(self, from);
}

- (void)failedWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)from
                                             withNSException:(NSException *)cause {
  ComGoogleCommonUtilConcurrentAbstractService_failedWithComGoogleCommonUtilConcurrentService_State_withNSException_(self, from, cause);
}

- (void)__javaClone:(ComGoogleCommonUtilConcurrentAbstractService *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&snapshot_, &original->snapshot_);
}

- (void)dealloc {
  RELEASE_(monitor_);
  RELEASE_(isStartable_);
  RELEASE_(isStoppable_);
  RELEASE_(hasReachedRunning_);
  RELEASE_(isStopped_);
  RELEASE_(listeners_);
  JreReleaseVolatile(&snapshot_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LComGoogleCommonUtilConcurrentListenerCallQueue_Callback;", 0xa, 0, 1, -1, 2, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentListenerCallQueue_Callback;", 0xa, 3, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentService;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentService;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 4, 5, 6, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 7, 5, 6, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComGoogleCommonUtilConcurrentService_State;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSException;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 13, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(terminatedCallbackWithComGoogleCommonUtilConcurrentService_State:);
  methods[1].selector = @selector(stoppingCallbackWithComGoogleCommonUtilConcurrentService_State:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(doStart);
  methods[4].selector = @selector(doStop);
  methods[5].selector = @selector(startAsync);
  methods[6].selector = @selector(stopAsync);
  methods[7].selector = @selector(awaitRunning);
  methods[8].selector = @selector(awaitRunningWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[9].selector = @selector(awaitTerminated);
  methods[10].selector = @selector(awaitTerminatedWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[11].selector = @selector(checkCurrentStateWithComGoogleCommonUtilConcurrentService_State:);
  methods[12].selector = @selector(notifyStarted);
  methods[13].selector = @selector(notifyStopped);
  methods[14].selector = @selector(notifyFailedWithNSException:);
  methods[15].selector = @selector(isRunning);
  methods[16].selector = @selector(state);
  methods[17].selector = @selector(failureCause);
  methods[18].selector = @selector(addListenerWithComGoogleCommonUtilConcurrentService_Listener:withJavaUtilConcurrentExecutor:);
  methods[19].selector = @selector(description);
  methods[20].selector = @selector(executeListeners);
  methods[21].selector = @selector(starting);
  methods[22].selector = @selector(running);
  methods[23].selector = @selector(stoppingWithComGoogleCommonUtilConcurrentService_State:);
  methods[24].selector = @selector(terminatedWithComGoogleCommonUtilConcurrentService_State:);
  methods[25].selector = @selector(failedWithComGoogleCommonUtilConcurrentService_State:withNSException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "STARTING_CALLBACK", "LComGoogleCommonUtilConcurrentListenerCallQueue_Callback;", .constantValue.asLong = 0, 0x1a, -1, 18, 19, -1 },
    { "RUNNING_CALLBACK", "LComGoogleCommonUtilConcurrentListenerCallQueue_Callback;", .constantValue.asLong = 0, 0x1a, -1, 20, 19, -1 },
    { "STOPPING_FROM_STARTING_CALLBACK", "LComGoogleCommonUtilConcurrentListenerCallQueue_Callback;", .constantValue.asLong = 0, 0x1a, -1, 21, 19, -1 },
    { "STOPPING_FROM_RUNNING_CALLBACK", "LComGoogleCommonUtilConcurrentListenerCallQueue_Callback;", .constantValue.asLong = 0, 0x1a, -1, 22, 19, -1 },
    { "TERMINATED_FROM_NEW_CALLBACK", "LComGoogleCommonUtilConcurrentListenerCallQueue_Callback;", .constantValue.asLong = 0, 0x1a, -1, 23, 19, -1 },
    { "TERMINATED_FROM_RUNNING_CALLBACK", "LComGoogleCommonUtilConcurrentListenerCallQueue_Callback;", .constantValue.asLong = 0, 0x1a, -1, 24, 19, -1 },
    { "TERMINATED_FROM_STOPPING_CALLBACK", "LComGoogleCommonUtilConcurrentListenerCallQueue_Callback;", .constantValue.asLong = 0, 0x1a, -1, 25, 19, -1 },
    { "monitor_", "LComGoogleCommonUtilConcurrentMonitor;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "isStartable_", "LComGoogleCommonUtilConcurrentMonitor_Guard;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "isStoppable_", "LComGoogleCommonUtilConcurrentMonitor_Guard;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "hasReachedRunning_", "LComGoogleCommonUtilConcurrentMonitor_Guard;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "isStopped_", "LComGoogleCommonUtilConcurrentMonitor_Guard;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "listeners_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 26, -1 },
    { "snapshot_", "LComGoogleCommonUtilConcurrentAbstractService_StateSnapshot;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "terminatedCallback", "LComGoogleCommonUtilConcurrentService_State;", "(Lcom/google/common/util/concurrent/Service$State;)Lcom/google/common/util/concurrent/ListenerCallQueue$Callback<Lcom/google/common/util/concurrent/Service$Listener;>;", "stoppingCallback", "awaitRunning", "JLJavaUtilConcurrentTimeUnit;", "LJavaUtilConcurrentTimeoutException;", "awaitTerminated", "checkCurrentState", "notifyFailed", "LNSException;", "addListener", "LComGoogleCommonUtilConcurrentService_Listener;LJavaUtilConcurrentExecutor;", "toString", "stopping", "terminated", "failed", "LComGoogleCommonUtilConcurrentService_State;LNSException;", &ComGoogleCommonUtilConcurrentAbstractService_STARTING_CALLBACK, "Lcom/google/common/util/concurrent/ListenerCallQueue$Callback<Lcom/google/common/util/concurrent/Service$Listener;>;", &ComGoogleCommonUtilConcurrentAbstractService_RUNNING_CALLBACK, &ComGoogleCommonUtilConcurrentAbstractService_STOPPING_FROM_STARTING_CALLBACK, &ComGoogleCommonUtilConcurrentAbstractService_STOPPING_FROM_RUNNING_CALLBACK, &ComGoogleCommonUtilConcurrentAbstractService_TERMINATED_FROM_NEW_CALLBACK, &ComGoogleCommonUtilConcurrentAbstractService_TERMINATED_FROM_RUNNING_CALLBACK, &ComGoogleCommonUtilConcurrentAbstractService_TERMINATED_FROM_STOPPING_CALLBACK, "Ljava/util/List<Lcom/google/common/util/concurrent/ListenerCallQueue<Lcom/google/common/util/concurrent/Service$Listener;>;>;", "LComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard;LComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard;LComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard;LComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard;LComGoogleCommonUtilConcurrentAbstractService_StateSnapshot;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractService = { "AbstractService", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x401, 26, 14, -1, 27, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractService;
}

+ (void)initialize {
  if (self == [ComGoogleCommonUtilConcurrentAbstractService class]) {
    JreStrongAssignAndConsume(&ComGoogleCommonUtilConcurrentAbstractService_STARTING_CALLBACK, new_ComGoogleCommonUtilConcurrentAbstractService_1_initWithNSString_(@"starting()"));
    JreStrongAssignAndConsume(&ComGoogleCommonUtilConcurrentAbstractService_RUNNING_CALLBACK, new_ComGoogleCommonUtilConcurrentAbstractService_2_initWithNSString_(@"running()"));
    JreStrongAssign(&ComGoogleCommonUtilConcurrentAbstractService_STOPPING_FROM_STARTING_CALLBACK, ComGoogleCommonUtilConcurrentAbstractService_stoppingCallbackWithComGoogleCommonUtilConcurrentService_State_(JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, STARTING)));
    JreStrongAssign(&ComGoogleCommonUtilConcurrentAbstractService_STOPPING_FROM_RUNNING_CALLBACK, ComGoogleCommonUtilConcurrentAbstractService_stoppingCallbackWithComGoogleCommonUtilConcurrentService_State_(JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, RUNNING)));
    JreStrongAssign(&ComGoogleCommonUtilConcurrentAbstractService_TERMINATED_FROM_NEW_CALLBACK, ComGoogleCommonUtilConcurrentAbstractService_terminatedCallbackWithComGoogleCommonUtilConcurrentService_State_(JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, NEW)));
    JreStrongAssign(&ComGoogleCommonUtilConcurrentAbstractService_TERMINATED_FROM_RUNNING_CALLBACK, ComGoogleCommonUtilConcurrentAbstractService_terminatedCallbackWithComGoogleCommonUtilConcurrentService_State_(JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, RUNNING)));
    JreStrongAssign(&ComGoogleCommonUtilConcurrentAbstractService_TERMINATED_FROM_STOPPING_CALLBACK, ComGoogleCommonUtilConcurrentAbstractService_terminatedCallbackWithComGoogleCommonUtilConcurrentService_State_(JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, STOPPING)));
    J2OBJC_SET_INITIALIZED(ComGoogleCommonUtilConcurrentAbstractService)
  }
}

@end

ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *ComGoogleCommonUtilConcurrentAbstractService_terminatedCallbackWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentService_State *from) {
  ComGoogleCommonUtilConcurrentAbstractService_initialize();
  return create_ComGoogleCommonUtilConcurrentAbstractService_3_initWithComGoogleCommonUtilConcurrentService_State_withNSString_(from, JreStrcat("$@$", @"terminated({from = ", from, @"})"));
}

ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *ComGoogleCommonUtilConcurrentAbstractService_stoppingCallbackWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentService_State *from) {
  ComGoogleCommonUtilConcurrentAbstractService_initialize();
  return create_ComGoogleCommonUtilConcurrentAbstractService_4_initWithComGoogleCommonUtilConcurrentService_State_withNSString_(from, JreStrcat("$@$", @"stopping({from = ", from, @"})"));
}

void ComGoogleCommonUtilConcurrentAbstractService_init(ComGoogleCommonUtilConcurrentAbstractService *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->monitor_, new_ComGoogleCommonUtilConcurrentMonitor_init());
  JreStrongAssignAndConsume(&self->isStartable_, new_ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(self));
  JreStrongAssignAndConsume(&self->isStoppable_, new_ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(self));
  JreStrongAssignAndConsume(&self->hasReachedRunning_, new_ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(self));
  JreStrongAssignAndConsume(&self->isStopped_, new_ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(self));
  JreStrongAssign(&self->listeners_, JavaUtilCollections_synchronizedListWithJavaUtilList_(create_JavaUtilArrayList_init()));
  JreVolatileStrongAssign(&self->snapshot_, create_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_(JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, NEW)));
}

void ComGoogleCommonUtilConcurrentAbstractService_checkCurrentStateWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentAbstractService *self, ComGoogleCommonUtilConcurrentService_State *expected) {
  ComGoogleCommonUtilConcurrentService_State *actual = ComGoogleCommonUtilConcurrentAbstractService_state(self);
  if (actual != expected) {
    if (actual == JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, FAILED)) {
      @throw create_JavaLangIllegalStateException_initWithNSString_withNSException_(JreStrcat("$@$@$", @"Expected the service ", self, @" to be ", expected, @", but the service has FAILED"), ComGoogleCommonUtilConcurrentAbstractService_failureCause(self));
    }
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$@$@", @"Expected the service ", self, @" to be ", expected, @", but was ", actual));
  }
}

void ComGoogleCommonUtilConcurrentAbstractService_notifyFailedWithNSException_(ComGoogleCommonUtilConcurrentAbstractService *self, NSException *cause) {
  ComGoogleCommonBasePreconditions_checkNotNullWithId_(cause);
  [((ComGoogleCommonUtilConcurrentMonitor *) nil_chk(self->monitor_)) enter];
  @try {
    ComGoogleCommonUtilConcurrentService_State *previous = ComGoogleCommonUtilConcurrentAbstractService_state(self);
    switch ([previous ordinal]) {
      case ComGoogleCommonUtilConcurrentService_State_Enum_NEW:
      case ComGoogleCommonUtilConcurrentService_State_Enum_TERMINATED:
      @throw create_JavaLangIllegalStateException_initWithNSString_withNSException_(JreStrcat("$@", @"Failed while in state:", previous), cause);
      case ComGoogleCommonUtilConcurrentService_State_Enum_RUNNING:
      case ComGoogleCommonUtilConcurrentService_State_Enum_STARTING:
      case ComGoogleCommonUtilConcurrentService_State_Enum_STOPPING:
      JreVolatileStrongAssign(&self->snapshot_, create_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_withBoolean_withNSException_(JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, FAILED), false, cause));
      ComGoogleCommonUtilConcurrentAbstractService_failedWithComGoogleCommonUtilConcurrentService_State_withNSException_(self, previous, cause);
      break;
      case ComGoogleCommonUtilConcurrentService_State_Enum_FAILED:
      break;
      default:
      @throw create_JavaLangAssertionError_initWithId_(JreStrcat("$@", @"Unexpected state: ", previous));
    }
  }
  @finally {
    [self->monitor_ leave];
    ComGoogleCommonUtilConcurrentAbstractService_executeListeners(self);
  }
}

ComGoogleCommonUtilConcurrentService_State *ComGoogleCommonUtilConcurrentAbstractService_state(ComGoogleCommonUtilConcurrentAbstractService *self) {
  return [((ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *) nil_chk(JreLoadVolatileId(&self->snapshot_))) externalState];
}

NSException *ComGoogleCommonUtilConcurrentAbstractService_failureCause(ComGoogleCommonUtilConcurrentAbstractService *self) {
  return [((ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *) nil_chk(JreLoadVolatileId(&self->snapshot_))) failureCause];
}

void ComGoogleCommonUtilConcurrentAbstractService_executeListeners(ComGoogleCommonUtilConcurrentAbstractService *self) {
  if (![((ComGoogleCommonUtilConcurrentMonitor *) nil_chk(self->monitor_)) isOccupiedByCurrentThread]) {
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(self->listeners_)) size]; i++) {
      [((ComGoogleCommonUtilConcurrentListenerCallQueue *) nil_chk([self->listeners_ getWithInt:i])) execute];
    }
  }
}

void ComGoogleCommonUtilConcurrentAbstractService_starting(ComGoogleCommonUtilConcurrentAbstractService *self) {
  [((ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *) nil_chk(ComGoogleCommonUtilConcurrentAbstractService_STARTING_CALLBACK)) enqueueOnWithJavaLangIterable:self->listeners_];
}

void ComGoogleCommonUtilConcurrentAbstractService_running(ComGoogleCommonUtilConcurrentAbstractService *self) {
  [((ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *) nil_chk(ComGoogleCommonUtilConcurrentAbstractService_RUNNING_CALLBACK)) enqueueOnWithJavaLangIterable:self->listeners_];
}

void ComGoogleCommonUtilConcurrentAbstractService_stoppingWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentAbstractService *self, ComGoogleCommonUtilConcurrentService_State *from) {
  if (from == JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, STARTING)) {
    [((ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *) nil_chk(ComGoogleCommonUtilConcurrentAbstractService_STOPPING_FROM_STARTING_CALLBACK)) enqueueOnWithJavaLangIterable:self->listeners_];
  }
  else if (from == JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, RUNNING)) {
    [((ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *) nil_chk(ComGoogleCommonUtilConcurrentAbstractService_STOPPING_FROM_RUNNING_CALLBACK)) enqueueOnWithJavaLangIterable:self->listeners_];
  }
  else {
    @throw create_JavaLangAssertionError_init();
  }
}

void ComGoogleCommonUtilConcurrentAbstractService_terminatedWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentAbstractService *self, ComGoogleCommonUtilConcurrentService_State *from) {
  switch ([from ordinal]) {
    case ComGoogleCommonUtilConcurrentService_State_Enum_NEW:
    [((ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *) nil_chk(ComGoogleCommonUtilConcurrentAbstractService_TERMINATED_FROM_NEW_CALLBACK)) enqueueOnWithJavaLangIterable:self->listeners_];
    break;
    case ComGoogleCommonUtilConcurrentService_State_Enum_RUNNING:
    [((ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *) nil_chk(ComGoogleCommonUtilConcurrentAbstractService_TERMINATED_FROM_RUNNING_CALLBACK)) enqueueOnWithJavaLangIterable:self->listeners_];
    break;
    case ComGoogleCommonUtilConcurrentService_State_Enum_STOPPING:
    [((ComGoogleCommonUtilConcurrentListenerCallQueue_Callback *) nil_chk(ComGoogleCommonUtilConcurrentAbstractService_TERMINATED_FROM_STOPPING_CALLBACK)) enqueueOnWithJavaLangIterable:self->listeners_];
    break;
    case ComGoogleCommonUtilConcurrentService_State_Enum_STARTING:
    case ComGoogleCommonUtilConcurrentService_State_Enum_TERMINATED:
    case ComGoogleCommonUtilConcurrentService_State_Enum_FAILED:
    default:
    @throw create_JavaLangAssertionError_init();
  }
}

void ComGoogleCommonUtilConcurrentAbstractService_failedWithComGoogleCommonUtilConcurrentService_State_withNSException_(ComGoogleCommonUtilConcurrentAbstractService *self, ComGoogleCommonUtilConcurrentService_State *from, NSException *cause) {
  [create_ComGoogleCommonUtilConcurrentAbstractService_5_initWithComGoogleCommonUtilConcurrentService_State_withNSException_withNSString_(from, cause, JreStrcat("$@$@$", @"failed({from = ", from, @", cause = ", cause, @"})")) enqueueOnWithJavaLangIterable:self->listeners_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractService)

@implementation ComGoogleCommonUtilConcurrentAbstractService_1

- (instancetype)initWithNSString:(NSString *)param0 {
  ComGoogleCommonUtilConcurrentAbstractService_1_initWithNSString_(self, param0);
  return self;
}

- (void)callWithId:(ComGoogleCommonUtilConcurrentService_Listener *)listener {
  [((ComGoogleCommonUtilConcurrentService_Listener *) nil_chk(listener)) starting];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "call", "LComGoogleCommonUtilConcurrentService_Listener;", "LComGoogleCommonUtilConcurrentAbstractService;", "Lcom/google/common/util/concurrent/ListenerCallQueue$Callback<Lcom/google/common/util/concurrent/Service$Listener;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractService_1 = { "", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, -1, 4, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractService_1;
}

@end

void ComGoogleCommonUtilConcurrentAbstractService_1_initWithNSString_(ComGoogleCommonUtilConcurrentAbstractService_1 *self, NSString *param0) {
  ComGoogleCommonUtilConcurrentListenerCallQueue_Callback_initWithNSString_(self, param0);
}

ComGoogleCommonUtilConcurrentAbstractService_1 *new_ComGoogleCommonUtilConcurrentAbstractService_1_initWithNSString_(NSString *param0) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractService_1, initWithNSString_, param0)
}

ComGoogleCommonUtilConcurrentAbstractService_1 *create_ComGoogleCommonUtilConcurrentAbstractService_1_initWithNSString_(NSString *param0) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractService_1, initWithNSString_, param0)
}

@implementation ComGoogleCommonUtilConcurrentAbstractService_2

- (instancetype)initWithNSString:(NSString *)param0 {
  ComGoogleCommonUtilConcurrentAbstractService_2_initWithNSString_(self, param0);
  return self;
}

- (void)callWithId:(ComGoogleCommonUtilConcurrentService_Listener *)listener {
  [((ComGoogleCommonUtilConcurrentService_Listener *) nil_chk(listener)) running];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "call", "LComGoogleCommonUtilConcurrentService_Listener;", "LComGoogleCommonUtilConcurrentAbstractService;", "Lcom/google/common/util/concurrent/ListenerCallQueue$Callback<Lcom/google/common/util/concurrent/Service$Listener;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractService_2 = { "", "com.google.common.util.concurrent", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 3, -1, -1, 4, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractService_2;
}

@end

void ComGoogleCommonUtilConcurrentAbstractService_2_initWithNSString_(ComGoogleCommonUtilConcurrentAbstractService_2 *self, NSString *param0) {
  ComGoogleCommonUtilConcurrentListenerCallQueue_Callback_initWithNSString_(self, param0);
}

ComGoogleCommonUtilConcurrentAbstractService_2 *new_ComGoogleCommonUtilConcurrentAbstractService_2_initWithNSString_(NSString *param0) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractService_2, initWithNSString_, param0)
}

ComGoogleCommonUtilConcurrentAbstractService_2 *create_ComGoogleCommonUtilConcurrentAbstractService_2_initWithNSString_(NSString *param0) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractService_2, initWithNSString_, param0)
}

@implementation ComGoogleCommonUtilConcurrentAbstractService_3

- (instancetype)initWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)capture$0
                                                      withNSString:(NSString *)param0 {
  ComGoogleCommonUtilConcurrentAbstractService_3_initWithComGoogleCommonUtilConcurrentService_State_withNSString_(self, capture$0, param0);
  return self;
}

- (void)callWithId:(ComGoogleCommonUtilConcurrentService_Listener *)listener {
  [((ComGoogleCommonUtilConcurrentService_Listener *) nil_chk(listener)) terminatedWithComGoogleCommonUtilConcurrentService_State:val$from_];
}

- (void)dealloc {
  RELEASE_(val$from_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentService_State:withNSString:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$from_", "LComGoogleCommonUtilConcurrentService_State;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "call", "LComGoogleCommonUtilConcurrentService_Listener;", "LComGoogleCommonUtilConcurrentAbstractService;", "terminatedCallbackWithComGoogleCommonUtilConcurrentService_State:", "Lcom/google/common/util/concurrent/ListenerCallQueue$Callback<Lcom/google/common/util/concurrent/Service$Listener;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractService_3 = { "", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractService_3;
}

@end

void ComGoogleCommonUtilConcurrentAbstractService_3_initWithComGoogleCommonUtilConcurrentService_State_withNSString_(ComGoogleCommonUtilConcurrentAbstractService_3 *self, ComGoogleCommonUtilConcurrentService_State *capture$0, NSString *param0) {
  JreStrongAssign(&self->val$from_, capture$0);
  ComGoogleCommonUtilConcurrentListenerCallQueue_Callback_initWithNSString_(self, param0);
}

ComGoogleCommonUtilConcurrentAbstractService_3 *new_ComGoogleCommonUtilConcurrentAbstractService_3_initWithComGoogleCommonUtilConcurrentService_State_withNSString_(ComGoogleCommonUtilConcurrentService_State *capture$0, NSString *param0) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractService_3, initWithComGoogleCommonUtilConcurrentService_State_withNSString_, capture$0, param0)
}

ComGoogleCommonUtilConcurrentAbstractService_3 *create_ComGoogleCommonUtilConcurrentAbstractService_3_initWithComGoogleCommonUtilConcurrentService_State_withNSString_(ComGoogleCommonUtilConcurrentService_State *capture$0, NSString *param0) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractService_3, initWithComGoogleCommonUtilConcurrentService_State_withNSString_, capture$0, param0)
}

@implementation ComGoogleCommonUtilConcurrentAbstractService_4

- (instancetype)initWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)capture$0
                                                      withNSString:(NSString *)param0 {
  ComGoogleCommonUtilConcurrentAbstractService_4_initWithComGoogleCommonUtilConcurrentService_State_withNSString_(self, capture$0, param0);
  return self;
}

- (void)callWithId:(ComGoogleCommonUtilConcurrentService_Listener *)listener {
  [((ComGoogleCommonUtilConcurrentService_Listener *) nil_chk(listener)) stoppingWithComGoogleCommonUtilConcurrentService_State:val$from_];
}

- (void)dealloc {
  RELEASE_(val$from_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentService_State:withNSString:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$from_", "LComGoogleCommonUtilConcurrentService_State;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "call", "LComGoogleCommonUtilConcurrentService_Listener;", "LComGoogleCommonUtilConcurrentAbstractService;", "stoppingCallbackWithComGoogleCommonUtilConcurrentService_State:", "Lcom/google/common/util/concurrent/ListenerCallQueue$Callback<Lcom/google/common/util/concurrent/Service$Listener;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractService_4 = { "", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractService_4;
}

@end

void ComGoogleCommonUtilConcurrentAbstractService_4_initWithComGoogleCommonUtilConcurrentService_State_withNSString_(ComGoogleCommonUtilConcurrentAbstractService_4 *self, ComGoogleCommonUtilConcurrentService_State *capture$0, NSString *param0) {
  JreStrongAssign(&self->val$from_, capture$0);
  ComGoogleCommonUtilConcurrentListenerCallQueue_Callback_initWithNSString_(self, param0);
}

ComGoogleCommonUtilConcurrentAbstractService_4 *new_ComGoogleCommonUtilConcurrentAbstractService_4_initWithComGoogleCommonUtilConcurrentService_State_withNSString_(ComGoogleCommonUtilConcurrentService_State *capture$0, NSString *param0) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractService_4, initWithComGoogleCommonUtilConcurrentService_State_withNSString_, capture$0, param0)
}

ComGoogleCommonUtilConcurrentAbstractService_4 *create_ComGoogleCommonUtilConcurrentAbstractService_4_initWithComGoogleCommonUtilConcurrentService_State_withNSString_(ComGoogleCommonUtilConcurrentService_State *capture$0, NSString *param0) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractService_4, initWithComGoogleCommonUtilConcurrentService_State_withNSString_, capture$0, param0)
}

@implementation ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractService:(ComGoogleCommonUtilConcurrentAbstractService *)outer$ {
  ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(self, outer$);
  return self;
}

- (jboolean)isSatisfied {
  return ComGoogleCommonUtilConcurrentAbstractService_state(this$0_) == JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, NEW);
}

- (void)__javaClone:(ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard *)original {
  [super __javaClone:original];
  [this$0_ release];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentAbstractService:);
  methods[1].selector = @selector(isSatisfied);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonUtilConcurrentAbstractService;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentAbstractService;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard = { "IsStartableGuard", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x12, 2, 1, 0, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard;
}

@end

void ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard *self, ComGoogleCommonUtilConcurrentAbstractService *outer$) {
  self->this$0_ = outer$;
  ComGoogleCommonUtilConcurrentMonitor_Guard_initWithComGoogleCommonUtilConcurrentMonitor_(self, outer$->monitor_);
}

ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard *new_ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService *outer$) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard, initWithComGoogleCommonUtilConcurrentAbstractService_, outer$)
}

ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard *create_ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService *outer$) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard, initWithComGoogleCommonUtilConcurrentAbstractService_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractService_IsStartableGuard)

@implementation ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractService:(ComGoogleCommonUtilConcurrentAbstractService *)outer$ {
  ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(self, outer$);
  return self;
}

- (jboolean)isSatisfied {
  return [((ComGoogleCommonUtilConcurrentService_State *) nil_chk(ComGoogleCommonUtilConcurrentAbstractService_state(this$0_))) compareToWithId:JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, RUNNING)] <= 0;
}

- (void)__javaClone:(ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard *)original {
  [super __javaClone:original];
  [this$0_ release];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentAbstractService:);
  methods[1].selector = @selector(isSatisfied);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonUtilConcurrentAbstractService;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentAbstractService;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard = { "IsStoppableGuard", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x12, 2, 1, 0, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard;
}

@end

void ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard *self, ComGoogleCommonUtilConcurrentAbstractService *outer$) {
  self->this$0_ = outer$;
  ComGoogleCommonUtilConcurrentMonitor_Guard_initWithComGoogleCommonUtilConcurrentMonitor_(self, outer$->monitor_);
}

ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard *new_ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService *outer$) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard, initWithComGoogleCommonUtilConcurrentAbstractService_, outer$)
}

ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard *create_ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService *outer$) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard, initWithComGoogleCommonUtilConcurrentAbstractService_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractService_IsStoppableGuard)

@implementation ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractService:(ComGoogleCommonUtilConcurrentAbstractService *)outer$ {
  ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(self, outer$);
  return self;
}

- (jboolean)isSatisfied {
  return [((ComGoogleCommonUtilConcurrentService_State *) nil_chk(ComGoogleCommonUtilConcurrentAbstractService_state(this$0_))) compareToWithId:JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, RUNNING)] >= 0;
}

- (void)__javaClone:(ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard *)original {
  [super __javaClone:original];
  [this$0_ release];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentAbstractService:);
  methods[1].selector = @selector(isSatisfied);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonUtilConcurrentAbstractService;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentAbstractService;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard = { "HasReachedRunningGuard", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x12, 2, 1, 0, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard;
}

@end

void ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard *self, ComGoogleCommonUtilConcurrentAbstractService *outer$) {
  self->this$0_ = outer$;
  ComGoogleCommonUtilConcurrentMonitor_Guard_initWithComGoogleCommonUtilConcurrentMonitor_(self, outer$->monitor_);
}

ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard *new_ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService *outer$) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard, initWithComGoogleCommonUtilConcurrentAbstractService_, outer$)
}

ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard *create_ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService *outer$) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard, initWithComGoogleCommonUtilConcurrentAbstractService_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractService_HasReachedRunningGuard)

@implementation ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard

- (instancetype)initWithComGoogleCommonUtilConcurrentAbstractService:(ComGoogleCommonUtilConcurrentAbstractService *)outer$ {
  ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(self, outer$);
  return self;
}

- (jboolean)isSatisfied {
  return [((ComGoogleCommonUtilConcurrentService_State *) nil_chk(ComGoogleCommonUtilConcurrentAbstractService_state(this$0_))) isTerminal];
}

- (void)__javaClone:(ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard *)original {
  [super __javaClone:original];
  [this$0_ release];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentAbstractService:);
  methods[1].selector = @selector(isSatisfied);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonUtilConcurrentAbstractService;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentAbstractService;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard = { "IsStoppedGuard", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x12, 2, 1, 0, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard;
}

@end

void ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard *self, ComGoogleCommonUtilConcurrentAbstractService *outer$) {
  self->this$0_ = outer$;
  ComGoogleCommonUtilConcurrentMonitor_Guard_initWithComGoogleCommonUtilConcurrentMonitor_(self, outer$->monitor_);
}

ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard *new_ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService *outer$) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard, initWithComGoogleCommonUtilConcurrentAbstractService_, outer$)
}

ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard *create_ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard_initWithComGoogleCommonUtilConcurrentAbstractService_(ComGoogleCommonUtilConcurrentAbstractService *outer$) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard, initWithComGoogleCommonUtilConcurrentAbstractService_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractService_IsStoppedGuard)

@implementation ComGoogleCommonUtilConcurrentAbstractService_5

- (instancetype)initWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)capture$0
                                                   withNSException:(NSException *)capture$1
                                                      withNSString:(NSString *)param0 {
  ComGoogleCommonUtilConcurrentAbstractService_5_initWithComGoogleCommonUtilConcurrentService_State_withNSException_withNSString_(self, capture$0, capture$1, param0);
  return self;
}

- (void)callWithId:(ComGoogleCommonUtilConcurrentService_Listener *)listener {
  [((ComGoogleCommonUtilConcurrentService_Listener *) nil_chk(listener)) failedWithComGoogleCommonUtilConcurrentService_State:val$from_ withNSException:val$cause_];
}

- (void)dealloc {
  RELEASE_(val$from_);
  RELEASE_(val$cause_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentService_State:withNSException:withNSString:);
  methods[1].selector = @selector(callWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$from_", "LComGoogleCommonUtilConcurrentService_State;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$cause_", "LNSException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "call", "LComGoogleCommonUtilConcurrentService_Listener;", "LComGoogleCommonUtilConcurrentAbstractService;", "failedWithComGoogleCommonUtilConcurrentService_State:withNSException:", "Lcom/google/common/util/concurrent/ListenerCallQueue$Callback<Lcom/google/common/util/concurrent/Service$Listener;>;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractService_5 = { "", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, 5, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractService_5;
}

@end

void ComGoogleCommonUtilConcurrentAbstractService_5_initWithComGoogleCommonUtilConcurrentService_State_withNSException_withNSString_(ComGoogleCommonUtilConcurrentAbstractService_5 *self, ComGoogleCommonUtilConcurrentService_State *capture$0, NSException *capture$1, NSString *param0) {
  JreStrongAssign(&self->val$from_, capture$0);
  JreStrongAssign(&self->val$cause_, capture$1);
  ComGoogleCommonUtilConcurrentListenerCallQueue_Callback_initWithNSString_(self, param0);
}

ComGoogleCommonUtilConcurrentAbstractService_5 *new_ComGoogleCommonUtilConcurrentAbstractService_5_initWithComGoogleCommonUtilConcurrentService_State_withNSException_withNSString_(ComGoogleCommonUtilConcurrentService_State *capture$0, NSException *capture$1, NSString *param0) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractService_5, initWithComGoogleCommonUtilConcurrentService_State_withNSException_withNSString_, capture$0, capture$1, param0)
}

ComGoogleCommonUtilConcurrentAbstractService_5 *create_ComGoogleCommonUtilConcurrentAbstractService_5_initWithComGoogleCommonUtilConcurrentService_State_withNSException_withNSString_(ComGoogleCommonUtilConcurrentService_State *capture$0, NSException *capture$1, NSString *param0) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractService_5, initWithComGoogleCommonUtilConcurrentService_State_withNSException_withNSString_, capture$0, capture$1, param0)
}

@implementation ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot

- (instancetype)initWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)internalState {
  ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_(self, internalState);
  return self;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentService_State:(ComGoogleCommonUtilConcurrentService_State *)internalState
                                                       withBoolean:(jboolean)shutdownWhenStartupFinishes
                                                   withNSException:(NSException *)failure {
  ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_withBoolean_withNSException_(self, internalState, shutdownWhenStartupFinishes, failure);
  return self;
}

- (ComGoogleCommonUtilConcurrentService_State *)externalState {
  if (shutdownWhenStartupFinishes_ && state_ == JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, STARTING)) {
    return JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, STOPPING);
  }
  else {
    return state_;
  }
}

- (NSException *)failureCause {
  ComGoogleCommonBasePreconditions_checkStateWithBoolean_withNSString_withId_(state_ == JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, FAILED), @"failureCause() is only valid if the service has failed, service is %s", state_);
  return failure_;
}

- (void)dealloc {
  RELEASE_(state_);
  RELEASE_(failure_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, 2 },
    { NULL, "LComGoogleCommonUtilConcurrentService_State;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSException;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentService_State:);
  methods[1].selector = @selector(initWithComGoogleCommonUtilConcurrentService_State:withBoolean:withNSException:);
  methods[2].selector = @selector(externalState);
  methods[3].selector = @selector(failureCause);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "state_", "LComGoogleCommonUtilConcurrentService_State;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "shutdownWhenStartupFinishes_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "failure_", "LNSException;", .constantValue.asLong = 0, 0x10, -1, -1, -1, 3 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentService_State;", "LComGoogleCommonUtilConcurrentService_State;ZLNSException;", (void *)&ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot__Annotations$0, (void *)&ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot__Annotations$1, "LComGoogleCommonUtilConcurrentAbstractService;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot = { "StateSnapshot", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x1a, 4, 3, 4, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot;
}

@end

void ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *self, ComGoogleCommonUtilConcurrentService_State *internalState) {
  ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_withBoolean_withNSException_(self, internalState, false, nil);
}

ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *new_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentService_State *internalState) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot, initWithComGoogleCommonUtilConcurrentService_State_, internalState)
}

ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *create_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_(ComGoogleCommonUtilConcurrentService_State *internalState) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot, initWithComGoogleCommonUtilConcurrentService_State_, internalState)
}

void ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_withBoolean_withNSException_(ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *self, ComGoogleCommonUtilConcurrentService_State *internalState, jboolean shutdownWhenStartupFinishes, NSException *failure) {
  NSObject_init(self);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_(!shutdownWhenStartupFinishes || internalState == JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, STARTING), @"shudownWhenStartupFinishes can only be set if state is STARTING. Got %s instead.", internalState);
  ComGoogleCommonBasePreconditions_checkArgumentWithBoolean_withNSString_withId_withId_(!(failure != nil ^ internalState == JreLoadEnum(ComGoogleCommonUtilConcurrentService_State, FAILED)), @"A failure cause should be set if and only if the state is failed.  Got %s and %s instead.", internalState, failure);
  JreStrongAssign(&self->state_, internalState);
  self->shutdownWhenStartupFinishes_ = shutdownWhenStartupFinishes;
  JreStrongAssign(&self->failure_, failure);
}

ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *new_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_withBoolean_withNSException_(ComGoogleCommonUtilConcurrentService_State *internalState, jboolean shutdownWhenStartupFinishes, NSException *failure) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot, initWithComGoogleCommonUtilConcurrentService_State_withBoolean_withNSException_, internalState, shutdownWhenStartupFinishes, failure)
}

ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot *create_ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot_initWithComGoogleCommonUtilConcurrentService_State_withBoolean_withNSException_(ComGoogleCommonUtilConcurrentService_State *internalState, jboolean shutdownWhenStartupFinishes, NSException *failure) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot, initWithComGoogleCommonUtilConcurrentService_State_withBoolean_withNSException_, internalState, shutdownWhenStartupFinishes, failure)
}

IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()], [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()] } count:3 type:IOSClass_arrayType(JavaLangAnnotationAnnotation_class_(), 1)];
}

IOSObjectArray *ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaxAnnotationNullable() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentAbstractService_StateSnapshot)
