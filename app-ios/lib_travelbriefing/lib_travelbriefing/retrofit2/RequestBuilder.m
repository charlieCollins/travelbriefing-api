//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/retrofit2/RequestBuilder.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NullPointerException.h"
#include "okhttp3/FormBody.h"
#include "okhttp3/Headers.h"
#include "okhttp3/HttpUrl.h"
#include "okhttp3/MediaType.h"
#include "okhttp3/MultipartBody.h"
#include "okhttp3/Request.h"
#include "okhttp3/RequestBody.h"
#include "okio/Buffer.h"
#include "okio/BufferedSink.h"
#include "retrofit2/RequestBuilder.h"

@interface Retrofit2RequestBuilder () {
 @public
  NSString *method_;
  Okhttp3HttpUrl *baseUrl_;
  NSString *relativeUrl_;
  Okhttp3HttpUrl_Builder *urlBuilder_;
  Okhttp3Request_Builder *requestBuilder_;
  Okhttp3MediaType *contentType_;
  jboolean hasBody_;
  Okhttp3MultipartBody_Builder *multipartBuilder_;
  Okhttp3FormBody_Builder *formBuilder_;
  Okhttp3RequestBody *body_;
}

+ (NSString *)canonicalizeForPathWithNSString:(NSString *)input
                                  withBoolean:(jboolean)alreadyEncoded;

+ (void)canonicalizeForPathWithOkioBuffer:(OkioBuffer *)outArg
                             withNSString:(NSString *)input
                                  withInt:(jint)pos
                                  withInt:(jint)limit
                              withBoolean:(jboolean)alreadyEncoded;

@end

J2OBJC_FIELD_SETTER(Retrofit2RequestBuilder, method_, NSString *)
J2OBJC_FIELD_SETTER(Retrofit2RequestBuilder, baseUrl_, Okhttp3HttpUrl *)
J2OBJC_FIELD_SETTER(Retrofit2RequestBuilder, relativeUrl_, NSString *)
J2OBJC_FIELD_SETTER(Retrofit2RequestBuilder, urlBuilder_, Okhttp3HttpUrl_Builder *)
J2OBJC_FIELD_SETTER(Retrofit2RequestBuilder, requestBuilder_, Okhttp3Request_Builder *)
J2OBJC_FIELD_SETTER(Retrofit2RequestBuilder, contentType_, Okhttp3MediaType *)
J2OBJC_FIELD_SETTER(Retrofit2RequestBuilder, multipartBuilder_, Okhttp3MultipartBody_Builder *)
J2OBJC_FIELD_SETTER(Retrofit2RequestBuilder, formBuilder_, Okhttp3FormBody_Builder *)
J2OBJC_FIELD_SETTER(Retrofit2RequestBuilder, body_, Okhttp3RequestBody *)

inline IOSCharArray *Retrofit2RequestBuilder_get_HEX_DIGITS();
static IOSCharArray *Retrofit2RequestBuilder_HEX_DIGITS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Retrofit2RequestBuilder, HEX_DIGITS, IOSCharArray *)

inline NSString *Retrofit2RequestBuilder_get_PATH_SEGMENT_ALWAYS_ENCODE_SET();
static NSString *Retrofit2RequestBuilder_PATH_SEGMENT_ALWAYS_ENCODE_SET = @" \"<>^`{}|\\?#";
J2OBJC_STATIC_FIELD_OBJ_FINAL(Retrofit2RequestBuilder, PATH_SEGMENT_ALWAYS_ENCODE_SET, NSString *)

__attribute__((unused)) static NSString *Retrofit2RequestBuilder_canonicalizeForPathWithNSString_withBoolean_(NSString *input, jboolean alreadyEncoded);

__attribute__((unused)) static void Retrofit2RequestBuilder_canonicalizeForPathWithOkioBuffer_withNSString_withInt_withInt_withBoolean_(OkioBuffer *outArg, NSString *input, jint pos, jint limit, jboolean alreadyEncoded);

@interface Retrofit2RequestBuilder_ContentTypeOverridingRequestBody : Okhttp3RequestBody {
 @public
  Okhttp3RequestBody *delegate_;
  Okhttp3MediaType *contentType_;
}

- (instancetype)initWithOkhttp3RequestBody:(Okhttp3RequestBody *)delegate
                      withOkhttp3MediaType:(Okhttp3MediaType *)contentType;

- (Okhttp3MediaType *)contentType;

- (jlong)contentLength;

- (void)writeToWithOkioBufferedSink:(id<OkioBufferedSink>)sink;

@end

J2OBJC_EMPTY_STATIC_INIT(Retrofit2RequestBuilder_ContentTypeOverridingRequestBody)

J2OBJC_FIELD_SETTER(Retrofit2RequestBuilder_ContentTypeOverridingRequestBody, delegate_, Okhttp3RequestBody *)
J2OBJC_FIELD_SETTER(Retrofit2RequestBuilder_ContentTypeOverridingRequestBody, contentType_, Okhttp3MediaType *)

__attribute__((unused)) static void Retrofit2RequestBuilder_ContentTypeOverridingRequestBody_initWithOkhttp3RequestBody_withOkhttp3MediaType_(Retrofit2RequestBuilder_ContentTypeOverridingRequestBody *self, Okhttp3RequestBody *delegate, Okhttp3MediaType *contentType);

__attribute__((unused)) static Retrofit2RequestBuilder_ContentTypeOverridingRequestBody *new_Retrofit2RequestBuilder_ContentTypeOverridingRequestBody_initWithOkhttp3RequestBody_withOkhttp3MediaType_(Okhttp3RequestBody *delegate, Okhttp3MediaType *contentType) NS_RETURNS_RETAINED;

__attribute__((unused)) static Retrofit2RequestBuilder_ContentTypeOverridingRequestBody *create_Retrofit2RequestBuilder_ContentTypeOverridingRequestBody_initWithOkhttp3RequestBody_withOkhttp3MediaType_(Okhttp3RequestBody *delegate, Okhttp3MediaType *contentType);

J2OBJC_TYPE_LITERAL_HEADER(Retrofit2RequestBuilder_ContentTypeOverridingRequestBody)

J2OBJC_INITIALIZED_DEFN(Retrofit2RequestBuilder)

@implementation Retrofit2RequestBuilder

- (instancetype)initWithNSString:(NSString *)method
              withOkhttp3HttpUrl:(Okhttp3HttpUrl *)baseUrl
                    withNSString:(NSString *)relativeUrl
              withOkhttp3Headers:(Okhttp3Headers *)headers
            withOkhttp3MediaType:(Okhttp3MediaType *)contentType
                     withBoolean:(jboolean)hasBody
                     withBoolean:(jboolean)isFormEncoded
                     withBoolean:(jboolean)isMultipart {
  Retrofit2RequestBuilder_initWithNSString_withOkhttp3HttpUrl_withNSString_withOkhttp3Headers_withOkhttp3MediaType_withBoolean_withBoolean_withBoolean_(self, method, baseUrl, relativeUrl, headers, contentType, hasBody, isFormEncoded, isMultipart);
  return self;
}

- (void)setRelativeUrlWithId:(id)relativeUrl {
  if (relativeUrl == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"@Url parameter is null.");
  JreStrongAssign(&self->relativeUrl_, [relativeUrl description]);
}

- (void)addHeaderWithNSString:(NSString *)name
                 withNSString:(NSString *)value {
  if ([@"Content-Type" java_equalsIgnoreCase:name]) {
    Okhttp3MediaType *type = Okhttp3MediaType_parseWithNSString_(value);
    if (type == nil) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Malformed content type: ", value));
    }
    JreStrongAssign(&contentType_, type);
  }
  else {
    [((Okhttp3Request_Builder *) nil_chk(requestBuilder_)) addHeaderWithNSString:name withNSString:value];
  }
}

- (void)addPathParamWithNSString:(NSString *)name
                    withNSString:(NSString *)value
                     withBoolean:(jboolean)encoded {
  if (relativeUrl_ == nil) {
    @throw create_JavaLangAssertionError_init();
  }
  JreStrongAssign(&relativeUrl_, [relativeUrl_ java_replace:JreStrcat("C$C", '{', name, '}') withSequence:Retrofit2RequestBuilder_canonicalizeForPathWithNSString_withBoolean_(value, encoded)]);
}

+ (NSString *)canonicalizeForPathWithNSString:(NSString *)input
                                  withBoolean:(jboolean)alreadyEncoded {
  return Retrofit2RequestBuilder_canonicalizeForPathWithNSString_withBoolean_(input, alreadyEncoded);
}

+ (void)canonicalizeForPathWithOkioBuffer:(OkioBuffer *)outArg
                             withNSString:(NSString *)input
                                  withInt:(jint)pos
                                  withInt:(jint)limit
                              withBoolean:(jboolean)alreadyEncoded {
  Retrofit2RequestBuilder_canonicalizeForPathWithOkioBuffer_withNSString_withInt_withInt_withBoolean_(outArg, input, pos, limit, alreadyEncoded);
}

- (void)addQueryParamWithNSString:(NSString *)name
                     withNSString:(NSString *)value
                      withBoolean:(jboolean)encoded {
  if (relativeUrl_ != nil) {
    JreStrongAssign(&urlBuilder_, [((Okhttp3HttpUrl *) nil_chk(baseUrl_)) newBuilderWithNSString:relativeUrl_]);
    if (urlBuilder_ == nil) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$$", @"Malformed URL. Base: ", baseUrl_, @", Relative: ", relativeUrl_));
    }
    JreStrongAssign(&relativeUrl_, nil);
  }
  if (encoded) {
    [((Okhttp3HttpUrl_Builder *) nil_chk(urlBuilder_)) addEncodedQueryParameterWithNSString:name withNSString:value];
  }
  else {
    [((Okhttp3HttpUrl_Builder *) nil_chk(urlBuilder_)) addQueryParameterWithNSString:name withNSString:value];
  }
}

- (void)addFormFieldWithNSString:(NSString *)name
                    withNSString:(NSString *)value
                     withBoolean:(jboolean)encoded {
  if (encoded) {
    [((Okhttp3FormBody_Builder *) nil_chk(formBuilder_)) addEncodedWithNSString:name withNSString:value];
  }
  else {
    [((Okhttp3FormBody_Builder *) nil_chk(formBuilder_)) addWithNSString:name withNSString:value];
  }
}

- (void)addPartWithOkhttp3Headers:(Okhttp3Headers *)headers
           withOkhttp3RequestBody:(Okhttp3RequestBody *)body {
  [((Okhttp3MultipartBody_Builder *) nil_chk(multipartBuilder_)) addPartWithOkhttp3Headers:headers withOkhttp3RequestBody:body];
}

- (void)addPartWithOkhttp3MultipartBody_Part:(Okhttp3MultipartBody_Part *)part {
  [((Okhttp3MultipartBody_Builder *) nil_chk(multipartBuilder_)) addPartWithOkhttp3MultipartBody_Part:part];
}

- (void)setBodyWithOkhttp3RequestBody:(Okhttp3RequestBody *)body {
  JreStrongAssign(&self->body_, body);
}

- (Okhttp3Request *)build {
  Okhttp3HttpUrl *url;
  Okhttp3HttpUrl_Builder *urlBuilder = self->urlBuilder_;
  if (urlBuilder != nil) {
    url = [urlBuilder build];
  }
  else {
    url = [((Okhttp3HttpUrl *) nil_chk(baseUrl_)) resolveWithNSString:relativeUrl_];
    if (url == nil) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$$", @"Malformed URL. Base: ", baseUrl_, @", Relative: ", relativeUrl_));
    }
  }
  Okhttp3RequestBody *body = self->body_;
  if (body == nil) {
    if (formBuilder_ != nil) {
      body = [formBuilder_ build];
    }
    else if (multipartBuilder_ != nil) {
      body = [multipartBuilder_ build];
    }
    else if (hasBody_) {
      body = Okhttp3RequestBody_createWithOkhttp3MediaType_withByteArray_(nil, [IOSByteArray arrayWithLength:0]);
    }
  }
  Okhttp3MediaType *contentType = self->contentType_;
  if (contentType != nil) {
    if (body != nil) {
      body = create_Retrofit2RequestBuilder_ContentTypeOverridingRequestBody_initWithOkhttp3RequestBody_withOkhttp3MediaType_(body, contentType);
    }
    else {
      [((Okhttp3Request_Builder *) nil_chk(requestBuilder_)) addHeaderWithNSString:@"Content-Type" withNSString:[contentType description]];
    }
  }
  return [((Okhttp3Request_Builder *) nil_chk([((Okhttp3Request_Builder *) nil_chk([((Okhttp3Request_Builder *) nil_chk(requestBuilder_)) urlWithOkhttp3HttpUrl:url])) methodWithNSString:method_ withOkhttp3RequestBody:body])) build];
}

- (void)dealloc {
  RELEASE_(method_);
  RELEASE_(baseUrl_);
  RELEASE_(relativeUrl_);
  RELEASE_(urlBuilder_);
  RELEASE_(requestBuilder_);
  RELEASE_(contentType_);
  RELEASE_(multipartBuilder_);
  RELEASE_(formBuilder_);
  RELEASE_(body_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 7, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 12, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 15, 16, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Request;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withOkhttp3HttpUrl:withNSString:withOkhttp3Headers:withOkhttp3MediaType:withBoolean:withBoolean:withBoolean:);
  methods[1].selector = @selector(setRelativeUrlWithId:);
  methods[2].selector = @selector(addHeaderWithNSString:withNSString:);
  methods[3].selector = @selector(addPathParamWithNSString:withNSString:withBoolean:);
  methods[4].selector = @selector(canonicalizeForPathWithNSString:withBoolean:);
  methods[5].selector = @selector(canonicalizeForPathWithOkioBuffer:withNSString:withInt:withInt:withBoolean:);
  methods[6].selector = @selector(addQueryParamWithNSString:withNSString:withBoolean:);
  methods[7].selector = @selector(addFormFieldWithNSString:withNSString:withBoolean:);
  methods[8].selector = @selector(addPartWithOkhttp3Headers:withOkhttp3RequestBody:);
  methods[9].selector = @selector(addPartWithOkhttp3MultipartBody_Part:);
  methods[10].selector = @selector(setBodyWithOkhttp3RequestBody:);
  methods[11].selector = @selector(build);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "HEX_DIGITS", "[C", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "PATH_SEGMENT_ALWAYS_ENCODE_SET", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "method_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "baseUrl_", "LOkhttp3HttpUrl;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "relativeUrl_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "urlBuilder_", "LOkhttp3HttpUrl_Builder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "requestBuilder_", "LOkhttp3Request_Builder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "contentType_", "LOkhttp3MediaType;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hasBody_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "multipartBuilder_", "LOkhttp3MultipartBody_Builder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "formBuilder_", "LOkhttp3FormBody_Builder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "body_", "LOkhttp3RequestBody;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LOkhttp3HttpUrl;LNSString;LOkhttp3Headers;LOkhttp3MediaType;ZZZ", "setRelativeUrl", "LNSObject;", "addHeader", "LNSString;LNSString;", "addPathParam", "LNSString;LNSString;Z", "canonicalizeForPath", "LNSString;Z", "LOkioBuffer;LNSString;IIZ", "addQueryParam", "addFormField", "addPart", "LOkhttp3Headers;LOkhttp3RequestBody;", "LOkhttp3MultipartBody_Part;", "setBody", "LOkhttp3RequestBody;", &Retrofit2RequestBuilder_HEX_DIGITS, &Retrofit2RequestBuilder_PATH_SEGMENT_ALWAYS_ENCODE_SET, "LRetrofit2RequestBuilder_ContentTypeOverridingRequestBody;" };
  static const J2ObjcClassInfo _Retrofit2RequestBuilder = { "RequestBuilder", "retrofit2", ptrTable, methods, fields, 7, 0x10, 12, 12, -1, 19, -1, -1, -1 };
  return &_Retrofit2RequestBuilder;
}

+ (void)initialize {
  if (self == [Retrofit2RequestBuilder class]) {
    JreStrongAssignAndConsume(&Retrofit2RequestBuilder_HEX_DIGITS, [IOSCharArray newArrayWithChars:(jchar[]){ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' } count:16]);
    J2OBJC_SET_INITIALIZED(Retrofit2RequestBuilder)
  }
}

@end

void Retrofit2RequestBuilder_initWithNSString_withOkhttp3HttpUrl_withNSString_withOkhttp3Headers_withOkhttp3MediaType_withBoolean_withBoolean_withBoolean_(Retrofit2RequestBuilder *self, NSString *method, Okhttp3HttpUrl *baseUrl, NSString *relativeUrl, Okhttp3Headers *headers, Okhttp3MediaType *contentType, jboolean hasBody, jboolean isFormEncoded, jboolean isMultipart) {
  NSObject_init(self);
  JreStrongAssign(&self->method_, method);
  JreStrongAssign(&self->baseUrl_, baseUrl);
  JreStrongAssign(&self->relativeUrl_, relativeUrl);
  JreStrongAssignAndConsume(&self->requestBuilder_, new_Okhttp3Request_Builder_init());
  JreStrongAssign(&self->contentType_, contentType);
  self->hasBody_ = hasBody;
  if (headers != nil) {
    [self->requestBuilder_ headersWithOkhttp3Headers:headers];
  }
  if (isFormEncoded) {
    JreStrongAssignAndConsume(&self->formBuilder_, new_Okhttp3FormBody_Builder_init());
  }
  else if (isMultipart) {
    JreStrongAssignAndConsume(&self->multipartBuilder_, new_Okhttp3MultipartBody_Builder_init());
    [self->multipartBuilder_ setTypeWithOkhttp3MediaType:JreLoadStatic(Okhttp3MultipartBody, FORM)];
  }
}

Retrofit2RequestBuilder *new_Retrofit2RequestBuilder_initWithNSString_withOkhttp3HttpUrl_withNSString_withOkhttp3Headers_withOkhttp3MediaType_withBoolean_withBoolean_withBoolean_(NSString *method, Okhttp3HttpUrl *baseUrl, NSString *relativeUrl, Okhttp3Headers *headers, Okhttp3MediaType *contentType, jboolean hasBody, jboolean isFormEncoded, jboolean isMultipart) {
  J2OBJC_NEW_IMPL(Retrofit2RequestBuilder, initWithNSString_withOkhttp3HttpUrl_withNSString_withOkhttp3Headers_withOkhttp3MediaType_withBoolean_withBoolean_withBoolean_, method, baseUrl, relativeUrl, headers, contentType, hasBody, isFormEncoded, isMultipart)
}

Retrofit2RequestBuilder *create_Retrofit2RequestBuilder_initWithNSString_withOkhttp3HttpUrl_withNSString_withOkhttp3Headers_withOkhttp3MediaType_withBoolean_withBoolean_withBoolean_(NSString *method, Okhttp3HttpUrl *baseUrl, NSString *relativeUrl, Okhttp3Headers *headers, Okhttp3MediaType *contentType, jboolean hasBody, jboolean isFormEncoded, jboolean isMultipart) {
  J2OBJC_CREATE_IMPL(Retrofit2RequestBuilder, initWithNSString_withOkhttp3HttpUrl_withNSString_withOkhttp3Headers_withOkhttp3MediaType_withBoolean_withBoolean_withBoolean_, method, baseUrl, relativeUrl, headers, contentType, hasBody, isFormEncoded, isMultipart)
}

NSString *Retrofit2RequestBuilder_canonicalizeForPathWithNSString_withBoolean_(NSString *input, jboolean alreadyEncoded) {
  Retrofit2RequestBuilder_initialize();
  jint codePoint;
  for (jint i = 0, limit = ((jint) [((NSString *) nil_chk(input)) length]); i < limit; i += JavaLangCharacter_charCountWithInt_(codePoint)) {
    codePoint = [input java_codePointAt:i];
    if (codePoint < (jint) 0x20 || codePoint >= (jint) 0x7f || [((NSString *) nil_chk(Retrofit2RequestBuilder_PATH_SEGMENT_ALWAYS_ENCODE_SET)) java_indexOf:codePoint] != -1 || (!alreadyEncoded && (codePoint == '/' || codePoint == '%'))) {
      OkioBuffer *out = create_OkioBuffer_init();
      [out writeUtf8WithNSString:input withInt:0 withInt:i];
      Retrofit2RequestBuilder_canonicalizeForPathWithOkioBuffer_withNSString_withInt_withInt_withBoolean_(out, input, i, limit, alreadyEncoded);
      return [out readUtf8];
    }
  }
  return input;
}

void Retrofit2RequestBuilder_canonicalizeForPathWithOkioBuffer_withNSString_withInt_withInt_withBoolean_(OkioBuffer *outArg, NSString *input, jint pos, jint limit, jboolean alreadyEncoded) {
  Retrofit2RequestBuilder_initialize();
  OkioBuffer *utf8Buffer = nil;
  jint codePoint;
  for (jint i = pos; i < limit; i += JavaLangCharacter_charCountWithInt_(codePoint)) {
    codePoint = [((NSString *) nil_chk(input)) java_codePointAt:i];
    if (alreadyEncoded && (codePoint == 0x0009 || codePoint == 0x000a || codePoint == 0x000c || codePoint == 0x000d)) {
    }
    else if (codePoint < (jint) 0x20 || codePoint >= (jint) 0x7f || [((NSString *) nil_chk(Retrofit2RequestBuilder_PATH_SEGMENT_ALWAYS_ENCODE_SET)) java_indexOf:codePoint] != -1 || (!alreadyEncoded && (codePoint == '/' || codePoint == '%'))) {
      if (utf8Buffer == nil) {
        utf8Buffer = create_OkioBuffer_init();
      }
      [utf8Buffer writeUtf8CodePointWithInt:codePoint];
      while (![utf8Buffer exhausted]) {
        jint b = [utf8Buffer readByte] & (jint) 0xff;
        [((OkioBuffer *) nil_chk(outArg)) writeByteWithInt:'%'];
        [outArg writeByteWithInt:IOSCharArray_Get(nil_chk(Retrofit2RequestBuilder_HEX_DIGITS), (JreRShift32(b, 4)) & (jint) 0xf)];
        [outArg writeByteWithInt:IOSCharArray_Get(Retrofit2RequestBuilder_HEX_DIGITS, b & (jint) 0xf)];
      }
    }
    else {
      [((OkioBuffer *) nil_chk(outArg)) writeUtf8CodePointWithInt:codePoint];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Retrofit2RequestBuilder)

@implementation Retrofit2RequestBuilder_ContentTypeOverridingRequestBody

- (instancetype)initWithOkhttp3RequestBody:(Okhttp3RequestBody *)delegate
                      withOkhttp3MediaType:(Okhttp3MediaType *)contentType {
  Retrofit2RequestBuilder_ContentTypeOverridingRequestBody_initWithOkhttp3RequestBody_withOkhttp3MediaType_(self, delegate, contentType);
  return self;
}

- (Okhttp3MediaType *)contentType {
  return contentType_;
}

- (jlong)contentLength {
  return [((Okhttp3RequestBody *) nil_chk(delegate_)) contentLength];
}

- (void)writeToWithOkioBufferedSink:(id<OkioBufferedSink>)sink {
  [((Okhttp3RequestBody *) nil_chk(delegate_)) writeToWithOkioBufferedSink:sink];
}

- (void)dealloc {
  RELEASE_(delegate_);
  RELEASE_(contentType_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOkhttp3MediaType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3RequestBody:withOkhttp3MediaType:);
  methods[1].selector = @selector(contentType);
  methods[2].selector = @selector(contentLength);
  methods[3].selector = @selector(writeToWithOkioBufferedSink:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "delegate_", "LOkhttp3RequestBody;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "contentType_", "LOkhttp3MediaType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3RequestBody;LOkhttp3MediaType;", "LJavaIoIOException;", "writeTo", "LOkioBufferedSink;", "LRetrofit2RequestBuilder;" };
  static const J2ObjcClassInfo _Retrofit2RequestBuilder_ContentTypeOverridingRequestBody = { "ContentTypeOverridingRequestBody", "retrofit2", ptrTable, methods, fields, 7, 0xa, 4, 2, 4, -1, -1, -1, -1 };
  return &_Retrofit2RequestBuilder_ContentTypeOverridingRequestBody;
}

@end

void Retrofit2RequestBuilder_ContentTypeOverridingRequestBody_initWithOkhttp3RequestBody_withOkhttp3MediaType_(Retrofit2RequestBuilder_ContentTypeOverridingRequestBody *self, Okhttp3RequestBody *delegate, Okhttp3MediaType *contentType) {
  Okhttp3RequestBody_init(self);
  JreStrongAssign(&self->delegate_, delegate);
  JreStrongAssign(&self->contentType_, contentType);
}

Retrofit2RequestBuilder_ContentTypeOverridingRequestBody *new_Retrofit2RequestBuilder_ContentTypeOverridingRequestBody_initWithOkhttp3RequestBody_withOkhttp3MediaType_(Okhttp3RequestBody *delegate, Okhttp3MediaType *contentType) {
  J2OBJC_NEW_IMPL(Retrofit2RequestBuilder_ContentTypeOverridingRequestBody, initWithOkhttp3RequestBody_withOkhttp3MediaType_, delegate, contentType)
}

Retrofit2RequestBuilder_ContentTypeOverridingRequestBody *create_Retrofit2RequestBuilder_ContentTypeOverridingRequestBody_initWithOkhttp3RequestBody_withOkhttp3MediaType_(Okhttp3RequestBody *delegate, Okhttp3MediaType *contentType) {
  J2OBJC_CREATE_IMPL(Retrofit2RequestBuilder_ContentTypeOverridingRequestBody, initWithOkhttp3RequestBody_withOkhttp3MediaType_, delegate, contentType)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Retrofit2RequestBuilder_ContentTypeOverridingRequestBody)
