//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/runner/Runner.java
//

#include "J2ObjC_source.h"
#include "org/junit/runner/Description.h"
#include "org/junit/runner/Runner.h"
#include "org/junit/runner/notification/RunNotifier.h"

@implementation OrgJunitRunnerRunner

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJunitRunnerRunner_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgJunitRunnerDescription *)getDescription {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)runWithOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)notifier {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jint)testCount {
  return [((OrgJunitRunnerDescription *) nil_chk([self getDescription])) testCount];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJunitRunnerDescription;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getDescription);
  methods[2].selector = @selector(runWithOrgJunitRunnerNotificationRunNotifier:);
  methods[3].selector = @selector(testCount);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "run", "LOrgJunitRunnerNotificationRunNotifier;" };
  static const J2ObjcClassInfo _OrgJunitRunnerRunner = { "Runner", "org.junit.runner", ptrTable, methods, NULL, 7, 0x401, 4, 0, -1, -1, -1, -1, -1 };
  return &_OrgJunitRunnerRunner;
}

@end

void OrgJunitRunnerRunner_init(OrgJunitRunnerRunner *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitRunnerRunner)
