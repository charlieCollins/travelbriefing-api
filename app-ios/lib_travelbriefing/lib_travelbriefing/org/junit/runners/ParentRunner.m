//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/runners/ParentRunner.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Runnable.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"
#include "org/junit/AfterClass.h"
#include "org/junit/BeforeClass.h"
#include "org/junit/ClassRule.h"
#include "org/junit/internal/AssumptionViolatedException.h"
#include "org/junit/internal/runners/model/EachTestNotifier.h"
#include "org/junit/internal/runners/rules/RuleMemberValidator.h"
#include "org/junit/internal/runners/statements/RunAfters.h"
#include "org/junit/internal/runners/statements/RunBefores.h"
#include "org/junit/rules/RunRules.h"
#include "org/junit/rules/TestRule.h"
#include "org/junit/runner/Description.h"
#include "org/junit/runner/Runner.h"
#include "org/junit/runner/manipulation/Filter.h"
#include "org/junit/runner/manipulation/NoTestsRemainException.h"
#include "org/junit/runner/manipulation/Sorter.h"
#include "org/junit/runner/notification/RunNotifier.h"
#include "org/junit/runner/notification/StoppedByUserException.h"
#include "org/junit/runners/ParentRunner.h"
#include "org/junit/runners/model/FrameworkMethod.h"
#include "org/junit/runners/model/InitializationError.h"
#include "org/junit/runners/model/RunnerScheduler.h"
#include "org/junit/runners/model/Statement.h"
#include "org/junit/runners/model/TestClass.h"
#include "org/junit/validator/AnnotationsValidator.h"
#include "org/junit/validator/PublicClassValidator.h"
#include "org/junit/validator/TestClassValidator.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgJunitRunnersParentRunner () {
 @public
  id childrenLock_;
  OrgJunitRunnersModelTestClass *testClass_;
  volatile_id filteredChildren_;
  volatile_id scheduler_;
}

- (void)applyValidatorsWithJavaUtilList:(id<JavaUtilList>)errors;

- (void)validateClassRulesWithJavaUtilList:(id<JavaUtilList>)errors;

- (jboolean)areAllChildrenIgnored;

- (OrgJunitRunnersModelStatement *)withClassRulesWithOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)statement;

- (void)runChildrenWithOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)notifier;

- (void)validate;

- (id<JavaUtilCollection>)getFilteredChildren;

- (jboolean)shouldRunWithOrgJunitRunnerManipulationFilter:(OrgJunitRunnerManipulationFilter *)filter
                                                   withId:(id)each;

- (id<JavaUtilComparator>)comparatorWithOrgJunitRunnerManipulationSorter:(OrgJunitRunnerManipulationSorter *)sorter;

@end

J2OBJC_FIELD_SETTER(OrgJunitRunnersParentRunner, childrenLock_, id)
J2OBJC_FIELD_SETTER(OrgJunitRunnersParentRunner, testClass_, OrgJunitRunnersModelTestClass *)
J2OBJC_VOLATILE_FIELD_SETTER(OrgJunitRunnersParentRunner, filteredChildren_, id<JavaUtilCollection>)
J2OBJC_VOLATILE_FIELD_SETTER(OrgJunitRunnersParentRunner, scheduler_, id<OrgJunitRunnersModelRunnerScheduler>)

inline id<JavaUtilList> OrgJunitRunnersParentRunner_get_VALIDATORS();
static id<JavaUtilList> OrgJunitRunnersParentRunner_VALIDATORS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJunitRunnersParentRunner, VALIDATORS, id<JavaUtilList>)

__attribute__((unused)) static void OrgJunitRunnersParentRunner_applyValidatorsWithJavaUtilList_(OrgJunitRunnersParentRunner *self, id<JavaUtilList> errors);

__attribute__((unused)) static void OrgJunitRunnersParentRunner_validateClassRulesWithJavaUtilList_(OrgJunitRunnersParentRunner *self, id<JavaUtilList> errors);

__attribute__((unused)) static jboolean OrgJunitRunnersParentRunner_areAllChildrenIgnored(OrgJunitRunnersParentRunner *self);

__attribute__((unused)) static OrgJunitRunnersModelStatement *OrgJunitRunnersParentRunner_withClassRulesWithOrgJunitRunnersModelStatement_(OrgJunitRunnersParentRunner *self, OrgJunitRunnersModelStatement *statement);

__attribute__((unused)) static void OrgJunitRunnersParentRunner_runChildrenWithOrgJunitRunnerNotificationRunNotifier_(OrgJunitRunnersParentRunner *self, OrgJunitRunnerNotificationRunNotifier *notifier);

__attribute__((unused)) static OrgJunitRunnersModelTestClass *OrgJunitRunnersParentRunner_getTestClass(OrgJunitRunnersParentRunner *self);

__attribute__((unused)) static void OrgJunitRunnersParentRunner_validate(OrgJunitRunnersParentRunner *self);

__attribute__((unused)) static id<JavaUtilCollection> OrgJunitRunnersParentRunner_getFilteredChildren(OrgJunitRunnersParentRunner *self);

__attribute__((unused)) static jboolean OrgJunitRunnersParentRunner_shouldRunWithOrgJunitRunnerManipulationFilter_withId_(OrgJunitRunnersParentRunner *self, OrgJunitRunnerManipulationFilter *filter, id each);

__attribute__((unused)) static id<JavaUtilComparator> OrgJunitRunnersParentRunner_comparatorWithOrgJunitRunnerManipulationSorter_(OrgJunitRunnersParentRunner *self, OrgJunitRunnerManipulationSorter *sorter);

@interface OrgJunitRunnersParentRunner_1 : NSObject < OrgJunitRunnersModelRunnerScheduler >

- (instancetype)init;

- (void)scheduleWithJavaLangRunnable:(id<JavaLangRunnable>)childStatement;

- (void)finished;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitRunnersParentRunner_1)

__attribute__((unused)) static void OrgJunitRunnersParentRunner_1_init(OrgJunitRunnersParentRunner_1 *self);

__attribute__((unused)) static OrgJunitRunnersParentRunner_1 *new_OrgJunitRunnersParentRunner_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJunitRunnersParentRunner_1 *create_OrgJunitRunnersParentRunner_1_init();

@interface OrgJunitRunnersParentRunner_2 : OrgJunitRunnersModelStatement {
 @public
  OrgJunitRunnersParentRunner *this$0_;
  OrgJunitRunnerNotificationRunNotifier *val$notifier_;
}

- (instancetype)initWithOrgJunitRunnersParentRunner:(OrgJunitRunnersParentRunner *)outer$
          withOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)capture$0;

- (void)evaluate;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitRunnersParentRunner_2)

__attribute__((unused)) static void OrgJunitRunnersParentRunner_2_initWithOrgJunitRunnersParentRunner_withOrgJunitRunnerNotificationRunNotifier_(OrgJunitRunnersParentRunner_2 *self, OrgJunitRunnersParentRunner *outer$, OrgJunitRunnerNotificationRunNotifier *capture$0);

__attribute__((unused)) static OrgJunitRunnersParentRunner_2 *new_OrgJunitRunnersParentRunner_2_initWithOrgJunitRunnersParentRunner_withOrgJunitRunnerNotificationRunNotifier_(OrgJunitRunnersParentRunner *outer$, OrgJunitRunnerNotificationRunNotifier *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJunitRunnersParentRunner_2 *create_OrgJunitRunnersParentRunner_2_initWithOrgJunitRunnersParentRunner_withOrgJunitRunnerNotificationRunNotifier_(OrgJunitRunnersParentRunner *outer$, OrgJunitRunnerNotificationRunNotifier *capture$0);

@interface OrgJunitRunnersParentRunner_3 : NSObject < JavaLangRunnable > {
 @public
  OrgJunitRunnersParentRunner *this$0_;
  id val$each_;
  OrgJunitRunnerNotificationRunNotifier *val$notifier_;
}

- (instancetype)initWithOrgJunitRunnersParentRunner:(OrgJunitRunnersParentRunner *)outer$
                                             withId:(id)capture$0
          withOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)capture$1;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitRunnersParentRunner_3)

__attribute__((unused)) static void OrgJunitRunnersParentRunner_3_initWithOrgJunitRunnersParentRunner_withId_withOrgJunitRunnerNotificationRunNotifier_(OrgJunitRunnersParentRunner_3 *self, OrgJunitRunnersParentRunner *outer$, id capture$0, OrgJunitRunnerNotificationRunNotifier *capture$1);

__attribute__((unused)) static OrgJunitRunnersParentRunner_3 *new_OrgJunitRunnersParentRunner_3_initWithOrgJunitRunnersParentRunner_withId_withOrgJunitRunnerNotificationRunNotifier_(OrgJunitRunnersParentRunner *outer$, id capture$0, OrgJunitRunnerNotificationRunNotifier *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJunitRunnersParentRunner_3 *create_OrgJunitRunnersParentRunner_3_initWithOrgJunitRunnersParentRunner_withId_withOrgJunitRunnerNotificationRunNotifier_(OrgJunitRunnersParentRunner *outer$, id capture$0, OrgJunitRunnerNotificationRunNotifier *capture$1);

@interface OrgJunitRunnersParentRunner_4 : NSObject < JavaUtilComparator > {
 @public
  OrgJunitRunnersParentRunner *this$0_;
  OrgJunitRunnerManipulationSorter *val$sorter_;
}

- (instancetype)initWithOrgJunitRunnersParentRunner:(OrgJunitRunnersParentRunner *)outer$
               withOrgJunitRunnerManipulationSorter:(OrgJunitRunnerManipulationSorter *)capture$0;

- (jint)compareWithId:(id)o1
               withId:(id)o2;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitRunnersParentRunner_4)

__attribute__((unused)) static void OrgJunitRunnersParentRunner_4_initWithOrgJunitRunnersParentRunner_withOrgJunitRunnerManipulationSorter_(OrgJunitRunnersParentRunner_4 *self, OrgJunitRunnersParentRunner *outer$, OrgJunitRunnerManipulationSorter *capture$0);

__attribute__((unused)) static OrgJunitRunnersParentRunner_4 *new_OrgJunitRunnersParentRunner_4_initWithOrgJunitRunnersParentRunner_withOrgJunitRunnerManipulationSorter_(OrgJunitRunnersParentRunner *outer$, OrgJunitRunnerManipulationSorter *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJunitRunnersParentRunner_4 *create_OrgJunitRunnersParentRunner_4_initWithOrgJunitRunnersParentRunner_withOrgJunitRunnerManipulationSorter_(OrgJunitRunnersParentRunner *outer$, OrgJunitRunnerManipulationSorter *capture$0);

J2OBJC_INITIALIZED_DEFN(OrgJunitRunnersParentRunner)

@implementation OrgJunitRunnersParentRunner

- (instancetype)initWithIOSClass:(IOSClass *)testClass {
  OrgJunitRunnersParentRunner_initWithIOSClass_(self, testClass);
  return self;
}

- (OrgJunitRunnersModelTestClass *)createTestClassWithIOSClass:(IOSClass *)testClass {
  return create_OrgJunitRunnersModelTestClass_initWithIOSClass_(testClass);
}

- (id<JavaUtilList>)getChildren {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgJunitRunnerDescription *)describeChildWithId:(id)child {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)runChildWithId:(id)child
withOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)notifier {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)collectInitializationErrorsWithJavaUtilList:(id<JavaUtilList>)errors {
  [self validatePublicVoidNoArgMethodsWithIOSClass:OrgJunitBeforeClass_class_() withBoolean:true withJavaUtilList:errors];
  [self validatePublicVoidNoArgMethodsWithIOSClass:OrgJunitAfterClass_class_() withBoolean:true withJavaUtilList:errors];
  OrgJunitRunnersParentRunner_validateClassRulesWithJavaUtilList_(self, errors);
  OrgJunitRunnersParentRunner_applyValidatorsWithJavaUtilList_(self, errors);
}

- (void)applyValidatorsWithJavaUtilList:(id<JavaUtilList>)errors {
  OrgJunitRunnersParentRunner_applyValidatorsWithJavaUtilList_(self, errors);
}

- (void)validatePublicVoidNoArgMethodsWithIOSClass:(IOSClass *)annotation
                                       withBoolean:(jboolean)isStatic
                                  withJavaUtilList:(id<JavaUtilList>)errors {
  id<JavaUtilList> methods = [((OrgJunitRunnersModelTestClass *) nil_chk(OrgJunitRunnersParentRunner_getTestClass(self))) getAnnotatedMethodsWithIOSClass:annotation];
  for (OrgJunitRunnersModelFrameworkMethod * __strong eachTestMethod in nil_chk(methods)) {
    [((OrgJunitRunnersModelFrameworkMethod *) nil_chk(eachTestMethod)) validatePublicVoidNoArgWithBoolean:isStatic withJavaUtilList:errors];
  }
}

- (void)validateClassRulesWithJavaUtilList:(id<JavaUtilList>)errors {
  OrgJunitRunnersParentRunner_validateClassRulesWithJavaUtilList_(self, errors);
}

- (OrgJunitRunnersModelStatement *)classBlockWithOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)notifier {
  OrgJunitRunnersModelStatement *statement = [self childrenInvokerWithOrgJunitRunnerNotificationRunNotifier:notifier];
  if (!OrgJunitRunnersParentRunner_areAllChildrenIgnored(self)) {
    statement = [self withBeforeClassesWithOrgJunitRunnersModelStatement:statement];
    statement = [self withAfterClassesWithOrgJunitRunnersModelStatement:statement];
    statement = OrgJunitRunnersParentRunner_withClassRulesWithOrgJunitRunnersModelStatement_(self, statement);
  }
  return statement;
}

- (jboolean)areAllChildrenIgnored {
  return OrgJunitRunnersParentRunner_areAllChildrenIgnored(self);
}

- (OrgJunitRunnersModelStatement *)withBeforeClassesWithOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)statement {
  id<JavaUtilList> befores = [((OrgJunitRunnersModelTestClass *) nil_chk(testClass_)) getAnnotatedMethodsWithIOSClass:OrgJunitBeforeClass_class_()];
  return [((id<JavaUtilList>) nil_chk(befores)) isEmpty] ? statement : create_OrgJunitInternalRunnersStatementsRunBefores_initWithOrgJunitRunnersModelStatement_withJavaUtilList_withId_(statement, befores, nil);
}

- (OrgJunitRunnersModelStatement *)withAfterClassesWithOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)statement {
  id<JavaUtilList> afters = [((OrgJunitRunnersModelTestClass *) nil_chk(testClass_)) getAnnotatedMethodsWithIOSClass:OrgJunitAfterClass_class_()];
  return [((id<JavaUtilList>) nil_chk(afters)) isEmpty] ? statement : create_OrgJunitInternalRunnersStatementsRunAfters_initWithOrgJunitRunnersModelStatement_withJavaUtilList_withId_(statement, afters, nil);
}

- (OrgJunitRunnersModelStatement *)withClassRulesWithOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)statement {
  return OrgJunitRunnersParentRunner_withClassRulesWithOrgJunitRunnersModelStatement_(self, statement);
}

- (id<JavaUtilList>)classRules {
  id<JavaUtilList> result = [((OrgJunitRunnersModelTestClass *) nil_chk(testClass_)) getAnnotatedMethodValuesWithId:nil withIOSClass:OrgJunitClassRule_class_() withIOSClass:OrgJunitRulesTestRule_class_()];
  [((id<JavaUtilList>) nil_chk(result)) addAllWithJavaUtilCollection:[testClass_ getAnnotatedFieldValuesWithId:nil withIOSClass:OrgJunitClassRule_class_() withIOSClass:OrgJunitRulesTestRule_class_()]];
  return result;
}

- (OrgJunitRunnersModelStatement *)childrenInvokerWithOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)notifier {
  return create_OrgJunitRunnersParentRunner_2_initWithOrgJunitRunnersParentRunner_withOrgJunitRunnerNotificationRunNotifier_(self, notifier);
}

- (jboolean)isIgnoredWithId:(id)child {
  return false;
}

- (void)runChildrenWithOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)notifier {
  OrgJunitRunnersParentRunner_runChildrenWithOrgJunitRunnerNotificationRunNotifier_(self, notifier);
}

- (NSString *)getName {
  return [((OrgJunitRunnersModelTestClass *) nil_chk(testClass_)) getName];
}

- (OrgJunitRunnersModelTestClass *)getTestClass {
  return OrgJunitRunnersParentRunner_getTestClass(self);
}

- (void)runLeafWithOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)statement
                   withOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_
       withOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)notifier {
  OrgJunitInternalRunnersModelEachTestNotifier *eachNotifier = create_OrgJunitInternalRunnersModelEachTestNotifier_initWithOrgJunitRunnerNotificationRunNotifier_withOrgJunitRunnerDescription_(notifier, description_);
  [eachNotifier fireTestStarted];
  @try {
    [((OrgJunitRunnersModelStatement *) nil_chk(statement)) evaluate];
  }
  @catch (OrgJunitInternalAssumptionViolatedException *e) {
    [eachNotifier addFailedAssumptionWithOrgJunitInternalAssumptionViolatedException:e];
  }
  @catch (NSException *e) {
    [eachNotifier addFailureWithNSException:e];
  }
  @finally {
    [eachNotifier fireTestFinished];
  }
}

- (IOSObjectArray *)getRunnerAnnotations {
  return [((OrgJunitRunnersModelTestClass *) nil_chk(testClass_)) getAnnotations];
}

- (OrgJunitRunnerDescription *)getDescription {
  OrgJunitRunnerDescription *description_ = OrgJunitRunnerDescription_createSuiteDescriptionWithNSString_withJavaLangAnnotationAnnotationArray_([self getName], [self getRunnerAnnotations]);
  for (id __strong child in nil_chk(OrgJunitRunnersParentRunner_getFilteredChildren(self))) {
    [((OrgJunitRunnerDescription *) nil_chk(description_)) addChildWithOrgJunitRunnerDescription:[self describeChildWithId:child]];
  }
  return description_;
}

- (void)runWithOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)notifier {
  OrgJunitInternalRunnersModelEachTestNotifier *testNotifier = create_OrgJunitInternalRunnersModelEachTestNotifier_initWithOrgJunitRunnerNotificationRunNotifier_withOrgJunitRunnerDescription_(notifier, [self getDescription]);
  @try {
    OrgJunitRunnersModelStatement *statement = [self classBlockWithOrgJunitRunnerNotificationRunNotifier:notifier];
    [((OrgJunitRunnersModelStatement *) nil_chk(statement)) evaluate];
  }
  @catch (OrgJunitInternalAssumptionViolatedException *e) {
    [testNotifier addFailedAssumptionWithOrgJunitInternalAssumptionViolatedException:e];
  }
  @catch (OrgJunitRunnerNotificationStoppedByUserException *e) {
    @throw e;
  }
  @catch (NSException *e) {
    [testNotifier addFailureWithNSException:e];
  }
}

- (void)filterWithOrgJunitRunnerManipulationFilter:(OrgJunitRunnerManipulationFilter *)filter {
  @synchronized(childrenLock_) {
    id<JavaUtilList> children = create_JavaUtilArrayList_initWithJavaUtilCollection_(OrgJunitRunnersParentRunner_getFilteredChildren(self));
    for (id<JavaUtilIterator> iter = [children iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
      id each = [iter next];
      if (OrgJunitRunnersParentRunner_shouldRunWithOrgJunitRunnerManipulationFilter_withId_(self, filter, each)) {
        @try {
          [((OrgJunitRunnerManipulationFilter *) nil_chk(filter)) applyWithId:each];
        }
        @catch (OrgJunitRunnerManipulationNoTestsRemainException *e) {
          [iter remove];
        }
      }
      else {
        [iter remove];
      }
    }
    JreVolatileStrongAssign(&filteredChildren_, JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_(children));
    if ([((id<JavaUtilCollection>) nil_chk(JreLoadVolatileId(&filteredChildren_))) isEmpty]) {
      @throw create_OrgJunitRunnerManipulationNoTestsRemainException_init();
    }
  }
}

- (void)sortWithOrgJunitRunnerManipulationSorter:(OrgJunitRunnerManipulationSorter *)sorter {
  @synchronized(childrenLock_) {
    for (id __strong each in nil_chk(OrgJunitRunnersParentRunner_getFilteredChildren(self))) {
      [((OrgJunitRunnerManipulationSorter *) nil_chk(sorter)) applyWithId:each];
    }
    id<JavaUtilList> sortedChildren = create_JavaUtilArrayList_initWithJavaUtilCollection_(OrgJunitRunnersParentRunner_getFilteredChildren(self));
    JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(sortedChildren, OrgJunitRunnersParentRunner_comparatorWithOrgJunitRunnerManipulationSorter_(self, sorter));
    JreVolatileStrongAssign(&filteredChildren_, JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_(sortedChildren));
  }
}

- (void)validate {
  OrgJunitRunnersParentRunner_validate(self);
}

- (id<JavaUtilCollection>)getFilteredChildren {
  return OrgJunitRunnersParentRunner_getFilteredChildren(self);
}

- (jboolean)shouldRunWithOrgJunitRunnerManipulationFilter:(OrgJunitRunnerManipulationFilter *)filter
                                                   withId:(id)each {
  return OrgJunitRunnersParentRunner_shouldRunWithOrgJunitRunnerManipulationFilter_withId_(self, filter, each);
}

- (id<JavaUtilComparator>)comparatorWithOrgJunitRunnerManipulationSorter:(OrgJunitRunnerManipulationSorter *)sorter {
  return OrgJunitRunnersParentRunner_comparatorWithOrgJunitRunnerManipulationSorter_(self, sorter);
}

- (void)setSchedulerWithOrgJunitRunnersModelRunnerScheduler:(id<OrgJunitRunnersModelRunnerScheduler>)scheduler {
  JreVolatileStrongAssign(&self->scheduler_, scheduler);
}

- (void)__javaClone:(OrgJunitRunnersParentRunner *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&filteredChildren_, &original->filteredChildren_);
  JreCloneVolatileStrong(&scheduler_, &original->scheduler_);
}

- (void)dealloc {
  RELEASE_(childrenLock_);
  RELEASE_(testClass_);
  JreReleaseVolatile(&filteredChildren_);
  JreReleaseVolatile(&scheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, 1, 2, -1, -1 },
    { NULL, "LOrgJunitRunnersModelTestClass;", 0x4, 3, 0, -1, 4, -1, -1 },
    { NULL, "LJavaUtilList;", 0x404, -1, -1, -1, 5, -1, -1 },
    { NULL, "LOrgJunitRunnerDescription;", 0x404, 6, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x404, 9, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x4, 12, 13, -1, 14, -1, -1 },
    { NULL, "V", 0x2, 15, 13, -1, 14, -1, -1 },
    { NULL, "V", 0x4, 16, 17, -1, 18, -1, -1 },
    { NULL, "V", 0x2, 19, 13, -1, 14, -1, -1 },
    { NULL, "LOrgJunitRunnersModelStatement;", 0x4, 20, 21, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJunitRunnersModelStatement;", 0x4, 22, 23, -1, -1, -1, -1 },
    { NULL, "LOrgJunitRunnersModelStatement;", 0x4, 24, 23, -1, -1, -1, -1 },
    { NULL, "LOrgJunitRunnersModelStatement;", 0x2, 25, 23, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x4, -1, -1, -1, 26, -1, -1 },
    { NULL, "LOrgJunitRunnersModelStatement;", 0x4, 27, 21, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 28, 7, -1, 29, -1, -1 },
    { NULL, "V", 0x2, 30, 21, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJunitRunnersModelTestClass;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 31, 32, -1, -1, -1, -1 },
    { NULL, "[LJavaLangAnnotationAnnotation;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJunitRunnerDescription;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 35, 36, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x2, -1, -1, -1, 39, -1, -1 },
    { NULL, "Z", 0x2, 40, 41, -1, 42, -1, -1 },
    { NULL, "LJavaUtilComparator;", 0x2, 43, 38, -1, 44, -1, -1 },
    { NULL, "V", 0x1, 45, 46, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIOSClass:);
  methods[1].selector = @selector(createTestClassWithIOSClass:);
  methods[2].selector = @selector(getChildren);
  methods[3].selector = @selector(describeChildWithId:);
  methods[4].selector = @selector(runChildWithId:withOrgJunitRunnerNotificationRunNotifier:);
  methods[5].selector = @selector(collectInitializationErrorsWithJavaUtilList:);
  methods[6].selector = @selector(applyValidatorsWithJavaUtilList:);
  methods[7].selector = @selector(validatePublicVoidNoArgMethodsWithIOSClass:withBoolean:withJavaUtilList:);
  methods[8].selector = @selector(validateClassRulesWithJavaUtilList:);
  methods[9].selector = @selector(classBlockWithOrgJunitRunnerNotificationRunNotifier:);
  methods[10].selector = @selector(areAllChildrenIgnored);
  methods[11].selector = @selector(withBeforeClassesWithOrgJunitRunnersModelStatement:);
  methods[12].selector = @selector(withAfterClassesWithOrgJunitRunnersModelStatement:);
  methods[13].selector = @selector(withClassRulesWithOrgJunitRunnersModelStatement:);
  methods[14].selector = @selector(classRules);
  methods[15].selector = @selector(childrenInvokerWithOrgJunitRunnerNotificationRunNotifier:);
  methods[16].selector = @selector(isIgnoredWithId:);
  methods[17].selector = @selector(runChildrenWithOrgJunitRunnerNotificationRunNotifier:);
  methods[18].selector = @selector(getName);
  methods[19].selector = @selector(getTestClass);
  methods[20].selector = @selector(runLeafWithOrgJunitRunnersModelStatement:withOrgJunitRunnerDescription:withOrgJunitRunnerNotificationRunNotifier:);
  methods[21].selector = @selector(getRunnerAnnotations);
  methods[22].selector = @selector(getDescription);
  methods[23].selector = @selector(runWithOrgJunitRunnerNotificationRunNotifier:);
  methods[24].selector = @selector(filterWithOrgJunitRunnerManipulationFilter:);
  methods[25].selector = @selector(sortWithOrgJunitRunnerManipulationSorter:);
  methods[26].selector = @selector(validate);
  methods[27].selector = @selector(getFilteredChildren);
  methods[28].selector = @selector(shouldRunWithOrgJunitRunnerManipulationFilter:withId:);
  methods[29].selector = @selector(comparatorWithOrgJunitRunnerManipulationSorter:);
  methods[30].selector = @selector(setSchedulerWithOrgJunitRunnersModelRunnerScheduler:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "VALIDATORS", "LJavaUtilList;", .constantValue.asLong = 0, 0x1a, -1, 47, 48, -1 },
    { "childrenLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "testClass_", "LOrgJunitRunnersModelTestClass;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "filteredChildren_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x42, -1, -1, 49, -1 },
    { "scheduler_", "LOrgJunitRunnersModelRunnerScheduler;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;", "LOrgJunitRunnersModelInitializationError;", "(Ljava/lang/Class<*>;)V", "createTestClass", "(Ljava/lang/Class<*>;)Lorg/junit/runners/model/TestClass;", "()Ljava/util/List<TT;>;", "describeChild", "LNSObject;", "(TT;)Lorg/junit/runner/Description;", "runChild", "LNSObject;LOrgJunitRunnerNotificationRunNotifier;", "(TT;Lorg/junit/runner/notification/RunNotifier;)V", "collectInitializationErrors", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Throwable;>;)V", "applyValidators", "validatePublicVoidNoArgMethods", "LIOSClass;ZLJavaUtilList;", "(Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;ZLjava/util/List<Ljava/lang/Throwable;>;)V", "validateClassRules", "classBlock", "LOrgJunitRunnerNotificationRunNotifier;", "withBeforeClasses", "LOrgJunitRunnersModelStatement;", "withAfterClasses", "withClassRules", "()Ljava/util/List<Lorg/junit/rules/TestRule;>;", "childrenInvoker", "isIgnored", "(TT;)Z", "runChildren", "runLeaf", "LOrgJunitRunnersModelStatement;LOrgJunitRunnerDescription;LOrgJunitRunnerNotificationRunNotifier;", "run", "filter", "LOrgJunitRunnerManipulationFilter;", "LOrgJunitRunnerManipulationNoTestsRemainException;", "sort", "LOrgJunitRunnerManipulationSorter;", "()Ljava/util/Collection<TT;>;", "shouldRun", "LOrgJunitRunnerManipulationFilter;LNSObject;", "(Lorg/junit/runner/manipulation/Filter;TT;)Z", "comparator", "(Lorg/junit/runner/manipulation/Sorter;)Ljava/util/Comparator<-TT;>;", "setScheduler", "LOrgJunitRunnersModelRunnerScheduler;", &OrgJunitRunnersParentRunner_VALIDATORS, "Ljava/util/List<Lorg/junit/validator/TestClassValidator;>;", "Ljava/util/Collection<TT;>;", "<T:Ljava/lang/Object;>Lorg/junit/runner/Runner;Lorg/junit/runner/manipulation/Filterable;Lorg/junit/runner/manipulation/Sortable;" };
  static const J2ObjcClassInfo _OrgJunitRunnersParentRunner = { "ParentRunner", "org.junit.runners", ptrTable, methods, fields, 7, 0x401, 31, 5, -1, -1, -1, 50, -1 };
  return &_OrgJunitRunnersParentRunner;
}

+ (void)initialize {
  if (self == [OrgJunitRunnersParentRunner class]) {
    JreStrongAssign(&OrgJunitRunnersParentRunner_VALIDATORS, JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitValidatorAnnotationsValidator_init(), create_OrgJunitValidatorPublicClassValidator_init() } count:2 type:OrgJunitValidatorTestClassValidator_class_()]));
    J2OBJC_SET_INITIALIZED(OrgJunitRunnersParentRunner)
  }
}

@end

void OrgJunitRunnersParentRunner_initWithIOSClass_(OrgJunitRunnersParentRunner *self, IOSClass *testClass) {
  OrgJunitRunnerRunner_init(self);
  JreStrongAssignAndConsume(&self->childrenLock_, new_NSObject_init());
  JreVolatileStrongAssign(&self->filteredChildren_, nil);
  JreVolatileStrongAssign(&self->scheduler_, create_OrgJunitRunnersParentRunner_1_init());
  JreStrongAssign(&self->testClass_, [self createTestClassWithIOSClass:testClass]);
  OrgJunitRunnersParentRunner_validate(self);
}

void OrgJunitRunnersParentRunner_applyValidatorsWithJavaUtilList_(OrgJunitRunnersParentRunner *self, id<JavaUtilList> errors) {
  if ([((OrgJunitRunnersModelTestClass *) nil_chk(OrgJunitRunnersParentRunner_getTestClass(self))) getJavaClass] != nil) {
    for (id<OrgJunitValidatorTestClassValidator> __strong each in nil_chk(OrgJunitRunnersParentRunner_VALIDATORS)) {
      [((id<JavaUtilList>) nil_chk(errors)) addAllWithJavaUtilCollection:[((id<OrgJunitValidatorTestClassValidator>) nil_chk(each)) validateTestClassWithOrgJunitRunnersModelTestClass:OrgJunitRunnersParentRunner_getTestClass(self)]];
    }
  }
}

void OrgJunitRunnersParentRunner_validateClassRulesWithJavaUtilList_(OrgJunitRunnersParentRunner *self, id<JavaUtilList> errors) {
  [((OrgJunitInternalRunnersRulesRuleMemberValidator *) nil_chk(JreLoadStatic(OrgJunitInternalRunnersRulesRuleMemberValidator, CLASS_RULE_VALIDATOR))) validateWithOrgJunitRunnersModelTestClass:OrgJunitRunnersParentRunner_getTestClass(self) withJavaUtilList:errors];
  [((OrgJunitInternalRunnersRulesRuleMemberValidator *) nil_chk(JreLoadStatic(OrgJunitInternalRunnersRulesRuleMemberValidator, CLASS_RULE_METHOD_VALIDATOR))) validateWithOrgJunitRunnersModelTestClass:OrgJunitRunnersParentRunner_getTestClass(self) withJavaUtilList:errors];
}

jboolean OrgJunitRunnersParentRunner_areAllChildrenIgnored(OrgJunitRunnersParentRunner *self) {
  for (id __strong child in nil_chk(OrgJunitRunnersParentRunner_getFilteredChildren(self))) {
    if (![self isIgnoredWithId:child]) {
      return false;
    }
  }
  return true;
}

OrgJunitRunnersModelStatement *OrgJunitRunnersParentRunner_withClassRulesWithOrgJunitRunnersModelStatement_(OrgJunitRunnersParentRunner *self, OrgJunitRunnersModelStatement *statement) {
  id<JavaUtilList> classRules = [self classRules];
  return [((id<JavaUtilList>) nil_chk(classRules)) isEmpty] ? statement : create_OrgJunitRulesRunRules_initWithOrgJunitRunnersModelStatement_withJavaLangIterable_withOrgJunitRunnerDescription_(statement, classRules, [self getDescription]);
}

void OrgJunitRunnersParentRunner_runChildrenWithOrgJunitRunnerNotificationRunNotifier_(OrgJunitRunnersParentRunner *self, OrgJunitRunnerNotificationRunNotifier *notifier) {
  id<OrgJunitRunnersModelRunnerScheduler> currentScheduler = JreLoadVolatileId(&self->scheduler_);
  @try {
    for (id __strong each in nil_chk(OrgJunitRunnersParentRunner_getFilteredChildren(self))) {
      [((id<OrgJunitRunnersModelRunnerScheduler>) nil_chk(currentScheduler)) scheduleWithJavaLangRunnable:create_OrgJunitRunnersParentRunner_3_initWithOrgJunitRunnersParentRunner_withId_withOrgJunitRunnerNotificationRunNotifier_(self, each, notifier)];
    }
  }
  @finally {
    [((id<OrgJunitRunnersModelRunnerScheduler>) nil_chk(currentScheduler)) finished];
  }
}

OrgJunitRunnersModelTestClass *OrgJunitRunnersParentRunner_getTestClass(OrgJunitRunnersParentRunner *self) {
  return self->testClass_;
}

void OrgJunitRunnersParentRunner_validate(OrgJunitRunnersParentRunner *self) {
  id<JavaUtilList> errors = create_JavaUtilArrayList_init();
  [self collectInitializationErrorsWithJavaUtilList:errors];
  if (![errors isEmpty]) {
    @throw create_OrgJunitRunnersModelInitializationError_initWithJavaUtilList_(errors);
  }
}

id<JavaUtilCollection> OrgJunitRunnersParentRunner_getFilteredChildren(OrgJunitRunnersParentRunner *self) {
  if (JreLoadVolatileId(&self->filteredChildren_) == nil) {
    @synchronized(self->childrenLock_) {
      if (JreLoadVolatileId(&self->filteredChildren_) == nil) {
        JreVolatileStrongAssign(&self->filteredChildren_, JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_([self getChildren]));
      }
    }
  }
  return JreLoadVolatileId(&self->filteredChildren_);
}

jboolean OrgJunitRunnersParentRunner_shouldRunWithOrgJunitRunnerManipulationFilter_withId_(OrgJunitRunnersParentRunner *self, OrgJunitRunnerManipulationFilter *filter, id each) {
  return [((OrgJunitRunnerManipulationFilter *) nil_chk(filter)) shouldRunWithOrgJunitRunnerDescription:[self describeChildWithId:each]];
}

id<JavaUtilComparator> OrgJunitRunnersParentRunner_comparatorWithOrgJunitRunnerManipulationSorter_(OrgJunitRunnersParentRunner *self, OrgJunitRunnerManipulationSorter *sorter) {
  return create_OrgJunitRunnersParentRunner_4_initWithOrgJunitRunnersParentRunner_withOrgJunitRunnerManipulationSorter_(self, sorter);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitRunnersParentRunner)

@implementation OrgJunitRunnersParentRunner_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJunitRunnersParentRunner_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)scheduleWithJavaLangRunnable:(id<JavaLangRunnable>)childStatement {
  [((id<JavaLangRunnable>) nil_chk(childStatement)) run];
}

- (void)finished {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(scheduleWithJavaLangRunnable:);
  methods[2].selector = @selector(finished);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "schedule", "LJavaLangRunnable;", "LOrgJunitRunnersParentRunner;" };
  static const J2ObjcClassInfo _OrgJunitRunnersParentRunner_1 = { "", "org.junit.runners", ptrTable, methods, NULL, 7, 0x8018, 3, 0, 2, -1, -1, -1, -1 };
  return &_OrgJunitRunnersParentRunner_1;
}

@end

void OrgJunitRunnersParentRunner_1_init(OrgJunitRunnersParentRunner_1 *self) {
  NSObject_init(self);
}

OrgJunitRunnersParentRunner_1 *new_OrgJunitRunnersParentRunner_1_init() {
  J2OBJC_NEW_IMPL(OrgJunitRunnersParentRunner_1, init)
}

OrgJunitRunnersParentRunner_1 *create_OrgJunitRunnersParentRunner_1_init() {
  J2OBJC_CREATE_IMPL(OrgJunitRunnersParentRunner_1, init)
}

@implementation OrgJunitRunnersParentRunner_2

- (instancetype)initWithOrgJunitRunnersParentRunner:(OrgJunitRunnersParentRunner *)outer$
          withOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)capture$0 {
  OrgJunitRunnersParentRunner_2_initWithOrgJunitRunnersParentRunner_withOrgJunitRunnerNotificationRunNotifier_(self, outer$, capture$0);
  return self;
}

- (void)evaluate {
  OrgJunitRunnersParentRunner_runChildrenWithOrgJunitRunnerNotificationRunNotifier_(this$0_, val$notifier_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$notifier_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJunitRunnersParentRunner:withOrgJunitRunnerNotificationRunNotifier:);
  methods[1].selector = @selector(evaluate);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgJunitRunnersParentRunner;", .constantValue.asLong = 0, 0x1012, -1, -1, 0, -1 },
    { "val$notifier_", "LOrgJunitRunnerNotificationRunNotifier;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Lorg/junit/runners/ParentRunner<TT;>;", "LOrgJunitRunnersParentRunner;", "childrenInvokerWithOrgJunitRunnerNotificationRunNotifier:" };
  static const J2ObjcClassInfo _OrgJunitRunnersParentRunner_2 = { "", "org.junit.runners", ptrTable, methods, fields, 7, 0x8018, 2, 2, 1, -1, 2, -1, -1 };
  return &_OrgJunitRunnersParentRunner_2;
}

@end

void OrgJunitRunnersParentRunner_2_initWithOrgJunitRunnersParentRunner_withOrgJunitRunnerNotificationRunNotifier_(OrgJunitRunnersParentRunner_2 *self, OrgJunitRunnersParentRunner *outer$, OrgJunitRunnerNotificationRunNotifier *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$notifier_, capture$0);
  OrgJunitRunnersModelStatement_init(self);
}

OrgJunitRunnersParentRunner_2 *new_OrgJunitRunnersParentRunner_2_initWithOrgJunitRunnersParentRunner_withOrgJunitRunnerNotificationRunNotifier_(OrgJunitRunnersParentRunner *outer$, OrgJunitRunnerNotificationRunNotifier *capture$0) {
  J2OBJC_NEW_IMPL(OrgJunitRunnersParentRunner_2, initWithOrgJunitRunnersParentRunner_withOrgJunitRunnerNotificationRunNotifier_, outer$, capture$0)
}

OrgJunitRunnersParentRunner_2 *create_OrgJunitRunnersParentRunner_2_initWithOrgJunitRunnersParentRunner_withOrgJunitRunnerNotificationRunNotifier_(OrgJunitRunnersParentRunner *outer$, OrgJunitRunnerNotificationRunNotifier *capture$0) {
  J2OBJC_CREATE_IMPL(OrgJunitRunnersParentRunner_2, initWithOrgJunitRunnersParentRunner_withOrgJunitRunnerNotificationRunNotifier_, outer$, capture$0)
}

@implementation OrgJunitRunnersParentRunner_3

- (instancetype)initWithOrgJunitRunnersParentRunner:(OrgJunitRunnersParentRunner *)outer$
                                             withId:(id)capture$0
          withOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)capture$1 {
  OrgJunitRunnersParentRunner_3_initWithOrgJunitRunnersParentRunner_withId_withOrgJunitRunnerNotificationRunNotifier_(self, outer$, capture$0, capture$1);
  return self;
}

- (void)run {
  [this$0_ runChildWithId:val$each_ withOrgJunitRunnerNotificationRunNotifier:val$notifier_];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$each_);
  RELEASE_(val$notifier_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJunitRunnersParentRunner:withId:withOrgJunitRunnerNotificationRunNotifier:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgJunitRunnersParentRunner;", .constantValue.asLong = 0, 0x1012, -1, -1, 0, -1 },
    { "val$each_", "LNSObject;", .constantValue.asLong = 0, 0x1012, -1, -1, 1, -1 },
    { "val$notifier_", "LOrgJunitRunnerNotificationRunNotifier;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Lorg/junit/runners/ParentRunner<TT;>;", "TT;", "LOrgJunitRunnersParentRunner;", "runChildrenWithOrgJunitRunnerNotificationRunNotifier:" };
  static const J2ObjcClassInfo _OrgJunitRunnersParentRunner_3 = { "", "org.junit.runners", ptrTable, methods, fields, 7, 0x8018, 2, 3, 2, -1, 3, -1, -1 };
  return &_OrgJunitRunnersParentRunner_3;
}

@end

void OrgJunitRunnersParentRunner_3_initWithOrgJunitRunnersParentRunner_withId_withOrgJunitRunnerNotificationRunNotifier_(OrgJunitRunnersParentRunner_3 *self, OrgJunitRunnersParentRunner *outer$, id capture$0, OrgJunitRunnerNotificationRunNotifier *capture$1) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$each_, capture$0);
  JreStrongAssign(&self->val$notifier_, capture$1);
  NSObject_init(self);
}

OrgJunitRunnersParentRunner_3 *new_OrgJunitRunnersParentRunner_3_initWithOrgJunitRunnersParentRunner_withId_withOrgJunitRunnerNotificationRunNotifier_(OrgJunitRunnersParentRunner *outer$, id capture$0, OrgJunitRunnerNotificationRunNotifier *capture$1) {
  J2OBJC_NEW_IMPL(OrgJunitRunnersParentRunner_3, initWithOrgJunitRunnersParentRunner_withId_withOrgJunitRunnerNotificationRunNotifier_, outer$, capture$0, capture$1)
}

OrgJunitRunnersParentRunner_3 *create_OrgJunitRunnersParentRunner_3_initWithOrgJunitRunnersParentRunner_withId_withOrgJunitRunnerNotificationRunNotifier_(OrgJunitRunnersParentRunner *outer$, id capture$0, OrgJunitRunnerNotificationRunNotifier *capture$1) {
  J2OBJC_CREATE_IMPL(OrgJunitRunnersParentRunner_3, initWithOrgJunitRunnersParentRunner_withId_withOrgJunitRunnerNotificationRunNotifier_, outer$, capture$0, capture$1)
}

@implementation OrgJunitRunnersParentRunner_4

- (instancetype)initWithOrgJunitRunnersParentRunner:(OrgJunitRunnersParentRunner *)outer$
               withOrgJunitRunnerManipulationSorter:(OrgJunitRunnerManipulationSorter *)capture$0 {
  OrgJunitRunnersParentRunner_4_initWithOrgJunitRunnersParentRunner_withOrgJunitRunnerManipulationSorter_(self, outer$, capture$0);
  return self;
}

- (jint)compareWithId:(id)o1
               withId:(id)o2 {
  return [((OrgJunitRunnerManipulationSorter *) nil_chk(val$sorter_)) compareWithId:[this$0_ describeChildWithId:o1] withId:[this$0_ describeChildWithId:o2]];
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$sorter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJunitRunnersParentRunner:withOrgJunitRunnerManipulationSorter:);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgJunitRunnersParentRunner;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
    { "val$sorter_", "LOrgJunitRunnerManipulationSorter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "compare", "LNSObject;LNSObject;", "(TT;TT;)I", "Lorg/junit/runners/ParentRunner<TT;>;", "LOrgJunitRunnersParentRunner;", "comparatorWithOrgJunitRunnerManipulationSorter:", "Ljava/lang/Object;Ljava/util/Comparator<TT;>;" };
  static const J2ObjcClassInfo _OrgJunitRunnersParentRunner_4 = { "", "org.junit.runners", ptrTable, methods, fields, 7, 0x8018, 2, 2, 4, -1, 5, 6, -1 };
  return &_OrgJunitRunnersParentRunner_4;
}

@end

void OrgJunitRunnersParentRunner_4_initWithOrgJunitRunnersParentRunner_withOrgJunitRunnerManipulationSorter_(OrgJunitRunnersParentRunner_4 *self, OrgJunitRunnersParentRunner *outer$, OrgJunitRunnerManipulationSorter *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$sorter_, capture$0);
  NSObject_init(self);
}

OrgJunitRunnersParentRunner_4 *new_OrgJunitRunnersParentRunner_4_initWithOrgJunitRunnersParentRunner_withOrgJunitRunnerManipulationSorter_(OrgJunitRunnersParentRunner *outer$, OrgJunitRunnerManipulationSorter *capture$0) {
  J2OBJC_NEW_IMPL(OrgJunitRunnersParentRunner_4, initWithOrgJunitRunnersParentRunner_withOrgJunitRunnerManipulationSorter_, outer$, capture$0)
}

OrgJunitRunnersParentRunner_4 *create_OrgJunitRunnersParentRunner_4_initWithOrgJunitRunnersParentRunner_withOrgJunitRunnerManipulationSorter_(OrgJunitRunnersParentRunner *outer$, OrgJunitRunnerManipulationSorter *capture$0) {
  J2OBJC_CREATE_IMPL(OrgJunitRunnersParentRunner_4, initWithOrgJunitRunnersParentRunner_withOrgJunitRunnerManipulationSorter_, outer$, capture$0)
}
