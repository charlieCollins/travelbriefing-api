//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/runners/parameterized/BlockJUnit4ClassRunnerWithParameters.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/Field.h"
#include "java/util/List.h"
#include "org/junit/runner/notification/RunNotifier.h"
#include "org/junit/runners/BlockJUnit4ClassRunner.h"
#include "org/junit/runners/Parameterized.h"
#include "org/junit/runners/model/FrameworkField.h"
#include "org/junit/runners/model/FrameworkMethod.h"
#include "org/junit/runners/model/Statement.h"
#include "org/junit/runners/model/TestClass.h"
#include "org/junit/runners/parameterized/BlockJUnit4ClassRunnerWithParameters.h"
#include "org/junit/runners/parameterized/TestWithParameters.h"

@interface OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters () {
 @public
  IOSObjectArray *parameters_;
  NSString *name_;
}

- (id)createTestUsingConstructorInjection;

- (id)createTestUsingFieldInjection;

- (id<JavaUtilList>)getAnnotatedFieldsByParameter;

- (jboolean)fieldsAreAnnotated;

@end

J2OBJC_FIELD_SETTER(OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters, parameters_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters, name_, NSString *)

__attribute__((unused)) static id OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters_createTestUsingConstructorInjection(OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters *self);

__attribute__((unused)) static id OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters_createTestUsingFieldInjection(OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters *self);

__attribute__((unused)) static id<JavaUtilList> OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters_getAnnotatedFieldsByParameter(OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters *self);

__attribute__((unused)) static jboolean OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters_fieldsAreAnnotated(OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters *self);

@implementation OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters

- (instancetype)initWithOrgJunitRunnersParameterizedTestWithParameters:(OrgJunitRunnersParameterizedTestWithParameters *)test {
  OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters_initWithOrgJunitRunnersParameterizedTestWithParameters_(self, test);
  return self;
}

- (id)createTest {
  if (OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters_fieldsAreAnnotated(self)) {
    return OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters_createTestUsingFieldInjection(self);
  }
  else {
    return OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters_createTestUsingConstructorInjection(self);
  }
}

- (id)createTestUsingConstructorInjection {
  return OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters_createTestUsingConstructorInjection(self);
}

- (id)createTestUsingFieldInjection {
  return OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters_createTestUsingFieldInjection(self);
}

- (NSString *)getName {
  return name_;
}

- (NSString *)testNameWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method {
  return JreStrcat("$$", [((OrgJunitRunnersModelFrameworkMethod *) nil_chk(method)) getName], [self getName]);
}

- (void)validateConstructorWithJavaUtilList:(id<JavaUtilList>)errors {
  [self validateOnlyOneConstructorWithJavaUtilList:errors];
  if (OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters_fieldsAreAnnotated(self)) {
    [self validateZeroArgConstructorWithJavaUtilList:errors];
  }
}

- (void)validateFieldsWithJavaUtilList:(id<JavaUtilList>)errors {
  [super validateFieldsWithJavaUtilList:errors];
  if (OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters_fieldsAreAnnotated(self)) {
    id<JavaUtilList> annotatedFieldsByParameter = OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters_getAnnotatedFieldsByParameter(self);
    IOSIntArray *usedIndices = [IOSIntArray arrayWithLength:[((id<JavaUtilList>) nil_chk(annotatedFieldsByParameter)) size]];
    for (OrgJunitRunnersModelFrameworkField * __strong each in annotatedFieldsByParameter) {
      jint index = [((id<OrgJunitRunnersParameterized_Parameter>) nil_chk([((JavaLangReflectField *) nil_chk([((OrgJunitRunnersModelFrameworkField *) nil_chk(each)) getField])) getAnnotationWithIOSClass:OrgJunitRunnersParameterized_Parameter_class_()])) value];
      if (index < 0 || index > [annotatedFieldsByParameter size] - 1) {
        [((id<JavaUtilList>) nil_chk(errors)) addWithId:create_JavaLangException_initWithNSString_(JreStrcat("$I$I$IC", @"Invalid @Parameter value: ", index, @". @Parameter fields counted: ", [annotatedFieldsByParameter size], @". Please use an index between 0 and ", ([annotatedFieldsByParameter size] - 1), '.'))];
      }
      else {
        (*IOSIntArray_GetRef(usedIndices, index))++;
      }
    }
    for (jint index = 0; index < usedIndices->size_; index++) {
      jint numberOfUse = IOSIntArray_Get(usedIndices, index);
      if (numberOfUse == 0) {
        [((id<JavaUtilList>) nil_chk(errors)) addWithId:create_JavaLangException_initWithNSString_(JreStrcat("$I$", @"@Parameter(", index, @") is never used."))];
      }
      else if (numberOfUse > 1) {
        [((id<JavaUtilList>) nil_chk(errors)) addWithId:create_JavaLangException_initWithNSString_(JreStrcat("$I$I$", @"@Parameter(", index, @") is used more than once (", numberOfUse, @")."))];
      }
    }
  }
}

- (OrgJunitRunnersModelStatement *)classBlockWithOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)notifier {
  return [self childrenInvokerWithOrgJunitRunnerNotificationRunNotifier:notifier];
}

- (IOSObjectArray *)getRunnerAnnotations {
  return [IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()];
}

- (id<JavaUtilList>)getAnnotatedFieldsByParameter {
  return OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters_getAnnotatedFieldsByParameter(self);
}

- (jboolean)fieldsAreAnnotated {
  return OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters_fieldsAreAnnotated(self);
}

- (void)dealloc {
  RELEASE_(parameters_);
  RELEASE_(name_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, 2, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x4, 8, 6, -1, 7, -1, -1 },
    { NULL, "LOrgJunitRunnersModelStatement;", 0x4, 9, 10, -1, -1, -1, -1 },
    { NULL, "[LJavaLangAnnotationAnnotation;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, -1, -1, -1, 11, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJunitRunnersParameterizedTestWithParameters:);
  methods[1].selector = @selector(createTest);
  methods[2].selector = @selector(createTestUsingConstructorInjection);
  methods[3].selector = @selector(createTestUsingFieldInjection);
  methods[4].selector = @selector(getName);
  methods[5].selector = @selector(testNameWithOrgJunitRunnersModelFrameworkMethod:);
  methods[6].selector = @selector(validateConstructorWithJavaUtilList:);
  methods[7].selector = @selector(validateFieldsWithJavaUtilList:);
  methods[8].selector = @selector(classBlockWithOrgJunitRunnerNotificationRunNotifier:);
  methods[9].selector = @selector(getRunnerAnnotations);
  methods[10].selector = @selector(getAnnotatedFieldsByParameter);
  methods[11].selector = @selector(fieldsAreAnnotated);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parameters_", "[LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJunitRunnersParameterizedTestWithParameters;", "LOrgJunitRunnersModelInitializationError;", "LJavaLangException;", "testName", "LOrgJunitRunnersModelFrameworkMethod;", "validateConstructor", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Throwable;>;)V", "validateFields", "classBlock", "LOrgJunitRunnerNotificationRunNotifier;", "()Ljava/util/List<Lorg/junit/runners/model/FrameworkField;>;" };
  static const J2ObjcClassInfo _OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters = { "BlockJUnit4ClassRunnerWithParameters", "org.junit.runners.parameterized", ptrTable, methods, fields, 7, 0x1, 12, 2, -1, -1, -1, -1, -1 };
  return &_OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters;
}

@end

void OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters_initWithOrgJunitRunnersParameterizedTestWithParameters_(OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters *self, OrgJunitRunnersParameterizedTestWithParameters *test) {
  OrgJunitRunnersBlockJUnit4ClassRunner_initWithIOSClass_(self, [((OrgJunitRunnersModelTestClass *) nil_chk([((OrgJunitRunnersParameterizedTestWithParameters *) nil_chk(test)) getTestClass])) getJavaClass]);
  JreStrongAssign(&self->parameters_, [((id<JavaUtilList>) nil_chk([test getParameters])) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk([test getParameters])) size] type:NSObject_class_()]]);
  JreStrongAssign(&self->name_, [test getName]);
}

OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters *new_OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters_initWithOrgJunitRunnersParameterizedTestWithParameters_(OrgJunitRunnersParameterizedTestWithParameters *test) {
  J2OBJC_NEW_IMPL(OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters, initWithOrgJunitRunnersParameterizedTestWithParameters_, test)
}

OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters *create_OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters_initWithOrgJunitRunnersParameterizedTestWithParameters_(OrgJunitRunnersParameterizedTestWithParameters *test) {
  J2OBJC_CREATE_IMPL(OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters, initWithOrgJunitRunnersParameterizedTestWithParameters_, test)
}

id OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters_createTestUsingConstructorInjection(OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters *self) {
  return [((JavaLangReflectConstructor *) nil_chk([((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) getOnlyConstructor])) newInstanceWithNSObjectArray:self->parameters_];
}

id OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters_createTestUsingFieldInjection(OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters *self) {
  id<JavaUtilList> annotatedFieldsByParameter = OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters_getAnnotatedFieldsByParameter(self);
  if ([((id<JavaUtilList>) nil_chk(annotatedFieldsByParameter)) size] != ((IOSObjectArray *) nil_chk(self->parameters_))->size_) {
    @throw create_JavaLangException_initWithNSString_(JreStrcat("$I$IC", @"Wrong number of parameters and @Parameter fields. @Parameter fields counted: ", [annotatedFieldsByParameter size], @", available parameters: ", self->parameters_->size_, '.'));
  }
  id testClassInstance = [((IOSClass *) nil_chk([((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) getJavaClass])) newInstance];
  for (OrgJunitRunnersModelFrameworkField * __strong each in annotatedFieldsByParameter) {
    JavaLangReflectField *field = [((OrgJunitRunnersModelFrameworkField *) nil_chk(each)) getField];
    id<OrgJunitRunnersParameterized_Parameter> annotation = ((id<OrgJunitRunnersParameterized_Parameter>) [((JavaLangReflectField *) nil_chk(field)) getAnnotationWithIOSClass:OrgJunitRunnersParameterized_Parameter_class_()]);
    jint index = [((id<OrgJunitRunnersParameterized_Parameter>) nil_chk(annotation)) value];
    @try {
      [field setWithId:testClassInstance withId:IOSObjectArray_Get(self->parameters_, index)];
    }
    @catch (JavaLangIllegalArgumentException *iare) {
      @throw create_JavaLangException_initWithNSString_withNSException_(JreStrcat("$$$$@$$$$$", [((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) getName], @": Trying to set ", [field getName], @" with the value ", IOSObjectArray_Get(self->parameters_, index), @" that is not the right type (", [[nil_chk(IOSObjectArray_Get(self->parameters_, index)) java_getClass] getSimpleName], @" instead of ", [((IOSClass *) nil_chk([field getType])) getSimpleName], @")."), iare);
    }
  }
  return testClassInstance;
}

id<JavaUtilList> OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters_getAnnotatedFieldsByParameter(OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters *self) {
  return [((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) getAnnotatedFieldsWithIOSClass:OrgJunitRunnersParameterized_Parameter_class_()];
}

jboolean OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters_fieldsAreAnnotated(OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters *self) {
  return ![((id<JavaUtilList>) nil_chk(OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters_getAnnotatedFieldsByParameter(self))) isEmpty];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParameters)
