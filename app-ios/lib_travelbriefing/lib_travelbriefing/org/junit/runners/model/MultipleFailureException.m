//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/runners/model/MultipleFailureException.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "org/junit/internal/Throwables.h"
#include "org/junit/internal/runners/model/MultipleFailureException.h"
#include "org/junit/runners/model/MultipleFailureException.h"

@interface OrgJunitRunnersModelMultipleFailureException () {
 @public
  id<JavaUtilList> fErrors_;
}

@end

J2OBJC_FIELD_SETTER(OrgJunitRunnersModelMultipleFailureException, fErrors_, id<JavaUtilList>)

inline jlong OrgJunitRunnersModelMultipleFailureException_get_serialVersionUID();
#define OrgJunitRunnersModelMultipleFailureException_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJunitRunnersModelMultipleFailureException, serialVersionUID, jlong)

@implementation OrgJunitRunnersModelMultipleFailureException

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)errors {
  OrgJunitRunnersModelMultipleFailureException_initWithJavaUtilList_(self, errors);
  return self;
}

- (id<JavaUtilList>)getFailures {
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(fErrors_);
}

- (NSString *)getMessage {
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"There were %d errors:", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_([((id<JavaUtilList>) nil_chk(fErrors_)) size]) } count:1 type:NSObject_class_()]));
  for (NSException * __strong e in fErrors_) {
    [sb appendWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"\n  %s(%s)", [IOSObjectArray arrayWithObjects:(id[]){ [[((NSException *) nil_chk(e)) java_getClass] getName], [e getMessage] } count:2 type:NSObject_class_()])];
  }
  return [sb description];
}

+ (void)assertEmptyWithJavaUtilList:(id<JavaUtilList>)errors {
  OrgJunitRunnersModelMultipleFailureException_assertEmptyWithJavaUtilList_(errors);
}

- (void)dealloc {
  RELEASE_(fErrors_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 3, 0, 4, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilList:);
  methods[1].selector = @selector(getFailures);
  methods[2].selector = @selector(getMessage);
  methods[3].selector = @selector(assertEmptyWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJunitRunnersModelMultipleFailureException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "fErrors_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Throwable;>;)V", "()Ljava/util/List<Ljava/lang/Throwable;>;", "assertEmpty", "LJavaLangException;", "Ljava/util/List<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _OrgJunitRunnersModelMultipleFailureException = { "MultipleFailureException", "org.junit.runners.model", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, -1, -1, -1, -1 };
  return &_OrgJunitRunnersModelMultipleFailureException;
}

@end

void OrgJunitRunnersModelMultipleFailureException_initWithJavaUtilList_(OrgJunitRunnersModelMultipleFailureException *self, id<JavaUtilList> errors) {
  JavaLangException_init(self);
  JreStrongAssignAndConsume(&self->fErrors_, new_JavaUtilArrayList_initWithJavaUtilCollection_(errors));
}

OrgJunitRunnersModelMultipleFailureException *new_OrgJunitRunnersModelMultipleFailureException_initWithJavaUtilList_(id<JavaUtilList> errors) {
  J2OBJC_NEW_IMPL(OrgJunitRunnersModelMultipleFailureException, initWithJavaUtilList_, errors)
}

OrgJunitRunnersModelMultipleFailureException *create_OrgJunitRunnersModelMultipleFailureException_initWithJavaUtilList_(id<JavaUtilList> errors) {
  J2OBJC_CREATE_IMPL(OrgJunitRunnersModelMultipleFailureException, initWithJavaUtilList_, errors)
}

void OrgJunitRunnersModelMultipleFailureException_assertEmptyWithJavaUtilList_(id<JavaUtilList> errors) {
  OrgJunitRunnersModelMultipleFailureException_initialize();
  if ([((id<JavaUtilList>) nil_chk(errors)) isEmpty]) {
    return;
  }
  if ([errors size] == 1) {
    @throw OrgJunitInternalThrowables_rethrowAsExceptionWithNSException_([errors getWithInt:0]);
  }
  @throw create_OrgJunitInternalRunnersModelMultipleFailureException_initWithJavaUtilList_(errors);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitRunnersModelMultipleFailureException)
