//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/runners/BlockJUnit4ClassRunner.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Constructor.h"
#include "java/util/List.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/TimeUnit.h"
#include "org/junit/After.h"
#include "org/junit/Before.h"
#include "org/junit/Ignore.h"
#include "org/junit/Rule.h"
#include "org/junit/Test.h"
#include "org/junit/internal/runners/model/ReflectiveCallable.h"
#include "org/junit/internal/runners/rules/RuleMemberValidator.h"
#include "org/junit/internal/runners/statements/ExpectException.h"
#include "org/junit/internal/runners/statements/Fail.h"
#include "org/junit/internal/runners/statements/FailOnTimeout.h"
#include "org/junit/internal/runners/statements/InvokeMethod.h"
#include "org/junit/internal/runners/statements/RunAfters.h"
#include "org/junit/internal/runners/statements/RunBefores.h"
#include "org/junit/rules/MethodRule.h"
#include "org/junit/rules/RunRules.h"
#include "org/junit/rules/TestRule.h"
#include "org/junit/runner/Description.h"
#include "org/junit/runner/notification/RunNotifier.h"
#include "org/junit/runners/BlockJUnit4ClassRunner.h"
#include "org/junit/runners/ParentRunner.h"
#include "org/junit/runners/model/FrameworkMethod.h"
#include "org/junit/runners/model/Statement.h"
#include "org/junit/runners/model/TestClass.h"

@interface OrgJunitRunnersBlockJUnit4ClassRunner () {
 @public
  JavaUtilConcurrentConcurrentHashMap *methodDescriptions_;
}

- (jboolean)hasOneConstructor;

- (void)validateMethodsWithJavaUtilList:(id<JavaUtilList>)errors;

- (OrgJunitRunnersModelStatement *)withRulesWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method
                                                                             withId:(id)target
                                                  withOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)statement;

- (OrgJunitRunnersModelStatement *)withMethodRulesWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method
                                                                         withJavaUtilList:(id<JavaUtilList>)testRules
                                                                                   withId:(id)target
                                                        withOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)result;

- (id<JavaUtilList>)getMethodRulesWithId:(id)target;

- (OrgJunitRunnersModelStatement *)withTestRulesWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method
                                                                       withJavaUtilList:(id<JavaUtilList>)testRules
                                                      withOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)statement;

- (IOSClass *)getExpectedExceptionWithOrgJunitTest:(id<OrgJunitTest>)annotation;

- (jboolean)expectsExceptionWithOrgJunitTest:(id<OrgJunitTest>)annotation;

- (jlong)getTimeoutWithOrgJunitTest:(id<OrgJunitTest>)annotation;

@end

J2OBJC_FIELD_SETTER(OrgJunitRunnersBlockJUnit4ClassRunner, methodDescriptions_, JavaUtilConcurrentConcurrentHashMap *)

__attribute__((unused)) static jboolean OrgJunitRunnersBlockJUnit4ClassRunner_hasOneConstructor(OrgJunitRunnersBlockJUnit4ClassRunner *self);

__attribute__((unused)) static void OrgJunitRunnersBlockJUnit4ClassRunner_validateMethodsWithJavaUtilList_(OrgJunitRunnersBlockJUnit4ClassRunner *self, id<JavaUtilList> errors);

__attribute__((unused)) static OrgJunitRunnersModelStatement *OrgJunitRunnersBlockJUnit4ClassRunner_withRulesWithOrgJunitRunnersModelFrameworkMethod_withId_withOrgJunitRunnersModelStatement_(OrgJunitRunnersBlockJUnit4ClassRunner *self, OrgJunitRunnersModelFrameworkMethod *method, id target, OrgJunitRunnersModelStatement *statement);

__attribute__((unused)) static OrgJunitRunnersModelStatement *OrgJunitRunnersBlockJUnit4ClassRunner_withMethodRulesWithOrgJunitRunnersModelFrameworkMethod_withJavaUtilList_withId_withOrgJunitRunnersModelStatement_(OrgJunitRunnersBlockJUnit4ClassRunner *self, OrgJunitRunnersModelFrameworkMethod *method, id<JavaUtilList> testRules, id target, OrgJunitRunnersModelStatement *result);

__attribute__((unused)) static id<JavaUtilList> OrgJunitRunnersBlockJUnit4ClassRunner_getMethodRulesWithId_(OrgJunitRunnersBlockJUnit4ClassRunner *self, id target);

__attribute__((unused)) static OrgJunitRunnersModelStatement *OrgJunitRunnersBlockJUnit4ClassRunner_withTestRulesWithOrgJunitRunnersModelFrameworkMethod_withJavaUtilList_withOrgJunitRunnersModelStatement_(OrgJunitRunnersBlockJUnit4ClassRunner *self, OrgJunitRunnersModelFrameworkMethod *method, id<JavaUtilList> testRules, OrgJunitRunnersModelStatement *statement);

__attribute__((unused)) static IOSClass *OrgJunitRunnersBlockJUnit4ClassRunner_getExpectedExceptionWithOrgJunitTest_(OrgJunitRunnersBlockJUnit4ClassRunner *self, id<OrgJunitTest> annotation);

__attribute__((unused)) static jboolean OrgJunitRunnersBlockJUnit4ClassRunner_expectsExceptionWithOrgJunitTest_(OrgJunitRunnersBlockJUnit4ClassRunner *self, id<OrgJunitTest> annotation);

__attribute__((unused)) static jlong OrgJunitRunnersBlockJUnit4ClassRunner_getTimeoutWithOrgJunitTest_(OrgJunitRunnersBlockJUnit4ClassRunner *self, id<OrgJunitTest> annotation);

__attribute__((unused)) static IOSObjectArray *OrgJunitRunnersBlockJUnit4ClassRunner__Annotations$0();

__attribute__((unused)) static IOSObjectArray *OrgJunitRunnersBlockJUnit4ClassRunner__Annotations$1();

@interface OrgJunitRunnersBlockJUnit4ClassRunner_1 : OrgJunitInternalRunnersModelReflectiveCallable {
 @public
  OrgJunitRunnersBlockJUnit4ClassRunner *this$0_;
}

- (instancetype)initWithOrgJunitRunnersBlockJUnit4ClassRunner:(OrgJunitRunnersBlockJUnit4ClassRunner *)outer$;

- (id)runReflectiveCall;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitRunnersBlockJUnit4ClassRunner_1)

__attribute__((unused)) static void OrgJunitRunnersBlockJUnit4ClassRunner_1_initWithOrgJunitRunnersBlockJUnit4ClassRunner_(OrgJunitRunnersBlockJUnit4ClassRunner_1 *self, OrgJunitRunnersBlockJUnit4ClassRunner *outer$);

__attribute__((unused)) static OrgJunitRunnersBlockJUnit4ClassRunner_1 *new_OrgJunitRunnersBlockJUnit4ClassRunner_1_initWithOrgJunitRunnersBlockJUnit4ClassRunner_(OrgJunitRunnersBlockJUnit4ClassRunner *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJunitRunnersBlockJUnit4ClassRunner_1 *create_OrgJunitRunnersBlockJUnit4ClassRunner_1_initWithOrgJunitRunnersBlockJUnit4ClassRunner_(OrgJunitRunnersBlockJUnit4ClassRunner *outer$);

@implementation OrgJunitRunnersBlockJUnit4ClassRunner

- (instancetype)initWithIOSClass:(IOSClass *)klass {
  OrgJunitRunnersBlockJUnit4ClassRunner_initWithIOSClass_(self, klass);
  return self;
}

- (void)runChildWithId:(OrgJunitRunnersModelFrameworkMethod *)method
withOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)notifier {
  OrgJunitRunnerDescription *description_ = [self describeChildWithId:method];
  if ([self isIgnoredWithId:method]) {
    [((OrgJunitRunnerNotificationRunNotifier *) nil_chk(notifier)) fireTestIgnoredWithOrgJunitRunnerDescription:description_];
  }
  else {
    [self runLeafWithOrgJunitRunnersModelStatement:[self methodBlockWithOrgJunitRunnersModelFrameworkMethod:method] withOrgJunitRunnerDescription:description_ withOrgJunitRunnerNotificationRunNotifier:notifier];
  }
}

- (jboolean)isIgnoredWithId:(OrgJunitRunnersModelFrameworkMethod *)child {
  return [((OrgJunitRunnersModelFrameworkMethod *) nil_chk(child)) getAnnotationWithIOSClass:OrgJunitIgnore_class_()] != nil;
}

- (OrgJunitRunnerDescription *)describeChildWithId:(OrgJunitRunnersModelFrameworkMethod *)method {
  OrgJunitRunnerDescription *description_ = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(methodDescriptions_)) getWithId:method];
  if (description_ == nil) {
    description_ = OrgJunitRunnerDescription_createTestDescriptionWithIOSClass_withNSString_withJavaLangAnnotationAnnotationArray_([((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) getJavaClass], [self testNameWithOrgJunitRunnersModelFrameworkMethod:method], [((OrgJunitRunnersModelFrameworkMethod *) nil_chk(method)) getAnnotations]);
    [methodDescriptions_ putIfAbsentWithId:method withId:description_];
  }
  return description_;
}

- (id<JavaUtilList>)getChildren {
  return [self computeTestMethods];
}

- (id<JavaUtilList>)computeTestMethods {
  return [((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) getAnnotatedMethodsWithIOSClass:OrgJunitTest_class_()];
}

- (void)collectInitializationErrorsWithJavaUtilList:(id<JavaUtilList>)errors {
  [super collectInitializationErrorsWithJavaUtilList:errors];
  [self validateNoNonStaticInnerClassWithJavaUtilList:errors];
  [self validateConstructorWithJavaUtilList:errors];
  [self validateInstanceMethodsWithJavaUtilList:errors];
  [self validateFieldsWithJavaUtilList:errors];
  OrgJunitRunnersBlockJUnit4ClassRunner_validateMethodsWithJavaUtilList_(self, errors);
}

- (void)validateNoNonStaticInnerClassWithJavaUtilList:(id<JavaUtilList>)errors {
  if ([((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) isANonStaticInnerClass]) {
    NSString *gripe = JreStrcat("$$$", @"The inner class ", [((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) getName], @" is not static.");
    [((id<JavaUtilList>) nil_chk(errors)) addWithId:create_JavaLangException_initWithNSString_(gripe)];
  }
}

- (void)validateConstructorWithJavaUtilList:(id<JavaUtilList>)errors {
  [self validateOnlyOneConstructorWithJavaUtilList:errors];
  [self validateZeroArgConstructorWithJavaUtilList:errors];
}

- (void)validateOnlyOneConstructorWithJavaUtilList:(id<JavaUtilList>)errors {
  if (!OrgJunitRunnersBlockJUnit4ClassRunner_hasOneConstructor(self)) {
    NSString *gripe = @"Test class should have exactly one public constructor";
    [((id<JavaUtilList>) nil_chk(errors)) addWithId:create_JavaLangException_initWithNSString_(gripe)];
  }
}

- (void)validateZeroArgConstructorWithJavaUtilList:(id<JavaUtilList>)errors {
  if (![((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) isANonStaticInnerClass] && OrgJunitRunnersBlockJUnit4ClassRunner_hasOneConstructor(self) && (((IOSObjectArray *) nil_chk([((JavaLangReflectConstructor *) nil_chk([((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) getOnlyConstructor])) getParameterTypes]))->size_ != 0)) {
    NSString *gripe = @"Test class should have exactly one public zero-argument constructor";
    [((id<JavaUtilList>) nil_chk(errors)) addWithId:create_JavaLangException_initWithNSString_(gripe)];
  }
}

- (jboolean)hasOneConstructor {
  return OrgJunitRunnersBlockJUnit4ClassRunner_hasOneConstructor(self);
}

- (void)validateInstanceMethodsWithJavaUtilList:(id<JavaUtilList>)errors {
  [self validatePublicVoidNoArgMethodsWithIOSClass:OrgJunitAfter_class_() withBoolean:false withJavaUtilList:errors];
  [self validatePublicVoidNoArgMethodsWithIOSClass:OrgJunitBefore_class_() withBoolean:false withJavaUtilList:errors];
  [self validateTestMethodsWithJavaUtilList:errors];
  if ([((id<JavaUtilList>) nil_chk([self computeTestMethods])) size] == 0) {
    [((id<JavaUtilList>) nil_chk(errors)) addWithId:create_JavaLangException_initWithNSString_(@"No runnable methods")];
  }
}

- (void)validateFieldsWithJavaUtilList:(id<JavaUtilList>)errors {
  [((OrgJunitInternalRunnersRulesRuleMemberValidator *) nil_chk(JreLoadStatic(OrgJunitInternalRunnersRulesRuleMemberValidator, RULE_VALIDATOR))) validateWithOrgJunitRunnersModelTestClass:[self getTestClass] withJavaUtilList:errors];
}

- (void)validateMethodsWithJavaUtilList:(id<JavaUtilList>)errors {
  OrgJunitRunnersBlockJUnit4ClassRunner_validateMethodsWithJavaUtilList_(self, errors);
}

- (void)validateTestMethodsWithJavaUtilList:(id<JavaUtilList>)errors {
  [self validatePublicVoidNoArgMethodsWithIOSClass:OrgJunitTest_class_() withBoolean:false withJavaUtilList:errors];
}

- (id)createTest {
  return [((JavaLangReflectConstructor *) nil_chk([((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) getOnlyConstructor])) newInstanceWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]];
}

- (NSString *)testNameWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method {
  return [((OrgJunitRunnersModelFrameworkMethod *) nil_chk(method)) getName];
}

- (OrgJunitRunnersModelStatement *)methodBlockWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method {
  id test;
  @try {
    test = [create_OrgJunitRunnersBlockJUnit4ClassRunner_1_initWithOrgJunitRunnersBlockJUnit4ClassRunner_(self) run];
  }
  @catch (NSException *e) {
    return create_OrgJunitInternalRunnersStatementsFail_initWithNSException_(e);
  }
  OrgJunitRunnersModelStatement *statement = [self methodInvokerWithOrgJunitRunnersModelFrameworkMethod:method withId:test];
  statement = [self possiblyExpectingExceptionsWithOrgJunitRunnersModelFrameworkMethod:method withId:test withOrgJunitRunnersModelStatement:statement];
  statement = [self withPotentialTimeoutWithOrgJunitRunnersModelFrameworkMethod:method withId:test withOrgJunitRunnersModelStatement:statement];
  statement = [self withBeforesWithOrgJunitRunnersModelFrameworkMethod:method withId:test withOrgJunitRunnersModelStatement:statement];
  statement = [self withAftersWithOrgJunitRunnersModelFrameworkMethod:method withId:test withOrgJunitRunnersModelStatement:statement];
  statement = OrgJunitRunnersBlockJUnit4ClassRunner_withRulesWithOrgJunitRunnersModelFrameworkMethod_withId_withOrgJunitRunnersModelStatement_(self, method, test, statement);
  return statement;
}

- (OrgJunitRunnersModelStatement *)methodInvokerWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method
                                                                                 withId:(id)test {
  return create_OrgJunitInternalRunnersStatementsInvokeMethod_initWithOrgJunitRunnersModelFrameworkMethod_withId_(method, test);
}

- (OrgJunitRunnersModelStatement *)possiblyExpectingExceptionsWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method
                                                                                               withId:(id)test
                                                                    withOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)next {
  id<OrgJunitTest> annotation = ((id<OrgJunitTest>) [((OrgJunitRunnersModelFrameworkMethod *) nil_chk(method)) getAnnotationWithIOSClass:OrgJunitTest_class_()]);
  return OrgJunitRunnersBlockJUnit4ClassRunner_expectsExceptionWithOrgJunitTest_(self, annotation) ? create_OrgJunitInternalRunnersStatementsExpectException_initWithOrgJunitRunnersModelStatement_withIOSClass_(next, OrgJunitRunnersBlockJUnit4ClassRunner_getExpectedExceptionWithOrgJunitTest_(self, annotation)) : next;
}

- (OrgJunitRunnersModelStatement *)withPotentialTimeoutWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method
                                                                                        withId:(id)test
                                                             withOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)next {
  jlong timeout = OrgJunitRunnersBlockJUnit4ClassRunner_getTimeoutWithOrgJunitTest_(self, ((id<OrgJunitTest>) [((OrgJunitRunnersModelFrameworkMethod *) nil_chk(method)) getAnnotationWithIOSClass:OrgJunitTest_class_()]));
  if (timeout <= 0) {
    return next;
  }
  return [((OrgJunitInternalRunnersStatementsFailOnTimeout_Builder *) nil_chk([((OrgJunitInternalRunnersStatementsFailOnTimeout_Builder *) nil_chk(OrgJunitInternalRunnersStatementsFailOnTimeout_builder())) withTimeoutWithLong:timeout withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)])) buildWithOrgJunitRunnersModelStatement:next];
}

- (OrgJunitRunnersModelStatement *)withBeforesWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method
                                                                               withId:(id)target
                                                    withOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)statement {
  id<JavaUtilList> befores = [((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) getAnnotatedMethodsWithIOSClass:OrgJunitBefore_class_()];
  return [((id<JavaUtilList>) nil_chk(befores)) isEmpty] ? statement : create_OrgJunitInternalRunnersStatementsRunBefores_initWithOrgJunitRunnersModelStatement_withJavaUtilList_withId_(statement, befores, target);
}

- (OrgJunitRunnersModelStatement *)withAftersWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method
                                                                              withId:(id)target
                                                   withOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)statement {
  id<JavaUtilList> afters = [((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) getAnnotatedMethodsWithIOSClass:OrgJunitAfter_class_()];
  return [((id<JavaUtilList>) nil_chk(afters)) isEmpty] ? statement : create_OrgJunitInternalRunnersStatementsRunAfters_initWithOrgJunitRunnersModelStatement_withJavaUtilList_withId_(statement, afters, target);
}

- (OrgJunitRunnersModelStatement *)withRulesWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method
                                                                             withId:(id)target
                                                  withOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)statement {
  return OrgJunitRunnersBlockJUnit4ClassRunner_withRulesWithOrgJunitRunnersModelFrameworkMethod_withId_withOrgJunitRunnersModelStatement_(self, method, target, statement);
}

- (OrgJunitRunnersModelStatement *)withMethodRulesWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method
                                                                         withJavaUtilList:(id<JavaUtilList>)testRules
                                                                                   withId:(id)target
                                                        withOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)result {
  return OrgJunitRunnersBlockJUnit4ClassRunner_withMethodRulesWithOrgJunitRunnersModelFrameworkMethod_withJavaUtilList_withId_withOrgJunitRunnersModelStatement_(self, method, testRules, target, result);
}

- (id<JavaUtilList>)getMethodRulesWithId:(id)target {
  return OrgJunitRunnersBlockJUnit4ClassRunner_getMethodRulesWithId_(self, target);
}

- (id<JavaUtilList>)rulesWithId:(id)target {
  id<JavaUtilList> rules = [((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) getAnnotatedMethodValuesWithId:target withIOSClass:OrgJunitRule_class_() withIOSClass:OrgJunitRulesMethodRule_class_()];
  [((id<JavaUtilList>) nil_chk(rules)) addAllWithJavaUtilCollection:[((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) getAnnotatedFieldValuesWithId:target withIOSClass:OrgJunitRule_class_() withIOSClass:OrgJunitRulesMethodRule_class_()]];
  return rules;
}

- (OrgJunitRunnersModelStatement *)withTestRulesWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method
                                                                       withJavaUtilList:(id<JavaUtilList>)testRules
                                                      withOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)statement {
  return OrgJunitRunnersBlockJUnit4ClassRunner_withTestRulesWithOrgJunitRunnersModelFrameworkMethod_withJavaUtilList_withOrgJunitRunnersModelStatement_(self, method, testRules, statement);
}

- (id<JavaUtilList>)getTestRulesWithId:(id)target {
  id<JavaUtilList> result = [((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) getAnnotatedMethodValuesWithId:target withIOSClass:OrgJunitRule_class_() withIOSClass:OrgJunitRulesTestRule_class_()];
  [((id<JavaUtilList>) nil_chk(result)) addAllWithJavaUtilCollection:[((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) getAnnotatedFieldValuesWithId:target withIOSClass:OrgJunitRule_class_() withIOSClass:OrgJunitRulesTestRule_class_()]];
  return result;
}

- (IOSClass *)getExpectedExceptionWithOrgJunitTest:(id<OrgJunitTest>)annotation {
  return OrgJunitRunnersBlockJUnit4ClassRunner_getExpectedExceptionWithOrgJunitTest_(self, annotation);
}

- (jboolean)expectsExceptionWithOrgJunitTest:(id<OrgJunitTest>)annotation {
  return OrgJunitRunnersBlockJUnit4ClassRunner_expectsExceptionWithOrgJunitTest_(self, annotation);
}

- (jlong)getTimeoutWithOrgJunitTest:(id<OrgJunitTest>)annotation {
  return OrgJunitRunnersBlockJUnit4ClassRunner_getTimeoutWithOrgJunitTest_(self, annotation);
}

- (void)dealloc {
  RELEASE_(methodDescriptions_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, 2, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOrgJunitRunnerDescription;", 0x4, 7, 6, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x4, -1, -1, -1, 8, -1, -1 },
    { NULL, "LJavaUtilList;", 0x4, -1, -1, -1, 8, -1, -1 },
    { NULL, "V", 0x4, 9, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x4, 12, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x4, 13, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x4, 14, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x4, 15, 10, -1, 11, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 16, 10, -1, 11, 17, -1 },
    { NULL, "V", 0x4, 18, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x2, 19, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x4, 20, 10, -1, 11, -1, -1 },
    { NULL, "LNSObject;", 0x4, -1, -1, 21, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 22, 6, -1, -1, -1, -1 },
    { NULL, "LOrgJunitRunnersModelStatement;", 0x4, 23, 6, -1, -1, -1, -1 },
    { NULL, "LOrgJunitRunnersModelStatement;", 0x4, 24, 25, -1, -1, -1, -1 },
    { NULL, "LOrgJunitRunnersModelStatement;", 0x4, 26, 27, -1, -1, -1, -1 },
    { NULL, "LOrgJunitRunnersModelStatement;", 0x4, 28, 27, -1, -1, 29, -1 },
    { NULL, "LOrgJunitRunnersModelStatement;", 0x4, 30, 27, -1, -1, -1, -1 },
    { NULL, "LOrgJunitRunnersModelStatement;", 0x4, 31, 27, -1, -1, -1, -1 },
    { NULL, "LOrgJunitRunnersModelStatement;", 0x2, 32, 27, -1, -1, -1, -1 },
    { NULL, "LOrgJunitRunnersModelStatement;", 0x2, 33, 34, -1, 35, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 36, 37, -1, 38, -1, -1 },
    { NULL, "LJavaUtilList;", 0x4, 39, 37, -1, 38, -1, -1 },
    { NULL, "LOrgJunitRunnersModelStatement;", 0x2, 40, 41, -1, 42, -1, -1 },
    { NULL, "LJavaUtilList;", 0x4, 43, 37, -1, 44, -1, -1 },
    { NULL, "LIOSClass;", 0x2, 45, 46, -1, 47, -1, -1 },
    { NULL, "Z", 0x2, 48, 46, -1, -1, -1, -1 },
    { NULL, "J", 0x2, 49, 46, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIOSClass:);
  methods[1].selector = @selector(runChildWithId:withOrgJunitRunnerNotificationRunNotifier:);
  methods[2].selector = @selector(isIgnoredWithId:);
  methods[3].selector = @selector(describeChildWithId:);
  methods[4].selector = @selector(getChildren);
  methods[5].selector = @selector(computeTestMethods);
  methods[6].selector = @selector(collectInitializationErrorsWithJavaUtilList:);
  methods[7].selector = @selector(validateNoNonStaticInnerClassWithJavaUtilList:);
  methods[8].selector = @selector(validateConstructorWithJavaUtilList:);
  methods[9].selector = @selector(validateOnlyOneConstructorWithJavaUtilList:);
  methods[10].selector = @selector(validateZeroArgConstructorWithJavaUtilList:);
  methods[11].selector = @selector(hasOneConstructor);
  methods[12].selector = @selector(validateInstanceMethodsWithJavaUtilList:);
  methods[13].selector = @selector(validateFieldsWithJavaUtilList:);
  methods[14].selector = @selector(validateMethodsWithJavaUtilList:);
  methods[15].selector = @selector(validateTestMethodsWithJavaUtilList:);
  methods[16].selector = @selector(createTest);
  methods[17].selector = @selector(testNameWithOrgJunitRunnersModelFrameworkMethod:);
  methods[18].selector = @selector(methodBlockWithOrgJunitRunnersModelFrameworkMethod:);
  methods[19].selector = @selector(methodInvokerWithOrgJunitRunnersModelFrameworkMethod:withId:);
  methods[20].selector = @selector(possiblyExpectingExceptionsWithOrgJunitRunnersModelFrameworkMethod:withId:withOrgJunitRunnersModelStatement:);
  methods[21].selector = @selector(withPotentialTimeoutWithOrgJunitRunnersModelFrameworkMethod:withId:withOrgJunitRunnersModelStatement:);
  methods[22].selector = @selector(withBeforesWithOrgJunitRunnersModelFrameworkMethod:withId:withOrgJunitRunnersModelStatement:);
  methods[23].selector = @selector(withAftersWithOrgJunitRunnersModelFrameworkMethod:withId:withOrgJunitRunnersModelStatement:);
  methods[24].selector = @selector(withRulesWithOrgJunitRunnersModelFrameworkMethod:withId:withOrgJunitRunnersModelStatement:);
  methods[25].selector = @selector(withMethodRulesWithOrgJunitRunnersModelFrameworkMethod:withJavaUtilList:withId:withOrgJunitRunnersModelStatement:);
  methods[26].selector = @selector(getMethodRulesWithId:);
  methods[27].selector = @selector(rulesWithId:);
  methods[28].selector = @selector(withTestRulesWithOrgJunitRunnersModelFrameworkMethod:withJavaUtilList:withOrgJunitRunnersModelStatement:);
  methods[29].selector = @selector(getTestRulesWithId:);
  methods[30].selector = @selector(getExpectedExceptionWithOrgJunitTest:);
  methods[31].selector = @selector(expectsExceptionWithOrgJunitTest:);
  methods[32].selector = @selector(getTimeoutWithOrgJunitTest:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "methodDescriptions_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 50, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;", "LOrgJunitRunnersModelInitializationError;", "(Ljava/lang/Class<*>;)V", "runChild", "LOrgJunitRunnersModelFrameworkMethod;LOrgJunitRunnerNotificationRunNotifier;", "isIgnored", "LOrgJunitRunnersModelFrameworkMethod;", "describeChild", "()Ljava/util/List<Lorg/junit/runners/model/FrameworkMethod;>;", "collectInitializationErrors", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Throwable;>;)V", "validateNoNonStaticInnerClass", "validateConstructor", "validateOnlyOneConstructor", "validateZeroArgConstructor", "validateInstanceMethods", (void *)&OrgJunitRunnersBlockJUnit4ClassRunner__Annotations$0, "validateFields", "validateMethods", "validateTestMethods", "LJavaLangException;", "testName", "methodBlock", "methodInvoker", "LOrgJunitRunnersModelFrameworkMethod;LNSObject;", "possiblyExpectingExceptions", "LOrgJunitRunnersModelFrameworkMethod;LNSObject;LOrgJunitRunnersModelStatement;", "withPotentialTimeout", (void *)&OrgJunitRunnersBlockJUnit4ClassRunner__Annotations$1, "withBefores", "withAfters", "withRules", "withMethodRules", "LOrgJunitRunnersModelFrameworkMethod;LJavaUtilList;LNSObject;LOrgJunitRunnersModelStatement;", "(Lorg/junit/runners/model/FrameworkMethod;Ljava/util/List<Lorg/junit/rules/TestRule;>;Ljava/lang/Object;Lorg/junit/runners/model/Statement;)Lorg/junit/runners/model/Statement;", "getMethodRules", "LNSObject;", "(Ljava/lang/Object;)Ljava/util/List<Lorg/junit/rules/MethodRule;>;", "rules", "withTestRules", "LOrgJunitRunnersModelFrameworkMethod;LJavaUtilList;LOrgJunitRunnersModelStatement;", "(Lorg/junit/runners/model/FrameworkMethod;Ljava/util/List<Lorg/junit/rules/TestRule;>;Lorg/junit/runners/model/Statement;)Lorg/junit/runners/model/Statement;", "getTestRules", "(Ljava/lang/Object;)Ljava/util/List<Lorg/junit/rules/TestRule;>;", "getExpectedException", "LOrgJunitTest;", "(Lorg/junit/Test;)Ljava/lang/Class<+Ljava/lang/Throwable;>;", "expectsException", "getTimeout", "Ljava/util/concurrent/ConcurrentHashMap<Lorg/junit/runners/model/FrameworkMethod;Lorg/junit/runner/Description;>;", "Lorg/junit/runners/ParentRunner<Lorg/junit/runners/model/FrameworkMethod;>;" };
  static const J2ObjcClassInfo _OrgJunitRunnersBlockJUnit4ClassRunner = { "BlockJUnit4ClassRunner", "org.junit.runners", ptrTable, methods, fields, 7, 0x1, 33, 1, -1, -1, -1, 51, -1 };
  return &_OrgJunitRunnersBlockJUnit4ClassRunner;
}

@end

void OrgJunitRunnersBlockJUnit4ClassRunner_initWithIOSClass_(OrgJunitRunnersBlockJUnit4ClassRunner *self, IOSClass *klass) {
  OrgJunitRunnersParentRunner_initWithIOSClass_(self, klass);
  JreStrongAssignAndConsume(&self->methodDescriptions_, new_JavaUtilConcurrentConcurrentHashMap_init());
}

OrgJunitRunnersBlockJUnit4ClassRunner *new_OrgJunitRunnersBlockJUnit4ClassRunner_initWithIOSClass_(IOSClass *klass) {
  J2OBJC_NEW_IMPL(OrgJunitRunnersBlockJUnit4ClassRunner, initWithIOSClass_, klass)
}

OrgJunitRunnersBlockJUnit4ClassRunner *create_OrgJunitRunnersBlockJUnit4ClassRunner_initWithIOSClass_(IOSClass *klass) {
  J2OBJC_CREATE_IMPL(OrgJunitRunnersBlockJUnit4ClassRunner, initWithIOSClass_, klass)
}

jboolean OrgJunitRunnersBlockJUnit4ClassRunner_hasOneConstructor(OrgJunitRunnersBlockJUnit4ClassRunner *self) {
  return ((IOSObjectArray *) nil_chk([((IOSClass *) nil_chk([((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) getJavaClass])) getConstructors]))->size_ == 1;
}

void OrgJunitRunnersBlockJUnit4ClassRunner_validateMethodsWithJavaUtilList_(OrgJunitRunnersBlockJUnit4ClassRunner *self, id<JavaUtilList> errors) {
  [((OrgJunitInternalRunnersRulesRuleMemberValidator *) nil_chk(JreLoadStatic(OrgJunitInternalRunnersRulesRuleMemberValidator, RULE_METHOD_VALIDATOR))) validateWithOrgJunitRunnersModelTestClass:[self getTestClass] withJavaUtilList:errors];
}

OrgJunitRunnersModelStatement *OrgJunitRunnersBlockJUnit4ClassRunner_withRulesWithOrgJunitRunnersModelFrameworkMethod_withId_withOrgJunitRunnersModelStatement_(OrgJunitRunnersBlockJUnit4ClassRunner *self, OrgJunitRunnersModelFrameworkMethod *method, id target, OrgJunitRunnersModelStatement *statement) {
  id<JavaUtilList> testRules = [self getTestRulesWithId:target];
  OrgJunitRunnersModelStatement *result = statement;
  result = OrgJunitRunnersBlockJUnit4ClassRunner_withMethodRulesWithOrgJunitRunnersModelFrameworkMethod_withJavaUtilList_withId_withOrgJunitRunnersModelStatement_(self, method, testRules, target, result);
  result = OrgJunitRunnersBlockJUnit4ClassRunner_withTestRulesWithOrgJunitRunnersModelFrameworkMethod_withJavaUtilList_withOrgJunitRunnersModelStatement_(self, method, testRules, result);
  return result;
}

OrgJunitRunnersModelStatement *OrgJunitRunnersBlockJUnit4ClassRunner_withMethodRulesWithOrgJunitRunnersModelFrameworkMethod_withJavaUtilList_withId_withOrgJunitRunnersModelStatement_(OrgJunitRunnersBlockJUnit4ClassRunner *self, OrgJunitRunnersModelFrameworkMethod *method, id<JavaUtilList> testRules, id target, OrgJunitRunnersModelStatement *result) {
  for (id<OrgJunitRulesMethodRule> __strong each in nil_chk(OrgJunitRunnersBlockJUnit4ClassRunner_getMethodRulesWithId_(self, target))) {
    if (![((id<JavaUtilList>) nil_chk(testRules)) containsWithId:each]) {
      result = [((id<OrgJunitRulesMethodRule>) nil_chk(each)) applyWithOrgJunitRunnersModelStatement:result withOrgJunitRunnersModelFrameworkMethod:method withId:target];
    }
  }
  return result;
}

id<JavaUtilList> OrgJunitRunnersBlockJUnit4ClassRunner_getMethodRulesWithId_(OrgJunitRunnersBlockJUnit4ClassRunner *self, id target) {
  return [self rulesWithId:target];
}

OrgJunitRunnersModelStatement *OrgJunitRunnersBlockJUnit4ClassRunner_withTestRulesWithOrgJunitRunnersModelFrameworkMethod_withJavaUtilList_withOrgJunitRunnersModelStatement_(OrgJunitRunnersBlockJUnit4ClassRunner *self, OrgJunitRunnersModelFrameworkMethod *method, id<JavaUtilList> testRules, OrgJunitRunnersModelStatement *statement) {
  return [((id<JavaUtilList>) nil_chk(testRules)) isEmpty] ? statement : create_OrgJunitRulesRunRules_initWithOrgJunitRunnersModelStatement_withJavaLangIterable_withOrgJunitRunnerDescription_(statement, testRules, [self describeChildWithId:method]);
}

IOSClass *OrgJunitRunnersBlockJUnit4ClassRunner_getExpectedExceptionWithOrgJunitTest_(OrgJunitRunnersBlockJUnit4ClassRunner *self, id<OrgJunitTest> annotation) {
  if (annotation == nil || [annotation expected] == OrgJunitTest_None_class_()) {
    return nil;
  }
  else {
    return [annotation expected];
  }
}

jboolean OrgJunitRunnersBlockJUnit4ClassRunner_expectsExceptionWithOrgJunitTest_(OrgJunitRunnersBlockJUnit4ClassRunner *self, id<OrgJunitTest> annotation) {
  return OrgJunitRunnersBlockJUnit4ClassRunner_getExpectedExceptionWithOrgJunitTest_(self, annotation) != nil;
}

jlong OrgJunitRunnersBlockJUnit4ClassRunner_getTimeoutWithOrgJunitTest_(OrgJunitRunnersBlockJUnit4ClassRunner *self, id<OrgJunitTest> annotation) {
  if (annotation == nil) {
    return 0;
  }
  return [annotation timeout];
}

IOSObjectArray *OrgJunitRunnersBlockJUnit4ClassRunner__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgJunitRunnersBlockJUnit4ClassRunner__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitRunnersBlockJUnit4ClassRunner)

@implementation OrgJunitRunnersBlockJUnit4ClassRunner_1

- (instancetype)initWithOrgJunitRunnersBlockJUnit4ClassRunner:(OrgJunitRunnersBlockJUnit4ClassRunner *)outer$ {
  OrgJunitRunnersBlockJUnit4ClassRunner_1_initWithOrgJunitRunnersBlockJUnit4ClassRunner_(self, outer$);
  return self;
}

- (id)runReflectiveCall {
  return [this$0_ createTest];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, -1, -1, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJunitRunnersBlockJUnit4ClassRunner:);
  methods[1].selector = @selector(runReflectiveCall);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgJunitRunnersBlockJUnit4ClassRunner;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSException;", "LOrgJunitRunnersBlockJUnit4ClassRunner;", "methodBlockWithOrgJunitRunnersModelFrameworkMethod:" };
  static const J2ObjcClassInfo _OrgJunitRunnersBlockJUnit4ClassRunner_1 = { "", "org.junit.runners", ptrTable, methods, fields, 7, 0x8018, 2, 1, 1, -1, 2, -1, -1 };
  return &_OrgJunitRunnersBlockJUnit4ClassRunner_1;
}

@end

void OrgJunitRunnersBlockJUnit4ClassRunner_1_initWithOrgJunitRunnersBlockJUnit4ClassRunner_(OrgJunitRunnersBlockJUnit4ClassRunner_1 *self, OrgJunitRunnersBlockJUnit4ClassRunner *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgJunitInternalRunnersModelReflectiveCallable_init(self);
}

OrgJunitRunnersBlockJUnit4ClassRunner_1 *new_OrgJunitRunnersBlockJUnit4ClassRunner_1_initWithOrgJunitRunnersBlockJUnit4ClassRunner_(OrgJunitRunnersBlockJUnit4ClassRunner *outer$) {
  J2OBJC_NEW_IMPL(OrgJunitRunnersBlockJUnit4ClassRunner_1, initWithOrgJunitRunnersBlockJUnit4ClassRunner_, outer$)
}

OrgJunitRunnersBlockJUnit4ClassRunner_1 *create_OrgJunitRunnersBlockJUnit4ClassRunner_1_initWithOrgJunitRunnersBlockJUnit4ClassRunner_(OrgJunitRunnersBlockJUnit4ClassRunner *outer$) {
  J2OBJC_CREATE_IMPL(OrgJunitRunnersBlockJUnit4ClassRunner_1, initWithOrgJunitRunnersBlockJUnit4ClassRunner_, outer$)
}
