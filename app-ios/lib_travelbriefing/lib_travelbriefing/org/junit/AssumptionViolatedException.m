//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/AssumptionViolatedException.java
//

#include "J2ObjC_source.h"
#include "org/hamcrest/Matcher.h"
#include "org/junit/AssumptionViolatedException.h"
#include "org/junit/internal/AssumptionViolatedException.h"

inline jlong OrgJunitAssumptionViolatedException_get_serialVersionUID();
#define OrgJunitAssumptionViolatedException_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJunitAssumptionViolatedException, serialVersionUID, jlong)

@implementation OrgJunitAssumptionViolatedException

- (instancetype)initWithId:(id)actual
    withOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher {
  OrgJunitAssumptionViolatedException_initWithId_withOrgHamcrestMatcher_(self, actual, matcher);
  return self;
}

- (instancetype)initWithNSString:(NSString *)message
                          withId:(id)expected
          withOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher {
  OrgJunitAssumptionViolatedException_initWithNSString_withId_withOrgHamcrestMatcher_(self, message, expected, matcher);
  return self;
}

- (instancetype)initWithNSString:(NSString *)message {
  OrgJunitAssumptionViolatedException_initWithNSString_(self, message);
  return self;
}

- (instancetype)initWithNSString:(NSString *)assumption
                 withNSException:(NSException *)t {
  OrgJunitAssumptionViolatedException_initWithNSString_withNSException_(self, assumption, t);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:withOrgHamcrestMatcher:);
  methods[1].selector = @selector(initWithNSString:withId:withOrgHamcrestMatcher:);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withNSException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJunitAssumptionViolatedException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;LOrgHamcrestMatcher;", "<T:Ljava/lang/Object;>(TT;Lorg/hamcrest/Matcher<TT;>;)V", "LNSString;LNSObject;LOrgHamcrestMatcher;", "<T:Ljava/lang/Object;>(Ljava/lang/String;TT;Lorg/hamcrest/Matcher<TT;>;)V", "LNSString;", "LNSString;LNSException;" };
  static const J2ObjcClassInfo _OrgJunitAssumptionViolatedException = { "AssumptionViolatedException", "org.junit", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_OrgJunitAssumptionViolatedException;
}

@end

void OrgJunitAssumptionViolatedException_initWithId_withOrgHamcrestMatcher_(OrgJunitAssumptionViolatedException *self, id actual, id<OrgHamcrestMatcher> matcher) {
  OrgJunitInternalAssumptionViolatedException_initWithId_withOrgHamcrestMatcher_(self, actual, matcher);
}

OrgJunitAssumptionViolatedException *new_OrgJunitAssumptionViolatedException_initWithId_withOrgHamcrestMatcher_(id actual, id<OrgHamcrestMatcher> matcher) {
  J2OBJC_NEW_IMPL(OrgJunitAssumptionViolatedException, initWithId_withOrgHamcrestMatcher_, actual, matcher)
}

OrgJunitAssumptionViolatedException *create_OrgJunitAssumptionViolatedException_initWithId_withOrgHamcrestMatcher_(id actual, id<OrgHamcrestMatcher> matcher) {
  J2OBJC_CREATE_IMPL(OrgJunitAssumptionViolatedException, initWithId_withOrgHamcrestMatcher_, actual, matcher)
}

void OrgJunitAssumptionViolatedException_initWithNSString_withId_withOrgHamcrestMatcher_(OrgJunitAssumptionViolatedException *self, NSString *message, id expected, id<OrgHamcrestMatcher> matcher) {
  OrgJunitInternalAssumptionViolatedException_initWithNSString_withId_withOrgHamcrestMatcher_(self, message, expected, matcher);
}

OrgJunitAssumptionViolatedException *new_OrgJunitAssumptionViolatedException_initWithNSString_withId_withOrgHamcrestMatcher_(NSString *message, id expected, id<OrgHamcrestMatcher> matcher) {
  J2OBJC_NEW_IMPL(OrgJunitAssumptionViolatedException, initWithNSString_withId_withOrgHamcrestMatcher_, message, expected, matcher)
}

OrgJunitAssumptionViolatedException *create_OrgJunitAssumptionViolatedException_initWithNSString_withId_withOrgHamcrestMatcher_(NSString *message, id expected, id<OrgHamcrestMatcher> matcher) {
  J2OBJC_CREATE_IMPL(OrgJunitAssumptionViolatedException, initWithNSString_withId_withOrgHamcrestMatcher_, message, expected, matcher)
}

void OrgJunitAssumptionViolatedException_initWithNSString_(OrgJunitAssumptionViolatedException *self, NSString *message) {
  OrgJunitInternalAssumptionViolatedException_initWithNSString_(self, message);
}

OrgJunitAssumptionViolatedException *new_OrgJunitAssumptionViolatedException_initWithNSString_(NSString *message) {
  J2OBJC_NEW_IMPL(OrgJunitAssumptionViolatedException, initWithNSString_, message)
}

OrgJunitAssumptionViolatedException *create_OrgJunitAssumptionViolatedException_initWithNSString_(NSString *message) {
  J2OBJC_CREATE_IMPL(OrgJunitAssumptionViolatedException, initWithNSString_, message)
}

void OrgJunitAssumptionViolatedException_initWithNSString_withNSException_(OrgJunitAssumptionViolatedException *self, NSString *assumption, NSException *t) {
  OrgJunitInternalAssumptionViolatedException_initWithNSString_withNSException_(self, assumption, t);
}

OrgJunitAssumptionViolatedException *new_OrgJunitAssumptionViolatedException_initWithNSString_withNSException_(NSString *assumption, NSException *t) {
  J2OBJC_NEW_IMPL(OrgJunitAssumptionViolatedException, initWithNSString_withNSException_, assumption, t)
}

OrgJunitAssumptionViolatedException *create_OrgJunitAssumptionViolatedException_initWithNSString_withNSException_(NSString *assumption, NSException *t) {
  J2OBJC_CREATE_IMPL(OrgJunitAssumptionViolatedException, initWithNSString_withNSException_, assumption, t)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitAssumptionViolatedException)
