//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/validator/PublicClassValidator.java
//

#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "org/junit/runners/model/TestClass.h"
#include "org/junit/validator/PublicClassValidator.h"

inline id<JavaUtilList> OrgJunitValidatorPublicClassValidator_get_NO_VALIDATION_ERRORS();
static id<JavaUtilList> OrgJunitValidatorPublicClassValidator_NO_VALIDATION_ERRORS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJunitValidatorPublicClassValidator, NO_VALIDATION_ERRORS, id<JavaUtilList>)

J2OBJC_INITIALIZED_DEFN(OrgJunitValidatorPublicClassValidator)

@implementation OrgJunitValidatorPublicClassValidator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJunitValidatorPublicClassValidator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilList>)validateTestClassWithOrgJunitRunnersModelTestClass:(OrgJunitRunnersModelTestClass *)testClass {
  if ([((OrgJunitRunnersModelTestClass *) nil_chk(testClass)) isPublic]) {
    return OrgJunitValidatorPublicClassValidator_NO_VALIDATION_ERRORS;
  }
  else {
    return JavaUtilCollections_singletonListWithId_(create_JavaLangException_initWithNSString_(JreStrcat("$$$", @"The class ", [testClass getName], @" is not public.")));
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(validateTestClassWithOrgJunitRunnersModelTestClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NO_VALIDATION_ERRORS", "LJavaUtilList;", .constantValue.asLong = 0, 0x1a, -1, 3, 4, -1 },
  };
  static const void *ptrTable[] = { "validateTestClass", "LOrgJunitRunnersModelTestClass;", "(Lorg/junit/runners/model/TestClass;)Ljava/util/List<Ljava/lang/Exception;>;", &OrgJunitValidatorPublicClassValidator_NO_VALIDATION_ERRORS, "Ljava/util/List<Ljava/lang/Exception;>;" };
  static const J2ObjcClassInfo _OrgJunitValidatorPublicClassValidator = { "PublicClassValidator", "org.junit.validator", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_OrgJunitValidatorPublicClassValidator;
}

+ (void)initialize {
  if (self == [OrgJunitValidatorPublicClassValidator class]) {
    JreStrongAssign(&OrgJunitValidatorPublicClassValidator_NO_VALIDATION_ERRORS, JavaUtilCollections_emptyList());
    J2OBJC_SET_INITIALIZED(OrgJunitValidatorPublicClassValidator)
  }
}

@end

void OrgJunitValidatorPublicClassValidator_init(OrgJunitValidatorPublicClassValidator *self) {
  NSObject_init(self);
}

OrgJunitValidatorPublicClassValidator *new_OrgJunitValidatorPublicClassValidator_init() {
  J2OBJC_NEW_IMPL(OrgJunitValidatorPublicClassValidator, init)
}

OrgJunitValidatorPublicClassValidator *create_OrgJunitValidatorPublicClassValidator_init() {
  J2OBJC_CREATE_IMPL(OrgJunitValidatorPublicClassValidator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitValidatorPublicClassValidator)
