//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/internal/matchers/ThrowableMessageMatcher.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/annotation/Annotation.h"
#include "org/hamcrest/Description.h"
#include "org/hamcrest/Factory.h"
#include "org/hamcrest/Matcher.h"
#include "org/hamcrest/TypeSafeMatcher.h"
#include "org/junit/internal/matchers/ThrowableMessageMatcher.h"

@interface OrgJunitInternalMatchersThrowableMessageMatcher () {
 @public
  id<OrgHamcrestMatcher> matcher_;
}

@end

J2OBJC_FIELD_SETTER(OrgJunitInternalMatchersThrowableMessageMatcher, matcher_, id<OrgHamcrestMatcher>)

__attribute__((unused)) static IOSObjectArray *OrgJunitInternalMatchersThrowableMessageMatcher__Annotations$0();

@implementation OrgJunitInternalMatchersThrowableMessageMatcher

- (instancetype)initWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher {
  OrgJunitInternalMatchersThrowableMessageMatcher_initWithOrgHamcrestMatcher_(self, matcher);
  return self;
}

- (void)describeToWithOrgHamcrestDescription:(id<OrgHamcrestDescription>)description_ {
  [((id<OrgHamcrestDescription>) nil_chk(description_)) appendTextWithNSString:@"exception with message "];
  [description_ appendDescriptionOfWithOrgHamcrestSelfDescribing:matcher_];
}

- (jboolean)matchesSafelyWithId:(NSException *)item {
  return [((id<OrgHamcrestMatcher>) nil_chk(matcher_)) matchesWithId:[((NSException *) nil_chk(item)) getMessage]];
}

- (void)describeMismatchSafelyWithId:(NSException *)item
          withOrgHamcrestDescription:(id<OrgHamcrestDescription>)description_ {
  [((id<OrgHamcrestDescription>) nil_chk(description_)) appendTextWithNSString:@"message "];
  [((id<OrgHamcrestMatcher>) nil_chk(matcher_)) describeMismatchWithId:[((NSException *) nil_chk(item)) getMessage] withOrgHamcrestDescription:description_];
}

+ (id<OrgHamcrestMatcher>)hasMessageWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher {
  return OrgJunitInternalMatchersThrowableMessageMatcher_hasMessageWithOrgHamcrestMatcher_(matcher);
}

- (void)dealloc {
  RELEASE_(matcher_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x4, 7, 8, -1, 9, -1, -1 },
    { NULL, "LOrgHamcrestMatcher;", 0x9, 10, 0, -1, 11, 12, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgHamcrestMatcher:);
  methods[1].selector = @selector(describeToWithOrgHamcrestDescription:);
  methods[2].selector = @selector(matchesSafelyWithId:);
  methods[3].selector = @selector(describeMismatchSafelyWithId:withOrgHamcrestDescription:);
  methods[4].selector = @selector(hasMessageWithOrgHamcrestMatcher:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "matcher_", "LOrgHamcrestMatcher;", .constantValue.asLong = 0, 0x12, -1, -1, 13, -1 },
  };
  static const void *ptrTable[] = { "LOrgHamcrestMatcher;", "(Lorg/hamcrest/Matcher<Ljava/lang/String;>;)V", "describeTo", "LOrgHamcrestDescription;", "matchesSafely", "LNSException;", "(TT;)Z", "describeMismatchSafely", "LNSException;LOrgHamcrestDescription;", "(TT;Lorg/hamcrest/Description;)V", "hasMessage", "<T:Ljava/lang/Throwable;>(Lorg/hamcrest/Matcher<Ljava/lang/String;>;)Lorg/hamcrest/Matcher<TT;>;", (void *)&OrgJunitInternalMatchersThrowableMessageMatcher__Annotations$0, "Lorg/hamcrest/Matcher<Ljava/lang/String;>;", "<T:Ljava/lang/Throwable;>Lorg/hamcrest/TypeSafeMatcher<TT;>;" };
  static const J2ObjcClassInfo _OrgJunitInternalMatchersThrowableMessageMatcher = { "ThrowableMessageMatcher", "org.junit.internal.matchers", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, 14, -1 };
  return &_OrgJunitInternalMatchersThrowableMessageMatcher;
}

@end

void OrgJunitInternalMatchersThrowableMessageMatcher_initWithOrgHamcrestMatcher_(OrgJunitInternalMatchersThrowableMessageMatcher *self, id<OrgHamcrestMatcher> matcher) {
  OrgHamcrestTypeSafeMatcher_init(self);
  JreStrongAssign(&self->matcher_, matcher);
}

OrgJunitInternalMatchersThrowableMessageMatcher *new_OrgJunitInternalMatchersThrowableMessageMatcher_initWithOrgHamcrestMatcher_(id<OrgHamcrestMatcher> matcher) {
  J2OBJC_NEW_IMPL(OrgJunitInternalMatchersThrowableMessageMatcher, initWithOrgHamcrestMatcher_, matcher)
}

OrgJunitInternalMatchersThrowableMessageMatcher *create_OrgJunitInternalMatchersThrowableMessageMatcher_initWithOrgHamcrestMatcher_(id<OrgHamcrestMatcher> matcher) {
  J2OBJC_CREATE_IMPL(OrgJunitInternalMatchersThrowableMessageMatcher, initWithOrgHamcrestMatcher_, matcher)
}

id<OrgHamcrestMatcher> OrgJunitInternalMatchersThrowableMessageMatcher_hasMessageWithOrgHamcrestMatcher_(id<OrgHamcrestMatcher> matcher) {
  OrgJunitInternalMatchersThrowableMessageMatcher_initialize();
  return create_OrgJunitInternalMatchersThrowableMessageMatcher_initWithOrgHamcrestMatcher_(matcher);
}

IOSObjectArray *OrgJunitInternalMatchersThrowableMessageMatcher__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgHamcrestFactory() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitInternalMatchersThrowableMessageMatcher)
