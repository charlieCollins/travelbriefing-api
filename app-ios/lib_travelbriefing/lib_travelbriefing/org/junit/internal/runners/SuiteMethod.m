//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/internal/runners/SuiteMethod.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Modifier.h"
#include "junit/framework/Test.h"
#include "org/junit/internal/runners/JUnit38ClassRunner.h"
#include "org/junit/internal/runners/SuiteMethod.h"

@implementation OrgJunitInternalRunnersSuiteMethod

- (instancetype)initWithIOSClass:(IOSClass *)klass {
  OrgJunitInternalRunnersSuiteMethod_initWithIOSClass_(self, klass);
  return self;
}

+ (id<JunitFrameworkTest>)testFromSuiteMethodWithIOSClass:(IOSClass *)klass {
  return OrgJunitInternalRunnersSuiteMethod_testFromSuiteMethodWithIOSClass_(klass);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, 2, -1, -1 },
    { NULL, "LJunitFrameworkTest;", 0x9, 3, 0, 1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIOSClass:);
  methods[1].selector = @selector(testFromSuiteMethodWithIOSClass:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LIOSClass;", "LNSException;", "(Ljava/lang/Class<*>;)V", "testFromSuiteMethod", "(Ljava/lang/Class<*>;)Ljunit/framework/Test;" };
  static const J2ObjcClassInfo _OrgJunitInternalRunnersSuiteMethod = { "SuiteMethod", "org.junit.internal.runners", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgJunitInternalRunnersSuiteMethod;
}

@end

void OrgJunitInternalRunnersSuiteMethod_initWithIOSClass_(OrgJunitInternalRunnersSuiteMethod *self, IOSClass *klass) {
  OrgJunitInternalRunnersJUnit38ClassRunner_initWithJunitFrameworkTest_(self, OrgJunitInternalRunnersSuiteMethod_testFromSuiteMethodWithIOSClass_(klass));
}

OrgJunitInternalRunnersSuiteMethod *new_OrgJunitInternalRunnersSuiteMethod_initWithIOSClass_(IOSClass *klass) {
  J2OBJC_NEW_IMPL(OrgJunitInternalRunnersSuiteMethod, initWithIOSClass_, klass)
}

OrgJunitInternalRunnersSuiteMethod *create_OrgJunitInternalRunnersSuiteMethod_initWithIOSClass_(IOSClass *klass) {
  J2OBJC_CREATE_IMPL(OrgJunitInternalRunnersSuiteMethod, initWithIOSClass_, klass)
}

id<JunitFrameworkTest> OrgJunitInternalRunnersSuiteMethod_testFromSuiteMethodWithIOSClass_(IOSClass *klass) {
  OrgJunitInternalRunnersSuiteMethod_initialize();
  JavaLangReflectMethod *suiteMethod = nil;
  id<JunitFrameworkTest> suite = nil;
  @try {
    suiteMethod = [((IOSClass *) nil_chk(klass)) getMethod:@"suite" parameterTypes:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]];
    if (!JavaLangReflectModifier_isStaticWithInt_([((JavaLangReflectMethod *) nil_chk(suiteMethod)) getModifiers])) {
      @throw create_JavaLangException_initWithNSString_(JreStrcat("$$", [klass getName], @".suite() must be static"));
    }
    suite = (id<JunitFrameworkTest>) cast_check([suiteMethod invokeWithId:nil withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]], JunitFrameworkTest_class_());
  }
  @catch (JavaLangReflectInvocationTargetException *e) {
    @throw [((JavaLangReflectInvocationTargetException *) nil_chk(e)) getCause];
  }
  return suite;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitInternalRunnersSuiteMethod)
