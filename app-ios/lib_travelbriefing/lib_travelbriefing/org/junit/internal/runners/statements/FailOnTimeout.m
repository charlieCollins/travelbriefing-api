//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/internal/runners/statements/FailOnTimeout.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/SecurityException.h"
#include "java/lang/StackTraceElement.h"
#include "java/lang/Thread.h"
#include "java/lang/ThreadGroup.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/ExecutionException.h"
#include "java/util/concurrent/FutureTask.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/TimeoutException.h"
#include "org/junit/internal/runners/statements/FailOnTimeout.h"
#include "org/junit/runners/model/MultipleFailureException.h"
#include "org/junit/runners/model/Statement.h"
#include "org/junit/runners/model/TestTimedOutException.h"

@interface OrgJunitInternalRunnersStatementsFailOnTimeout () {
 @public
  OrgJunitRunnersModelStatement *originalStatement_;
  JavaUtilConcurrentTimeUnit *timeUnit_;
  jlong timeout_;
  jboolean lookForStuckThread_;
  volatile_id threadGroup_;
}

- (instancetype)initWithOrgJunitInternalRunnersStatementsFailOnTimeout_Builder:(OrgJunitInternalRunnersStatementsFailOnTimeout_Builder *)builder
                                             withOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)statement;

- (NSException *)getResultWithJavaUtilConcurrentFutureTask:(JavaUtilConcurrentFutureTask *)task
                                        withJavaLangThread:(JavaLangThread *)thread;

- (JavaLangException *)createTimeoutExceptionWithJavaLangThread:(JavaLangThread *)thread;

- (IOSObjectArray *)getStackTraceWithJavaLangThread:(JavaLangThread *)thread;

- (JavaLangThread *)getStuckThreadWithJavaLangThread:(JavaLangThread *)mainThread;

- (IOSObjectArray *)getThreadArrayWithJavaLangThreadGroup:(JavaLangThreadGroup *)group;

- (IOSObjectArray *)copyThreadsWithJavaLangThreadArray:(IOSObjectArray *)threads
                                               withInt:(jint)count OBJC_METHOD_FAMILY_NONE;

- (jlong)cpuTimeWithJavaLangThread:(JavaLangThread *)thr;

@end

J2OBJC_FIELD_SETTER(OrgJunitInternalRunnersStatementsFailOnTimeout, originalStatement_, OrgJunitRunnersModelStatement *)
J2OBJC_FIELD_SETTER(OrgJunitInternalRunnersStatementsFailOnTimeout, timeUnit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_VOLATILE_FIELD_SETTER(OrgJunitInternalRunnersStatementsFailOnTimeout, threadGroup_, JavaLangThreadGroup *)

__attribute__((unused)) static void OrgJunitInternalRunnersStatementsFailOnTimeout_initWithOrgJunitInternalRunnersStatementsFailOnTimeout_Builder_withOrgJunitRunnersModelStatement_(OrgJunitInternalRunnersStatementsFailOnTimeout *self, OrgJunitInternalRunnersStatementsFailOnTimeout_Builder *builder, OrgJunitRunnersModelStatement *statement);

__attribute__((unused)) static OrgJunitInternalRunnersStatementsFailOnTimeout *new_OrgJunitInternalRunnersStatementsFailOnTimeout_initWithOrgJunitInternalRunnersStatementsFailOnTimeout_Builder_withOrgJunitRunnersModelStatement_(OrgJunitInternalRunnersStatementsFailOnTimeout_Builder *builder, OrgJunitRunnersModelStatement *statement) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJunitInternalRunnersStatementsFailOnTimeout *create_OrgJunitInternalRunnersStatementsFailOnTimeout_initWithOrgJunitInternalRunnersStatementsFailOnTimeout_Builder_withOrgJunitRunnersModelStatement_(OrgJunitInternalRunnersStatementsFailOnTimeout_Builder *builder, OrgJunitRunnersModelStatement *statement);

__attribute__((unused)) static NSException *OrgJunitInternalRunnersStatementsFailOnTimeout_getResultWithJavaUtilConcurrentFutureTask_withJavaLangThread_(OrgJunitInternalRunnersStatementsFailOnTimeout *self, JavaUtilConcurrentFutureTask *task, JavaLangThread *thread);

__attribute__((unused)) static JavaLangException *OrgJunitInternalRunnersStatementsFailOnTimeout_createTimeoutExceptionWithJavaLangThread_(OrgJunitInternalRunnersStatementsFailOnTimeout *self, JavaLangThread *thread);

__attribute__((unused)) static IOSObjectArray *OrgJunitInternalRunnersStatementsFailOnTimeout_getStackTraceWithJavaLangThread_(OrgJunitInternalRunnersStatementsFailOnTimeout *self, JavaLangThread *thread);

__attribute__((unused)) static JavaLangThread *OrgJunitInternalRunnersStatementsFailOnTimeout_getStuckThreadWithJavaLangThread_(OrgJunitInternalRunnersStatementsFailOnTimeout *self, JavaLangThread *mainThread);

__attribute__((unused)) static IOSObjectArray *OrgJunitInternalRunnersStatementsFailOnTimeout_getThreadArrayWithJavaLangThreadGroup_(OrgJunitInternalRunnersStatementsFailOnTimeout *self, JavaLangThreadGroup *group);

__attribute__((unused)) static IOSObjectArray *OrgJunitInternalRunnersStatementsFailOnTimeout_copyThreadsWithJavaLangThreadArray_withInt_(OrgJunitInternalRunnersStatementsFailOnTimeout *self, IOSObjectArray *threads, jint count);

__attribute__((unused)) static jlong OrgJunitInternalRunnersStatementsFailOnTimeout_cpuTimeWithJavaLangThread_(OrgJunitInternalRunnersStatementsFailOnTimeout *self, JavaLangThread *thr);

__attribute__((unused)) static IOSObjectArray *OrgJunitInternalRunnersStatementsFailOnTimeout__Annotations$0();

@interface OrgJunitInternalRunnersStatementsFailOnTimeout_Builder () {
 @public
  jboolean lookForStuckThread_;
  jlong timeout_;
  JavaUtilConcurrentTimeUnit *unit_;
}

- (instancetype)init;

@end

J2OBJC_FIELD_SETTER(OrgJunitInternalRunnersStatementsFailOnTimeout_Builder, unit_, JavaUtilConcurrentTimeUnit *)

__attribute__((unused)) static void OrgJunitInternalRunnersStatementsFailOnTimeout_Builder_init(OrgJunitInternalRunnersStatementsFailOnTimeout_Builder *self);

__attribute__((unused)) static OrgJunitInternalRunnersStatementsFailOnTimeout_Builder *new_OrgJunitInternalRunnersStatementsFailOnTimeout_Builder_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJunitInternalRunnersStatementsFailOnTimeout_Builder *create_OrgJunitInternalRunnersStatementsFailOnTimeout_Builder_init();

@interface OrgJunitInternalRunnersStatementsFailOnTimeout_CallableStatement : NSObject < JavaUtilConcurrentCallable > {
 @public
  OrgJunitInternalRunnersStatementsFailOnTimeout *this$0_;
  JavaUtilConcurrentCountDownLatch *startLatch_;
}

- (instancetype)initWithOrgJunitInternalRunnersStatementsFailOnTimeout:(OrgJunitInternalRunnersStatementsFailOnTimeout *)outer$;

- (NSException *)call;

- (void)awaitStarted;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitInternalRunnersStatementsFailOnTimeout_CallableStatement)

J2OBJC_FIELD_SETTER(OrgJunitInternalRunnersStatementsFailOnTimeout_CallableStatement, startLatch_, JavaUtilConcurrentCountDownLatch *)

__attribute__((unused)) static void OrgJunitInternalRunnersStatementsFailOnTimeout_CallableStatement_initWithOrgJunitInternalRunnersStatementsFailOnTimeout_(OrgJunitInternalRunnersStatementsFailOnTimeout_CallableStatement *self, OrgJunitInternalRunnersStatementsFailOnTimeout *outer$);

__attribute__((unused)) static OrgJunitInternalRunnersStatementsFailOnTimeout_CallableStatement *new_OrgJunitInternalRunnersStatementsFailOnTimeout_CallableStatement_initWithOrgJunitInternalRunnersStatementsFailOnTimeout_(OrgJunitInternalRunnersStatementsFailOnTimeout *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJunitInternalRunnersStatementsFailOnTimeout_CallableStatement *create_OrgJunitInternalRunnersStatementsFailOnTimeout_CallableStatement_initWithOrgJunitInternalRunnersStatementsFailOnTimeout_(OrgJunitInternalRunnersStatementsFailOnTimeout *outer$);

J2OBJC_TYPE_LITERAL_HEADER(OrgJunitInternalRunnersStatementsFailOnTimeout_CallableStatement)

@implementation OrgJunitInternalRunnersStatementsFailOnTimeout

+ (OrgJunitInternalRunnersStatementsFailOnTimeout_Builder *)builder {
  return OrgJunitInternalRunnersStatementsFailOnTimeout_builder();
}

- (instancetype)initWithOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)statement
                                             withLong:(jlong)timeoutMillis {
  OrgJunitInternalRunnersStatementsFailOnTimeout_initWithOrgJunitRunnersModelStatement_withLong_(self, statement, timeoutMillis);
  return self;
}

- (instancetype)initWithOrgJunitInternalRunnersStatementsFailOnTimeout_Builder:(OrgJunitInternalRunnersStatementsFailOnTimeout_Builder *)builder
                                             withOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)statement {
  OrgJunitInternalRunnersStatementsFailOnTimeout_initWithOrgJunitInternalRunnersStatementsFailOnTimeout_Builder_withOrgJunitRunnersModelStatement_(self, builder, statement);
  return self;
}

- (void)evaluate {
  OrgJunitInternalRunnersStatementsFailOnTimeout_CallableStatement *callable = create_OrgJunitInternalRunnersStatementsFailOnTimeout_CallableStatement_initWithOrgJunitInternalRunnersStatementsFailOnTimeout_(self);
  JavaUtilConcurrentFutureTask *task = create_JavaUtilConcurrentFutureTask_initWithJavaUtilConcurrentCallable_(callable);
  JreVolatileStrongAssign(&threadGroup_, create_JavaLangThreadGroup_initWithNSString_(@"FailOnTimeoutGroup"));
  JavaLangThread *thread = create_JavaLangThread_initWithJavaLangThreadGroup_withJavaLangRunnable_withNSString_(JreLoadVolatileId(&threadGroup_), task, @"Time-limited test");
  [thread setDaemonWithBoolean:true];
  [thread start];
  [callable awaitStarted];
  NSException *throwable = OrgJunitInternalRunnersStatementsFailOnTimeout_getResultWithJavaUtilConcurrentFutureTask_withJavaLangThread_(self, task, thread);
  if (throwable != nil) {
    @throw throwable;
  }
}

- (NSException *)getResultWithJavaUtilConcurrentFutureTask:(JavaUtilConcurrentFutureTask *)task
                                        withJavaLangThread:(JavaLangThread *)thread {
  return OrgJunitInternalRunnersStatementsFailOnTimeout_getResultWithJavaUtilConcurrentFutureTask_withJavaLangThread_(self, task, thread);
}

- (JavaLangException *)createTimeoutExceptionWithJavaLangThread:(JavaLangThread *)thread {
  return OrgJunitInternalRunnersStatementsFailOnTimeout_createTimeoutExceptionWithJavaLangThread_(self, thread);
}

- (IOSObjectArray *)getStackTraceWithJavaLangThread:(JavaLangThread *)thread {
  return OrgJunitInternalRunnersStatementsFailOnTimeout_getStackTraceWithJavaLangThread_(self, thread);
}

- (JavaLangThread *)getStuckThreadWithJavaLangThread:(JavaLangThread *)mainThread {
  return OrgJunitInternalRunnersStatementsFailOnTimeout_getStuckThreadWithJavaLangThread_(self, mainThread);
}

- (IOSObjectArray *)getThreadArrayWithJavaLangThreadGroup:(JavaLangThreadGroup *)group {
  return OrgJunitInternalRunnersStatementsFailOnTimeout_getThreadArrayWithJavaLangThreadGroup_(self, group);
}

- (IOSObjectArray *)copyThreadsWithJavaLangThreadArray:(IOSObjectArray *)threads
                                               withInt:(jint)count {
  return OrgJunitInternalRunnersStatementsFailOnTimeout_copyThreadsWithJavaLangThreadArray_withInt_(self, threads, count);
}

- (jlong)cpuTimeWithJavaLangThread:(JavaLangThread *)thr {
  return OrgJunitInternalRunnersStatementsFailOnTimeout_cpuTimeWithJavaLangThread_(self, thr);
}

- (void)__javaClone:(OrgJunitInternalRunnersStatementsFailOnTimeout *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&threadGroup_, &original->threadGroup_);
}

- (void)dealloc {
  RELEASE_(originalStatement_);
  RELEASE_(timeUnit_);
  JreReleaseVolatile(&threadGroup_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgJunitInternalRunnersStatementsFailOnTimeout_Builder;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, 1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LNSException;", 0x2, 4, 5, -1, 6, -1, -1 },
    { NULL, "LJavaLangException;", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "[LJavaLangStackTraceElement;", 0x2, 9, 8, -1, -1, -1, -1 },
    { NULL, "LJavaLangThread;", 0x2, 10, 8, -1, -1, -1, -1 },
    { NULL, "[LJavaLangThread;", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "[LJavaLangThread;", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "J", 0x2, 15, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(builder);
  methods[1].selector = @selector(initWithOrgJunitRunnersModelStatement:withLong:);
  methods[2].selector = @selector(initWithOrgJunitInternalRunnersStatementsFailOnTimeout_Builder:withOrgJunitRunnersModelStatement:);
  methods[3].selector = @selector(evaluate);
  methods[4].selector = @selector(getResultWithJavaUtilConcurrentFutureTask:withJavaLangThread:);
  methods[5].selector = @selector(createTimeoutExceptionWithJavaLangThread:);
  methods[6].selector = @selector(getStackTraceWithJavaLangThread:);
  methods[7].selector = @selector(getStuckThreadWithJavaLangThread:);
  methods[8].selector = @selector(getThreadArrayWithJavaLangThreadGroup:);
  methods[9].selector = @selector(copyThreadsWithJavaLangThreadArray:withInt:);
  methods[10].selector = @selector(cpuTimeWithJavaLangThread:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "originalStatement_", "LOrgJunitRunnersModelStatement;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "timeUnit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "timeout_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lookForStuckThread_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "threadGroup_", "LJavaLangThreadGroup;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJunitRunnersModelStatement;J", (void *)&OrgJunitInternalRunnersStatementsFailOnTimeout__Annotations$0, "LOrgJunitInternalRunnersStatementsFailOnTimeout_Builder;LOrgJunitRunnersModelStatement;", "LNSException;", "getResult", "LJavaUtilConcurrentFutureTask;LJavaLangThread;", "(Ljava/util/concurrent/FutureTask<Ljava/lang/Throwable;>;Ljava/lang/Thread;)Ljava/lang/Throwable;", "createTimeoutException", "LJavaLangThread;", "getStackTrace", "getStuckThread", "getThreadArray", "LJavaLangThreadGroup;", "copyThreads", "[LJavaLangThread;I", "cpuTime", "LOrgJunitInternalRunnersStatementsFailOnTimeout_Builder;LOrgJunitInternalRunnersStatementsFailOnTimeout_CallableStatement;" };
  static const J2ObjcClassInfo _OrgJunitInternalRunnersStatementsFailOnTimeout = { "FailOnTimeout", "org.junit.internal.runners.statements", ptrTable, methods, fields, 7, 0x1, 11, 5, -1, 16, -1, -1, -1 };
  return &_OrgJunitInternalRunnersStatementsFailOnTimeout;
}

@end

OrgJunitInternalRunnersStatementsFailOnTimeout_Builder *OrgJunitInternalRunnersStatementsFailOnTimeout_builder() {
  OrgJunitInternalRunnersStatementsFailOnTimeout_initialize();
  return create_OrgJunitInternalRunnersStatementsFailOnTimeout_Builder_init();
}

void OrgJunitInternalRunnersStatementsFailOnTimeout_initWithOrgJunitRunnersModelStatement_withLong_(OrgJunitInternalRunnersStatementsFailOnTimeout *self, OrgJunitRunnersModelStatement *statement, jlong timeoutMillis) {
  OrgJunitInternalRunnersStatementsFailOnTimeout_initWithOrgJunitInternalRunnersStatementsFailOnTimeout_Builder_withOrgJunitRunnersModelStatement_(self, [((OrgJunitInternalRunnersStatementsFailOnTimeout_Builder *) nil_chk(OrgJunitInternalRunnersStatementsFailOnTimeout_builder())) withTimeoutWithLong:timeoutMillis withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)], statement);
}

OrgJunitInternalRunnersStatementsFailOnTimeout *new_OrgJunitInternalRunnersStatementsFailOnTimeout_initWithOrgJunitRunnersModelStatement_withLong_(OrgJunitRunnersModelStatement *statement, jlong timeoutMillis) {
  J2OBJC_NEW_IMPL(OrgJunitInternalRunnersStatementsFailOnTimeout, initWithOrgJunitRunnersModelStatement_withLong_, statement, timeoutMillis)
}

OrgJunitInternalRunnersStatementsFailOnTimeout *create_OrgJunitInternalRunnersStatementsFailOnTimeout_initWithOrgJunitRunnersModelStatement_withLong_(OrgJunitRunnersModelStatement *statement, jlong timeoutMillis) {
  J2OBJC_CREATE_IMPL(OrgJunitInternalRunnersStatementsFailOnTimeout, initWithOrgJunitRunnersModelStatement_withLong_, statement, timeoutMillis)
}

void OrgJunitInternalRunnersStatementsFailOnTimeout_initWithOrgJunitInternalRunnersStatementsFailOnTimeout_Builder_withOrgJunitRunnersModelStatement_(OrgJunitInternalRunnersStatementsFailOnTimeout *self, OrgJunitInternalRunnersStatementsFailOnTimeout_Builder *builder, OrgJunitRunnersModelStatement *statement) {
  OrgJunitRunnersModelStatement_init(self);
  JreVolatileStrongAssign(&self->threadGroup_, nil);
  JreStrongAssign(&self->originalStatement_, statement);
  self->timeout_ = ((OrgJunitInternalRunnersStatementsFailOnTimeout_Builder *) nil_chk(builder))->timeout_;
  JreStrongAssign(&self->timeUnit_, builder->unit_);
  self->lookForStuckThread_ = builder->lookForStuckThread_;
}

OrgJunitInternalRunnersStatementsFailOnTimeout *new_OrgJunitInternalRunnersStatementsFailOnTimeout_initWithOrgJunitInternalRunnersStatementsFailOnTimeout_Builder_withOrgJunitRunnersModelStatement_(OrgJunitInternalRunnersStatementsFailOnTimeout_Builder *builder, OrgJunitRunnersModelStatement *statement) {
  J2OBJC_NEW_IMPL(OrgJunitInternalRunnersStatementsFailOnTimeout, initWithOrgJunitInternalRunnersStatementsFailOnTimeout_Builder_withOrgJunitRunnersModelStatement_, builder, statement)
}

OrgJunitInternalRunnersStatementsFailOnTimeout *create_OrgJunitInternalRunnersStatementsFailOnTimeout_initWithOrgJunitInternalRunnersStatementsFailOnTimeout_Builder_withOrgJunitRunnersModelStatement_(OrgJunitInternalRunnersStatementsFailOnTimeout_Builder *builder, OrgJunitRunnersModelStatement *statement) {
  J2OBJC_CREATE_IMPL(OrgJunitInternalRunnersStatementsFailOnTimeout, initWithOrgJunitInternalRunnersStatementsFailOnTimeout_Builder_withOrgJunitRunnersModelStatement_, builder, statement)
}

NSException *OrgJunitInternalRunnersStatementsFailOnTimeout_getResultWithJavaUtilConcurrentFutureTask_withJavaLangThread_(OrgJunitInternalRunnersStatementsFailOnTimeout *self, JavaUtilConcurrentFutureTask *task, JavaLangThread *thread) {
  @try {
    if (self->timeout_ > 0) {
      return [((JavaUtilConcurrentFutureTask *) nil_chk(task)) getWithLong:self->timeout_ withJavaUtilConcurrentTimeUnit:self->timeUnit_];
    }
    else {
      return [((JavaUtilConcurrentFutureTask *) nil_chk(task)) get];
    }
  }
  @catch (JavaLangInterruptedException *e) {
    return e;
  }
  @catch (JavaUtilConcurrentExecutionException *e) {
    return [((JavaUtilConcurrentExecutionException *) nil_chk(e)) getCause];
  }
  @catch (JavaUtilConcurrentTimeoutException *e) {
    return OrgJunitInternalRunnersStatementsFailOnTimeout_createTimeoutExceptionWithJavaLangThread_(self, thread);
  }
}

JavaLangException *OrgJunitInternalRunnersStatementsFailOnTimeout_createTimeoutExceptionWithJavaLangThread_(OrgJunitInternalRunnersStatementsFailOnTimeout *self, JavaLangThread *thread) {
  IOSObjectArray *stackTrace = [((JavaLangThread *) nil_chk(thread)) getStackTrace];
  JavaLangThread *stuckThread = self->lookForStuckThread_ ? OrgJunitInternalRunnersStatementsFailOnTimeout_getStuckThreadWithJavaLangThread_(self, thread) : nil;
  JavaLangException *currThreadException = create_OrgJunitRunnersModelTestTimedOutException_initWithLong_withJavaUtilConcurrentTimeUnit_(self->timeout_, self->timeUnit_);
  if (stackTrace != nil) {
    [currThreadException setStackTraceWithJavaLangStackTraceElementArray:stackTrace];
    [thread interrupt];
  }
  if (stuckThread != nil) {
    JavaLangException *stuckThreadException = create_JavaLangException_initWithNSString_(JreStrcat("$$", @"Appears to be stuck in thread ", [stuckThread getName]));
    [stuckThreadException setStackTraceWithJavaLangStackTraceElementArray:OrgJunitInternalRunnersStatementsFailOnTimeout_getStackTraceWithJavaLangThread_(self, stuckThread)];
    return create_OrgJunitRunnersModelMultipleFailureException_initWithJavaUtilList_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ currThreadException, stuckThreadException } count:2 type:NSException_class_()]));
  }
  else {
    return currThreadException;
  }
}

IOSObjectArray *OrgJunitInternalRunnersStatementsFailOnTimeout_getStackTraceWithJavaLangThread_(OrgJunitInternalRunnersStatementsFailOnTimeout *self, JavaLangThread *thread) {
  @try {
    return [((JavaLangThread *) nil_chk(thread)) getStackTrace];
  }
  @catch (JavaLangSecurityException *e) {
    return [IOSObjectArray arrayWithLength:0 type:JavaLangStackTraceElement_class_()];
  }
}

JavaLangThread *OrgJunitInternalRunnersStatementsFailOnTimeout_getStuckThreadWithJavaLangThread_(OrgJunitInternalRunnersStatementsFailOnTimeout *self, JavaLangThread *mainThread) {
  if (JreLoadVolatileId(&self->threadGroup_) == nil) {
    return nil;
  }
  IOSObjectArray *threadsInGroup = OrgJunitInternalRunnersStatementsFailOnTimeout_getThreadArrayWithJavaLangThreadGroup_(self, JreLoadVolatileId(&self->threadGroup_));
  if (threadsInGroup == nil) {
    return nil;
  }
  JavaLangThread *stuckThread = nil;
  jlong maxCpuTime = 0;
  {
    IOSObjectArray *a__ = threadsInGroup;
    JavaLangThread * const *b__ = a__->buffer_;
    JavaLangThread * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaLangThread *thread = *b__++;
      if ([((JavaLangThread *) nil_chk(thread)) getState] == JreLoadEnum(JavaLangThread_State, RUNNABLE)) {
        jlong threadCpuTime = OrgJunitInternalRunnersStatementsFailOnTimeout_cpuTimeWithJavaLangThread_(self, thread);
        if (stuckThread == nil || threadCpuTime > maxCpuTime) {
          stuckThread = thread;
          maxCpuTime = threadCpuTime;
        }
      }
    }
  }
  return (stuckThread == mainThread) ? nil : stuckThread;
}

IOSObjectArray *OrgJunitInternalRunnersStatementsFailOnTimeout_getThreadArrayWithJavaLangThreadGroup_(OrgJunitInternalRunnersStatementsFailOnTimeout *self, JavaLangThreadGroup *group) {
  jint count = [((JavaLangThreadGroup *) nil_chk(group)) activeCount];
  jint enumSize = JavaLangMath_maxWithInt_withInt_(count * 2, 100);
  jint enumCount;
  IOSObjectArray *threads;
  jint loopCount = 0;
  while (true) {
    threads = [IOSObjectArray arrayWithLength:enumSize type:JavaLangThread_class_()];
    enumCount = [group enumerateWithJavaLangThreadArray:threads];
    if (enumCount < enumSize) {
      break;
    }
    enumSize += 100;
    if (++loopCount >= 5) {
      return nil;
    }
  }
  return OrgJunitInternalRunnersStatementsFailOnTimeout_copyThreadsWithJavaLangThreadArray_withInt_(self, threads, enumCount);
}

IOSObjectArray *OrgJunitInternalRunnersStatementsFailOnTimeout_copyThreadsWithJavaLangThreadArray_withInt_(OrgJunitInternalRunnersStatementsFailOnTimeout *self, IOSObjectArray *threads, jint count) {
  jint length = JavaLangMath_minWithInt_withInt_(count, ((IOSObjectArray *) nil_chk(threads))->size_);
  IOSObjectArray *result = [IOSObjectArray arrayWithLength:length type:JavaLangThread_class_()];
  for (jint i = 0; i < length; i++) {
    IOSObjectArray_Set(result, i, IOSObjectArray_Get(threads, i));
  }
  return result;
}

jlong OrgJunitInternalRunnersStatementsFailOnTimeout_cpuTimeWithJavaLangThread_(OrgJunitInternalRunnersStatementsFailOnTimeout *self, JavaLangThread *thr) {
  return 0;
}

IOSObjectArray *OrgJunitInternalRunnersStatementsFailOnTimeout__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitInternalRunnersStatementsFailOnTimeout)

@implementation OrgJunitInternalRunnersStatementsFailOnTimeout_Builder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJunitInternalRunnersStatementsFailOnTimeout_Builder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgJunitInternalRunnersStatementsFailOnTimeout_Builder *)withTimeoutWithLong:(jlong)timeout
                                                 withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  if (timeout < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"timeout must be non-negative");
  }
  if (unit == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"TimeUnit cannot be null");
  }
  self->timeout_ = timeout;
  JreStrongAssign(&self->unit_, unit);
  return self;
}

- (OrgJunitInternalRunnersStatementsFailOnTimeout_Builder *)withLookingForStuckThreadWithBoolean:(jboolean)enable {
  self->lookForStuckThread_ = enable;
  return self;
}

- (OrgJunitInternalRunnersStatementsFailOnTimeout *)buildWithOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)statement {
  if (statement == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"statement cannot be null");
  }
  return create_OrgJunitInternalRunnersStatementsFailOnTimeout_initWithOrgJunitInternalRunnersStatementsFailOnTimeout_Builder_withOrgJunitRunnersModelStatement_(self, statement);
}

- (void)dealloc {
  RELEASE_(unit_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJunitInternalRunnersStatementsFailOnTimeout_Builder;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgJunitInternalRunnersStatementsFailOnTimeout_Builder;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgJunitInternalRunnersStatementsFailOnTimeout;", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(withTimeoutWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[2].selector = @selector(withLookingForStuckThreadWithBoolean:);
  methods[3].selector = @selector(buildWithOrgJunitRunnersModelStatement:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "lookForStuckThread_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "timeout_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "withTimeout", "JLJavaUtilConcurrentTimeUnit;", "withLookingForStuckThread", "Z", "build", "LOrgJunitRunnersModelStatement;", "LOrgJunitInternalRunnersStatementsFailOnTimeout;" };
  static const J2ObjcClassInfo _OrgJunitInternalRunnersStatementsFailOnTimeout_Builder = { "Builder", "org.junit.internal.runners.statements", ptrTable, methods, fields, 7, 0x9, 4, 3, 6, -1, -1, -1, -1 };
  return &_OrgJunitInternalRunnersStatementsFailOnTimeout_Builder;
}

@end

void OrgJunitInternalRunnersStatementsFailOnTimeout_Builder_init(OrgJunitInternalRunnersStatementsFailOnTimeout_Builder *self) {
  NSObject_init(self);
  self->lookForStuckThread_ = false;
  self->timeout_ = 0;
  JreStrongAssign(&self->unit_, JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS));
}

OrgJunitInternalRunnersStatementsFailOnTimeout_Builder *new_OrgJunitInternalRunnersStatementsFailOnTimeout_Builder_init() {
  J2OBJC_NEW_IMPL(OrgJunitInternalRunnersStatementsFailOnTimeout_Builder, init)
}

OrgJunitInternalRunnersStatementsFailOnTimeout_Builder *create_OrgJunitInternalRunnersStatementsFailOnTimeout_Builder_init() {
  J2OBJC_CREATE_IMPL(OrgJunitInternalRunnersStatementsFailOnTimeout_Builder, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitInternalRunnersStatementsFailOnTimeout_Builder)

@implementation OrgJunitInternalRunnersStatementsFailOnTimeout_CallableStatement

- (instancetype)initWithOrgJunitInternalRunnersStatementsFailOnTimeout:(OrgJunitInternalRunnersStatementsFailOnTimeout *)outer$ {
  OrgJunitInternalRunnersStatementsFailOnTimeout_CallableStatement_initWithOrgJunitInternalRunnersStatementsFailOnTimeout_(self, outer$);
  return self;
}

- (NSException *)call {
  @try {
    [((JavaUtilConcurrentCountDownLatch *) nil_chk(startLatch_)) countDown];
    [((OrgJunitRunnersModelStatement *) nil_chk(this$0_->originalStatement_)) evaluate];
  }
  @catch (JavaLangException *e) {
    @throw e;
  }
  @catch (NSException *e) {
    return e;
  }
  return nil;
}

- (void)awaitStarted {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(startLatch_)) await];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(startLatch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSException;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJunitInternalRunnersStatementsFailOnTimeout:);
  methods[1].selector = @selector(call);
  methods[2].selector = @selector(awaitStarted);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgJunitInternalRunnersStatementsFailOnTimeout;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "startLatch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "LJavaLangInterruptedException;", "LOrgJunitInternalRunnersStatementsFailOnTimeout;", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _OrgJunitInternalRunnersStatementsFailOnTimeout_CallableStatement = { "CallableStatement", "org.junit.internal.runners.statements", ptrTable, methods, fields, 7, 0x2, 3, 2, 2, -1, -1, 3, -1 };
  return &_OrgJunitInternalRunnersStatementsFailOnTimeout_CallableStatement;
}

@end

void OrgJunitInternalRunnersStatementsFailOnTimeout_CallableStatement_initWithOrgJunitInternalRunnersStatementsFailOnTimeout_(OrgJunitInternalRunnersStatementsFailOnTimeout_CallableStatement *self, OrgJunitInternalRunnersStatementsFailOnTimeout *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->startLatch_, new_JavaUtilConcurrentCountDownLatch_initWithInt_(1));
}

OrgJunitInternalRunnersStatementsFailOnTimeout_CallableStatement *new_OrgJunitInternalRunnersStatementsFailOnTimeout_CallableStatement_initWithOrgJunitInternalRunnersStatementsFailOnTimeout_(OrgJunitInternalRunnersStatementsFailOnTimeout *outer$) {
  J2OBJC_NEW_IMPL(OrgJunitInternalRunnersStatementsFailOnTimeout_CallableStatement, initWithOrgJunitInternalRunnersStatementsFailOnTimeout_, outer$)
}

OrgJunitInternalRunnersStatementsFailOnTimeout_CallableStatement *create_OrgJunitInternalRunnersStatementsFailOnTimeout_CallableStatement_initWithOrgJunitInternalRunnersStatementsFailOnTimeout_(OrgJunitInternalRunnersStatementsFailOnTimeout *outer$) {
  J2OBJC_CREATE_IMPL(OrgJunitInternalRunnersStatementsFailOnTimeout_CallableStatement, initWithOrgJunitInternalRunnersStatementsFailOnTimeout_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitInternalRunnersStatementsFailOnTimeout_CallableStatement)
