//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/internal/runners/MethodValidator.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/Void.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Modifier.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "org/junit/After.h"
#include "org/junit/AfterClass.h"
#include "org/junit/Before.h"
#include "org/junit/BeforeClass.h"
#include "org/junit/Test.h"
#include "org/junit/internal/runners/InitializationError.h"
#include "org/junit/internal/runners/MethodValidator.h"
#include "org/junit/internal/runners/TestClass.h"

@interface OrgJunitInternalRunnersMethodValidator () {
 @public
  id<JavaUtilList> errors_;
  OrgJunitInternalRunnersTestClass *testClass_;
}

- (void)validateTestMethodsWithIOSClass:(IOSClass *)annotation
                            withBoolean:(jboolean)isStatic;

@end

J2OBJC_FIELD_SETTER(OrgJunitInternalRunnersMethodValidator, errors_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgJunitInternalRunnersMethodValidator, testClass_, OrgJunitInternalRunnersTestClass *)

__attribute__((unused)) static void OrgJunitInternalRunnersMethodValidator_validateTestMethodsWithIOSClass_withBoolean_(OrgJunitInternalRunnersMethodValidator *self, IOSClass *annotation, jboolean isStatic);

__attribute__((unused)) static IOSObjectArray *OrgJunitInternalRunnersMethodValidator__Annotations$0();

@implementation OrgJunitInternalRunnersMethodValidator

- (instancetype)initWithOrgJunitInternalRunnersTestClass:(OrgJunitInternalRunnersTestClass *)testClass {
  OrgJunitInternalRunnersMethodValidator_initWithOrgJunitInternalRunnersTestClass_(self, testClass);
  return self;
}

- (void)validateInstanceMethods {
  OrgJunitInternalRunnersMethodValidator_validateTestMethodsWithIOSClass_withBoolean_(self, OrgJunitAfter_class_(), false);
  OrgJunitInternalRunnersMethodValidator_validateTestMethodsWithIOSClass_withBoolean_(self, OrgJunitBefore_class_(), false);
  OrgJunitInternalRunnersMethodValidator_validateTestMethodsWithIOSClass_withBoolean_(self, OrgJunitTest_class_(), false);
  id<JavaUtilList> methods = [((OrgJunitInternalRunnersTestClass *) nil_chk(testClass_)) getAnnotatedMethodsWithIOSClass:OrgJunitTest_class_()];
  if ([((id<JavaUtilList>) nil_chk(methods)) size] == 0) {
    [((id<JavaUtilList>) nil_chk(errors_)) addWithId:create_JavaLangException_initWithNSString_(@"No runnable methods")];
  }
}

- (void)validateStaticMethods {
  OrgJunitInternalRunnersMethodValidator_validateTestMethodsWithIOSClass_withBoolean_(self, OrgJunitBeforeClass_class_(), true);
  OrgJunitInternalRunnersMethodValidator_validateTestMethodsWithIOSClass_withBoolean_(self, OrgJunitAfterClass_class_(), true);
}

- (id<JavaUtilList>)validateMethodsForDefaultRunner {
  [self validateNoArgConstructor];
  [self validateStaticMethods];
  [self validateInstanceMethods];
  return errors_;
}

- (void)assertValid {
  if (![((id<JavaUtilList>) nil_chk(errors_)) isEmpty]) {
    @throw create_OrgJunitInternalRunnersInitializationError_initWithJavaUtilList_(errors_);
  }
}

- (void)validateNoArgConstructor {
  @try {
    [((OrgJunitInternalRunnersTestClass *) nil_chk(testClass_)) getConstructor];
  }
  @catch (JavaLangException *e) {
    [((id<JavaUtilList>) nil_chk(errors_)) addWithId:create_JavaLangException_initWithNSString_withNSException_(@"Test class should have public zero-argument constructor", e)];
  }
}

- (void)validateTestMethodsWithIOSClass:(IOSClass *)annotation
                            withBoolean:(jboolean)isStatic {
  OrgJunitInternalRunnersMethodValidator_validateTestMethodsWithIOSClass_withBoolean_(self, annotation, isStatic);
}

- (void)dealloc {
  RELEASE_(errors_);
  RELEASE_(testClass_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJunitInternalRunnersTestClass:);
  methods[1].selector = @selector(validateInstanceMethods);
  methods[2].selector = @selector(validateStaticMethods);
  methods[3].selector = @selector(validateMethodsForDefaultRunner);
  methods[4].selector = @selector(assertValid);
  methods[5].selector = @selector(validateNoArgConstructor);
  methods[6].selector = @selector(validateTestMethodsWithIOSClass:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "errors_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
    { "testClass_", "LOrgJunitInternalRunnersTestClass;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJunitInternalRunnersTestClass;", "()Ljava/util/List<Ljava/lang/Throwable;>;", "LOrgJunitInternalRunnersInitializationError;", "validateTestMethods", "LIOSClass;Z", "(Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;Z)V", "Ljava/util/List<Ljava/lang/Throwable;>;", (void *)&OrgJunitInternalRunnersMethodValidator__Annotations$0 };
  static const J2ObjcClassInfo _OrgJunitInternalRunnersMethodValidator = { "MethodValidator", "org.junit.internal.runners", ptrTable, methods, fields, 7, 0x1, 7, 2, -1, -1, -1, -1, 7 };
  return &_OrgJunitInternalRunnersMethodValidator;
}

@end

void OrgJunitInternalRunnersMethodValidator_initWithOrgJunitInternalRunnersTestClass_(OrgJunitInternalRunnersMethodValidator *self, OrgJunitInternalRunnersTestClass *testClass) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->errors_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->testClass_, testClass);
}

OrgJunitInternalRunnersMethodValidator *new_OrgJunitInternalRunnersMethodValidator_initWithOrgJunitInternalRunnersTestClass_(OrgJunitInternalRunnersTestClass *testClass) {
  J2OBJC_NEW_IMPL(OrgJunitInternalRunnersMethodValidator, initWithOrgJunitInternalRunnersTestClass_, testClass)
}

OrgJunitInternalRunnersMethodValidator *create_OrgJunitInternalRunnersMethodValidator_initWithOrgJunitInternalRunnersTestClass_(OrgJunitInternalRunnersTestClass *testClass) {
  J2OBJC_CREATE_IMPL(OrgJunitInternalRunnersMethodValidator, initWithOrgJunitInternalRunnersTestClass_, testClass)
}

void OrgJunitInternalRunnersMethodValidator_validateTestMethodsWithIOSClass_withBoolean_(OrgJunitInternalRunnersMethodValidator *self, IOSClass *annotation, jboolean isStatic) {
  id<JavaUtilList> methods = [((OrgJunitInternalRunnersTestClass *) nil_chk(self->testClass_)) getAnnotatedMethodsWithIOSClass:annotation];
  for (JavaLangReflectMethod * __strong each in nil_chk(methods)) {
    if (JavaLangReflectModifier_isStaticWithInt_([((JavaLangReflectMethod *) nil_chk(each)) getModifiers]) != isStatic) {
      NSString *state = isStatic ? @"should" : @"should not";
      [((id<JavaUtilList>) nil_chk(self->errors_)) addWithId:create_JavaLangException_initWithNSString_(JreStrcat("$$$$$", @"Method ", [each getName], @"() ", state, @" be static"))];
    }
    if (!JavaLangReflectModifier_isPublicWithInt_([((IOSClass *) nil_chk([each getDeclaringClass])) getModifiers])) {
      [((id<JavaUtilList>) nil_chk(self->errors_)) addWithId:create_JavaLangException_initWithNSString_(JreStrcat("$$$", @"Class ", [((IOSClass *) nil_chk([each getDeclaringClass])) getName], @" should be public"))];
    }
    if (!JavaLangReflectModifier_isPublicWithInt_([each getModifiers])) {
      [((id<JavaUtilList>) nil_chk(self->errors_)) addWithId:create_JavaLangException_initWithNSString_(JreStrcat("$$$", @"Method ", [each getName], @" should be public"))];
    }
    if ([each getReturnType] != JreLoadStatic(JavaLangVoid, TYPE)) {
      [((id<JavaUtilList>) nil_chk(self->errors_)) addWithId:create_JavaLangException_initWithNSString_(JreStrcat("$$$", @"Method ", [each getName], @" should be void"))];
    }
    if (((IOSObjectArray *) nil_chk([each getParameterTypes]))->size_ != 0) {
      [((id<JavaUtilList>) nil_chk(self->errors_)) addWithId:create_JavaLangException_initWithNSString_(JreStrcat("$$$", @"Method ", [each getName], @" should have no parameters"))];
    }
  }
}

IOSObjectArray *OrgJunitInternalRunnersMethodValidator__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitInternalRunnersMethodValidator)
