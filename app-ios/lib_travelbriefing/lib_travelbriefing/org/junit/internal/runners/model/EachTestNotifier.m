//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/internal/runners/model/EachTestNotifier.java
//

#include "J2ObjC_source.h"
#include "java/util/List.h"
#include "org/junit/internal/AssumptionViolatedException.h"
#include "org/junit/internal/runners/model/EachTestNotifier.h"
#include "org/junit/runner/Description.h"
#include "org/junit/runner/notification/Failure.h"
#include "org/junit/runner/notification/RunNotifier.h"
#include "org/junit/runners/model/MultipleFailureException.h"

@interface OrgJunitInternalRunnersModelEachTestNotifier () {
 @public
  OrgJunitRunnerNotificationRunNotifier *notifier_;
  OrgJunitRunnerDescription *description__;
}

- (void)addMultipleFailureExceptionWithOrgJunitRunnersModelMultipleFailureException:(OrgJunitRunnersModelMultipleFailureException *)mfe;

@end

J2OBJC_FIELD_SETTER(OrgJunitInternalRunnersModelEachTestNotifier, notifier_, OrgJunitRunnerNotificationRunNotifier *)
J2OBJC_FIELD_SETTER(OrgJunitInternalRunnersModelEachTestNotifier, description__, OrgJunitRunnerDescription *)

__attribute__((unused)) static void OrgJunitInternalRunnersModelEachTestNotifier_addMultipleFailureExceptionWithOrgJunitRunnersModelMultipleFailureException_(OrgJunitInternalRunnersModelEachTestNotifier *self, OrgJunitRunnersModelMultipleFailureException *mfe);

@implementation OrgJunitInternalRunnersModelEachTestNotifier

- (instancetype)initWithOrgJunitRunnerNotificationRunNotifier:(OrgJunitRunnerNotificationRunNotifier *)notifier
                                withOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_ {
  OrgJunitInternalRunnersModelEachTestNotifier_initWithOrgJunitRunnerNotificationRunNotifier_withOrgJunitRunnerDescription_(self, notifier, description_);
  return self;
}

- (void)addFailureWithNSException:(NSException *)targetException {
  if ([targetException isKindOfClass:[OrgJunitRunnersModelMultipleFailureException class]]) {
    OrgJunitInternalRunnersModelEachTestNotifier_addMultipleFailureExceptionWithOrgJunitRunnersModelMultipleFailureException_(self, (OrgJunitRunnersModelMultipleFailureException *) cast_chk(targetException, [OrgJunitRunnersModelMultipleFailureException class]));
  }
  else {
    [((OrgJunitRunnerNotificationRunNotifier *) nil_chk(notifier_)) fireTestFailureWithOrgJunitRunnerNotificationFailure:create_OrgJunitRunnerNotificationFailure_initWithOrgJunitRunnerDescription_withNSException_(description__, targetException)];
  }
}

- (void)addMultipleFailureExceptionWithOrgJunitRunnersModelMultipleFailureException:(OrgJunitRunnersModelMultipleFailureException *)mfe {
  OrgJunitInternalRunnersModelEachTestNotifier_addMultipleFailureExceptionWithOrgJunitRunnersModelMultipleFailureException_(self, mfe);
}

- (void)addFailedAssumptionWithOrgJunitInternalAssumptionViolatedException:(OrgJunitInternalAssumptionViolatedException *)e {
  [((OrgJunitRunnerNotificationRunNotifier *) nil_chk(notifier_)) fireTestAssumptionFailedWithOrgJunitRunnerNotificationFailure:create_OrgJunitRunnerNotificationFailure_initWithOrgJunitRunnerDescription_withNSException_(description__, e)];
}

- (void)fireTestFinished {
  [((OrgJunitRunnerNotificationRunNotifier *) nil_chk(notifier_)) fireTestFinishedWithOrgJunitRunnerDescription:description__];
}

- (void)fireTestStarted {
  [((OrgJunitRunnerNotificationRunNotifier *) nil_chk(notifier_)) fireTestStartedWithOrgJunitRunnerDescription:description__];
}

- (void)fireTestIgnored {
  [((OrgJunitRunnerNotificationRunNotifier *) nil_chk(notifier_)) fireTestIgnoredWithOrgJunitRunnerDescription:description__];
}

- (void)dealloc {
  RELEASE_(notifier_);
  RELEASE_(description__);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJunitRunnerNotificationRunNotifier:withOrgJunitRunnerDescription:);
  methods[1].selector = @selector(addFailureWithNSException:);
  methods[2].selector = @selector(addMultipleFailureExceptionWithOrgJunitRunnersModelMultipleFailureException:);
  methods[3].selector = @selector(addFailedAssumptionWithOrgJunitInternalAssumptionViolatedException:);
  methods[4].selector = @selector(fireTestFinished);
  methods[5].selector = @selector(fireTestStarted);
  methods[6].selector = @selector(fireTestIgnored);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "notifier_", "LOrgJunitRunnerNotificationRunNotifier;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "description__", "LOrgJunitRunnerDescription;", .constantValue.asLong = 0, 0x12, 7, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJunitRunnerNotificationRunNotifier;LOrgJunitRunnerDescription;", "addFailure", "LNSException;", "addMultipleFailureException", "LOrgJunitRunnersModelMultipleFailureException;", "addFailedAssumption", "LOrgJunitInternalAssumptionViolatedException;", "description" };
  static const J2ObjcClassInfo _OrgJunitInternalRunnersModelEachTestNotifier = { "EachTestNotifier", "org.junit.internal.runners.model", ptrTable, methods, fields, 7, 0x1, 7, 2, -1, -1, -1, -1, -1 };
  return &_OrgJunitInternalRunnersModelEachTestNotifier;
}

@end

void OrgJunitInternalRunnersModelEachTestNotifier_initWithOrgJunitRunnerNotificationRunNotifier_withOrgJunitRunnerDescription_(OrgJunitInternalRunnersModelEachTestNotifier *self, OrgJunitRunnerNotificationRunNotifier *notifier, OrgJunitRunnerDescription *description_) {
  NSObject_init(self);
  JreStrongAssign(&self->notifier_, notifier);
  JreStrongAssign(&self->description__, description_);
}

OrgJunitInternalRunnersModelEachTestNotifier *new_OrgJunitInternalRunnersModelEachTestNotifier_initWithOrgJunitRunnerNotificationRunNotifier_withOrgJunitRunnerDescription_(OrgJunitRunnerNotificationRunNotifier *notifier, OrgJunitRunnerDescription *description_) {
  J2OBJC_NEW_IMPL(OrgJunitInternalRunnersModelEachTestNotifier, initWithOrgJunitRunnerNotificationRunNotifier_withOrgJunitRunnerDescription_, notifier, description_)
}

OrgJunitInternalRunnersModelEachTestNotifier *create_OrgJunitInternalRunnersModelEachTestNotifier_initWithOrgJunitRunnerNotificationRunNotifier_withOrgJunitRunnerDescription_(OrgJunitRunnerNotificationRunNotifier *notifier, OrgJunitRunnerDescription *description_) {
  J2OBJC_CREATE_IMPL(OrgJunitInternalRunnersModelEachTestNotifier, initWithOrgJunitRunnerNotificationRunNotifier_withOrgJunitRunnerDescription_, notifier, description_)
}

void OrgJunitInternalRunnersModelEachTestNotifier_addMultipleFailureExceptionWithOrgJunitRunnersModelMultipleFailureException_(OrgJunitInternalRunnersModelEachTestNotifier *self, OrgJunitRunnersModelMultipleFailureException *mfe) {
  for (NSException * __strong each in nil_chk([((OrgJunitRunnersModelMultipleFailureException *) nil_chk(mfe)) getFailures])) {
    [self addFailureWithNSException:each];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitInternalRunnersModelEachTestNotifier)
