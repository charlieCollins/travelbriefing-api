//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/rules/DisableOnDebug.java
//

#include "J2ObjC_source.h"
#include "java/util/List.h"
#include "org/junit/rules/DisableOnDebug.h"
#include "org/junit/rules/TestRule.h"
#include "org/junit/runner/Description.h"
#include "org/junit/runners/model/Statement.h"

@interface OrgJunitRulesDisableOnDebug () {
 @public
  id<OrgJunitRulesTestRule> rule_;
  jboolean debugging_;
}

+ (jboolean)isDebuggingWithJavaUtilList:(id<JavaUtilList>)arguments;

@end

J2OBJC_FIELD_SETTER(OrgJunitRulesDisableOnDebug, rule_, id<OrgJunitRulesTestRule>)

__attribute__((unused)) static jboolean OrgJunitRulesDisableOnDebug_isDebuggingWithJavaUtilList_(id<JavaUtilList> arguments);

@implementation OrgJunitRulesDisableOnDebug

- (instancetype)initWithOrgJunitRulesTestRule:(id<OrgJunitRulesTestRule>)rule {
  OrgJunitRulesDisableOnDebug_initWithOrgJunitRulesTestRule_(self, rule);
  return self;
}

- (instancetype)initWithOrgJunitRulesTestRule:(id<OrgJunitRulesTestRule>)rule
                             withJavaUtilList:(id<JavaUtilList>)inputArguments {
  OrgJunitRulesDisableOnDebug_initWithOrgJunitRulesTestRule_withJavaUtilList_(self, rule, inputArguments);
  return self;
}

- (OrgJunitRunnersModelStatement *)applyWithOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)base
                                            withOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_ {
  if (debugging_) {
    return base;
  }
  else {
    return [((id<OrgJunitRulesTestRule>) nil_chk(rule_)) applyWithOrgJunitRunnersModelStatement:base withOrgJunitRunnerDescription:description_];
  }
}

+ (jboolean)isDebuggingWithJavaUtilList:(id<JavaUtilList>)arguments {
  return OrgJunitRulesDisableOnDebug_isDebuggingWithJavaUtilList_(arguments);
}

- (jboolean)isDebugging {
  return debugging_;
}

- (void)dealloc {
  RELEASE_(rule_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
    { NULL, "LOrgJunitRunnersModelStatement;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 5, 6, -1, 7, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJunitRulesTestRule:);
  methods[1].selector = @selector(initWithOrgJunitRulesTestRule:withJavaUtilList:);
  methods[2].selector = @selector(applyWithOrgJunitRunnersModelStatement:withOrgJunitRunnerDescription:);
  methods[3].selector = @selector(isDebuggingWithJavaUtilList:);
  methods[4].selector = @selector(isDebugging);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "rule_", "LOrgJunitRulesTestRule;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "debugging_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJunitRulesTestRule;", "LOrgJunitRulesTestRule;LJavaUtilList;", "(Lorg/junit/rules/TestRule;Ljava/util/List<Ljava/lang/String;>;)V", "apply", "LOrgJunitRunnersModelStatement;LOrgJunitRunnerDescription;", "isDebugging", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)Z" };
  static const J2ObjcClassInfo _OrgJunitRulesDisableOnDebug = { "DisableOnDebug", "org.junit.rules", ptrTable, methods, fields, 7, 0x1, 5, 2, -1, -1, -1, -1, -1 };
  return &_OrgJunitRulesDisableOnDebug;
}

@end

void OrgJunitRulesDisableOnDebug_initWithOrgJunitRulesTestRule_(OrgJunitRulesDisableOnDebug *self, id<OrgJunitRulesTestRule> rule) {
  OrgJunitRulesDisableOnDebug_initWithOrgJunitRulesTestRule_withJavaUtilList_(self, rule, nil);
}

OrgJunitRulesDisableOnDebug *new_OrgJunitRulesDisableOnDebug_initWithOrgJunitRulesTestRule_(id<OrgJunitRulesTestRule> rule) {
  J2OBJC_NEW_IMPL(OrgJunitRulesDisableOnDebug, initWithOrgJunitRulesTestRule_, rule)
}

OrgJunitRulesDisableOnDebug *create_OrgJunitRulesDisableOnDebug_initWithOrgJunitRulesTestRule_(id<OrgJunitRulesTestRule> rule) {
  J2OBJC_CREATE_IMPL(OrgJunitRulesDisableOnDebug, initWithOrgJunitRulesTestRule_, rule)
}

void OrgJunitRulesDisableOnDebug_initWithOrgJunitRulesTestRule_withJavaUtilList_(OrgJunitRulesDisableOnDebug *self, id<OrgJunitRulesTestRule> rule, id<JavaUtilList> inputArguments) {
  NSObject_init(self);
  JreStrongAssign(&self->rule_, rule);
  self->debugging_ = OrgJunitRulesDisableOnDebug_isDebuggingWithJavaUtilList_(inputArguments);
}

OrgJunitRulesDisableOnDebug *new_OrgJunitRulesDisableOnDebug_initWithOrgJunitRulesTestRule_withJavaUtilList_(id<OrgJunitRulesTestRule> rule, id<JavaUtilList> inputArguments) {
  J2OBJC_NEW_IMPL(OrgJunitRulesDisableOnDebug, initWithOrgJunitRulesTestRule_withJavaUtilList_, rule, inputArguments)
}

OrgJunitRulesDisableOnDebug *create_OrgJunitRulesDisableOnDebug_initWithOrgJunitRulesTestRule_withJavaUtilList_(id<OrgJunitRulesTestRule> rule, id<JavaUtilList> inputArguments) {
  J2OBJC_CREATE_IMPL(OrgJunitRulesDisableOnDebug, initWithOrgJunitRulesTestRule_withJavaUtilList_, rule, inputArguments)
}

jboolean OrgJunitRulesDisableOnDebug_isDebuggingWithJavaUtilList_(id<JavaUtilList> arguments) {
  OrgJunitRulesDisableOnDebug_initialize();
  if (arguments == nil) {
    return false;
  }
  for (NSString * __strong argument in arguments) {
    if ([@"-Xdebug" isEqual:argument]) {
      return true;
    }
    else if ([((NSString *) nil_chk(argument)) hasPrefix:@"-agentlib:jdwp"]) {
      return true;
    }
  }
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitRulesDisableOnDebug)
