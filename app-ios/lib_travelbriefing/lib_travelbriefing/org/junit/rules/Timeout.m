//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/rules/Timeout.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/TimeUnit.h"
#include "org/junit/internal/runners/statements/FailOnTimeout.h"
#include "org/junit/rules/Timeout.h"
#include "org/junit/runner/Description.h"
#include "org/junit/runners/model/Statement.h"

@interface OrgJunitRulesTimeout () {
 @public
  jlong timeout_;
  JavaUtilConcurrentTimeUnit *timeUnit_;
  jboolean lookForStuckThread_;
}

@end

J2OBJC_FIELD_SETTER(OrgJunitRulesTimeout, timeUnit_, JavaUtilConcurrentTimeUnit *)

__attribute__((unused)) static IOSObjectArray *OrgJunitRulesTimeout__Annotations$0();

@interface OrgJunitRulesTimeout_1 : OrgJunitRunnersModelStatement {
 @public
  JavaLangException *val$e_;
}

- (instancetype)initWithJavaLangException:(JavaLangException *)capture$0;

- (void)evaluate;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitRulesTimeout_1)

__attribute__((unused)) static void OrgJunitRulesTimeout_1_initWithJavaLangException_(OrgJunitRulesTimeout_1 *self, JavaLangException *capture$0);

__attribute__((unused)) static OrgJunitRulesTimeout_1 *new_OrgJunitRulesTimeout_1_initWithJavaLangException_(JavaLangException *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJunitRulesTimeout_1 *create_OrgJunitRulesTimeout_1_initWithJavaLangException_(JavaLangException *capture$0);

@interface OrgJunitRulesTimeout_Builder () {
 @public
  jboolean lookForStuckThread_;
  jlong timeout_;
  JavaUtilConcurrentTimeUnit *timeUnit_;
}

@end

J2OBJC_FIELD_SETTER(OrgJunitRulesTimeout_Builder, timeUnit_, JavaUtilConcurrentTimeUnit *)

@implementation OrgJunitRulesTimeout

+ (OrgJunitRulesTimeout_Builder *)builder {
  return OrgJunitRulesTimeout_builder();
}

- (instancetype)initWithInt:(jint)millis {
  OrgJunitRulesTimeout_initWithInt_(self, millis);
  return self;
}

- (instancetype)initWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeUnit {
  OrgJunitRulesTimeout_initWithLong_withJavaUtilConcurrentTimeUnit_(self, timeout, timeUnit);
  return self;
}

- (instancetype)initWithOrgJunitRulesTimeout_Builder:(OrgJunitRulesTimeout_Builder *)builder {
  OrgJunitRulesTimeout_initWithOrgJunitRulesTimeout_Builder_(self, builder);
  return self;
}

+ (OrgJunitRulesTimeout *)millisWithLong:(jlong)millis {
  return OrgJunitRulesTimeout_millisWithLong_(millis);
}

+ (OrgJunitRulesTimeout *)secondsWithLong:(jlong)seconds {
  return OrgJunitRulesTimeout_secondsWithLong_(seconds);
}

- (jlong)getTimeoutWithJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return [((JavaUtilConcurrentTimeUnit *) nil_chk(unit)) convertWithLong:timeout_ withJavaUtilConcurrentTimeUnit:timeUnit_];
}

- (jboolean)getLookingForStuckThread {
  return lookForStuckThread_;
}

- (OrgJunitRunnersModelStatement *)createFailOnTimeoutStatementWithOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)statement {
  return [((OrgJunitInternalRunnersStatementsFailOnTimeout_Builder *) nil_chk([((OrgJunitInternalRunnersStatementsFailOnTimeout_Builder *) nil_chk([((OrgJunitInternalRunnersStatementsFailOnTimeout_Builder *) nil_chk(OrgJunitInternalRunnersStatementsFailOnTimeout_builder())) withTimeoutWithLong:timeout_ withJavaUtilConcurrentTimeUnit:timeUnit_])) withLookingForStuckThreadWithBoolean:lookForStuckThread_])) buildWithOrgJunitRunnersModelStatement:statement];
}

- (OrgJunitRunnersModelStatement *)applyWithOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)base
                                            withOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_ {
  @try {
    return [self createFailOnTimeoutStatementWithOrgJunitRunnersModelStatement:base];
  }
  @catch (JavaLangException *e) {
    return create_OrgJunitRulesTimeout_1_initWithJavaLangException_(e);
  }
}

- (void)dealloc {
  RELEASE_(timeUnit_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgJunitRulesTimeout_Builder;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, 1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 3, -1, -1, -1, -1 },
    { NULL, "LOrgJunitRulesTimeout;", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgJunitRulesTimeout;", 0x9, 6, 5, -1, -1, -1, -1 },
    { NULL, "J", 0x14, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJunitRunnersModelStatement;", 0x4, 9, 10, 11, -1, -1, -1 },
    { NULL, "LOrgJunitRunnersModelStatement;", 0x1, 12, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(builder);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(initWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[3].selector = @selector(initWithOrgJunitRulesTimeout_Builder:);
  methods[4].selector = @selector(millisWithLong:);
  methods[5].selector = @selector(secondsWithLong:);
  methods[6].selector = @selector(getTimeoutWithJavaUtilConcurrentTimeUnit:);
  methods[7].selector = @selector(getLookingForStuckThread);
  methods[8].selector = @selector(createFailOnTimeoutStatementWithOrgJunitRunnersModelStatement:);
  methods[9].selector = @selector(applyWithOrgJunitRunnersModelStatement:withOrgJunitRunnerDescription:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "timeout_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "timeUnit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lookForStuckThread_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", (void *)&OrgJunitRulesTimeout__Annotations$0, "JLJavaUtilConcurrentTimeUnit;", "LOrgJunitRulesTimeout_Builder;", "millis", "J", "seconds", "getTimeout", "LJavaUtilConcurrentTimeUnit;", "createFailOnTimeoutStatement", "LOrgJunitRunnersModelStatement;", "LJavaLangException;", "apply", "LOrgJunitRunnersModelStatement;LOrgJunitRunnerDescription;" };
  static const J2ObjcClassInfo _OrgJunitRulesTimeout = { "Timeout", "org.junit.rules", ptrTable, methods, fields, 7, 0x1, 10, 3, -1, 3, -1, -1, -1 };
  return &_OrgJunitRulesTimeout;
}

@end

OrgJunitRulesTimeout_Builder *OrgJunitRulesTimeout_builder() {
  OrgJunitRulesTimeout_initialize();
  return create_OrgJunitRulesTimeout_Builder_init();
}

void OrgJunitRulesTimeout_initWithInt_(OrgJunitRulesTimeout *self, jint millis) {
  OrgJunitRulesTimeout_initWithLong_withJavaUtilConcurrentTimeUnit_(self, millis, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS));
}

OrgJunitRulesTimeout *new_OrgJunitRulesTimeout_initWithInt_(jint millis) {
  J2OBJC_NEW_IMPL(OrgJunitRulesTimeout, initWithInt_, millis)
}

OrgJunitRulesTimeout *create_OrgJunitRulesTimeout_initWithInt_(jint millis) {
  J2OBJC_CREATE_IMPL(OrgJunitRulesTimeout, initWithInt_, millis)
}

void OrgJunitRulesTimeout_initWithLong_withJavaUtilConcurrentTimeUnit_(OrgJunitRulesTimeout *self, jlong timeout, JavaUtilConcurrentTimeUnit *timeUnit) {
  NSObject_init(self);
  self->timeout_ = timeout;
  JreStrongAssign(&self->timeUnit_, timeUnit);
  self->lookForStuckThread_ = false;
}

OrgJunitRulesTimeout *new_OrgJunitRulesTimeout_initWithLong_withJavaUtilConcurrentTimeUnit_(jlong timeout, JavaUtilConcurrentTimeUnit *timeUnit) {
  J2OBJC_NEW_IMPL(OrgJunitRulesTimeout, initWithLong_withJavaUtilConcurrentTimeUnit_, timeout, timeUnit)
}

OrgJunitRulesTimeout *create_OrgJunitRulesTimeout_initWithLong_withJavaUtilConcurrentTimeUnit_(jlong timeout, JavaUtilConcurrentTimeUnit *timeUnit) {
  J2OBJC_CREATE_IMPL(OrgJunitRulesTimeout, initWithLong_withJavaUtilConcurrentTimeUnit_, timeout, timeUnit)
}

void OrgJunitRulesTimeout_initWithOrgJunitRulesTimeout_Builder_(OrgJunitRulesTimeout *self, OrgJunitRulesTimeout_Builder *builder) {
  NSObject_init(self);
  self->timeout_ = [((OrgJunitRulesTimeout_Builder *) nil_chk(builder)) getTimeout];
  JreStrongAssign(&self->timeUnit_, [builder getTimeUnit]);
  self->lookForStuckThread_ = [builder getLookingForStuckThread];
}

OrgJunitRulesTimeout *new_OrgJunitRulesTimeout_initWithOrgJunitRulesTimeout_Builder_(OrgJunitRulesTimeout_Builder *builder) {
  J2OBJC_NEW_IMPL(OrgJunitRulesTimeout, initWithOrgJunitRulesTimeout_Builder_, builder)
}

OrgJunitRulesTimeout *create_OrgJunitRulesTimeout_initWithOrgJunitRulesTimeout_Builder_(OrgJunitRulesTimeout_Builder *builder) {
  J2OBJC_CREATE_IMPL(OrgJunitRulesTimeout, initWithOrgJunitRulesTimeout_Builder_, builder)
}

OrgJunitRulesTimeout *OrgJunitRulesTimeout_millisWithLong_(jlong millis) {
  OrgJunitRulesTimeout_initialize();
  return create_OrgJunitRulesTimeout_initWithLong_withJavaUtilConcurrentTimeUnit_(millis, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS));
}

OrgJunitRulesTimeout *OrgJunitRulesTimeout_secondsWithLong_(jlong seconds) {
  OrgJunitRulesTimeout_initialize();
  return create_OrgJunitRulesTimeout_initWithLong_withJavaUtilConcurrentTimeUnit_(seconds, JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS));
}

IOSObjectArray *OrgJunitRulesTimeout__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitRulesTimeout)

@implementation OrgJunitRulesTimeout_1

- (instancetype)initWithJavaLangException:(JavaLangException *)capture$0 {
  OrgJunitRulesTimeout_1_initWithJavaLangException_(self, capture$0);
  return self;
}

- (void)evaluate {
  @throw create_JavaLangRuntimeException_initWithNSString_withNSException_(@"Invalid parameters for Timeout", val$e_);
}

- (void)dealloc {
  RELEASE_(val$e_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangException:);
  methods[1].selector = @selector(evaluate);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$e_", "LJavaLangException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSException;", "LOrgJunitRulesTimeout;", "applyWithOrgJunitRunnersModelStatement:withOrgJunitRunnerDescription:" };
  static const J2ObjcClassInfo _OrgJunitRulesTimeout_1 = { "", "org.junit.rules", ptrTable, methods, fields, 7, 0x8018, 2, 1, 1, -1, 2, -1, -1 };
  return &_OrgJunitRulesTimeout_1;
}

@end

void OrgJunitRulesTimeout_1_initWithJavaLangException_(OrgJunitRulesTimeout_1 *self, JavaLangException *capture$0) {
  JreStrongAssign(&self->val$e_, capture$0);
  OrgJunitRunnersModelStatement_init(self);
}

OrgJunitRulesTimeout_1 *new_OrgJunitRulesTimeout_1_initWithJavaLangException_(JavaLangException *capture$0) {
  J2OBJC_NEW_IMPL(OrgJunitRulesTimeout_1, initWithJavaLangException_, capture$0)
}

OrgJunitRulesTimeout_1 *create_OrgJunitRulesTimeout_1_initWithJavaLangException_(JavaLangException *capture$0) {
  J2OBJC_CREATE_IMPL(OrgJunitRulesTimeout_1, initWithJavaLangException_, capture$0)
}

@implementation OrgJunitRulesTimeout_Builder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJunitRulesTimeout_Builder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgJunitRulesTimeout_Builder *)withTimeoutWithLong:(jlong)timeout
                       withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  self->timeout_ = timeout;
  JreStrongAssign(&self->timeUnit_, unit);
  return self;
}

- (jlong)getTimeout {
  return timeout_;
}

- (JavaUtilConcurrentTimeUnit *)getTimeUnit {
  return timeUnit_;
}

- (OrgJunitRulesTimeout_Builder *)withLookingForStuckThreadWithBoolean:(jboolean)enable {
  self->lookForStuckThread_ = enable;
  return self;
}

- (jboolean)getLookingForStuckThread {
  return lookForStuckThread_;
}

- (OrgJunitRulesTimeout *)build {
  return create_OrgJunitRulesTimeout_initWithOrgJunitRulesTimeout_Builder_(self);
}

- (void)dealloc {
  RELEASE_(timeUnit_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJunitRulesTimeout_Builder;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentTimeUnit;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJunitRulesTimeout_Builder;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJunitRulesTimeout;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(withTimeoutWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[2].selector = @selector(getTimeout);
  methods[3].selector = @selector(getTimeUnit);
  methods[4].selector = @selector(withLookingForStuckThreadWithBoolean:);
  methods[5].selector = @selector(getLookingForStuckThread);
  methods[6].selector = @selector(build);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "lookForStuckThread_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "timeout_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "timeUnit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "withTimeout", "JLJavaUtilConcurrentTimeUnit;", "withLookingForStuckThread", "Z", "LOrgJunitRulesTimeout;" };
  static const J2ObjcClassInfo _OrgJunitRulesTimeout_Builder = { "Builder", "org.junit.rules", ptrTable, methods, fields, 7, 0x9, 7, 3, 4, -1, -1, -1, -1 };
  return &_OrgJunitRulesTimeout_Builder;
}

@end

void OrgJunitRulesTimeout_Builder_init(OrgJunitRulesTimeout_Builder *self) {
  NSObject_init(self);
  self->lookForStuckThread_ = false;
  self->timeout_ = 0;
  JreStrongAssign(&self->timeUnit_, JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS));
}

OrgJunitRulesTimeout_Builder *new_OrgJunitRulesTimeout_Builder_init() {
  J2OBJC_NEW_IMPL(OrgJunitRulesTimeout_Builder, init)
}

OrgJunitRulesTimeout_Builder *create_OrgJunitRulesTimeout_Builder_init() {
  J2OBJC_CREATE_IMPL(OrgJunitRulesTimeout_Builder, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitRulesTimeout_Builder)
