//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/rules/ErrorCollector.java
//

#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/concurrent/Callable.h"
#include "org/hamcrest/Matcher.h"
#include "org/junit/Assert.h"
#include "org/junit/rules/ErrorCollector.h"
#include "org/junit/rules/Verifier.h"
#include "org/junit/runners/model/MultipleFailureException.h"

@interface OrgJunitRulesErrorCollector () {
 @public
  id<JavaUtilList> errors_;
}

@end

J2OBJC_FIELD_SETTER(OrgJunitRulesErrorCollector, errors_, id<JavaUtilList>)

@interface OrgJunitRulesErrorCollector_1 : NSObject < JavaUtilConcurrentCallable > {
 @public
  NSString *val$reason_;
  id val$value_;
  id<OrgHamcrestMatcher> val$matcher_;
}

- (instancetype)initWithNSString:(NSString *)capture$0
                          withId:(id)capture$1
          withOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)capture$2;

- (id)call;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitRulesErrorCollector_1)

__attribute__((unused)) static void OrgJunitRulesErrorCollector_1_initWithNSString_withId_withOrgHamcrestMatcher_(OrgJunitRulesErrorCollector_1 *self, NSString *capture$0, id capture$1, id<OrgHamcrestMatcher> capture$2);

__attribute__((unused)) static OrgJunitRulesErrorCollector_1 *new_OrgJunitRulesErrorCollector_1_initWithNSString_withId_withOrgHamcrestMatcher_(NSString *capture$0, id capture$1, id<OrgHamcrestMatcher> capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJunitRulesErrorCollector_1 *create_OrgJunitRulesErrorCollector_1_initWithNSString_withId_withOrgHamcrestMatcher_(NSString *capture$0, id capture$1, id<OrgHamcrestMatcher> capture$2);

@implementation OrgJunitRulesErrorCollector

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJunitRulesErrorCollector_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)verify {
  OrgJunitRunnersModelMultipleFailureException_assertEmptyWithJavaUtilList_(errors_);
}

- (void)addErrorWithNSException:(NSException *)error {
  [((id<JavaUtilList>) nil_chk(errors_)) addWithId:error];
}

- (void)checkThatWithId:(id)value
 withOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher {
  [self checkThatWithNSString:@"" withId:value withOrgHamcrestMatcher:matcher];
}

- (void)checkThatWithNSString:(NSString *)reason
                       withId:(id)value
       withOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher {
  [self checkSucceedsWithJavaUtilConcurrentCallable:create_OrgJunitRulesErrorCollector_1_initWithNSString_withId_withOrgHamcrestMatcher_(reason, value, matcher)];
}

- (id)checkSucceedsWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable {
  @try {
    return [((id<JavaUtilConcurrentCallable>) nil_chk(callable)) call];
  }
  @catch (NSException *e) {
    [self addErrorWithNSException:e];
    return nil;
  }
}

- (void)dealloc {
  RELEASE_(errors_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 2, 5, -1, 6, -1, -1 },
    { NULL, "LNSObject;", 0x1, 7, 8, -1, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(verify);
  methods[2].selector = @selector(addErrorWithNSException:);
  methods[3].selector = @selector(checkThatWithId:withOrgHamcrestMatcher:);
  methods[4].selector = @selector(checkThatWithNSString:withId:withOrgHamcrestMatcher:);
  methods[5].selector = @selector(checkSucceedsWithJavaUtilConcurrentCallable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "errors_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "LNSException;", "addError", "checkThat", "LNSObject;LOrgHamcrestMatcher;", "<T:Ljava/lang/Object;>(TT;Lorg/hamcrest/Matcher<TT;>;)V", "LNSString;LNSObject;LOrgHamcrestMatcher;", "<T:Ljava/lang/Object;>(Ljava/lang/String;TT;Lorg/hamcrest/Matcher<TT;>;)V", "checkSucceeds", "LJavaUtilConcurrentCallable;", "<T:Ljava/lang/Object;>(Ljava/util/concurrent/Callable<TT;>;)TT;", "Ljava/util/List<Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _OrgJunitRulesErrorCollector = { "ErrorCollector", "org.junit.rules", ptrTable, methods, fields, 7, 0x1, 6, 1, -1, -1, -1, -1, -1 };
  return &_OrgJunitRulesErrorCollector;
}

@end

void OrgJunitRulesErrorCollector_init(OrgJunitRulesErrorCollector *self) {
  OrgJunitRulesVerifier_init(self);
  JreStrongAssignAndConsume(&self->errors_, new_JavaUtilArrayList_init());
}

OrgJunitRulesErrorCollector *new_OrgJunitRulesErrorCollector_init() {
  J2OBJC_NEW_IMPL(OrgJunitRulesErrorCollector, init)
}

OrgJunitRulesErrorCollector *create_OrgJunitRulesErrorCollector_init() {
  J2OBJC_CREATE_IMPL(OrgJunitRulesErrorCollector, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitRulesErrorCollector)

@implementation OrgJunitRulesErrorCollector_1

- (instancetype)initWithNSString:(NSString *)capture$0
                          withId:(id)capture$1
          withOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)capture$2 {
  OrgJunitRulesErrorCollector_1_initWithNSString_withId_withOrgHamcrestMatcher_(self, capture$0, capture$1, capture$2);
  return self;
}

- (id)call {
  OrgJunitAssert_assertThatWithNSString_withId_withOrgHamcrestMatcher_(val$reason_, val$value_, val$matcher_);
  return val$value_;
}

- (void)dealloc {
  RELEASE_(val$reason_);
  RELEASE_(val$value_);
  RELEASE_(val$matcher_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withId:withOrgHamcrestMatcher:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$reason_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$value_", "LNSObject;", .constantValue.asLong = 0, 0x1012, -1, -1, 1, -1 },
    { "val$matcher_", "LOrgHamcrestMatcher;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "TT;", "Lorg/hamcrest/Matcher<TT;>;", "LOrgJunitRulesErrorCollector;", "checkThatWithNSString:withId:withOrgHamcrestMatcher:", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _OrgJunitRulesErrorCollector_1 = { "", "org.junit.rules", ptrTable, methods, fields, 7, 0x8018, 2, 3, 3, -1, 4, 5, -1 };
  return &_OrgJunitRulesErrorCollector_1;
}

@end

void OrgJunitRulesErrorCollector_1_initWithNSString_withId_withOrgHamcrestMatcher_(OrgJunitRulesErrorCollector_1 *self, NSString *capture$0, id capture$1, id<OrgHamcrestMatcher> capture$2) {
  JreStrongAssign(&self->val$reason_, capture$0);
  JreStrongAssign(&self->val$value_, capture$1);
  JreStrongAssign(&self->val$matcher_, capture$2);
  NSObject_init(self);
}

OrgJunitRulesErrorCollector_1 *new_OrgJunitRulesErrorCollector_1_initWithNSString_withId_withOrgHamcrestMatcher_(NSString *capture$0, id capture$1, id<OrgHamcrestMatcher> capture$2) {
  J2OBJC_NEW_IMPL(OrgJunitRulesErrorCollector_1, initWithNSString_withId_withOrgHamcrestMatcher_, capture$0, capture$1, capture$2)
}

OrgJunitRulesErrorCollector_1 *create_OrgJunitRulesErrorCollector_1_initWithNSString_withId_withOrgHamcrestMatcher_(NSString *capture$0, id capture$1, id<OrgHamcrestMatcher> capture$2) {
  J2OBJC_CREATE_IMPL(OrgJunitRulesErrorCollector_1, initWithNSString_withId_withOrgHamcrestMatcher_, capture$0, capture$1, capture$2)
}
