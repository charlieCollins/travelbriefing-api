//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/rules/ExpectedExceptionMatcherBuilder.java
//

#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "org/hamcrest/CoreMatchers.h"
#include "org/hamcrest/Matcher.h"
#include "org/junit/matchers/JUnitMatchers.h"
#include "org/junit/rules/ExpectedExceptionMatcherBuilder.h"

@interface OrgJunitRulesExpectedExceptionMatcherBuilder () {
 @public
  id<JavaUtilList> matchers_;
}

- (id<OrgHamcrestMatcher>)allOfTheMatchers;

- (id<JavaUtilList>)castedMatchers;

- (id<OrgHamcrestMatcher>)castWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)singleMatcher;

@end

J2OBJC_FIELD_SETTER(OrgJunitRulesExpectedExceptionMatcherBuilder, matchers_, id<JavaUtilList>)

__attribute__((unused)) static id<OrgHamcrestMatcher> OrgJunitRulesExpectedExceptionMatcherBuilder_allOfTheMatchers(OrgJunitRulesExpectedExceptionMatcherBuilder *self);

__attribute__((unused)) static id<JavaUtilList> OrgJunitRulesExpectedExceptionMatcherBuilder_castedMatchers(OrgJunitRulesExpectedExceptionMatcherBuilder *self);

__attribute__((unused)) static id<OrgHamcrestMatcher> OrgJunitRulesExpectedExceptionMatcherBuilder_castWithOrgHamcrestMatcher_(OrgJunitRulesExpectedExceptionMatcherBuilder *self, id<OrgHamcrestMatcher> singleMatcher);

@implementation OrgJunitRulesExpectedExceptionMatcherBuilder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJunitRulesExpectedExceptionMatcherBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher {
  [((id<JavaUtilList>) nil_chk(matchers_)) addWithId:matcher];
}

- (jboolean)expectsThrowable {
  return ![((id<JavaUtilList>) nil_chk(matchers_)) isEmpty];
}

- (id<OrgHamcrestMatcher>)build {
  return OrgJunitMatchersJUnitMatchers_isThrowableWithOrgHamcrestMatcher_(OrgJunitRulesExpectedExceptionMatcherBuilder_allOfTheMatchers(self));
}

- (id<OrgHamcrestMatcher>)allOfTheMatchers {
  return OrgJunitRulesExpectedExceptionMatcherBuilder_allOfTheMatchers(self);
}

- (id<JavaUtilList>)castedMatchers {
  return OrgJunitRulesExpectedExceptionMatcherBuilder_castedMatchers(self);
}

- (id<OrgHamcrestMatcher>)castWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)singleMatcher {
  return OrgJunitRulesExpectedExceptionMatcherBuilder_castWithOrgHamcrestMatcher_(self, singleMatcher);
}

- (void)dealloc {
  RELEASE_(matchers_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, 2, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgHamcrestMatcher;", 0x0, -1, -1, -1, 3, -1, -1 },
    { NULL, "LOrgHamcrestMatcher;", 0x2, -1, -1, -1, 3, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, -1, -1, -1, 4, -1, -1 },
    { NULL, "LOrgHamcrestMatcher;", 0x2, 5, 1, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addWithOrgHamcrestMatcher:);
  methods[2].selector = @selector(expectsThrowable);
  methods[3].selector = @selector(build);
  methods[4].selector = @selector(allOfTheMatchers);
  methods[5].selector = @selector(castedMatchers);
  methods[6].selector = @selector(castWithOrgHamcrestMatcher:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "matchers_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "add", "LOrgHamcrestMatcher;", "(Lorg/hamcrest/Matcher<*>;)V", "()Lorg/hamcrest/Matcher<Ljava/lang/Throwable;>;", "()Ljava/util/List<Lorg/hamcrest/Matcher<-Ljava/lang/Throwable;>;>;", "cast", "(Lorg/hamcrest/Matcher<*>;)Lorg/hamcrest/Matcher<Ljava/lang/Throwable;>;", "Ljava/util/List<Lorg/hamcrest/Matcher<*>;>;" };
  static const J2ObjcClassInfo _OrgJunitRulesExpectedExceptionMatcherBuilder = { "ExpectedExceptionMatcherBuilder", "org.junit.rules", ptrTable, methods, fields, 7, 0x0, 7, 1, -1, -1, -1, -1, -1 };
  return &_OrgJunitRulesExpectedExceptionMatcherBuilder;
}

@end

void OrgJunitRulesExpectedExceptionMatcherBuilder_init(OrgJunitRulesExpectedExceptionMatcherBuilder *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->matchers_, new_JavaUtilArrayList_init());
}

OrgJunitRulesExpectedExceptionMatcherBuilder *new_OrgJunitRulesExpectedExceptionMatcherBuilder_init() {
  J2OBJC_NEW_IMPL(OrgJunitRulesExpectedExceptionMatcherBuilder, init)
}

OrgJunitRulesExpectedExceptionMatcherBuilder *create_OrgJunitRulesExpectedExceptionMatcherBuilder_init() {
  J2OBJC_CREATE_IMPL(OrgJunitRulesExpectedExceptionMatcherBuilder, init)
}

id<OrgHamcrestMatcher> OrgJunitRulesExpectedExceptionMatcherBuilder_allOfTheMatchers(OrgJunitRulesExpectedExceptionMatcherBuilder *self) {
  if ([((id<JavaUtilList>) nil_chk(self->matchers_)) size] == 1) {
    return OrgJunitRulesExpectedExceptionMatcherBuilder_castWithOrgHamcrestMatcher_(self, [self->matchers_ getWithInt:0]);
  }
  return OrgHamcrestCoreMatchers_allOfWithJavaLangIterable_(OrgJunitRulesExpectedExceptionMatcherBuilder_castedMatchers(self));
}

id<JavaUtilList> OrgJunitRulesExpectedExceptionMatcherBuilder_castedMatchers(OrgJunitRulesExpectedExceptionMatcherBuilder *self) {
  return create_JavaUtilArrayList_initWithJavaUtilCollection_(self->matchers_);
}

id<OrgHamcrestMatcher> OrgJunitRulesExpectedExceptionMatcherBuilder_castWithOrgHamcrestMatcher_(OrgJunitRulesExpectedExceptionMatcherBuilder *self, id<OrgHamcrestMatcher> singleMatcher) {
  return singleMatcher;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitRulesExpectedExceptionMatcherBuilder)
