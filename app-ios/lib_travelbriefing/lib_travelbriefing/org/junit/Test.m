//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/Test.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/annotation/ElementType.h"
#include "java/lang/annotation/Retention.h"
#include "java/lang/annotation/RetentionPolicy.h"
#include "java/lang/annotation/Target.h"
#include "org/junit/Test.h"

__attribute__((unused)) static IOSObjectArray *OrgJunitTest__Annotations$0();

@interface OrgJunitTest_None ()

- (instancetype)init;

@end

inline jlong OrgJunitTest_None_get_serialVersionUID();
#define OrgJunitTest_None_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJunitTest_None, serialVersionUID, jlong)

__attribute__((unused)) static void OrgJunitTest_None_init(OrgJunitTest_None *self);

__attribute__((unused)) static OrgJunitTest_None *new_OrgJunitTest_None_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJunitTest_None *create_OrgJunitTest_None_init();

@implementation OrgJunitTest

@synthesize expected = expected_;
@synthesize timeout = timeout_;

+ (IOSClass *)expectedDefault {
  return OrgJunitTest_None_class_();
}

+ (jlong)timeoutDefault {
  return 0;
}

- (IOSClass *)annotationType {
  return OrgJunitTest_class_();
}

- (NSString *)description {
  return @"@org.junit.Test()";
}

- (void)dealloc {
  RELEASE_(expected_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LIOSClass;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(expected);
  methods[1].selector = @selector(timeout);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "expected_", "LIOSClass;", .constantValue.asLong = 0, 0x1000, -1, -1, 0, -1 },
    { "timeout_", "J", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Ljava/lang/Class<+Ljava/lang/Throwable;>;", "LOrgJunitTest_None;", (void *)&OrgJunitTest__Annotations$0 };
  static const J2ObjcClassInfo _OrgJunitTest = { "Test", "org.junit", ptrTable, methods, fields, 7, 0x2609, 2, 2, -1, 1, -1, -1, 2 };
  return &_OrgJunitTest;
}

@end

id<OrgJunitTest> create_OrgJunitTest(IOSClass *expected, jlong timeout) {
  OrgJunitTest *self = AUTORELEASE([[OrgJunitTest alloc] init]);
  self->expected_ = RETAIN_(expected);
  self->timeout_ = timeout;
  return self;
}

IOSObjectArray *OrgJunitTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)), create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, METHOD) } count:1 type:JavaLangAnnotationElementType_class_()]) } count:2 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgJunitTest)

@implementation OrgJunitTest_None

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJunitTest_None_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJunitTest_None_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJunitTest;" };
  static const J2ObjcClassInfo _OrgJunitTest_None = { "None", "org.junit", ptrTable, methods, fields, 7, 0x9, 1, 1, 0, -1, -1, -1, -1 };
  return &_OrgJunitTest_None;
}

@end

void OrgJunitTest_None_init(OrgJunitTest_None *self) {
  NSException_init(self);
}

OrgJunitTest_None *new_OrgJunitTest_None_init() {
  J2OBJC_NEW_IMPL(OrgJunitTest_None, init)
}

OrgJunitTest_None *create_OrgJunitTest_None_init() {
  J2OBJC_CREATE_IMPL(OrgJunitTest_None, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitTest_None)
