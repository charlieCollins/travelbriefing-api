//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/experimental/categories/CategoryValidator.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "org/junit/After.h"
#include "org/junit/AfterClass.h"
#include "org/junit/Before.h"
#include "org/junit/BeforeClass.h"
#include "org/junit/experimental/categories/CategoryValidator.h"
#include "org/junit/runners/model/FrameworkMethod.h"
#include "org/junit/validator/AnnotationValidator.h"

@interface OrgJunitExperimentalCategoriesCategoryValidator ()

- (void)addErrorMessageWithJavaUtilList:(id<JavaUtilList>)errors
                           withIOSClass:(IOSClass *)clazz;

@end

inline id<JavaUtilSet> OrgJunitExperimentalCategoriesCategoryValidator_get_INCOMPATIBLE_ANNOTATIONS();
static id<JavaUtilSet> OrgJunitExperimentalCategoriesCategoryValidator_INCOMPATIBLE_ANNOTATIONS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJunitExperimentalCategoriesCategoryValidator, INCOMPATIBLE_ANNOTATIONS, id<JavaUtilSet>)

__attribute__((unused)) static void OrgJunitExperimentalCategoriesCategoryValidator_addErrorMessageWithJavaUtilList_withIOSClass_(OrgJunitExperimentalCategoriesCategoryValidator *self, id<JavaUtilList> errors, IOSClass *clazz);

J2OBJC_INITIALIZED_DEFN(OrgJunitExperimentalCategoriesCategoryValidator)

@implementation OrgJunitExperimentalCategoriesCategoryValidator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJunitExperimentalCategoriesCategoryValidator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilList>)validateAnnotatedMethodWithOrgJunitRunnersModelFrameworkMethod:(OrgJunitRunnersModelFrameworkMethod *)method {
  id<JavaUtilList> errors = create_JavaUtilArrayList_init();
  IOSObjectArray *annotations = [((OrgJunitRunnersModelFrameworkMethod *) nil_chk(method)) getAnnotations];
  {
    IOSObjectArray *a__ = annotations;
    id<JavaLangAnnotationAnnotation> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<JavaLangAnnotationAnnotation> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaLangAnnotationAnnotation> annotation = *b__++;
      for (IOSClass * __strong clazz in nil_chk(OrgJunitExperimentalCategoriesCategoryValidator_INCOMPATIBLE_ANNOTATIONS)) {
        if ([((IOSClass *) nil_chk([((id<JavaLangAnnotationAnnotation>) nil_chk(annotation)) annotationType])) isAssignableFrom:clazz]) {
          OrgJunitExperimentalCategoriesCategoryValidator_addErrorMessageWithJavaUtilList_withIOSClass_(self, errors, clazz);
        }
      }
    }
  }
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(errors);
}

- (void)addErrorMessageWithJavaUtilList:(id<JavaUtilList>)errors
                           withIOSClass:(IOSClass *)clazz {
  OrgJunitExperimentalCategoriesCategoryValidator_addErrorMessageWithJavaUtilList_withIOSClass_(self, errors, clazz);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(validateAnnotatedMethodWithOrgJunitRunnersModelFrameworkMethod:);
  methods[2].selector = @selector(addErrorMessageWithJavaUtilList:withIOSClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INCOMPATIBLE_ANNOTATIONS", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1a, -1, 6, 7, -1 },
  };
  static const void *ptrTable[] = { "validateAnnotatedMethod", "LOrgJunitRunnersModelFrameworkMethod;", "(Lorg/junit/runners/model/FrameworkMethod;)Ljava/util/List<Ljava/lang/Exception;>;", "addErrorMessage", "LJavaUtilList;LIOSClass;", "(Ljava/util/List<Ljava/lang/Exception;>;Ljava/lang/Class<*>;)V", &OrgJunitExperimentalCategoriesCategoryValidator_INCOMPATIBLE_ANNOTATIONS, "Ljava/util/Set<Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;>;" };
  static const J2ObjcClassInfo _OrgJunitExperimentalCategoriesCategoryValidator = { "CategoryValidator", "org.junit.experimental.categories", ptrTable, methods, fields, 7, 0x11, 3, 1, -1, -1, -1, -1, -1 };
  return &_OrgJunitExperimentalCategoriesCategoryValidator;
}

+ (void)initialize {
  if (self == [OrgJunitExperimentalCategoriesCategoryValidator class]) {
    JreStrongAssign(&OrgJunitExperimentalCategoriesCategoryValidator_INCOMPATIBLE_ANNOTATIONS, JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(create_JavaUtilHashSet_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ OrgJunitBeforeClass_class_(), OrgJunitAfterClass_class_(), OrgJunitBefore_class_(), OrgJunitAfter_class_() } count:4 type:IOSClass_class_()]))));
    J2OBJC_SET_INITIALIZED(OrgJunitExperimentalCategoriesCategoryValidator)
  }
}

@end

void OrgJunitExperimentalCategoriesCategoryValidator_init(OrgJunitExperimentalCategoriesCategoryValidator *self) {
  OrgJunitValidatorAnnotationValidator_init(self);
}

OrgJunitExperimentalCategoriesCategoryValidator *new_OrgJunitExperimentalCategoriesCategoryValidator_init() {
  J2OBJC_NEW_IMPL(OrgJunitExperimentalCategoriesCategoryValidator, init)
}

OrgJunitExperimentalCategoriesCategoryValidator *create_OrgJunitExperimentalCategoriesCategoryValidator_init() {
  J2OBJC_CREATE_IMPL(OrgJunitExperimentalCategoriesCategoryValidator, init)
}

void OrgJunitExperimentalCategoriesCategoryValidator_addErrorMessageWithJavaUtilList_withIOSClass_(OrgJunitExperimentalCategoriesCategoryValidator *self, id<JavaUtilList> errors, IOSClass *clazz) {
  NSString *message = NSString_java_formatWithNSString_withNSObjectArray_(@"@%s can not be combined with @Category", [IOSObjectArray arrayWithObjects:(id[]){ [((IOSClass *) nil_chk(clazz)) getSimpleName] } count:1 type:NSObject_class_()]);
  [((id<JavaUtilList>) nil_chk(errors)) addWithId:create_JavaLangException_initWithNSString_(message)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitExperimentalCategoriesCategoryValidator)
