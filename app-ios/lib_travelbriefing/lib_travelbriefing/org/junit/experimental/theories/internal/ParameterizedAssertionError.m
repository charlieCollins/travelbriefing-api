//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/experimental/theories/internal/ParameterizedAssertionError.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/AssertionError.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "org/junit/experimental/theories/internal/ParameterizedAssertionError.h"

@interface OrgJunitExperimentalTheoriesInternalParameterizedAssertionError ()

+ (NSString *)stringValueOfWithId:(id)next;

@end

inline jlong OrgJunitExperimentalTheoriesInternalParameterizedAssertionError_get_serialVersionUID();
#define OrgJunitExperimentalTheoriesInternalParameterizedAssertionError_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJunitExperimentalTheoriesInternalParameterizedAssertionError, serialVersionUID, jlong)

__attribute__((unused)) static NSString *OrgJunitExperimentalTheoriesInternalParameterizedAssertionError_stringValueOfWithId_(id next);

@implementation OrgJunitExperimentalTheoriesInternalParameterizedAssertionError

- (instancetype)initWithNSException:(NSException *)targetException
                       withNSString:(NSString *)methodName
                  withNSObjectArray:(IOSObjectArray *)params {
  OrgJunitExperimentalTheoriesInternalParameterizedAssertionError_initWithNSException_withNSString_withNSObjectArray_(self, targetException, methodName, params);
  return self;
}

- (jboolean)isEqual:(id)obj {
  return [obj isKindOfClass:[OrgJunitExperimentalTheoriesInternalParameterizedAssertionError class]] && [((NSString *) nil_chk([self description])) isEqual:[nil_chk(obj) description]];
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk([self description])) hash]);
}

+ (NSString *)joinWithNSString:(NSString *)delimiter
             withNSObjectArray:(IOSObjectArray *)params {
  return OrgJunitExperimentalTheoriesInternalParameterizedAssertionError_joinWithNSString_withNSObjectArray_(delimiter, params);
}

+ (NSString *)joinWithNSString:(NSString *)delimiter
        withJavaUtilCollection:(id<JavaUtilCollection>)values {
  return OrgJunitExperimentalTheoriesInternalParameterizedAssertionError_joinWithNSString_withJavaUtilCollection_(delimiter, values);
}

+ (NSString *)stringValueOfWithId:(id)next {
  return OrgJunitExperimentalTheoriesInternalParameterizedAssertionError_stringValueOfWithId_(next);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x89, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 4, 6, -1, 7, -1, -1 },
    { NULL, "LNSString;", 0xa, 8, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSException:withNSString:withNSObjectArray:);
  methods[1].selector = @selector(isEqual:);
  methods[2].selector = @selector(hash);
  methods[3].selector = @selector(joinWithNSString:withNSObjectArray:);
  methods[4].selector = @selector(joinWithNSString:withJavaUtilCollection:);
  methods[5].selector = @selector(stringValueOfWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJunitExperimentalTheoriesInternalParameterizedAssertionError_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSException;LNSString;[LNSObject;", "equals", "LNSObject;", "hashCode", "join", "LNSString;[LNSObject;", "LNSString;LJavaUtilCollection;", "(Ljava/lang/String;Ljava/util/Collection<Ljava/lang/Object;>;)Ljava/lang/String;", "stringValueOf" };
  static const J2ObjcClassInfo _OrgJunitExperimentalTheoriesInternalParameterizedAssertionError = { "ParameterizedAssertionError", "org.junit.experimental.theories.internal", ptrTable, methods, fields, 7, 0x1, 6, 1, -1, -1, -1, -1, -1 };
  return &_OrgJunitExperimentalTheoriesInternalParameterizedAssertionError;
}

@end

void OrgJunitExperimentalTheoriesInternalParameterizedAssertionError_initWithNSException_withNSString_withNSObjectArray_(OrgJunitExperimentalTheoriesInternalParameterizedAssertionError *self, NSException *targetException, NSString *methodName, IOSObjectArray *params) {
  JavaLangAssertionError_initWithId_(self, NSString_java_formatWithNSString_withNSObjectArray_(@"%s(%s)", [IOSObjectArray arrayWithObjects:(id[]){ methodName, OrgJunitExperimentalTheoriesInternalParameterizedAssertionError_joinWithNSString_withNSObjectArray_(@", ", params) } count:2 type:NSObject_class_()]));
  [self initCauseWithNSException:targetException];
}

OrgJunitExperimentalTheoriesInternalParameterizedAssertionError *new_OrgJunitExperimentalTheoriesInternalParameterizedAssertionError_initWithNSException_withNSString_withNSObjectArray_(NSException *targetException, NSString *methodName, IOSObjectArray *params) {
  J2OBJC_NEW_IMPL(OrgJunitExperimentalTheoriesInternalParameterizedAssertionError, initWithNSException_withNSString_withNSObjectArray_, targetException, methodName, params)
}

OrgJunitExperimentalTheoriesInternalParameterizedAssertionError *create_OrgJunitExperimentalTheoriesInternalParameterizedAssertionError_initWithNSException_withNSString_withNSObjectArray_(NSException *targetException, NSString *methodName, IOSObjectArray *params) {
  J2OBJC_CREATE_IMPL(OrgJunitExperimentalTheoriesInternalParameterizedAssertionError, initWithNSException_withNSString_withNSObjectArray_, targetException, methodName, params)
}

NSString *OrgJunitExperimentalTheoriesInternalParameterizedAssertionError_joinWithNSString_withNSObjectArray_(NSString *delimiter, IOSObjectArray *params) {
  OrgJunitExperimentalTheoriesInternalParameterizedAssertionError_initialize();
  return OrgJunitExperimentalTheoriesInternalParameterizedAssertionError_joinWithNSString_withJavaUtilCollection_(delimiter, JavaUtilArrays_asListWithNSObjectArray_(params));
}

NSString *OrgJunitExperimentalTheoriesInternalParameterizedAssertionError_joinWithNSString_withJavaUtilCollection_(NSString *delimiter, id<JavaUtilCollection> values) {
  OrgJunitExperimentalTheoriesInternalParameterizedAssertionError_initialize();
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) nil_chk(values)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    id next = [iter next];
    [sb appendWithNSString:OrgJunitExperimentalTheoriesInternalParameterizedAssertionError_stringValueOfWithId_(next)];
    if ([iter hasNext]) {
      [sb appendWithNSString:delimiter];
    }
  }
  return [sb description];
}

NSString *OrgJunitExperimentalTheoriesInternalParameterizedAssertionError_stringValueOfWithId_(id next) {
  OrgJunitExperimentalTheoriesInternalParameterizedAssertionError_initialize();
  @try {
    return NSString_java_valueOf_(next);
  }
  @catch (NSException *e) {
    return @"[toString failed]";
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitExperimentalTheoriesInternalParameterizedAssertionError)
