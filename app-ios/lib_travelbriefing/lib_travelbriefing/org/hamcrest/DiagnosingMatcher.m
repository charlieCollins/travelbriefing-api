//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/hamcrest/DiagnosingMatcher.java
//

#include "J2ObjC_source.h"
#include "org/hamcrest/BaseMatcher.h"
#include "org/hamcrest/Description.h"
#include "org/hamcrest/DiagnosingMatcher.h"

@implementation OrgHamcrestDiagnosingMatcher

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgHamcrestDiagnosingMatcher_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)matchesWithId:(id)item {
  return [self matchesWithId:item withOrgHamcrestDescription:JreLoadStatic(OrgHamcrestDescription, NONE)];
}

- (void)describeMismatchWithId:(id)item
    withOrgHamcrestDescription:(id<OrgHamcrestDescription>)mismatchDescription {
  [self matchesWithId:item withOrgHamcrestDescription:mismatchDescription];
}

- (jboolean)matchesWithId:(id)item
withOrgHamcrestDescription:(id<OrgHamcrestDescription>)mismatchDescription {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x404, 0, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(matchesWithId:);
  methods[2].selector = @selector(describeMismatchWithId:withOrgHamcrestDescription:);
  methods[3].selector = @selector(matchesWithId:withOrgHamcrestDescription:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "matches", "LNSObject;", "describeMismatch", "LNSObject;LOrgHamcrestDescription;", "<T:Ljava/lang/Object;>Lorg/hamcrest/BaseMatcher<TT;>;" };
  static const J2ObjcClassInfo _OrgHamcrestDiagnosingMatcher = { "DiagnosingMatcher", "org.hamcrest", ptrTable, methods, NULL, 7, 0x401, 4, 0, -1, -1, -1, 4, -1 };
  return &_OrgHamcrestDiagnosingMatcher;
}

@end

void OrgHamcrestDiagnosingMatcher_init(OrgHamcrestDiagnosingMatcher *self) {
  OrgHamcrestBaseMatcher_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgHamcrestDiagnosingMatcher)
