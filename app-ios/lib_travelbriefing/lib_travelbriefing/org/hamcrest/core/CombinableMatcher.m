//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/hamcrest/core/CombinableMatcher.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "org/hamcrest/Description.h"
#include "org/hamcrest/Factory.h"
#include "org/hamcrest/Matcher.h"
#include "org/hamcrest/TypeSafeDiagnosingMatcher.h"
#include "org/hamcrest/core/AllOf.h"
#include "org/hamcrest/core/AnyOf.h"
#include "org/hamcrest/core/CombinableMatcher.h"

@interface OrgHamcrestCoreCombinableMatcher () {
 @public
  id<OrgHamcrestMatcher> matcher_;
}

- (JavaUtilArrayList *)templatedListWithWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)other;

@end

J2OBJC_FIELD_SETTER(OrgHamcrestCoreCombinableMatcher, matcher_, id<OrgHamcrestMatcher>)

__attribute__((unused)) static JavaUtilArrayList *OrgHamcrestCoreCombinableMatcher_templatedListWithWithOrgHamcrestMatcher_(OrgHamcrestCoreCombinableMatcher *self, id<OrgHamcrestMatcher> other);

__attribute__((unused)) static IOSObjectArray *OrgHamcrestCoreCombinableMatcher__Annotations$0();

__attribute__((unused)) static IOSObjectArray *OrgHamcrestCoreCombinableMatcher__Annotations$1();

@interface OrgHamcrestCoreCombinableMatcher_CombinableBothMatcher () {
 @public
  id<OrgHamcrestMatcher> first_;
}

@end

J2OBJC_FIELD_SETTER(OrgHamcrestCoreCombinableMatcher_CombinableBothMatcher, first_, id<OrgHamcrestMatcher>)

@interface OrgHamcrestCoreCombinableMatcher_CombinableEitherMatcher () {
 @public
  id<OrgHamcrestMatcher> first_;
}

@end

J2OBJC_FIELD_SETTER(OrgHamcrestCoreCombinableMatcher_CombinableEitherMatcher, first_, id<OrgHamcrestMatcher>)

@implementation OrgHamcrestCoreCombinableMatcher

- (instancetype)initWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher {
  OrgHamcrestCoreCombinableMatcher_initWithOrgHamcrestMatcher_(self, matcher);
  return self;
}

- (jboolean)matchesSafelyWithId:(id)item
     withOrgHamcrestDescription:(id<OrgHamcrestDescription>)mismatch {
  if (![((id<OrgHamcrestMatcher>) nil_chk(matcher_)) matchesWithId:item]) {
    [matcher_ describeMismatchWithId:item withOrgHamcrestDescription:mismatch];
    return false;
  }
  return true;
}

- (void)describeToWithOrgHamcrestDescription:(id<OrgHamcrestDescription>)description_ {
  [((id<OrgHamcrestDescription>) nil_chk(description_)) appendDescriptionOfWithOrgHamcrestSelfDescribing:matcher_];
}

- (OrgHamcrestCoreCombinableMatcher *)and__WithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)other {
  return create_OrgHamcrestCoreCombinableMatcher_initWithOrgHamcrestMatcher_(create_OrgHamcrestCoreAllOf_initWithJavaLangIterable_(OrgHamcrestCoreCombinableMatcher_templatedListWithWithOrgHamcrestMatcher_(self, other)));
}

- (OrgHamcrestCoreCombinableMatcher *)or__WithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)other {
  return create_OrgHamcrestCoreCombinableMatcher_initWithOrgHamcrestMatcher_(create_OrgHamcrestCoreAnyOf_initWithJavaLangIterable_(OrgHamcrestCoreCombinableMatcher_templatedListWithWithOrgHamcrestMatcher_(self, other)));
}

- (JavaUtilArrayList *)templatedListWithWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)other {
  return OrgHamcrestCoreCombinableMatcher_templatedListWithWithOrgHamcrestMatcher_(self, other);
}

+ (OrgHamcrestCoreCombinableMatcher_CombinableBothMatcher *)bothWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher {
  return OrgHamcrestCoreCombinableMatcher_bothWithOrgHamcrestMatcher_(matcher);
}

+ (OrgHamcrestCoreCombinableMatcher_CombinableEitherMatcher *)eitherWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher {
  return OrgHamcrestCoreCombinableMatcher_eitherWithOrgHamcrestMatcher_(matcher);
}

- (void)dealloc {
  RELEASE_(matcher_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x4, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOrgHamcrestCoreCombinableMatcher;", 0x1, 7, 0, -1, 8, -1, -1 },
    { NULL, "LOrgHamcrestCoreCombinableMatcher;", 0x1, 9, 0, -1, 8, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x2, 10, 0, -1, 11, -1, -1 },
    { NULL, "LOrgHamcrestCoreCombinableMatcher_CombinableBothMatcher;", 0x9, 12, 0, -1, 13, 14, -1 },
    { NULL, "LOrgHamcrestCoreCombinableMatcher_CombinableEitherMatcher;", 0x9, 15, 0, -1, 16, 17, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgHamcrestMatcher:);
  methods[1].selector = @selector(matchesSafelyWithId:withOrgHamcrestDescription:);
  methods[2].selector = @selector(describeToWithOrgHamcrestDescription:);
  methods[3].selector = @selector(and__WithOrgHamcrestMatcher:);
  methods[4].selector = @selector(or__WithOrgHamcrestMatcher:);
  methods[5].selector = @selector(templatedListWithWithOrgHamcrestMatcher:);
  methods[6].selector = @selector(bothWithOrgHamcrestMatcher:);
  methods[7].selector = @selector(eitherWithOrgHamcrestMatcher:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "matcher_", "LOrgHamcrestMatcher;", .constantValue.asLong = 0, 0x12, -1, -1, 18, -1 },
  };
  static const void *ptrTable[] = { "LOrgHamcrestMatcher;", "(Lorg/hamcrest/Matcher<-TT;>;)V", "matchesSafely", "LNSObject;LOrgHamcrestDescription;", "(TT;Lorg/hamcrest/Description;)Z", "describeTo", "LOrgHamcrestDescription;", "and", "(Lorg/hamcrest/Matcher<-TT;>;)Lorg/hamcrest/core/CombinableMatcher<TT;>;", "or", "templatedListWith", "(Lorg/hamcrest/Matcher<-TT;>;)Ljava/util/ArrayList<Lorg/hamcrest/Matcher<-TT;>;>;", "both", "<LHS:Ljava/lang/Object;>(Lorg/hamcrest/Matcher<-TLHS;>;)Lorg/hamcrest/core/CombinableMatcher$CombinableBothMatcher<TLHS;>;", (void *)&OrgHamcrestCoreCombinableMatcher__Annotations$0, "either", "<LHS:Ljava/lang/Object;>(Lorg/hamcrest/Matcher<-TLHS;>;)Lorg/hamcrest/core/CombinableMatcher$CombinableEitherMatcher<TLHS;>;", (void *)&OrgHamcrestCoreCombinableMatcher__Annotations$1, "Lorg/hamcrest/Matcher<-TT;>;", "LOrgHamcrestCoreCombinableMatcher_CombinableBothMatcher;LOrgHamcrestCoreCombinableMatcher_CombinableEitherMatcher;", "<T:Ljava/lang/Object;>Lorg/hamcrest/TypeSafeDiagnosingMatcher<TT;>;" };
  static const J2ObjcClassInfo _OrgHamcrestCoreCombinableMatcher = { "CombinableMatcher", "org.hamcrest.core", ptrTable, methods, fields, 7, 0x1, 8, 1, -1, 19, -1, 20, -1 };
  return &_OrgHamcrestCoreCombinableMatcher;
}

@end

void OrgHamcrestCoreCombinableMatcher_initWithOrgHamcrestMatcher_(OrgHamcrestCoreCombinableMatcher *self, id<OrgHamcrestMatcher> matcher) {
  OrgHamcrestTypeSafeDiagnosingMatcher_init(self);
  JreStrongAssign(&self->matcher_, matcher);
}

OrgHamcrestCoreCombinableMatcher *new_OrgHamcrestCoreCombinableMatcher_initWithOrgHamcrestMatcher_(id<OrgHamcrestMatcher> matcher) {
  J2OBJC_NEW_IMPL(OrgHamcrestCoreCombinableMatcher, initWithOrgHamcrestMatcher_, matcher)
}

OrgHamcrestCoreCombinableMatcher *create_OrgHamcrestCoreCombinableMatcher_initWithOrgHamcrestMatcher_(id<OrgHamcrestMatcher> matcher) {
  J2OBJC_CREATE_IMPL(OrgHamcrestCoreCombinableMatcher, initWithOrgHamcrestMatcher_, matcher)
}

JavaUtilArrayList *OrgHamcrestCoreCombinableMatcher_templatedListWithWithOrgHamcrestMatcher_(OrgHamcrestCoreCombinableMatcher *self, id<OrgHamcrestMatcher> other) {
  JavaUtilArrayList *matchers = create_JavaUtilArrayList_init();
  [matchers addWithId:self->matcher_];
  [matchers addWithId:other];
  return matchers;
}

OrgHamcrestCoreCombinableMatcher_CombinableBothMatcher *OrgHamcrestCoreCombinableMatcher_bothWithOrgHamcrestMatcher_(id<OrgHamcrestMatcher> matcher) {
  OrgHamcrestCoreCombinableMatcher_initialize();
  return create_OrgHamcrestCoreCombinableMatcher_CombinableBothMatcher_initWithOrgHamcrestMatcher_(matcher);
}

OrgHamcrestCoreCombinableMatcher_CombinableEitherMatcher *OrgHamcrestCoreCombinableMatcher_eitherWithOrgHamcrestMatcher_(id<OrgHamcrestMatcher> matcher) {
  OrgHamcrestCoreCombinableMatcher_initialize();
  return create_OrgHamcrestCoreCombinableMatcher_CombinableEitherMatcher_initWithOrgHamcrestMatcher_(matcher);
}

IOSObjectArray *OrgHamcrestCoreCombinableMatcher__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgHamcrestFactory() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgHamcrestCoreCombinableMatcher__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgHamcrestFactory() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgHamcrestCoreCombinableMatcher)

@implementation OrgHamcrestCoreCombinableMatcher_CombinableBothMatcher

- (instancetype)initWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher {
  OrgHamcrestCoreCombinableMatcher_CombinableBothMatcher_initWithOrgHamcrestMatcher_(self, matcher);
  return self;
}

- (OrgHamcrestCoreCombinableMatcher *)and__WithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)other {
  return [create_OrgHamcrestCoreCombinableMatcher_initWithOrgHamcrestMatcher_(first_) and__WithOrgHamcrestMatcher:other];
}

- (void)dealloc {
  RELEASE_(first_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LOrgHamcrestCoreCombinableMatcher;", 0x1, 2, 0, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgHamcrestMatcher:);
  methods[1].selector = @selector(and__WithOrgHamcrestMatcher:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "first_", "LOrgHamcrestMatcher;", .constantValue.asLong = 0, 0x12, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LOrgHamcrestMatcher;", "(Lorg/hamcrest/Matcher<-TX;>;)V", "and", "(Lorg/hamcrest/Matcher<-TX;>;)Lorg/hamcrest/core/CombinableMatcher<TX;>;", "Lorg/hamcrest/Matcher<-TX;>;", "LOrgHamcrestCoreCombinableMatcher;", "<X:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _OrgHamcrestCoreCombinableMatcher_CombinableBothMatcher = { "CombinableBothMatcher", "org.hamcrest.core", ptrTable, methods, fields, 7, 0x19, 2, 1, 5, -1, -1, 6, -1 };
  return &_OrgHamcrestCoreCombinableMatcher_CombinableBothMatcher;
}

@end

void OrgHamcrestCoreCombinableMatcher_CombinableBothMatcher_initWithOrgHamcrestMatcher_(OrgHamcrestCoreCombinableMatcher_CombinableBothMatcher *self, id<OrgHamcrestMatcher> matcher) {
  NSObject_init(self);
  JreStrongAssign(&self->first_, matcher);
}

OrgHamcrestCoreCombinableMatcher_CombinableBothMatcher *new_OrgHamcrestCoreCombinableMatcher_CombinableBothMatcher_initWithOrgHamcrestMatcher_(id<OrgHamcrestMatcher> matcher) {
  J2OBJC_NEW_IMPL(OrgHamcrestCoreCombinableMatcher_CombinableBothMatcher, initWithOrgHamcrestMatcher_, matcher)
}

OrgHamcrestCoreCombinableMatcher_CombinableBothMatcher *create_OrgHamcrestCoreCombinableMatcher_CombinableBothMatcher_initWithOrgHamcrestMatcher_(id<OrgHamcrestMatcher> matcher) {
  J2OBJC_CREATE_IMPL(OrgHamcrestCoreCombinableMatcher_CombinableBothMatcher, initWithOrgHamcrestMatcher_, matcher)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgHamcrestCoreCombinableMatcher_CombinableBothMatcher)

@implementation OrgHamcrestCoreCombinableMatcher_CombinableEitherMatcher

- (instancetype)initWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher {
  OrgHamcrestCoreCombinableMatcher_CombinableEitherMatcher_initWithOrgHamcrestMatcher_(self, matcher);
  return self;
}

- (OrgHamcrestCoreCombinableMatcher *)or__WithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)other {
  return [create_OrgHamcrestCoreCombinableMatcher_initWithOrgHamcrestMatcher_(first_) or__WithOrgHamcrestMatcher:other];
}

- (void)dealloc {
  RELEASE_(first_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LOrgHamcrestCoreCombinableMatcher;", 0x1, 2, 0, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgHamcrestMatcher:);
  methods[1].selector = @selector(or__WithOrgHamcrestMatcher:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "first_", "LOrgHamcrestMatcher;", .constantValue.asLong = 0, 0x12, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LOrgHamcrestMatcher;", "(Lorg/hamcrest/Matcher<-TX;>;)V", "or", "(Lorg/hamcrest/Matcher<-TX;>;)Lorg/hamcrest/core/CombinableMatcher<TX;>;", "Lorg/hamcrest/Matcher<-TX;>;", "LOrgHamcrestCoreCombinableMatcher;", "<X:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _OrgHamcrestCoreCombinableMatcher_CombinableEitherMatcher = { "CombinableEitherMatcher", "org.hamcrest.core", ptrTable, methods, fields, 7, 0x19, 2, 1, 5, -1, -1, 6, -1 };
  return &_OrgHamcrestCoreCombinableMatcher_CombinableEitherMatcher;
}

@end

void OrgHamcrestCoreCombinableMatcher_CombinableEitherMatcher_initWithOrgHamcrestMatcher_(OrgHamcrestCoreCombinableMatcher_CombinableEitherMatcher *self, id<OrgHamcrestMatcher> matcher) {
  NSObject_init(self);
  JreStrongAssign(&self->first_, matcher);
}

OrgHamcrestCoreCombinableMatcher_CombinableEitherMatcher *new_OrgHamcrestCoreCombinableMatcher_CombinableEitherMatcher_initWithOrgHamcrestMatcher_(id<OrgHamcrestMatcher> matcher) {
  J2OBJC_NEW_IMPL(OrgHamcrestCoreCombinableMatcher_CombinableEitherMatcher, initWithOrgHamcrestMatcher_, matcher)
}

OrgHamcrestCoreCombinableMatcher_CombinableEitherMatcher *create_OrgHamcrestCoreCombinableMatcher_CombinableEitherMatcher_initWithOrgHamcrestMatcher_(id<OrgHamcrestMatcher> matcher) {
  J2OBJC_CREATE_IMPL(OrgHamcrestCoreCombinableMatcher_CombinableEitherMatcher, initWithOrgHamcrestMatcher_, matcher)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgHamcrestCoreCombinableMatcher_CombinableEitherMatcher)
