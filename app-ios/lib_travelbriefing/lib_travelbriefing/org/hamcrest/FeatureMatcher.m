//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/hamcrest/FeatureMatcher.java
//

#include "J2ObjC_source.h"
#include "org/hamcrest/Description.h"
#include "org/hamcrest/FeatureMatcher.h"
#include "org/hamcrest/Matcher.h"
#include "org/hamcrest/TypeSafeDiagnosingMatcher.h"
#include "org/hamcrest/internal/ReflectiveTypeFinder.h"

@interface OrgHamcrestFeatureMatcher () {
 @public
  id<OrgHamcrestMatcher> subMatcher_;
  NSString *featureDescription_;
  NSString *featureName_;
}

@end

J2OBJC_FIELD_SETTER(OrgHamcrestFeatureMatcher, subMatcher_, id<OrgHamcrestMatcher>)
J2OBJC_FIELD_SETTER(OrgHamcrestFeatureMatcher, featureDescription_, NSString *)
J2OBJC_FIELD_SETTER(OrgHamcrestFeatureMatcher, featureName_, NSString *)

inline OrgHamcrestInternalReflectiveTypeFinder *OrgHamcrestFeatureMatcher_get_TYPE_FINDER();
static OrgHamcrestInternalReflectiveTypeFinder *OrgHamcrestFeatureMatcher_TYPE_FINDER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgHamcrestFeatureMatcher, TYPE_FINDER, OrgHamcrestInternalReflectiveTypeFinder *)

J2OBJC_INITIALIZED_DEFN(OrgHamcrestFeatureMatcher)

@implementation OrgHamcrestFeatureMatcher

- (instancetype)initWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)subMatcher
                              withNSString:(NSString *)featureDescription
                              withNSString:(NSString *)featureName {
  OrgHamcrestFeatureMatcher_initWithOrgHamcrestMatcher_withNSString_withNSString_(self, subMatcher, featureDescription, featureName);
  return self;
}

- (id)featureValueOfWithId:(id)actual {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)matchesSafelyWithId:(id)actual
     withOrgHamcrestDescription:(id<OrgHamcrestDescription>)mismatch {
  id featureValue = [self featureValueOfWithId:actual];
  if (![((id<OrgHamcrestMatcher>) nil_chk(subMatcher_)) matchesWithId:featureValue]) {
    [((id<OrgHamcrestDescription>) nil_chk([((id<OrgHamcrestDescription>) nil_chk(mismatch)) appendTextWithNSString:featureName_])) appendTextWithNSString:@" "];
    [subMatcher_ describeMismatchWithId:featureValue withOrgHamcrestDescription:mismatch];
    return false;
  }
  return true;
}

- (void)describeToWithOrgHamcrestDescription:(id<OrgHamcrestDescription>)description_ {
  [((id<OrgHamcrestDescription>) nil_chk([((id<OrgHamcrestDescription>) nil_chk([((id<OrgHamcrestDescription>) nil_chk(description_)) appendTextWithNSString:featureDescription_])) appendTextWithNSString:@" "])) appendDescriptionOfWithOrgHamcrestSelfDescribing:subMatcher_];
}

- (void)dealloc {
  RELEASE_(subMatcher_);
  RELEASE_(featureDescription_);
  RELEASE_(featureName_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x404, 2, 3, -1, 4, -1, -1 },
    { NULL, "Z", 0x4, 5, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x11, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgHamcrestMatcher:withNSString:withNSString:);
  methods[1].selector = @selector(featureValueOfWithId:);
  methods[2].selector = @selector(matchesSafelyWithId:withOrgHamcrestDescription:);
  methods[3].selector = @selector(describeToWithOrgHamcrestDescription:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE_FINDER", "LOrgHamcrestInternalReflectiveTypeFinder;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "subMatcher_", "LOrgHamcrestMatcher;", .constantValue.asLong = 0, 0x12, -1, -1, 11, -1 },
    { "featureDescription_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "featureName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgHamcrestMatcher;LNSString;LNSString;", "(Lorg/hamcrest/Matcher<-TU;>;Ljava/lang/String;Ljava/lang/String;)V", "featureValueOf", "LNSObject;", "(TT;)TU;", "matchesSafely", "LNSObject;LOrgHamcrestDescription;", "(TT;Lorg/hamcrest/Description;)Z", "describeTo", "LOrgHamcrestDescription;", &OrgHamcrestFeatureMatcher_TYPE_FINDER, "Lorg/hamcrest/Matcher<-TU;>;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>Lorg/hamcrest/TypeSafeDiagnosingMatcher<TT;>;" };
  static const J2ObjcClassInfo _OrgHamcrestFeatureMatcher = { "FeatureMatcher", "org.hamcrest", ptrTable, methods, fields, 7, 0x401, 4, 4, -1, -1, -1, 12, -1 };
  return &_OrgHamcrestFeatureMatcher;
}

+ (void)initialize {
  if (self == [OrgHamcrestFeatureMatcher class]) {
    JreStrongAssignAndConsume(&OrgHamcrestFeatureMatcher_TYPE_FINDER, new_OrgHamcrestInternalReflectiveTypeFinder_initWithNSString_withInt_withInt_(@"featureValueOf", 1, 0));
    J2OBJC_SET_INITIALIZED(OrgHamcrestFeatureMatcher)
  }
}

@end

void OrgHamcrestFeatureMatcher_initWithOrgHamcrestMatcher_withNSString_withNSString_(OrgHamcrestFeatureMatcher *self, id<OrgHamcrestMatcher> subMatcher, NSString *featureDescription, NSString *featureName) {
  OrgHamcrestTypeSafeDiagnosingMatcher_initWithOrgHamcrestInternalReflectiveTypeFinder_(self, OrgHamcrestFeatureMatcher_TYPE_FINDER);
  JreStrongAssign(&self->subMatcher_, subMatcher);
  JreStrongAssign(&self->featureDescription_, featureDescription);
  JreStrongAssign(&self->featureName_, featureName);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgHamcrestFeatureMatcher)
