//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okio/Okio.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OkioOkio")
#ifdef RESTRICT_OkioOkio
#define INCLUDE_ALL_OkioOkio 0
#else
#define INCLUDE_ALL_OkioOkio 1
#endif
#undef RESTRICT_OkioOkio

#if !defined (OkioOkio_) && (INCLUDE_ALL_OkioOkio || defined(INCLUDE_OkioOkio))
#define OkioOkio_

@class JavaIoFile;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaLangAssertionError;
@class JavaNetSocket;
@class JavaUtilLoggingLogger;
@protocol OkioBufferedSink;
@protocol OkioBufferedSource;
@protocol OkioSink;
@protocol OkioSource;

@interface OkioOkio : NSObject

#pragma mark Public

+ (id<OkioSink>)appendingSinkWithJavaIoFile:(JavaIoFile *)file;

+ (id<OkioSink>)blackhole;

+ (id<OkioBufferedSink>)bufferWithOkioSink:(id<OkioSink>)sink;

+ (id<OkioBufferedSource>)bufferWithOkioSource:(id<OkioSource>)source;

+ (id<OkioSink>)sinkWithJavaIoFile:(JavaIoFile *)file;

+ (id<OkioSink>)sinkWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

+ (id<OkioSink>)sinkWithJavaNetSocket:(JavaNetSocket *)socket;

+ (id<OkioSource>)sourceWithJavaIoFile:(JavaIoFile *)file;

+ (id<OkioSource>)sourceWithJavaIoInputStream:(JavaIoInputStream *)inArg;

+ (id<OkioSource>)sourceWithJavaNetSocket:(JavaNetSocket *)socket;

#pragma mark Package-Private

+ (jboolean)isAndroidGetsocknameErrorWithJavaLangAssertionError:(JavaLangAssertionError *)e;

@end

J2OBJC_STATIC_INIT(OkioOkio)

inline JavaUtilLoggingLogger *OkioOkio_get_logger();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilLoggingLogger *OkioOkio_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OkioOkio, logger, JavaUtilLoggingLogger *)

FOUNDATION_EXPORT id<OkioBufferedSource> OkioOkio_bufferWithOkioSource_(id<OkioSource> source);

FOUNDATION_EXPORT id<OkioBufferedSink> OkioOkio_bufferWithOkioSink_(id<OkioSink> sink);

FOUNDATION_EXPORT id<OkioSink> OkioOkio_sinkWithJavaIoOutputStream_(JavaIoOutputStream *outArg);

FOUNDATION_EXPORT id<OkioSink> OkioOkio_sinkWithJavaNetSocket_(JavaNetSocket *socket);

FOUNDATION_EXPORT id<OkioSource> OkioOkio_sourceWithJavaIoInputStream_(JavaIoInputStream *inArg);

FOUNDATION_EXPORT id<OkioSource> OkioOkio_sourceWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT id<OkioSink> OkioOkio_sinkWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT id<OkioSink> OkioOkio_appendingSinkWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT id<OkioSink> OkioOkio_blackhole();

FOUNDATION_EXPORT id<OkioSource> OkioOkio_sourceWithJavaNetSocket_(JavaNetSocket *socket);

FOUNDATION_EXPORT jboolean OkioOkio_isAndroidGetsocknameErrorWithJavaLangAssertionError_(JavaLangAssertionError *e);

J2OBJC_TYPE_LITERAL_HEADER(OkioOkio)

#endif

#pragma pop_macro("INCLUDE_ALL_OkioOkio")
