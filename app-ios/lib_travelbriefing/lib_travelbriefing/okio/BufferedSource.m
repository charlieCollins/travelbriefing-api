//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okio/BufferedSource.java
//

#include "J2ObjC_source.h"
#include "okio/BufferedSource.h"

@interface OkioBufferedSource : NSObject

@end

@implementation OkioBufferedSource

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOkioBuffer;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x401, 1, 2, 0, -1, -1, -1 },
    { NULL, "Z", 0x401, 3, 2, 0, -1, -1, -1 },
    { NULL, "B", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "S", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "S", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "J", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "J", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "J", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "J", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x401, 4, 2, 0, -1, -1, -1 },
    { NULL, "LOkioByteString;", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "LOkioByteString;", 0x401, 5, 2, 0, -1, -1, -1 },
    { NULL, "I", 0x401, 6, 7, 0, -1, -1, -1 },
    { NULL, "[B", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "[B", 0x401, 8, 2, 0, -1, -1, -1 },
    { NULL, "I", 0x401, 9, 10, 0, -1, -1, -1 },
    { NULL, "V", 0x401, 11, 10, 0, -1, -1, -1 },
    { NULL, "I", 0x401, 9, 12, 0, -1, -1, -1 },
    { NULL, "V", 0x401, 11, 13, 0, -1, -1, -1 },
    { NULL, "J", 0x401, 14, 15, 0, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, 16, 2, 0, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, 17, 18, 0, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, 17, 19, 0, -1, -1, -1 },
    { NULL, "J", 0x401, 20, 21, 0, -1, -1, -1 },
    { NULL, "J", 0x401, 20, 22, 0, -1, -1, -1 },
    { NULL, "J", 0x401, 20, 23, 0, -1, -1, -1 },
    { NULL, "J", 0x401, 20, 24, 0, -1, -1, -1 },
    { NULL, "J", 0x401, 25, 23, 0, -1, -1, -1 },
    { NULL, "J", 0x401, 25, 24, 0, -1, -1, -1 },
    { NULL, "Z", 0x401, 26, 27, 0, -1, -1, -1 },
    { NULL, "Z", 0x401, 26, 28, 0, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(buffer);
  methods[1].selector = @selector(exhausted);
  methods[2].selector = @selector(requireWithLong:);
  methods[3].selector = @selector(requestWithLong:);
  methods[4].selector = @selector(readByte);
  methods[5].selector = @selector(readShort);
  methods[6].selector = @selector(readShortLe);
  methods[7].selector = @selector(readInt);
  methods[8].selector = @selector(readIntLe);
  methods[9].selector = @selector(readLong);
  methods[10].selector = @selector(readLongLe);
  methods[11].selector = @selector(readDecimalLong);
  methods[12].selector = @selector(readHexadecimalUnsignedLong);
  methods[13].selector = @selector(skipWithLong:);
  methods[14].selector = @selector(readByteString);
  methods[15].selector = @selector(readByteStringWithLong:);
  methods[16].selector = @selector(selectWithOkioOptions:);
  methods[17].selector = @selector(readByteArray);
  methods[18].selector = @selector(readByteArrayWithLong:);
  methods[19].selector = @selector(readWithByteArray:);
  methods[20].selector = @selector(readFullyWithByteArray:);
  methods[21].selector = @selector(readWithByteArray:withInt:withInt:);
  methods[22].selector = @selector(readFullyWithOkioBuffer:withLong:);
  methods[23].selector = @selector(readAllWithOkioSink:);
  methods[24].selector = @selector(readUtf8);
  methods[25].selector = @selector(readUtf8WithLong:);
  methods[26].selector = @selector(readUtf8Line);
  methods[27].selector = @selector(readUtf8LineStrict);
  methods[28].selector = @selector(readUtf8CodePoint);
  methods[29].selector = @selector(readStringWithJavaNioCharsetCharset:);
  methods[30].selector = @selector(readStringWithLong:withJavaNioCharsetCharset:);
  methods[31].selector = @selector(indexOfWithByte:);
  methods[32].selector = @selector(indexOfWithByte:withLong:);
  methods[33].selector = @selector(indexOfWithOkioByteString:);
  methods[34].selector = @selector(indexOfWithOkioByteString:withLong:);
  methods[35].selector = @selector(indexOfElementWithOkioByteString:);
  methods[36].selector = @selector(indexOfElementWithOkioByteString:withLong:);
  methods[37].selector = @selector(rangeEqualsWithLong:withOkioByteString:);
  methods[38].selector = @selector(rangeEqualsWithLong:withOkioByteString:withInt:withInt:);
  methods[39].selector = @selector(inputStream);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaIoIOException;", "require", "J", "request", "skip", "readByteString", "select", "LOkioOptions;", "readByteArray", "read", "[B", "readFully", "[BII", "LOkioBuffer;J", "readAll", "LOkioSink;", "readUtf8", "readString", "LJavaNioCharsetCharset;", "JLJavaNioCharsetCharset;", "indexOf", "B", "BJ", "LOkioByteString;", "LOkioByteString;J", "indexOfElement", "rangeEquals", "JLOkioByteString;", "JLOkioByteString;II" };
  static const J2ObjcClassInfo _OkioBufferedSource = { "BufferedSource", "okio", ptrTable, methods, NULL, 7, 0x609, 40, 0, -1, -1, -1, -1, -1 };
  return &_OkioBufferedSource;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OkioBufferedSource)
