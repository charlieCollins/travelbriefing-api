//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okio/ForwardingTimeout.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/concurrent/TimeUnit.h"
#include "okio/ForwardingTimeout.h"
#include "okio/Timeout.h"

@interface OkioForwardingTimeout () {
 @public
  OkioTimeout *delegate_;
}

@end

J2OBJC_FIELD_SETTER(OkioForwardingTimeout, delegate_, OkioTimeout *)

@implementation OkioForwardingTimeout

- (instancetype)initWithOkioTimeout:(OkioTimeout *)delegate {
  OkioForwardingTimeout_initWithOkioTimeout_(self, delegate);
  return self;
}

- (OkioTimeout *)delegate {
  return delegate_;
}

- (OkioForwardingTimeout *)setDelegateWithOkioTimeout:(OkioTimeout *)delegate {
  if (delegate == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"delegate == null");
  JreStrongAssign(&self->delegate_, delegate);
  return self;
}

- (OkioTimeout *)timeoutWithLong:(jlong)timeout
  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return [((OkioTimeout *) nil_chk(delegate_)) timeoutWithLong:timeout withJavaUtilConcurrentTimeUnit:unit];
}

- (jlong)timeoutNanos {
  return [((OkioTimeout *) nil_chk(delegate_)) timeoutNanos];
}

- (jboolean)hasDeadline {
  return [((OkioTimeout *) nil_chk(delegate_)) hasDeadline];
}

- (jlong)deadlineNanoTime {
  return [((OkioTimeout *) nil_chk(delegate_)) deadlineNanoTime];
}

- (OkioTimeout *)deadlineNanoTimeWithLong:(jlong)deadlineNanoTime {
  return [((OkioTimeout *) nil_chk(delegate_)) deadlineNanoTimeWithLong:deadlineNanoTime];
}

- (OkioTimeout *)clearTimeout {
  return [((OkioTimeout *) nil_chk(delegate_)) clearTimeout];
}

- (OkioTimeout *)clearDeadline {
  return [((OkioTimeout *) nil_chk(delegate_)) clearDeadline];
}

- (void)throwIfReached {
  [((OkioTimeout *) nil_chk(delegate_)) throwIfReached];
}

- (void)dealloc {
  RELEASE_(delegate_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOkioTimeout;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkioForwardingTimeout;", 0x11, 1, 0, -1, -1, -1, -1 },
    { NULL, "LOkioTimeout;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkioTimeout;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOkioTimeout;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkioTimeout;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 6, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkioTimeout:);
  methods[1].selector = @selector(delegate);
  methods[2].selector = @selector(setDelegateWithOkioTimeout:);
  methods[3].selector = @selector(timeoutWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[4].selector = @selector(timeoutNanos);
  methods[5].selector = @selector(hasDeadline);
  methods[6].selector = @selector(deadlineNanoTime);
  methods[7].selector = @selector(deadlineNanoTimeWithLong:);
  methods[8].selector = @selector(clearTimeout);
  methods[9].selector = @selector(clearDeadline);
  methods[10].selector = @selector(throwIfReached);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "delegate_", "LOkioTimeout;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkioTimeout;", "setDelegate", "timeout", "JLJavaUtilConcurrentTimeUnit;", "deadlineNanoTime", "J", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _OkioForwardingTimeout = { "ForwardingTimeout", "okio", ptrTable, methods, fields, 7, 0x1, 11, 1, -1, -1, -1, -1, -1 };
  return &_OkioForwardingTimeout;
}

@end

void OkioForwardingTimeout_initWithOkioTimeout_(OkioForwardingTimeout *self, OkioTimeout *delegate) {
  OkioTimeout_init(self);
  if (delegate == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"delegate == null");
  JreStrongAssign(&self->delegate_, delegate);
}

OkioForwardingTimeout *new_OkioForwardingTimeout_initWithOkioTimeout_(OkioTimeout *delegate) {
  J2OBJC_NEW_IMPL(OkioForwardingTimeout, initWithOkioTimeout_, delegate)
}

OkioForwardingTimeout *create_OkioForwardingTimeout_initWithOkioTimeout_(OkioTimeout *delegate) {
  J2OBJC_CREATE_IMPL(OkioForwardingTimeout, initWithOkioTimeout_, delegate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OkioForwardingTimeout)
