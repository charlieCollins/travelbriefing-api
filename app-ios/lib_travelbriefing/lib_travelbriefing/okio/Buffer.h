//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okio/Buffer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OkioBuffer")
#ifdef RESTRICT_OkioBuffer
#define INCLUDE_ALL_OkioBuffer 0
#else
#define INCLUDE_ALL_OkioBuffer 1
#endif
#undef RESTRICT_OkioBuffer

#if !defined (OkioBuffer_) && (INCLUDE_ALL_OkioBuffer || defined(INCLUDE_OkioBuffer))
#define OkioBuffer_

#define RESTRICT_OkioBufferedSource 1
#define INCLUDE_OkioBufferedSource 1
#include "okio/BufferedSource.h"

#define RESTRICT_OkioBufferedSink 1
#define INCLUDE_OkioBufferedSink 1
#include "okio/BufferedSink.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaNioCharsetCharset;
@class OkioByteString;
@class OkioOptions;
@class OkioSegment;
@class OkioTimeout;
@protocol JavaUtilList;
@protocol OkioSink;
@protocol OkioSource;

@interface OkioBuffer : NSObject < OkioBufferedSource, OkioBufferedSink, NSCopying > {
 @public
  OkioSegment *head_;
  jlong size_;
}

#pragma mark Public

- (instancetype)init;

- (OkioBuffer *)buffer;

- (void)clear;

- (OkioBuffer *)java_clone;

- (void)close;

- (jlong)completeSegmentByteCount;

- (OkioBuffer *)copyToWithOkioBuffer:(OkioBuffer *)outArg
                            withLong:(jlong)offset
                            withLong:(jlong)byteCount OBJC_METHOD_FAMILY_NONE;

- (OkioBuffer *)copyToWithJavaIoOutputStream:(JavaIoOutputStream *)outArg OBJC_METHOD_FAMILY_NONE;

- (OkioBuffer *)copyToWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                    withLong:(jlong)offset
                                    withLong:(jlong)byteCount OBJC_METHOD_FAMILY_NONE;

- (id<OkioBufferedSink>)emit;

- (OkioBuffer *)emitCompleteSegments;

- (jboolean)isEqual:(id)o;

- (jboolean)exhausted;

- (void)flush;

- (jbyte)getByteWithLong:(jlong)pos;

- (NSUInteger)hash;

- (OkioByteString *)hmacSha1WithOkioByteString:(OkioByteString *)key;

- (OkioByteString *)hmacSha256WithOkioByteString:(OkioByteString *)key;

- (jlong)indexOfWithByte:(jbyte)b;

- (jlong)indexOfWithByte:(jbyte)b
                withLong:(jlong)fromIndex;

- (jlong)indexOfWithOkioByteString:(OkioByteString *)bytes;

- (jlong)indexOfWithOkioByteString:(OkioByteString *)bytes
                          withLong:(jlong)fromIndex;

- (jlong)indexOfElementWithOkioByteString:(OkioByteString *)targetBytes;

- (jlong)indexOfElementWithOkioByteString:(OkioByteString *)targetBytes
                                 withLong:(jlong)fromIndex;

- (JavaIoInputStream *)inputStream;

- (OkioByteString *)md5;

- (JavaIoOutputStream *)outputStream;

- (jboolean)rangeEqualsWithLong:(jlong)offset
             withOkioByteString:(OkioByteString *)bytes;

- (jboolean)rangeEqualsWithLong:(jlong)offset
             withOkioByteString:(OkioByteString *)bytes
                        withInt:(jint)bytesOffset
                        withInt:(jint)byteCount;

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount;

- (jint)readWithByteArray:(IOSByteArray *)sink;

- (jint)readWithByteArray:(IOSByteArray *)sink
                  withInt:(jint)offset
                  withInt:(jint)byteCount;

- (jlong)readAllWithOkioSink:(id<OkioSink>)sink;

- (jbyte)readByte;

- (IOSByteArray *)readByteArray;

- (IOSByteArray *)readByteArrayWithLong:(jlong)byteCount;

- (OkioByteString *)readByteString;

- (OkioByteString *)readByteStringWithLong:(jlong)byteCount;

- (jlong)readDecimalLong;

- (OkioBuffer *)readFromWithJavaIoInputStream:(JavaIoInputStream *)inArg;

- (OkioBuffer *)readFromWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                     withLong:(jlong)byteCount;

- (void)readFullyWithOkioBuffer:(OkioBuffer *)sink
                       withLong:(jlong)byteCount;

- (void)readFullyWithByteArray:(IOSByteArray *)sink;

- (jlong)readHexadecimalUnsignedLong;

- (jint)readInt;

- (jint)readIntLe;

- (jlong)readLong;

- (jlong)readLongLe;

- (jshort)readShort;

- (jshort)readShortLe;

- (NSString *)readStringWithJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset;

- (NSString *)readStringWithLong:(jlong)byteCount
       withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset;

- (NSString *)readUtf8;

- (NSString *)readUtf8WithLong:(jlong)byteCount;

- (jint)readUtf8CodePoint;

- (NSString *)readUtf8Line;

- (NSString *)readUtf8LineStrict;

- (jboolean)requestWithLong:(jlong)byteCount;

- (void)requireWithLong:(jlong)byteCount;

- (jint)selectWithOkioOptions:(OkioOptions *)options;

- (OkioByteString *)sha1;

- (OkioByteString *)sha256;

- (jlong)size;

- (void)skipWithLong:(jlong)byteCount;

- (OkioByteString *)snapshot;

- (OkioByteString *)snapshotWithInt:(jint)byteCount;

- (OkioTimeout *)timeout;

- (NSString *)description;

- (void)writeWithOkioBuffer:(OkioBuffer *)source
                   withLong:(jlong)byteCount;

- (OkioBuffer *)writeWithByteArray:(IOSByteArray *)source;

- (OkioBuffer *)writeWithByteArray:(IOSByteArray *)source
                           withInt:(jint)offset
                           withInt:(jint)byteCount;

- (OkioBuffer *)writeWithOkioByteString:(OkioByteString *)byteString;

- (id<OkioBufferedSink>)writeWithOkioSource:(id<OkioSource>)source
                                   withLong:(jlong)byteCount;

- (jlong)writeAllWithOkioSource:(id<OkioSource>)source;

- (OkioBuffer *)writeByteWithInt:(jint)b;

- (OkioBuffer *)writeDecimalLongWithLong:(jlong)v;

- (OkioBuffer *)writeHexadecimalUnsignedLongWithLong:(jlong)v;

- (OkioBuffer *)writeIntWithInt:(jint)i;

- (OkioBuffer *)writeIntLeWithInt:(jint)i;

- (OkioBuffer *)writeLongWithLong:(jlong)v;

- (OkioBuffer *)writeLongLeWithLong:(jlong)v;

- (OkioBuffer *)writeShortWithInt:(jint)s;

- (OkioBuffer *)writeShortLeWithInt:(jint)s;

- (OkioBuffer *)writeStringWithNSString:(NSString *)string
              withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset;

- (OkioBuffer *)writeStringWithNSString:(NSString *)string
                                withInt:(jint)beginIndex
                                withInt:(jint)endIndex
              withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset;

- (OkioBuffer *)writeToWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

- (OkioBuffer *)writeToWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                     withLong:(jlong)byteCount;

- (OkioBuffer *)writeUtf8WithNSString:(NSString *)string;

- (OkioBuffer *)writeUtf8WithNSString:(NSString *)string
                              withInt:(jint)beginIndex
                              withInt:(jint)endIndex;

- (OkioBuffer *)writeUtf8CodePointWithInt:(jint)codePoint;

#pragma mark Package-Private

- (NSString *)readUtf8LineWithLong:(jlong)newline;

- (id<JavaUtilList>)segmentSizes;

- (jint)selectPrefixWithOkioOptions:(OkioOptions *)options;

- (OkioSegment *)writableSegmentWithInt:(jint)minimumCapacity;

@end

J2OBJC_STATIC_INIT(OkioBuffer)

J2OBJC_FIELD_SETTER(OkioBuffer, head_, OkioSegment *)

inline jint OkioBuffer_get_REPLACEMENT_CHARACTER();
#define OkioBuffer_REPLACEMENT_CHARACTER 65533
J2OBJC_STATIC_FIELD_CONSTANT(OkioBuffer, REPLACEMENT_CHARACTER, jint)

FOUNDATION_EXPORT void OkioBuffer_init(OkioBuffer *self);

FOUNDATION_EXPORT OkioBuffer *new_OkioBuffer_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OkioBuffer *create_OkioBuffer_init();

J2OBJC_TYPE_LITERAL_HEADER(OkioBuffer)

#endif

#pragma pop_macro("INCLUDE_ALL_OkioBuffer")
