//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okhttp3/internal/http2/Http2.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Byte.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "okhttp3/internal/Util.h"
#include "okhttp3/internal/http2/Http2.h"
#include "okio/ByteString.h"

@interface Okhttp3InternalHttp2Http2 ()

- (instancetype)init;

@end

inline IOSObjectArray *Okhttp3InternalHttp2Http2_get_FRAME_NAMES();
static IOSObjectArray *Okhttp3InternalHttp2Http2_FRAME_NAMES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalHttp2Http2, FRAME_NAMES, IOSObjectArray *)

__attribute__((unused)) static void Okhttp3InternalHttp2Http2_init(Okhttp3InternalHttp2Http2 *self);

__attribute__((unused)) static Okhttp3InternalHttp2Http2 *new_Okhttp3InternalHttp2Http2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalHttp2Http2 *create_Okhttp3InternalHttp2Http2_init();

J2OBJC_INITIALIZED_DEFN(Okhttp3InternalHttp2Http2)

OkioByteString *Okhttp3InternalHttp2Http2_CONNECTION_PREFACE;
IOSObjectArray *Okhttp3InternalHttp2Http2_FLAGS;
IOSObjectArray *Okhttp3InternalHttp2Http2_BINARY;

@implementation Okhttp3InternalHttp2Http2

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3InternalHttp2Http2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (JavaLangIllegalArgumentException *)illegalArgumentWithNSString:(NSString *)message
                                                withNSObjectArray:(IOSObjectArray *)args {
  return Okhttp3InternalHttp2Http2_illegalArgumentWithNSString_withNSObjectArray_(message, args);
}

+ (JavaIoIOException *)ioExceptionWithNSString:(NSString *)message
                             withNSObjectArray:(IOSObjectArray *)args {
  return Okhttp3InternalHttp2Http2_ioExceptionWithNSString_withNSObjectArray_(message, args);
}

+ (NSString *)frameLogWithBoolean:(jboolean)inbound
                          withInt:(jint)streamId
                          withInt:(jint)length
                         withByte:(jbyte)type
                         withByte:(jbyte)flags {
  return Okhttp3InternalHttp2Http2_frameLogWithBoolean_withInt_withInt_withByte_withByte_(inbound, streamId, length, type, flags);
}

+ (NSString *)formatFlagsWithByte:(jbyte)type
                         withByte:(jbyte)flags {
  return Okhttp3InternalHttp2Http2_formatFlagsWithByte_withByte_(type, flags);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangIllegalArgumentException;", 0x88, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaIoIOException;", 0x88, 2, 1, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(illegalArgumentWithNSString:withNSObjectArray:);
  methods[2].selector = @selector(ioExceptionWithNSString:withNSObjectArray:);
  methods[3].selector = @selector(frameLogWithBoolean:withInt:withInt:withByte:withByte:);
  methods[4].selector = @selector(formatFlagsWithByte:withByte:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CONNECTION_PREFACE", "LOkioByteString;", .constantValue.asLong = 0, 0x18, -1, 8, -1, -1 },
    { "INITIAL_MAX_FRAME_SIZE", "I", .constantValue.asInt = Okhttp3InternalHttp2Http2_INITIAL_MAX_FRAME_SIZE, 0x18, -1, -1, -1, -1 },
    { "TYPE_DATA", "B", .constantValue.asChar = Okhttp3InternalHttp2Http2_TYPE_DATA, 0x18, -1, -1, -1, -1 },
    { "TYPE_HEADERS", "B", .constantValue.asChar = Okhttp3InternalHttp2Http2_TYPE_HEADERS, 0x18, -1, -1, -1, -1 },
    { "TYPE_PRIORITY", "B", .constantValue.asChar = Okhttp3InternalHttp2Http2_TYPE_PRIORITY, 0x18, -1, -1, -1, -1 },
    { "TYPE_RST_STREAM", "B", .constantValue.asChar = Okhttp3InternalHttp2Http2_TYPE_RST_STREAM, 0x18, -1, -1, -1, -1 },
    { "TYPE_SETTINGS", "B", .constantValue.asChar = Okhttp3InternalHttp2Http2_TYPE_SETTINGS, 0x18, -1, -1, -1, -1 },
    { "TYPE_PUSH_PROMISE", "B", .constantValue.asChar = Okhttp3InternalHttp2Http2_TYPE_PUSH_PROMISE, 0x18, -1, -1, -1, -1 },
    { "TYPE_PING", "B", .constantValue.asChar = Okhttp3InternalHttp2Http2_TYPE_PING, 0x18, -1, -1, -1, -1 },
    { "TYPE_GOAWAY", "B", .constantValue.asChar = Okhttp3InternalHttp2Http2_TYPE_GOAWAY, 0x18, -1, -1, -1, -1 },
    { "TYPE_WINDOW_UPDATE", "B", .constantValue.asChar = Okhttp3InternalHttp2Http2_TYPE_WINDOW_UPDATE, 0x18, -1, -1, -1, -1 },
    { "TYPE_CONTINUATION", "B", .constantValue.asChar = Okhttp3InternalHttp2Http2_TYPE_CONTINUATION, 0x18, -1, -1, -1, -1 },
    { "FLAG_NONE", "B", .constantValue.asChar = Okhttp3InternalHttp2Http2_FLAG_NONE, 0x18, -1, -1, -1, -1 },
    { "FLAG_ACK", "B", .constantValue.asChar = Okhttp3InternalHttp2Http2_FLAG_ACK, 0x18, -1, -1, -1, -1 },
    { "FLAG_END_STREAM", "B", .constantValue.asChar = Okhttp3InternalHttp2Http2_FLAG_END_STREAM, 0x18, -1, -1, -1, -1 },
    { "FLAG_END_HEADERS", "B", .constantValue.asChar = Okhttp3InternalHttp2Http2_FLAG_END_HEADERS, 0x18, -1, -1, -1, -1 },
    { "FLAG_END_PUSH_PROMISE", "B", .constantValue.asChar = Okhttp3InternalHttp2Http2_FLAG_END_PUSH_PROMISE, 0x18, -1, -1, -1, -1 },
    { "FLAG_PADDED", "B", .constantValue.asChar = Okhttp3InternalHttp2Http2_FLAG_PADDED, 0x18, -1, -1, -1, -1 },
    { "FLAG_PRIORITY", "B", .constantValue.asChar = Okhttp3InternalHttp2Http2_FLAG_PRIORITY, 0x18, -1, -1, -1, -1 },
    { "FLAG_COMPRESSED", "B", .constantValue.asChar = Okhttp3InternalHttp2Http2_FLAG_COMPRESSED, 0x18, -1, -1, -1, -1 },
    { "FRAME_NAMES", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "FLAGS", "[LNSString;", .constantValue.asLong = 0, 0x18, -1, 10, -1, -1 },
    { "BINARY", "[LNSString;", .constantValue.asLong = 0, 0x18, -1, 11, -1, -1 },
  };
  static const void *ptrTable[] = { "illegalArgument", "LNSString;[LNSObject;", "ioException", "LJavaIoIOException;", "frameLog", "ZIIBB", "formatFlags", "BB", &Okhttp3InternalHttp2Http2_CONNECTION_PREFACE, &Okhttp3InternalHttp2Http2_FRAME_NAMES, &Okhttp3InternalHttp2Http2_FLAGS, &Okhttp3InternalHttp2Http2_BINARY };
  static const J2ObjcClassInfo _Okhttp3InternalHttp2Http2 = { "Http2", "okhttp3.internal.http2", ptrTable, methods, fields, 7, 0x11, 5, 23, -1, -1, -1, -1, -1 };
  return &_Okhttp3InternalHttp2Http2;
}

+ (void)initialize {
  if (self == [Okhttp3InternalHttp2Http2 class]) {
    JreStrongAssign(&Okhttp3InternalHttp2Http2_CONNECTION_PREFACE, OkioByteString_encodeUtf8WithNSString_(@"PRI * HTTP/2.0\x0d\n\x0d\nSM\x0d\n\x0d\n"));
    JreStrongAssignAndConsume(&Okhttp3InternalHttp2Http2_FRAME_NAMES, [IOSObjectArray newArrayWithObjects:(id[]){ @"DATA", @"HEADERS", @"PRIORITY", @"RST_STREAM", @"SETTINGS", @"PUSH_PROMISE", @"PING", @"GOAWAY", @"WINDOW_UPDATE", @"CONTINUATION" } count:10 type:NSString_class_()]);
    JreStrongAssignAndConsume(&Okhttp3InternalHttp2Http2_FLAGS, [IOSObjectArray newArrayWithLength:(jint) 0x40 type:NSString_class_()]);
    JreStrongAssignAndConsume(&Okhttp3InternalHttp2Http2_BINARY, [IOSObjectArray newArrayWithLength:256 type:NSString_class_()]);
    {
      for (jint i = 0; i < Okhttp3InternalHttp2Http2_BINARY->size_; i++) {
        IOSObjectArray_Set(Okhttp3InternalHttp2Http2_BINARY, i, [((NSString *) nil_chk(Okhttp3InternalUtil_formatWithNSString_withNSObjectArray_(@"%8s", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_toBinaryStringWithInt_(i) } count:1 type:NSObject_class_()]))) java_replace:' ' withChar:'0']);
      }
      IOSObjectArray_Set(Okhttp3InternalHttp2Http2_FLAGS, Okhttp3InternalHttp2Http2_FLAG_NONE, @"");
      IOSObjectArray_Set(Okhttp3InternalHttp2Http2_FLAGS, Okhttp3InternalHttp2Http2_FLAG_END_STREAM, @"END_STREAM");
      IOSIntArray *prefixFlags = [IOSIntArray arrayWithInts:(jint[]){ Okhttp3InternalHttp2Http2_FLAG_END_STREAM } count:1];
      IOSObjectArray_Set(Okhttp3InternalHttp2Http2_FLAGS, Okhttp3InternalHttp2Http2_FLAG_PADDED, @"PADDED");
      {
        IOSIntArray *a__ = prefixFlags;
        jint const *b__ = a__->buffer_;
        jint const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          jint prefixFlag = *b__++;
          IOSObjectArray_Set(Okhttp3InternalHttp2Http2_FLAGS, prefixFlag | Okhttp3InternalHttp2Http2_FLAG_PADDED, JreStrcat("$$", IOSObjectArray_Get(Okhttp3InternalHttp2Http2_FLAGS, prefixFlag), @"|PADDED"));
        }
      }
      IOSObjectArray_Set(Okhttp3InternalHttp2Http2_FLAGS, Okhttp3InternalHttp2Http2_FLAG_END_HEADERS, @"END_HEADERS");
      IOSObjectArray_Set(Okhttp3InternalHttp2Http2_FLAGS, Okhttp3InternalHttp2Http2_FLAG_PRIORITY, @"PRIORITY");
      IOSObjectArray_Set(Okhttp3InternalHttp2Http2_FLAGS, Okhttp3InternalHttp2Http2_FLAG_END_HEADERS | Okhttp3InternalHttp2Http2_FLAG_PRIORITY, @"END_HEADERS|PRIORITY");
      IOSIntArray *frameFlags = [IOSIntArray arrayWithInts:(jint[]){ Okhttp3InternalHttp2Http2_FLAG_END_HEADERS, Okhttp3InternalHttp2Http2_FLAG_PRIORITY, Okhttp3InternalHttp2Http2_FLAG_END_HEADERS | Okhttp3InternalHttp2Http2_FLAG_PRIORITY } count:3];
      {
        IOSIntArray *a__ = frameFlags;
        jint const *b__ = a__->buffer_;
        jint const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          jint frameFlag = *b__++;
          {
            IOSIntArray *a__ = prefixFlags;
            jint const *b__ = a__->buffer_;
            jint const *e__ = b__ + a__->size_;
            while (b__ < e__) {
              jint prefixFlag = *b__++;
              IOSObjectArray_Set(Okhttp3InternalHttp2Http2_FLAGS, prefixFlag | frameFlag, JreStrcat("$C$", IOSObjectArray_Get(Okhttp3InternalHttp2Http2_FLAGS, prefixFlag), '|', IOSObjectArray_Get(Okhttp3InternalHttp2Http2_FLAGS, frameFlag)));
              IOSObjectArray_Set(Okhttp3InternalHttp2Http2_FLAGS, prefixFlag | frameFlag | Okhttp3InternalHttp2Http2_FLAG_PADDED, JreStrcat("$C$$", IOSObjectArray_Get(Okhttp3InternalHttp2Http2_FLAGS, prefixFlag), '|', IOSObjectArray_Get(Okhttp3InternalHttp2Http2_FLAGS, frameFlag), @"|PADDED"));
            }
          }
        }
      }
      for (jint i = 0; i < Okhttp3InternalHttp2Http2_FLAGS->size_; i++) {
        if (IOSObjectArray_Get(Okhttp3InternalHttp2Http2_FLAGS, i) == nil) IOSObjectArray_Set(Okhttp3InternalHttp2Http2_FLAGS, i, IOSObjectArray_Get(Okhttp3InternalHttp2Http2_BINARY, i));
      }
    }
    J2OBJC_SET_INITIALIZED(Okhttp3InternalHttp2Http2)
  }
}

@end

void Okhttp3InternalHttp2Http2_init(Okhttp3InternalHttp2Http2 *self) {
  NSObject_init(self);
}

Okhttp3InternalHttp2Http2 *new_Okhttp3InternalHttp2Http2_init() {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttp2Http2, init)
}

Okhttp3InternalHttp2Http2 *create_Okhttp3InternalHttp2Http2_init() {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttp2Http2, init)
}

JavaLangIllegalArgumentException *Okhttp3InternalHttp2Http2_illegalArgumentWithNSString_withNSObjectArray_(NSString *message, IOSObjectArray *args) {
  Okhttp3InternalHttp2Http2_initialize();
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(Okhttp3InternalUtil_formatWithNSString_withNSObjectArray_(message, args));
}

JavaIoIOException *Okhttp3InternalHttp2Http2_ioExceptionWithNSString_withNSObjectArray_(NSString *message, IOSObjectArray *args) {
  Okhttp3InternalHttp2Http2_initialize();
  @throw create_JavaIoIOException_initWithNSString_(Okhttp3InternalUtil_formatWithNSString_withNSObjectArray_(message, args));
}

NSString *Okhttp3InternalHttp2Http2_frameLogWithBoolean_withInt_withInt_withByte_withByte_(jboolean inbound, jint streamId, jint length, jbyte type, jbyte flags) {
  Okhttp3InternalHttp2Http2_initialize();
  NSString *formattedType = type < ((IOSObjectArray *) nil_chk(Okhttp3InternalHttp2Http2_FRAME_NAMES))->size_ ? IOSObjectArray_Get(Okhttp3InternalHttp2Http2_FRAME_NAMES, type) : Okhttp3InternalUtil_formatWithNSString_withNSObjectArray_(@"0x%02x", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangByte_valueOfWithByte_(type) } count:1 type:NSObject_class_()]);
  NSString *formattedFlags = Okhttp3InternalHttp2Http2_formatFlagsWithByte_withByte_(type, flags);
  return Okhttp3InternalUtil_formatWithNSString_withNSObjectArray_(@"%s 0x%08x %5d %-13s %s", [IOSObjectArray arrayWithObjects:(id[]){ inbound ? @"<<" : @">>", JavaLangInteger_valueOfWithInt_(streamId), JavaLangInteger_valueOfWithInt_(length), formattedType, formattedFlags } count:5 type:NSObject_class_()]);
}

NSString *Okhttp3InternalHttp2Http2_formatFlagsWithByte_withByte_(jbyte type, jbyte flags) {
  Okhttp3InternalHttp2Http2_initialize();
  if (flags == 0) return @"";
  switch (type) {
    case Okhttp3InternalHttp2Http2_TYPE_SETTINGS:
    case Okhttp3InternalHttp2Http2_TYPE_PING:
    return flags == Okhttp3InternalHttp2Http2_FLAG_ACK ? @"ACK" : IOSObjectArray_Get(nil_chk(Okhttp3InternalHttp2Http2_BINARY), flags);
    case Okhttp3InternalHttp2Http2_TYPE_PRIORITY:
    case Okhttp3InternalHttp2Http2_TYPE_RST_STREAM:
    case Okhttp3InternalHttp2Http2_TYPE_GOAWAY:
    case Okhttp3InternalHttp2Http2_TYPE_WINDOW_UPDATE:
    return IOSObjectArray_Get(nil_chk(Okhttp3InternalHttp2Http2_BINARY), flags);
  }
  NSString *result = flags < ((IOSObjectArray *) nil_chk(Okhttp3InternalHttp2Http2_FLAGS))->size_ ? IOSObjectArray_Get(Okhttp3InternalHttp2Http2_FLAGS, flags) : IOSObjectArray_Get(nil_chk(Okhttp3InternalHttp2Http2_BINARY), flags);
  if (type == Okhttp3InternalHttp2Http2_TYPE_PUSH_PROMISE && (flags & Okhttp3InternalHttp2Http2_FLAG_END_PUSH_PROMISE) != 0) {
    return [result java_replace:@"HEADERS" withSequence:@"PUSH_PROMISE"];
  }
  else if (type == Okhttp3InternalHttp2Http2_TYPE_DATA && (flags & Okhttp3InternalHttp2Http2_FLAG_COMPRESSED) != 0) {
    return [result java_replace:@"PRIORITY" withSequence:@"COMPRESSED"];
  }
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalHttp2Http2)
