//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okhttp3/internal/http2/Header.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Okhttp3InternalHttp2Header")
#ifdef RESTRICT_Okhttp3InternalHttp2Header
#define INCLUDE_ALL_Okhttp3InternalHttp2Header 0
#else
#define INCLUDE_ALL_Okhttp3InternalHttp2Header 1
#endif
#undef RESTRICT_Okhttp3InternalHttp2Header

#if !defined (Okhttp3InternalHttp2Header_) && (INCLUDE_ALL_Okhttp3InternalHttp2Header || defined(INCLUDE_Okhttp3InternalHttp2Header))
#define Okhttp3InternalHttp2Header_

@class OkioByteString;

@interface Okhttp3InternalHttp2Header : NSObject {
 @public
  OkioByteString *name_;
  OkioByteString *value_;
  jint hpackSize_;
}

#pragma mark Public

- (instancetype)initWithOkioByteString:(OkioByteString *)name
                    withOkioByteString:(OkioByteString *)value;

- (instancetype)initWithOkioByteString:(OkioByteString *)name
                          withNSString:(NSString *)value;

- (instancetype)initWithNSString:(NSString *)name
                    withNSString:(NSString *)value;

- (jboolean)isEqual:(id)other;

- (NSUInteger)hash;

- (NSString *)description;

@end

J2OBJC_STATIC_INIT(Okhttp3InternalHttp2Header)

J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Header, name_, OkioByteString *)
J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Header, value_, OkioByteString *)

inline OkioByteString *Okhttp3InternalHttp2Header_get_PSEUDO_PREFIX();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OkioByteString *Okhttp3InternalHttp2Header_PSEUDO_PREFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalHttp2Header, PSEUDO_PREFIX, OkioByteString *)

inline OkioByteString *Okhttp3InternalHttp2Header_get_RESPONSE_STATUS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OkioByteString *Okhttp3InternalHttp2Header_RESPONSE_STATUS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalHttp2Header, RESPONSE_STATUS, OkioByteString *)

inline OkioByteString *Okhttp3InternalHttp2Header_get_TARGET_METHOD();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OkioByteString *Okhttp3InternalHttp2Header_TARGET_METHOD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalHttp2Header, TARGET_METHOD, OkioByteString *)

inline OkioByteString *Okhttp3InternalHttp2Header_get_TARGET_PATH();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OkioByteString *Okhttp3InternalHttp2Header_TARGET_PATH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalHttp2Header, TARGET_PATH, OkioByteString *)

inline OkioByteString *Okhttp3InternalHttp2Header_get_TARGET_SCHEME();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OkioByteString *Okhttp3InternalHttp2Header_TARGET_SCHEME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalHttp2Header, TARGET_SCHEME, OkioByteString *)

inline OkioByteString *Okhttp3InternalHttp2Header_get_TARGET_AUTHORITY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OkioByteString *Okhttp3InternalHttp2Header_TARGET_AUTHORITY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalHttp2Header, TARGET_AUTHORITY, OkioByteString *)

FOUNDATION_EXPORT void Okhttp3InternalHttp2Header_initWithNSString_withNSString_(Okhttp3InternalHttp2Header *self, NSString *name, NSString *value);

FOUNDATION_EXPORT Okhttp3InternalHttp2Header *new_Okhttp3InternalHttp2Header_initWithNSString_withNSString_(NSString *name, NSString *value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3InternalHttp2Header *create_Okhttp3InternalHttp2Header_initWithNSString_withNSString_(NSString *name, NSString *value);

FOUNDATION_EXPORT void Okhttp3InternalHttp2Header_initWithOkioByteString_withNSString_(Okhttp3InternalHttp2Header *self, OkioByteString *name, NSString *value);

FOUNDATION_EXPORT Okhttp3InternalHttp2Header *new_Okhttp3InternalHttp2Header_initWithOkioByteString_withNSString_(OkioByteString *name, NSString *value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3InternalHttp2Header *create_Okhttp3InternalHttp2Header_initWithOkioByteString_withNSString_(OkioByteString *name, NSString *value);

FOUNDATION_EXPORT void Okhttp3InternalHttp2Header_initWithOkioByteString_withOkioByteString_(Okhttp3InternalHttp2Header *self, OkioByteString *name, OkioByteString *value);

FOUNDATION_EXPORT Okhttp3InternalHttp2Header *new_Okhttp3InternalHttp2Header_initWithOkioByteString_withOkioByteString_(OkioByteString *name, OkioByteString *value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3InternalHttp2Header *create_Okhttp3InternalHttp2Header_initWithOkioByteString_withOkioByteString_(OkioByteString *name, OkioByteString *value);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalHttp2Header)

#endif

#pragma pop_macro("INCLUDE_ALL_Okhttp3InternalHttp2Header")
