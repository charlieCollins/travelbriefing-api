//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okhttp3/internal/http2/Http2Stream.java
//

#include "J2ObjC_source.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/io/InterruptedIOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Thread.h"
#include "java/net/SocketTimeoutException.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "okhttp3/internal/http2/ErrorCode.h"
#include "okhttp3/internal/http2/Http2Connection.h"
#include "okhttp3/internal/http2/Http2Stream.h"
#include "okhttp3/internal/http2/Settings.h"
#include "okhttp3/internal/http2/StreamResetException.h"
#include "okio/AsyncTimeout.h"
#include "okio/Buffer.h"
#include "okio/BufferedSource.h"
#include "okio/Sink.h"
#include "okio/Source.h"
#include "okio/Timeout.h"

@class Okhttp3InternalHttp2Http2Stream_FramingSource;

@interface Okhttp3InternalHttp2Http2Stream () {
 @public
  id<JavaUtilList> requestHeaders_;
  id<JavaUtilList> responseHeaders_;
  jboolean hasResponseHeaders_;
  Okhttp3InternalHttp2Http2Stream_FramingSource *source_;
}

- (jboolean)closeInternalWithOkhttp3InternalHttp2ErrorCode:(Okhttp3InternalHttp2ErrorCode *)errorCode;

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Http2Stream, requestHeaders_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Http2Stream, responseHeaders_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Http2Stream, source_, Okhttp3InternalHttp2Http2Stream_FramingSource *)

__attribute__((unused)) static jboolean Okhttp3InternalHttp2Http2Stream_closeInternalWithOkhttp3InternalHttp2ErrorCode_(Okhttp3InternalHttp2Http2Stream *self, Okhttp3InternalHttp2ErrorCode *errorCode);

@interface Okhttp3InternalHttp2Http2Stream_FramingSource : NSObject < OkioSource > {
 @public
  Okhttp3InternalHttp2Http2Stream *this$0_;
  OkioBuffer *receiveBuffer_;
  OkioBuffer *readBuffer_;
  jlong maxByteCount_;
  jboolean closed_;
  jboolean finished_;
}

- (instancetype)initWithOkhttp3InternalHttp2Http2Stream:(Okhttp3InternalHttp2Http2Stream *)outer$
                                               withLong:(jlong)maxByteCount;

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount;

- (void)waitUntilReadable;

- (void)receiveWithOkioBufferedSource:(id<OkioBufferedSource>)inArg
                             withLong:(jlong)byteCount;

- (OkioTimeout *)timeout;

- (void)close;

- (void)checkNotClosed;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalHttp2Http2Stream_FramingSource)

J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Http2Stream_FramingSource, receiveBuffer_, OkioBuffer *)
J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Http2Stream_FramingSource, readBuffer_, OkioBuffer *)

__attribute__((unused)) static void Okhttp3InternalHttp2Http2Stream_FramingSource_initWithOkhttp3InternalHttp2Http2Stream_withLong_(Okhttp3InternalHttp2Http2Stream_FramingSource *self, Okhttp3InternalHttp2Http2Stream *outer$, jlong maxByteCount);

__attribute__((unused)) static Okhttp3InternalHttp2Http2Stream_FramingSource *new_Okhttp3InternalHttp2Http2Stream_FramingSource_initWithOkhttp3InternalHttp2Http2Stream_withLong_(Okhttp3InternalHttp2Http2Stream *outer$, jlong maxByteCount) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalHttp2Http2Stream_FramingSource *create_Okhttp3InternalHttp2Http2Stream_FramingSource_initWithOkhttp3InternalHttp2Http2Stream_withLong_(Okhttp3InternalHttp2Http2Stream *outer$, jlong maxByteCount);

__attribute__((unused)) static void Okhttp3InternalHttp2Http2Stream_FramingSource_waitUntilReadable(Okhttp3InternalHttp2Http2Stream_FramingSource *self);

__attribute__((unused)) static void Okhttp3InternalHttp2Http2Stream_FramingSource_checkNotClosed(Okhttp3InternalHttp2Http2Stream_FramingSource *self);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalHttp2Http2Stream_FramingSource)

@interface Okhttp3InternalHttp2Http2Stream_FramingSink () {
 @public
  Okhttp3InternalHttp2Http2Stream *this$0_;
  OkioBuffer *sendBuffer_;
}

- (void)emitFrameWithBoolean:(jboolean)outFinished;

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Http2Stream_FramingSink, sendBuffer_, OkioBuffer *)

inline jlong Okhttp3InternalHttp2Http2Stream_FramingSink_get_EMIT_BUFFER_SIZE();
#define Okhttp3InternalHttp2Http2Stream_FramingSink_EMIT_BUFFER_SIZE 16384LL
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3InternalHttp2Http2Stream_FramingSink, EMIT_BUFFER_SIZE, jlong)

__attribute__((unused)) static void Okhttp3InternalHttp2Http2Stream_FramingSink_emitFrameWithBoolean_(Okhttp3InternalHttp2Http2Stream_FramingSink *self, jboolean outFinished);

@interface Okhttp3InternalHttp2Http2Stream_StreamTimeout () {
 @public
  Okhttp3InternalHttp2Http2Stream *this$0_;
}

@end

@implementation Okhttp3InternalHttp2Http2Stream

- (instancetype)initWithInt:(jint)id_
withOkhttp3InternalHttp2Http2Connection:(Okhttp3InternalHttp2Http2Connection *)connection
                withBoolean:(jboolean)outFinished
                withBoolean:(jboolean)inFinished
           withJavaUtilList:(id<JavaUtilList>)requestHeaders {
  Okhttp3InternalHttp2Http2Stream_initWithInt_withOkhttp3InternalHttp2Http2Connection_withBoolean_withBoolean_withJavaUtilList_(self, id_, connection, outFinished, inFinished, requestHeaders);
  return self;
}

- (jint)getId {
  return id__;
}

- (jboolean)isOpen {
  @synchronized(self) {
    if (errorCode_ != nil) {
      return false;
    }
    if ((((Okhttp3InternalHttp2Http2Stream_FramingSource *) nil_chk(source_))->finished_ || source_->closed_) && (((Okhttp3InternalHttp2Http2Stream_FramingSink *) nil_chk(sink_))->finished_ || sink_->closed_) && hasResponseHeaders_) {
      return false;
    }
    return true;
  }
}

- (jboolean)isLocallyInitiated {
  jboolean streamIsClient = (id__ & 1) == 1;
  return ((Okhttp3InternalHttp2Http2Connection *) nil_chk(connection_))->client_ == streamIsClient;
}

- (Okhttp3InternalHttp2Http2Connection *)getConnection {
  return connection_;
}

- (id<JavaUtilList>)getRequestHeaders {
  return requestHeaders_;
}

- (id<JavaUtilList>)takeResponseHeaders {
  @synchronized(self) {
    if (![self isLocallyInitiated]) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(@"servers cannot read response headers");
    }
    [((Okhttp3InternalHttp2Http2Stream_StreamTimeout *) nil_chk(readTimeout_)) enter];
    @try {
      while (responseHeaders_ == nil && errorCode_ == nil) {
        [self waitForIo];
      }
    }
    @finally {
      [readTimeout_ exitAndThrowIfTimedOut];
    }
    id<JavaUtilList> result = responseHeaders_;
    if (result != nil) {
      JreStrongAssign(&responseHeaders_, nil);
      return result;
    }
    @throw create_Okhttp3InternalHttp2StreamResetException_initWithOkhttp3InternalHttp2ErrorCode_(errorCode_);
  }
}

- (Okhttp3InternalHttp2ErrorCode *)getErrorCode {
  @synchronized(self) {
    return errorCode_;
  }
}

- (void)sendResponseHeadersWithJavaUtilList:(id<JavaUtilList>)responseHeaders
                                withBoolean:(jboolean)outArg {
  JreAssert(((!JavaLangThread_holdsLockWithId_(self))), (@"okhttp3/internal/http2/Http2Stream.java:171 condition failed: assert (!Thread.holdsLock(Http2Stream.this));"));
  if (responseHeaders == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"responseHeaders == null");
  }
  jboolean outFinished = false;
  @synchronized(self) {
    self->hasResponseHeaders_ = true;
    if (!outArg) {
      ((Okhttp3InternalHttp2Http2Stream_FramingSink *) nil_chk(self->sink_))->finished_ = true;
      outFinished = true;
    }
  }
  [((Okhttp3InternalHttp2Http2Connection *) nil_chk(connection_)) writeSynReplyWithInt:id__ withBoolean:outFinished withJavaUtilList:responseHeaders];
  if (outFinished) {
    [connection_ flush];
  }
}

- (OkioTimeout *)readTimeout {
  return readTimeout_;
}

- (OkioTimeout *)writeTimeout {
  return writeTimeout_;
}

- (id<OkioSource>)getSource {
  return source_;
}

- (id<OkioSink>)getSink {
  @synchronized(self) {
    if (!hasResponseHeaders_ && ![self isLocallyInitiated]) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(@"reply before requesting the sink");
    }
  }
  return sink_;
}

- (void)closeWithOkhttp3InternalHttp2ErrorCode:(Okhttp3InternalHttp2ErrorCode *)rstStatusCode {
  if (!Okhttp3InternalHttp2Http2Stream_closeInternalWithOkhttp3InternalHttp2ErrorCode_(self, rstStatusCode)) {
    return;
  }
  [((Okhttp3InternalHttp2Http2Connection *) nil_chk(connection_)) writeSynResetWithInt:id__ withOkhttp3InternalHttp2ErrorCode:rstStatusCode];
}

- (void)closeLaterWithOkhttp3InternalHttp2ErrorCode:(Okhttp3InternalHttp2ErrorCode *)errorCode {
  if (!Okhttp3InternalHttp2Http2Stream_closeInternalWithOkhttp3InternalHttp2ErrorCode_(self, errorCode)) {
    return;
  }
  [((Okhttp3InternalHttp2Http2Connection *) nil_chk(connection_)) writeSynResetLaterWithInt:id__ withOkhttp3InternalHttp2ErrorCode:errorCode];
}

- (jboolean)closeInternalWithOkhttp3InternalHttp2ErrorCode:(Okhttp3InternalHttp2ErrorCode *)errorCode {
  return Okhttp3InternalHttp2Http2Stream_closeInternalWithOkhttp3InternalHttp2ErrorCode_(self, errorCode);
}

- (void)receiveHeadersWithJavaUtilList:(id<JavaUtilList>)headers {
  JreAssert(((!JavaLangThread_holdsLockWithId_(self))), (@"okhttp3/internal/http2/Http2Stream.java:258 condition failed: assert (!Thread.holdsLock(Http2Stream.this));"));
  jboolean open = true;
  @synchronized(self) {
    hasResponseHeaders_ = true;
    if (responseHeaders_ == nil) {
      JreStrongAssign(&responseHeaders_, headers);
      open = [self isOpen];
      [self java_notifyAll];
    }
    else {
      id<JavaUtilList> newHeaders = create_JavaUtilArrayList_init();
      [newHeaders addAllWithJavaUtilCollection:responseHeaders_];
      [newHeaders addWithId:nil];
      [newHeaders addAllWithJavaUtilCollection:headers];
      JreStrongAssign(&self->responseHeaders_, newHeaders);
    }
  }
  if (!open) {
    [((Okhttp3InternalHttp2Http2Connection *) nil_chk(connection_)) removeStreamWithInt:id__];
  }
}

- (void)receiveDataWithOkioBufferedSource:(id<OkioBufferedSource>)inArg
                                  withInt:(jint)length {
  JreAssert(((!JavaLangThread_holdsLockWithId_(self))), (@"okhttp3/internal/http2/Http2Stream.java:280 condition failed: assert (!Thread.holdsLock(Http2Stream.this));"));
  [((Okhttp3InternalHttp2Http2Stream_FramingSource *) nil_chk(self->source_)) receiveWithOkioBufferedSource:inArg withLong:length];
}

- (void)receiveFin {
  JreAssert(((!JavaLangThread_holdsLockWithId_(self))), (@"okhttp3/internal/http2/Http2Stream.java:285 condition failed: assert (!Thread.holdsLock(Http2Stream.this));"));
  jboolean open;
  @synchronized(self) {
    ((Okhttp3InternalHttp2Http2Stream_FramingSource *) nil_chk(self->source_))->finished_ = true;
    open = [self isOpen];
    [self java_notifyAll];
  }
  if (!open) {
    [((Okhttp3InternalHttp2Http2Connection *) nil_chk(connection_)) removeStreamWithInt:id__];
  }
}

- (void)receiveRstStreamWithOkhttp3InternalHttp2ErrorCode:(Okhttp3InternalHttp2ErrorCode *)errorCode {
  @synchronized(self) {
    if (self->errorCode_ == nil) {
      JreStrongAssign(&self->errorCode_, errorCode);
      [self java_notifyAll];
    }
  }
}

- (void)cancelStreamIfNecessary {
  JreAssert(((!JavaLangThread_holdsLockWithId_(self))), (@"okhttp3/internal/http2/Http2Stream.java:442 condition failed: assert (!Thread.holdsLock(Http2Stream.this));"));
  jboolean open;
  jboolean cancel;
  @synchronized(self) {
    cancel = (!((Okhttp3InternalHttp2Http2Stream_FramingSource *) nil_chk(source_))->finished_ && source_->closed_ && (((Okhttp3InternalHttp2Http2Stream_FramingSink *) nil_chk(sink_))->finished_ || sink_->closed_));
    open = [self isOpen];
  }
  if (cancel) {
    [self closeWithOkhttp3InternalHttp2ErrorCode:JreLoadEnum(Okhttp3InternalHttp2ErrorCode, CANCEL)];
  }
  else if (!open) {
    [((Okhttp3InternalHttp2Http2Connection *) nil_chk(connection_)) removeStreamWithInt:id__];
  }
}

- (void)addBytesToWriteWindowWithLong:(jlong)delta {
  bytesLeftInWriteWindow_ += delta;
  if (delta > 0) [self java_notifyAll];
}

- (void)checkOutNotClosed {
  if (((Okhttp3InternalHttp2Http2Stream_FramingSink *) nil_chk(sink_))->closed_) {
    @throw create_JavaIoIOException_initWithNSString_(@"stream closed");
  }
  else if (sink_->finished_) {
    @throw create_JavaIoIOException_initWithNSString_(@"stream finished");
  }
  else if (errorCode_ != nil) {
    @throw create_Okhttp3InternalHttp2StreamResetException_initWithOkhttp3InternalHttp2ErrorCode_(errorCode_);
  }
}

- (void)waitForIo {
  @try {
    [self java_wait];
  }
  @catch (JavaLangInterruptedException *e) {
    @throw create_JavaIoInterruptedIOException_init();
  }
}

- (void)dealloc {
  RELEASE_(connection_);
  RELEASE_(requestHeaders_);
  RELEASE_(responseHeaders_);
  RELEASE_(source_);
  RELEASE_(sink_);
  RELEASE_(readTimeout_);
  RELEASE_(writeTimeout_);
  RELEASE_(errorCode_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalHttp2Http2Connection;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LJavaUtilList;", 0x21, -1, -1, 3, 2, -1, -1 },
    { NULL, "LOkhttp3InternalHttp2ErrorCode;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 3, 6, -1, -1 },
    { NULL, "LOkioTimeout;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkioTimeout;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkioSource;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkioSink;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 10, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 12, -1, 13, -1, -1 },
    { NULL, "V", 0x0, 14, 15, 3, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x20, 16, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x0, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 19, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withOkhttp3InternalHttp2Http2Connection:withBoolean:withBoolean:withJavaUtilList:);
  methods[1].selector = @selector(getId);
  methods[2].selector = @selector(isOpen);
  methods[3].selector = @selector(isLocallyInitiated);
  methods[4].selector = @selector(getConnection);
  methods[5].selector = @selector(getRequestHeaders);
  methods[6].selector = @selector(takeResponseHeaders);
  methods[7].selector = @selector(getErrorCode);
  methods[8].selector = @selector(sendResponseHeadersWithJavaUtilList:withBoolean:);
  methods[9].selector = @selector(readTimeout);
  methods[10].selector = @selector(writeTimeout);
  methods[11].selector = @selector(getSource);
  methods[12].selector = @selector(getSink);
  methods[13].selector = @selector(closeWithOkhttp3InternalHttp2ErrorCode:);
  methods[14].selector = @selector(closeLaterWithOkhttp3InternalHttp2ErrorCode:);
  methods[15].selector = @selector(closeInternalWithOkhttp3InternalHttp2ErrorCode:);
  methods[16].selector = @selector(receiveHeadersWithJavaUtilList:);
  methods[17].selector = @selector(receiveDataWithOkioBufferedSource:withInt:);
  methods[18].selector = @selector(receiveFin);
  methods[19].selector = @selector(receiveRstStreamWithOkhttp3InternalHttp2ErrorCode:);
  methods[20].selector = @selector(cancelStreamIfNecessary);
  methods[21].selector = @selector(addBytesToWriteWindowWithLong:);
  methods[22].selector = @selector(checkOutNotClosed);
  methods[23].selector = @selector(waitForIo);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "unacknowledgedBytesRead_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "bytesLeftInWriteWindow_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "id__", "I", .constantValue.asLong = 0, 0x10, 20, -1, -1, -1 },
    { "connection_", "LOkhttp3InternalHttp2Http2Connection;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "requestHeaders_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 21, -1 },
    { "responseHeaders_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 21, -1 },
    { "hasResponseHeaders_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "source_", "LOkhttp3InternalHttp2Http2Stream_FramingSource;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "sink_", "LOkhttp3InternalHttp2Http2Stream_FramingSink;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "readTimeout_", "LOkhttp3InternalHttp2Http2Stream_StreamTimeout;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "writeTimeout_", "LOkhttp3InternalHttp2Http2Stream_StreamTimeout;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "errorCode_", "LOkhttp3InternalHttp2ErrorCode;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILOkhttp3InternalHttp2Http2Connection;ZZLJavaUtilList;", "(ILokhttp3/internal/http2/Http2Connection;ZZLjava/util/List<Lokhttp3/internal/http2/Header;>;)V", "()Ljava/util/List<Lokhttp3/internal/http2/Header;>;", "LJavaIoIOException;", "sendResponseHeaders", "LJavaUtilList;Z", "(Ljava/util/List<Lokhttp3/internal/http2/Header;>;Z)V", "close", "LOkhttp3InternalHttp2ErrorCode;", "closeLater", "closeInternal", "receiveHeaders", "LJavaUtilList;", "(Ljava/util/List<Lokhttp3/internal/http2/Header;>;)V", "receiveData", "LOkioBufferedSource;I", "receiveRstStream", "addBytesToWriteWindow", "J", "LJavaIoInterruptedIOException;", "id", "Ljava/util/List<Lokhttp3/internal/http2/Header;>;", "LOkhttp3InternalHttp2Http2Stream_FramingSource;LOkhttp3InternalHttp2Http2Stream_FramingSink;LOkhttp3InternalHttp2Http2Stream_StreamTimeout;" };
  static const J2ObjcClassInfo _Okhttp3InternalHttp2Http2Stream = { "Http2Stream", "okhttp3.internal.http2", ptrTable, methods, fields, 7, 0x11, 24, 12, -1, 22, -1, -1, -1 };
  return &_Okhttp3InternalHttp2Http2Stream;
}

@end

void Okhttp3InternalHttp2Http2Stream_initWithInt_withOkhttp3InternalHttp2Http2Connection_withBoolean_withBoolean_withJavaUtilList_(Okhttp3InternalHttp2Http2Stream *self, jint id_, Okhttp3InternalHttp2Http2Connection *connection, jboolean outFinished, jboolean inFinished, id<JavaUtilList> requestHeaders) {
  NSObject_init(self);
  self->unacknowledgedBytesRead_ = 0;
  JreStrongAssignAndConsume(&self->readTimeout_, new_Okhttp3InternalHttp2Http2Stream_StreamTimeout_initWithOkhttp3InternalHttp2Http2Stream_(self));
  JreStrongAssignAndConsume(&self->writeTimeout_, new_Okhttp3InternalHttp2Http2Stream_StreamTimeout_initWithOkhttp3InternalHttp2Http2Stream_(self));
  JreStrongAssign(&self->errorCode_, nil);
  if (connection == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"connection == null");
  if (requestHeaders == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"requestHeaders == null");
  self->id__ = id_;
  JreStrongAssign(&self->connection_, connection);
  self->bytesLeftInWriteWindow_ = [((Okhttp3InternalHttp2Settings *) nil_chk(connection->peerSettings_)) getInitialWindowSize];
  JreStrongAssignAndConsume(&self->source_, new_Okhttp3InternalHttp2Http2Stream_FramingSource_initWithOkhttp3InternalHttp2Http2Stream_withLong_(self, [((Okhttp3InternalHttp2Settings *) nil_chk(connection->okHttpSettings_)) getInitialWindowSize]));
  JreStrongAssignAndConsume(&self->sink_, new_Okhttp3InternalHttp2Http2Stream_FramingSink_initWithOkhttp3InternalHttp2Http2Stream_(self));
  self->source_->finished_ = inFinished;
  self->sink_->finished_ = outFinished;
  JreStrongAssign(&self->requestHeaders_, requestHeaders);
}

Okhttp3InternalHttp2Http2Stream *new_Okhttp3InternalHttp2Http2Stream_initWithInt_withOkhttp3InternalHttp2Http2Connection_withBoolean_withBoolean_withJavaUtilList_(jint id_, Okhttp3InternalHttp2Http2Connection *connection, jboolean outFinished, jboolean inFinished, id<JavaUtilList> requestHeaders) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttp2Http2Stream, initWithInt_withOkhttp3InternalHttp2Http2Connection_withBoolean_withBoolean_withJavaUtilList_, id_, connection, outFinished, inFinished, requestHeaders)
}

Okhttp3InternalHttp2Http2Stream *create_Okhttp3InternalHttp2Http2Stream_initWithInt_withOkhttp3InternalHttp2Http2Connection_withBoolean_withBoolean_withJavaUtilList_(jint id_, Okhttp3InternalHttp2Http2Connection *connection, jboolean outFinished, jboolean inFinished, id<JavaUtilList> requestHeaders) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttp2Http2Stream, initWithInt_withOkhttp3InternalHttp2Http2Connection_withBoolean_withBoolean_withJavaUtilList_, id_, connection, outFinished, inFinished, requestHeaders)
}

jboolean Okhttp3InternalHttp2Http2Stream_closeInternalWithOkhttp3InternalHttp2ErrorCode_(Okhttp3InternalHttp2Http2Stream *self, Okhttp3InternalHttp2ErrorCode *errorCode) {
  JreAssert(((!JavaLangThread_holdsLockWithId_(self))), (@"okhttp3/internal/http2/Http2Stream.java:242 condition failed: assert (!Thread.holdsLock(this));"));
  @synchronized(self) {
    if (self->errorCode_ != nil) {
      return false;
    }
    if (((Okhttp3InternalHttp2Http2Stream_FramingSource *) nil_chk(self->source_))->finished_ && ((Okhttp3InternalHttp2Http2Stream_FramingSink *) nil_chk(self->sink_))->finished_) {
      return false;
    }
    JreStrongAssign(&self->errorCode_, errorCode);
    [self java_notifyAll];
  }
  [((Okhttp3InternalHttp2Http2Connection *) nil_chk(self->connection_)) removeStreamWithInt:self->id__];
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalHttp2Http2Stream)

@implementation Okhttp3InternalHttp2Http2Stream_FramingSource

- (instancetype)initWithOkhttp3InternalHttp2Http2Stream:(Okhttp3InternalHttp2Http2Stream *)outer$
                                               withLong:(jlong)maxByteCount {
  Okhttp3InternalHttp2Http2Stream_FramingSource_initWithOkhttp3InternalHttp2Http2Stream_withLong_(self, outer$, maxByteCount);
  return self;
}

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount {
  if (byteCount < 0) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J", @"byteCount < 0: ", byteCount));
  jlong read;
  @synchronized(this$0_) {
    Okhttp3InternalHttp2Http2Stream_FramingSource_waitUntilReadable(self);
    Okhttp3InternalHttp2Http2Stream_FramingSource_checkNotClosed(self);
    if ([((OkioBuffer *) nil_chk(readBuffer_)) size] == 0) return -1;
    read = [readBuffer_ readWithOkioBuffer:sink withLong:JavaLangMath_minWithLong_withLong_(byteCount, [readBuffer_ size])];
    this$0_->unacknowledgedBytesRead_ += read;
    if (this$0_->unacknowledgedBytesRead_ >= [((Okhttp3InternalHttp2Settings *) nil_chk(((Okhttp3InternalHttp2Http2Connection *) nil_chk(this$0_->connection_))->okHttpSettings_)) getInitialWindowSize] / 2) {
      [this$0_->connection_ writeWindowUpdateLaterWithInt:this$0_->id__ withLong:this$0_->unacknowledgedBytesRead_];
      this$0_->unacknowledgedBytesRead_ = 0;
    }
  }
  @synchronized(this$0_->connection_) {
    this$0_->connection_->unacknowledgedBytesRead_ += read;
    if (this$0_->connection_->unacknowledgedBytesRead_ >= [((Okhttp3InternalHttp2Settings *) nil_chk(this$0_->connection_->okHttpSettings_)) getInitialWindowSize] / 2) {
      [this$0_->connection_ writeWindowUpdateLaterWithInt:0 withLong:this$0_->connection_->unacknowledgedBytesRead_];
      this$0_->connection_->unacknowledgedBytesRead_ = 0;
    }
  }
  return read;
}

- (void)waitUntilReadable {
  Okhttp3InternalHttp2Http2Stream_FramingSource_waitUntilReadable(self);
}

- (void)receiveWithOkioBufferedSource:(id<OkioBufferedSource>)inArg
                             withLong:(jlong)byteCount {
  JreAssert(((!JavaLangThread_holdsLockWithId_(this$0_))), (@"okhttp3/internal/http2/Http2Stream.java:379 condition failed: assert (!Thread.holdsLock(Http2Stream.this));"));
  while (byteCount > 0) {
    jboolean finished;
    jboolean flowControlError;
    @synchronized(this$0_) {
      finished = self->finished_;
      flowControlError = (byteCount + [((OkioBuffer *) nil_chk(readBuffer_)) size] > maxByteCount_);
    }
    if (flowControlError) {
      [((id<OkioBufferedSource>) nil_chk(inArg)) skipWithLong:byteCount];
      [this$0_ closeLaterWithOkhttp3InternalHttp2ErrorCode:JreLoadEnum(Okhttp3InternalHttp2ErrorCode, FLOW_CONTROL_ERROR)];
      return;
    }
    if (finished) {
      [((id<OkioBufferedSource>) nil_chk(inArg)) skipWithLong:byteCount];
      return;
    }
    jlong read = [((id<OkioBufferedSource>) nil_chk(inArg)) readWithOkioBuffer:receiveBuffer_ withLong:byteCount];
    if (read == -1) @throw create_JavaIoEOFException_init();
    byteCount -= read;
    @synchronized(this$0_) {
      jboolean wasEmpty = [readBuffer_ size] == 0;
      [readBuffer_ writeAllWithOkioSource:receiveBuffer_];
      if (wasEmpty) {
        [this$0_ java_notifyAll];
      }
    }
  }
}

- (OkioTimeout *)timeout {
  return this$0_->readTimeout_;
}

- (void)close {
  @synchronized(this$0_) {
    closed_ = true;
    [((OkioBuffer *) nil_chk(readBuffer_)) clear];
    [this$0_ java_notifyAll];
  }
  [this$0_ cancelStreamIfNecessary];
}

- (void)checkNotClosed {
  Okhttp3InternalHttp2Http2Stream_FramingSource_checkNotClosed(self);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(receiveBuffer_);
  RELEASE_(readBuffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, 3, -1, -1, -1 },
    { NULL, "LOkioTimeout;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalHttp2Http2Stream:withLong:);
  methods[1].selector = @selector(readWithOkioBuffer:withLong:);
  methods[2].selector = @selector(waitUntilReadable);
  methods[3].selector = @selector(receiveWithOkioBufferedSource:withLong:);
  methods[4].selector = @selector(timeout);
  methods[5].selector = @selector(close);
  methods[6].selector = @selector(checkNotClosed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3InternalHttp2Http2Stream;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "receiveBuffer_", "LOkioBuffer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "readBuffer_", "LOkioBuffer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "maxByteCount_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "closed_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "finished_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "J", "read", "LOkioBuffer;J", "LJavaIoIOException;", "receive", "LOkioBufferedSource;J", "LOkhttp3InternalHttp2Http2Stream;" };
  static const J2ObjcClassInfo _Okhttp3InternalHttp2Http2Stream_FramingSource = { "FramingSource", "okhttp3.internal.http2", ptrTable, methods, fields, 7, 0x12, 7, 6, 6, -1, -1, -1, -1 };
  return &_Okhttp3InternalHttp2Http2Stream_FramingSource;
}

@end

void Okhttp3InternalHttp2Http2Stream_FramingSource_initWithOkhttp3InternalHttp2Http2Stream_withLong_(Okhttp3InternalHttp2Http2Stream_FramingSource *self, Okhttp3InternalHttp2Http2Stream *outer$, jlong maxByteCount) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->receiveBuffer_, new_OkioBuffer_init());
  JreStrongAssignAndConsume(&self->readBuffer_, new_OkioBuffer_init());
  self->maxByteCount_ = maxByteCount;
}

Okhttp3InternalHttp2Http2Stream_FramingSource *new_Okhttp3InternalHttp2Http2Stream_FramingSource_initWithOkhttp3InternalHttp2Http2Stream_withLong_(Okhttp3InternalHttp2Http2Stream *outer$, jlong maxByteCount) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttp2Http2Stream_FramingSource, initWithOkhttp3InternalHttp2Http2Stream_withLong_, outer$, maxByteCount)
}

Okhttp3InternalHttp2Http2Stream_FramingSource *create_Okhttp3InternalHttp2Http2Stream_FramingSource_initWithOkhttp3InternalHttp2Http2Stream_withLong_(Okhttp3InternalHttp2Http2Stream *outer$, jlong maxByteCount) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttp2Http2Stream_FramingSource, initWithOkhttp3InternalHttp2Http2Stream_withLong_, outer$, maxByteCount)
}

void Okhttp3InternalHttp2Http2Stream_FramingSource_waitUntilReadable(Okhttp3InternalHttp2Http2Stream_FramingSource *self) {
  [((Okhttp3InternalHttp2Http2Stream_StreamTimeout *) nil_chk(self->this$0_->readTimeout_)) enter];
  @try {
    while ([((OkioBuffer *) nil_chk(self->readBuffer_)) size] == 0 && !self->finished_ && !self->closed_ && self->this$0_->errorCode_ == nil) {
      [self->this$0_ waitForIo];
    }
  }
  @finally {
    [self->this$0_->readTimeout_ exitAndThrowIfTimedOut];
  }
}

void Okhttp3InternalHttp2Http2Stream_FramingSource_checkNotClosed(Okhttp3InternalHttp2Http2Stream_FramingSource *self) {
  if (self->closed_) {
    @throw create_JavaIoIOException_initWithNSString_(@"stream closed");
  }
  if (self->this$0_->errorCode_ != nil) {
    @throw create_Okhttp3InternalHttp2StreamResetException_initWithOkhttp3InternalHttp2ErrorCode_(self->this$0_->errorCode_);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalHttp2Http2Stream_FramingSource)

@implementation Okhttp3InternalHttp2Http2Stream_FramingSink

- (instancetype)initWithOkhttp3InternalHttp2Http2Stream:(Okhttp3InternalHttp2Http2Stream *)outer$ {
  Okhttp3InternalHttp2Http2Stream_FramingSink_initWithOkhttp3InternalHttp2Http2Stream_(self, outer$);
  return self;
}

- (void)writeWithOkioBuffer:(OkioBuffer *)source
                   withLong:(jlong)byteCount {
  JreAssert(((!JavaLangThread_holdsLockWithId_(this$0_))), (@"okhttp3/internal/http2/Http2Stream.java:478 condition failed: assert (!Thread.holdsLock(Http2Stream.this));"));
  [((OkioBuffer *) nil_chk(sendBuffer_)) writeWithOkioBuffer:source withLong:byteCount];
  while ([sendBuffer_ size] >= Okhttp3InternalHttp2Http2Stream_FramingSink_EMIT_BUFFER_SIZE) {
    Okhttp3InternalHttp2Http2Stream_FramingSink_emitFrameWithBoolean_(self, false);
  }
}

- (void)emitFrameWithBoolean:(jboolean)outFinished {
  Okhttp3InternalHttp2Http2Stream_FramingSink_emitFrameWithBoolean_(self, outFinished);
}

- (void)flush {
  JreAssert(((!JavaLangThread_holdsLockWithId_(this$0_))), (@"okhttp3/internal/http2/Http2Stream.java:515 condition failed: assert (!Thread.holdsLock(Http2Stream.this));"));
  @synchronized(this$0_) {
    [this$0_ checkOutNotClosed];
  }
  while ([((OkioBuffer *) nil_chk(sendBuffer_)) size] > 0) {
    Okhttp3InternalHttp2Http2Stream_FramingSink_emitFrameWithBoolean_(self, false);
    [((Okhttp3InternalHttp2Http2Connection *) nil_chk(this$0_->connection_)) flush];
  }
}

- (OkioTimeout *)timeout {
  return this$0_->writeTimeout_;
}

- (void)close {
  JreAssert(((!JavaLangThread_holdsLockWithId_(this$0_))), (@"okhttp3/internal/http2/Http2Stream.java:530 condition failed: assert (!Thread.holdsLock(Http2Stream.this));"));
  @synchronized(this$0_) {
    if (closed_) return;
  }
  if (!((Okhttp3InternalHttp2Http2Stream_FramingSink *) nil_chk(this$0_->sink_))->finished_) {
    if ([((OkioBuffer *) nil_chk(sendBuffer_)) size] > 0) {
      while ([sendBuffer_ size] > 0) {
        Okhttp3InternalHttp2Http2Stream_FramingSink_emitFrameWithBoolean_(self, true);
      }
    }
    else {
      [((Okhttp3InternalHttp2Http2Connection *) nil_chk(this$0_->connection_)) writeDataWithInt:this$0_->id__ withBoolean:true withOkioBuffer:nil withLong:0];
    }
  }
  @synchronized(this$0_) {
    closed_ = true;
  }
  [((Okhttp3InternalHttp2Http2Connection *) nil_chk(this$0_->connection_)) flush];
  [this$0_ cancelStreamIfNecessary];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(sendBuffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOkioTimeout;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalHttp2Http2Stream:);
  methods[1].selector = @selector(writeWithOkioBuffer:withLong:);
  methods[2].selector = @selector(emitFrameWithBoolean:);
  methods[3].selector = @selector(flush);
  methods[4].selector = @selector(timeout);
  methods[5].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3InternalHttp2Http2Stream;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "EMIT_BUFFER_SIZE", "J", .constantValue.asLong = Okhttp3InternalHttp2Http2Stream_FramingSink_EMIT_BUFFER_SIZE, 0x1a, -1, -1, -1, -1 },
    { "sendBuffer_", "LOkioBuffer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "closed_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "finished_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "write", "LOkioBuffer;J", "LJavaIoIOException;", "emitFrame", "Z", "LOkhttp3InternalHttp2Http2Stream;" };
  static const J2ObjcClassInfo _Okhttp3InternalHttp2Http2Stream_FramingSink = { "FramingSink", "okhttp3.internal.http2", ptrTable, methods, fields, 7, 0x10, 6, 5, 5, -1, -1, -1, -1 };
  return &_Okhttp3InternalHttp2Http2Stream_FramingSink;
}

@end

void Okhttp3InternalHttp2Http2Stream_FramingSink_initWithOkhttp3InternalHttp2Http2Stream_(Okhttp3InternalHttp2Http2Stream_FramingSink *self, Okhttp3InternalHttp2Http2Stream *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->sendBuffer_, new_OkioBuffer_init());
}

Okhttp3InternalHttp2Http2Stream_FramingSink *new_Okhttp3InternalHttp2Http2Stream_FramingSink_initWithOkhttp3InternalHttp2Http2Stream_(Okhttp3InternalHttp2Http2Stream *outer$) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttp2Http2Stream_FramingSink, initWithOkhttp3InternalHttp2Http2Stream_, outer$)
}

Okhttp3InternalHttp2Http2Stream_FramingSink *create_Okhttp3InternalHttp2Http2Stream_FramingSink_initWithOkhttp3InternalHttp2Http2Stream_(Okhttp3InternalHttp2Http2Stream *outer$) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttp2Http2Stream_FramingSink, initWithOkhttp3InternalHttp2Http2Stream_, outer$)
}

void Okhttp3InternalHttp2Http2Stream_FramingSink_emitFrameWithBoolean_(Okhttp3InternalHttp2Http2Stream_FramingSink *self, jboolean outFinished) {
  jlong toWrite;
  @synchronized(self->this$0_) {
    [((Okhttp3InternalHttp2Http2Stream_StreamTimeout *) nil_chk(self->this$0_->writeTimeout_)) enter];
    @try {
      while (self->this$0_->bytesLeftInWriteWindow_ <= 0 && !self->finished_ && !self->closed_ && self->this$0_->errorCode_ == nil) {
        [self->this$0_ waitForIo];
      }
    }
    @finally {
      [self->this$0_->writeTimeout_ exitAndThrowIfTimedOut];
    }
    [self->this$0_ checkOutNotClosed];
    toWrite = JavaLangMath_minWithLong_withLong_(self->this$0_->bytesLeftInWriteWindow_, [((OkioBuffer *) nil_chk(self->sendBuffer_)) size]);
    self->this$0_->bytesLeftInWriteWindow_ -= toWrite;
  }
  [self->this$0_->writeTimeout_ enter];
  @try {
    [((Okhttp3InternalHttp2Http2Connection *) nil_chk(self->this$0_->connection_)) writeDataWithInt:self->this$0_->id__ withBoolean:outFinished && toWrite == [self->sendBuffer_ size] withOkioBuffer:self->sendBuffer_ withLong:toWrite];
  }
  @finally {
    [self->this$0_->writeTimeout_ exitAndThrowIfTimedOut];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalHttp2Http2Stream_FramingSink)

@implementation Okhttp3InternalHttp2Http2Stream_StreamTimeout

- (instancetype)initWithOkhttp3InternalHttp2Http2Stream:(Okhttp3InternalHttp2Http2Stream *)outer$ {
  Okhttp3InternalHttp2Http2Stream_StreamTimeout_initWithOkhttp3InternalHttp2Http2Stream_(self, outer$);
  return self;
}

- (void)timedOut {
  [this$0_ closeLaterWithOkhttp3InternalHttp2ErrorCode:JreLoadEnum(Okhttp3InternalHttp2ErrorCode, CANCEL)];
}

- (JavaIoIOException *)newTimeoutExceptionWithJavaIoIOException:(JavaIoIOException *)cause {
  JavaNetSocketTimeoutException *socketTimeoutException = create_JavaNetSocketTimeoutException_initWithNSString_(@"timeout");
  if (cause != nil) {
    [socketTimeoutException initCauseWithNSException:cause];
  }
  return socketTimeoutException;
}

- (void)exitAndThrowIfTimedOut {
  if ([self exit]) @throw [self newTimeoutExceptionWithJavaIoIOException:nil];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoIOException;", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalHttp2Http2Stream:);
  methods[1].selector = @selector(timedOut);
  methods[2].selector = @selector(newTimeoutExceptionWithJavaIoIOException:);
  methods[3].selector = @selector(exitAndThrowIfTimedOut);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3InternalHttp2Http2Stream;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "newTimeoutException", "LJavaIoIOException;", "LOkhttp3InternalHttp2Http2Stream;" };
  static const J2ObjcClassInfo _Okhttp3InternalHttp2Http2Stream_StreamTimeout = { "StreamTimeout", "okhttp3.internal.http2", ptrTable, methods, fields, 7, 0x0, 4, 1, 2, -1, -1, -1, -1 };
  return &_Okhttp3InternalHttp2Http2Stream_StreamTimeout;
}

@end

void Okhttp3InternalHttp2Http2Stream_StreamTimeout_initWithOkhttp3InternalHttp2Http2Stream_(Okhttp3InternalHttp2Http2Stream_StreamTimeout *self, Okhttp3InternalHttp2Http2Stream *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  OkioAsyncTimeout_init(self);
}

Okhttp3InternalHttp2Http2Stream_StreamTimeout *new_Okhttp3InternalHttp2Http2Stream_StreamTimeout_initWithOkhttp3InternalHttp2Http2Stream_(Okhttp3InternalHttp2Http2Stream *outer$) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttp2Http2Stream_StreamTimeout, initWithOkhttp3InternalHttp2Http2Stream_, outer$)
}

Okhttp3InternalHttp2Http2Stream_StreamTimeout *create_Okhttp3InternalHttp2Http2Stream_StreamTimeout_initWithOkhttp3InternalHttp2Http2Stream_(Okhttp3InternalHttp2Http2Stream *outer$) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttp2Http2Stream_StreamTimeout, initWithOkhttp3InternalHttp2Http2Stream_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalHttp2Http2Stream_StreamTimeout)
