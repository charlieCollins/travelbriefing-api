//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okhttp3/internal/http2/Http2Connection.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Okhttp3InternalHttp2Http2Connection")
#ifdef RESTRICT_Okhttp3InternalHttp2Http2Connection
#define INCLUDE_ALL_Okhttp3InternalHttp2Http2Connection 0
#else
#define INCLUDE_ALL_Okhttp3InternalHttp2Http2Connection 1
#endif
#undef RESTRICT_Okhttp3InternalHttp2Http2Connection

#if !defined (Okhttp3InternalHttp2Http2Connection_) && (INCLUDE_ALL_Okhttp3InternalHttp2Http2Connection || defined(INCLUDE_Okhttp3InternalHttp2Http2Connection))
#define Okhttp3InternalHttp2Http2Connection_

#define RESTRICT_JavaIoCloseable 1
#define INCLUDE_JavaIoCloseable 1
#include "java/io/Closeable.h"

@class JavaNetSocket;
@class Okhttp3InternalHttp2ErrorCode;
@class Okhttp3InternalHttp2Http2Connection_Builder;
@class Okhttp3InternalHttp2Http2Connection_Listener;
@class Okhttp3InternalHttp2Http2Connection_ReaderRunnable;
@class Okhttp3InternalHttp2Http2Stream;
@class Okhttp3InternalHttp2Http2Writer;
@class Okhttp3InternalHttp2Ping;
@class Okhttp3InternalHttp2Settings;
@class Okhttp3Protocol;
@class OkioBuffer;
@protocol JavaUtilConcurrentExecutorService;
@protocol JavaUtilList;
@protocol JavaUtilMap;
@protocol JavaUtilSet;
@protocol Okhttp3InternalHttp2PushObserver;
@protocol OkioBufferedSource;

@interface Okhttp3InternalHttp2Http2Connection : NSObject < JavaIoCloseable > {
 @public
  jboolean client_;
  Okhttp3InternalHttp2Http2Connection_Listener *listener_;
  id<JavaUtilMap> streams_;
  NSString *hostname_;
  jint lastGoodStreamId_;
  jint nextStreamId_;
  jboolean shutdown_;
  id<Okhttp3InternalHttp2PushObserver> pushObserver_;
  jlong unacknowledgedBytesRead_;
  jlong bytesLeftInWriteWindow_;
  Okhttp3InternalHttp2Settings *okHttpSettings_;
  Okhttp3InternalHttp2Settings *peerSettings_;
  jboolean receivedInitialPeerSettings_;
  JavaNetSocket *socket_;
  Okhttp3InternalHttp2Http2Writer *writer_;
  Okhttp3InternalHttp2Http2Connection_ReaderRunnable *readerRunnable_;
  id<JavaUtilSet> currentPushRequests_;
}

#pragma mark Public

- (void)close;

- (void)flush;

- (Okhttp3Protocol *)getProtocol;

- (jboolean)isShutdown;

- (jint)maxConcurrentStreams;

- (Okhttp3InternalHttp2Http2Stream *)newStreamWithJavaUtilList:(id<JavaUtilList>)requestHeaders
                                                   withBoolean:(jboolean)outArg OBJC_METHOD_FAMILY_NONE;

- (jint)openStreamCount;

- (Okhttp3InternalHttp2Ping *)ping;

- (Okhttp3InternalHttp2Http2Stream *)pushStreamWithInt:(jint)associatedStreamId
                                      withJavaUtilList:(id<JavaUtilList>)requestHeaders
                                           withBoolean:(jboolean)outArg;

- (void)setSettingsWithOkhttp3InternalHttp2Settings:(Okhttp3InternalHttp2Settings *)settings;

- (void)shutdownWithOkhttp3InternalHttp2ErrorCode:(Okhttp3InternalHttp2ErrorCode *)statusCode;

- (void)start;

- (void)writeDataWithInt:(jint)streamId
             withBoolean:(jboolean)outFinished
          withOkioBuffer:(OkioBuffer *)buffer
                withLong:(jlong)byteCount;

#pragma mark Package-Private

- (instancetype)initWithOkhttp3InternalHttp2Http2Connection_Builder:(Okhttp3InternalHttp2Http2Connection_Builder *)builder;

- (void)addBytesToWriteWindowWithLong:(jlong)delta;

- (void)closeWithOkhttp3InternalHttp2ErrorCode:(Okhttp3InternalHttp2ErrorCode *)connectionCode
             withOkhttp3InternalHttp2ErrorCode:(Okhttp3InternalHttp2ErrorCode *)streamCode;

- (Okhttp3InternalHttp2Http2Stream *)getStreamWithInt:(jint)id_;

- (void)pushDataLaterWithInt:(jint)streamId
      withOkioBufferedSource:(id<OkioBufferedSource>)source
                     withInt:(jint)byteCount
                 withBoolean:(jboolean)inFinished;

- (jboolean)pushedStreamWithInt:(jint)streamId;

- (void)pushHeadersLaterWithInt:(jint)streamId
               withJavaUtilList:(id<JavaUtilList>)requestHeaders
                    withBoolean:(jboolean)inFinished;

- (void)pushRequestLaterWithInt:(jint)streamId
               withJavaUtilList:(id<JavaUtilList>)requestHeaders;

- (void)pushResetLaterWithInt:(jint)streamId
withOkhttp3InternalHttp2ErrorCode:(Okhttp3InternalHttp2ErrorCode *)errorCode;

- (Okhttp3InternalHttp2Ping *)removePingWithInt:(jint)id_;

- (Okhttp3InternalHttp2Http2Stream *)removeStreamWithInt:(jint)streamId;

- (void)startWithBoolean:(jboolean)sendConnectionPreface;

- (void)writePingWithBoolean:(jboolean)reply
                     withInt:(jint)payload1
                     withInt:(jint)payload2
withOkhttp3InternalHttp2Ping:(Okhttp3InternalHttp2Ping *)ping;

- (void)writePingLaterWithBoolean:(jboolean)reply
                          withInt:(jint)payload1
                          withInt:(jint)payload2
     withOkhttp3InternalHttp2Ping:(Okhttp3InternalHttp2Ping *)ping;

- (void)writeSynReplyWithInt:(jint)streamId
                 withBoolean:(jboolean)outFinished
            withJavaUtilList:(id<JavaUtilList>)alternating;

- (void)writeSynResetWithInt:(jint)streamId
withOkhttp3InternalHttp2ErrorCode:(Okhttp3InternalHttp2ErrorCode *)statusCode;

- (void)writeSynResetLaterWithInt:(jint)streamId
withOkhttp3InternalHttp2ErrorCode:(Okhttp3InternalHttp2ErrorCode *)errorCode;

- (void)writeWindowUpdateLaterWithInt:(jint)streamId
                             withLong:(jlong)unacknowledgedBytesRead;

@end

J2OBJC_STATIC_INIT(Okhttp3InternalHttp2Http2Connection)

J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Http2Connection, listener_, Okhttp3InternalHttp2Http2Connection_Listener *)
J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Http2Connection, streams_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Http2Connection, hostname_, NSString *)
J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Http2Connection, pushObserver_, id<Okhttp3InternalHttp2PushObserver>)
J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Http2Connection, okHttpSettings_, Okhttp3InternalHttp2Settings *)
J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Http2Connection, peerSettings_, Okhttp3InternalHttp2Settings *)
J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Http2Connection, socket_, JavaNetSocket *)
J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Http2Connection, writer_, Okhttp3InternalHttp2Http2Writer *)
J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Http2Connection, readerRunnable_, Okhttp3InternalHttp2Http2Connection_ReaderRunnable *)
J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Http2Connection, currentPushRequests_, id<JavaUtilSet>)

inline id<JavaUtilConcurrentExecutorService> Okhttp3InternalHttp2Http2Connection_get_executor();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilConcurrentExecutorService> Okhttp3InternalHttp2Http2Connection_executor;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalHttp2Http2Connection, executor, id<JavaUtilConcurrentExecutorService>)

FOUNDATION_EXPORT void Okhttp3InternalHttp2Http2Connection_initWithOkhttp3InternalHttp2Http2Connection_Builder_(Okhttp3InternalHttp2Http2Connection *self, Okhttp3InternalHttp2Http2Connection_Builder *builder);

FOUNDATION_EXPORT Okhttp3InternalHttp2Http2Connection *new_Okhttp3InternalHttp2Http2Connection_initWithOkhttp3InternalHttp2Http2Connection_Builder_(Okhttp3InternalHttp2Http2Connection_Builder *builder) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3InternalHttp2Http2Connection *create_Okhttp3InternalHttp2Http2Connection_initWithOkhttp3InternalHttp2Http2Connection_Builder_(Okhttp3InternalHttp2Http2Connection_Builder *builder);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalHttp2Http2Connection)

#endif

#if !defined (Okhttp3InternalHttp2Http2Connection_Builder_) && (INCLUDE_ALL_Okhttp3InternalHttp2Http2Connection || defined(INCLUDE_Okhttp3InternalHttp2Http2Connection_Builder))
#define Okhttp3InternalHttp2Http2Connection_Builder_

@class JavaNetSocket;
@class Okhttp3InternalHttp2Http2Connection;
@class Okhttp3InternalHttp2Http2Connection_Listener;
@protocol Okhttp3InternalHttp2PushObserver;
@protocol OkioBufferedSink;
@protocol OkioBufferedSource;

@interface Okhttp3InternalHttp2Http2Connection_Builder : NSObject {
 @public
  JavaNetSocket *socket_;
  NSString *hostname_;
  id<OkioBufferedSource> source_;
  id<OkioBufferedSink> sink_;
  Okhttp3InternalHttp2Http2Connection_Listener *listener_;
  id<Okhttp3InternalHttp2PushObserver> pushObserver_;
  jboolean client_;
}

#pragma mark Public

- (instancetype)initWithBoolean:(jboolean)client;

- (Okhttp3InternalHttp2Http2Connection *)build;

- (Okhttp3InternalHttp2Http2Connection_Builder *)listenerWithOkhttp3InternalHttp2Http2Connection_Listener:(Okhttp3InternalHttp2Http2Connection_Listener *)listener;

- (Okhttp3InternalHttp2Http2Connection_Builder *)pushObserverWithOkhttp3InternalHttp2PushObserver:(id<Okhttp3InternalHttp2PushObserver>)pushObserver;

- (Okhttp3InternalHttp2Http2Connection_Builder *)socketWithJavaNetSocket:(JavaNetSocket *)socket;

- (Okhttp3InternalHttp2Http2Connection_Builder *)socketWithJavaNetSocket:(JavaNetSocket *)socket
                                                            withNSString:(NSString *)hostname
                                                  withOkioBufferedSource:(id<OkioBufferedSource>)source
                                                    withOkioBufferedSink:(id<OkioBufferedSink>)sink;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalHttp2Http2Connection_Builder)

J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Http2Connection_Builder, socket_, JavaNetSocket *)
J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Http2Connection_Builder, hostname_, NSString *)
J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Http2Connection_Builder, source_, id<OkioBufferedSource>)
J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Http2Connection_Builder, sink_, id<OkioBufferedSink>)
J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Http2Connection_Builder, listener_, Okhttp3InternalHttp2Http2Connection_Listener *)
J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Http2Connection_Builder, pushObserver_, id<Okhttp3InternalHttp2PushObserver>)

FOUNDATION_EXPORT void Okhttp3InternalHttp2Http2Connection_Builder_initWithBoolean_(Okhttp3InternalHttp2Http2Connection_Builder *self, jboolean client);

FOUNDATION_EXPORT Okhttp3InternalHttp2Http2Connection_Builder *new_Okhttp3InternalHttp2Http2Connection_Builder_initWithBoolean_(jboolean client) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3InternalHttp2Http2Connection_Builder *create_Okhttp3InternalHttp2Http2Connection_Builder_initWithBoolean_(jboolean client);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalHttp2Http2Connection_Builder)

#endif

#if !defined (Okhttp3InternalHttp2Http2Connection_ReaderRunnable_) && (INCLUDE_ALL_Okhttp3InternalHttp2Http2Connection || defined(INCLUDE_Okhttp3InternalHttp2Http2Connection_ReaderRunnable))
#define Okhttp3InternalHttp2Http2Connection_ReaderRunnable_

#define RESTRICT_Okhttp3InternalNamedRunnable 1
#define INCLUDE_Okhttp3InternalNamedRunnable 1
#include "okhttp3/internal/NamedRunnable.h"

#define RESTRICT_Okhttp3InternalHttp2Http2Reader 1
#define INCLUDE_Okhttp3InternalHttp2Http2Reader_Handler 1
#include "okhttp3/internal/http2/Http2Reader.h"

@class Okhttp3InternalHttp2ErrorCode;
@class Okhttp3InternalHttp2Http2Connection;
@class Okhttp3InternalHttp2Http2Reader;
@class Okhttp3InternalHttp2Settings;
@class OkioByteString;
@protocol JavaUtilList;
@protocol OkioBufferedSource;

@interface Okhttp3InternalHttp2Http2Connection_ReaderRunnable : Okhttp3InternalNamedRunnable < Okhttp3InternalHttp2Http2Reader_Handler > {
 @public
  Okhttp3InternalHttp2Http2Reader *reader_;
}

#pragma mark Public

- (void)ackSettings;

- (void)alternateServiceWithInt:(jint)streamId
                   withNSString:(NSString *)origin
             withOkioByteString:(OkioByteString *)protocol
                   withNSString:(NSString *)host
                        withInt:(jint)port
                       withLong:(jlong)maxAge;

- (void)dataWithBoolean:(jboolean)inFinished
                withInt:(jint)streamId
 withOkioBufferedSource:(id<OkioBufferedSource>)source
                withInt:(jint)length;

- (void)goAwayWithInt:(jint)lastGoodStreamId
withOkhttp3InternalHttp2ErrorCode:(Okhttp3InternalHttp2ErrorCode *)errorCode
   withOkioByteString:(OkioByteString *)debugData;

- (void)headersWithBoolean:(jboolean)inFinished
                   withInt:(jint)streamId
                   withInt:(jint)associatedStreamId
          withJavaUtilList:(id<JavaUtilList>)headerBlock;

- (void)pingWithBoolean:(jboolean)reply
                withInt:(jint)payload1
                withInt:(jint)payload2;

- (void)priorityWithInt:(jint)streamId
                withInt:(jint)streamDependency
                withInt:(jint)weight
            withBoolean:(jboolean)exclusive;

- (void)pushPromiseWithInt:(jint)streamId
                   withInt:(jint)promisedStreamId
          withJavaUtilList:(id<JavaUtilList>)requestHeaders;

- (void)rstStreamWithInt:(jint)streamId
withOkhttp3InternalHttp2ErrorCode:(Okhttp3InternalHttp2ErrorCode *)errorCode;

- (void)settingsWithBoolean:(jboolean)clearPrevious
withOkhttp3InternalHttp2Settings:(Okhttp3InternalHttp2Settings *)newSettings;

- (void)windowUpdateWithInt:(jint)streamId
                   withLong:(jlong)windowSizeIncrement;

#pragma mark Protected

- (void)execute;

#pragma mark Package-Private

- (instancetype)initWithOkhttp3InternalHttp2Http2Connection:(Okhttp3InternalHttp2Http2Connection *)outer$
                        withOkhttp3InternalHttp2Http2Reader:(Okhttp3InternalHttp2Http2Reader *)reader;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalHttp2Http2Connection_ReaderRunnable)

J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Http2Connection_ReaderRunnable, reader_, Okhttp3InternalHttp2Http2Reader *)

FOUNDATION_EXPORT void Okhttp3InternalHttp2Http2Connection_ReaderRunnable_initWithOkhttp3InternalHttp2Http2Connection_withOkhttp3InternalHttp2Http2Reader_(Okhttp3InternalHttp2Http2Connection_ReaderRunnable *self, Okhttp3InternalHttp2Http2Connection *outer$, Okhttp3InternalHttp2Http2Reader *reader);

FOUNDATION_EXPORT Okhttp3InternalHttp2Http2Connection_ReaderRunnable *new_Okhttp3InternalHttp2Http2Connection_ReaderRunnable_initWithOkhttp3InternalHttp2Http2Connection_withOkhttp3InternalHttp2Http2Reader_(Okhttp3InternalHttp2Http2Connection *outer$, Okhttp3InternalHttp2Http2Reader *reader) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3InternalHttp2Http2Connection_ReaderRunnable *create_Okhttp3InternalHttp2Http2Connection_ReaderRunnable_initWithOkhttp3InternalHttp2Http2Connection_withOkhttp3InternalHttp2Http2Reader_(Okhttp3InternalHttp2Http2Connection *outer$, Okhttp3InternalHttp2Http2Reader *reader);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalHttp2Http2Connection_ReaderRunnable)

#endif

#if !defined (Okhttp3InternalHttp2Http2Connection_Listener_) && (INCLUDE_ALL_Okhttp3InternalHttp2Http2Connection || defined(INCLUDE_Okhttp3InternalHttp2Http2Connection_Listener))
#define Okhttp3InternalHttp2Http2Connection_Listener_

@class Okhttp3InternalHttp2Http2Connection;
@class Okhttp3InternalHttp2Http2Stream;

@interface Okhttp3InternalHttp2Http2Connection_Listener : NSObject

#pragma mark Public

- (instancetype)init;

- (void)onSettingsWithOkhttp3InternalHttp2Http2Connection:(Okhttp3InternalHttp2Http2Connection *)connection;

- (void)onStreamWithOkhttp3InternalHttp2Http2Stream:(Okhttp3InternalHttp2Http2Stream *)stream;

@end

J2OBJC_STATIC_INIT(Okhttp3InternalHttp2Http2Connection_Listener)

inline Okhttp3InternalHttp2Http2Connection_Listener *Okhttp3InternalHttp2Http2Connection_Listener_get_REFUSE_INCOMING_STREAMS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT Okhttp3InternalHttp2Http2Connection_Listener *Okhttp3InternalHttp2Http2Connection_Listener_REFUSE_INCOMING_STREAMS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalHttp2Http2Connection_Listener, REFUSE_INCOMING_STREAMS, Okhttp3InternalHttp2Http2Connection_Listener *)

FOUNDATION_EXPORT void Okhttp3InternalHttp2Http2Connection_Listener_init(Okhttp3InternalHttp2Http2Connection_Listener *self);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalHttp2Http2Connection_Listener)

#endif

#pragma pop_macro("INCLUDE_ALL_Okhttp3InternalHttp2Http2Connection")
