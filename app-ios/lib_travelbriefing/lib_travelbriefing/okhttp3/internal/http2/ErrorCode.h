//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okhttp3/internal/http2/ErrorCode.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Okhttp3InternalHttp2ErrorCode")
#ifdef RESTRICT_Okhttp3InternalHttp2ErrorCode
#define INCLUDE_ALL_Okhttp3InternalHttp2ErrorCode 0
#else
#define INCLUDE_ALL_Okhttp3InternalHttp2ErrorCode 1
#endif
#undef RESTRICT_Okhttp3InternalHttp2ErrorCode

#if !defined (Okhttp3InternalHttp2ErrorCode_) && (INCLUDE_ALL_Okhttp3InternalHttp2ErrorCode || defined(INCLUDE_Okhttp3InternalHttp2ErrorCode))
#define Okhttp3InternalHttp2ErrorCode_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, Okhttp3InternalHttp2ErrorCode_Enum) {
  Okhttp3InternalHttp2ErrorCode_Enum_NO_ERROR = 0,
  Okhttp3InternalHttp2ErrorCode_Enum_PROTOCOL_ERROR = 1,
  Okhttp3InternalHttp2ErrorCode_Enum_INTERNAL_ERROR = 2,
  Okhttp3InternalHttp2ErrorCode_Enum_FLOW_CONTROL_ERROR = 3,
  Okhttp3InternalHttp2ErrorCode_Enum_REFUSED_STREAM = 4,
  Okhttp3InternalHttp2ErrorCode_Enum_CANCEL = 5,
};

@interface Okhttp3InternalHttp2ErrorCode : JavaLangEnum < NSCopying > {
 @public
  jint httpCode_;
}

#pragma mark Public

+ (Okhttp3InternalHttp2ErrorCode *)fromHttp2WithInt:(jint)code;

+ (Okhttp3InternalHttp2ErrorCode *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(Okhttp3InternalHttp2ErrorCode)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT Okhttp3InternalHttp2ErrorCode *Okhttp3InternalHttp2ErrorCode_values_[];

inline Okhttp3InternalHttp2ErrorCode *Okhttp3InternalHttp2ErrorCode_get_NO_ERROR();
J2OBJC_ENUM_CONSTANT(Okhttp3InternalHttp2ErrorCode, NO_ERROR)

inline Okhttp3InternalHttp2ErrorCode *Okhttp3InternalHttp2ErrorCode_get_PROTOCOL_ERROR();
J2OBJC_ENUM_CONSTANT(Okhttp3InternalHttp2ErrorCode, PROTOCOL_ERROR)

inline Okhttp3InternalHttp2ErrorCode *Okhttp3InternalHttp2ErrorCode_get_INTERNAL_ERROR();
J2OBJC_ENUM_CONSTANT(Okhttp3InternalHttp2ErrorCode, INTERNAL_ERROR)

inline Okhttp3InternalHttp2ErrorCode *Okhttp3InternalHttp2ErrorCode_get_FLOW_CONTROL_ERROR();
J2OBJC_ENUM_CONSTANT(Okhttp3InternalHttp2ErrorCode, FLOW_CONTROL_ERROR)

inline Okhttp3InternalHttp2ErrorCode *Okhttp3InternalHttp2ErrorCode_get_REFUSED_STREAM();
J2OBJC_ENUM_CONSTANT(Okhttp3InternalHttp2ErrorCode, REFUSED_STREAM)

inline Okhttp3InternalHttp2ErrorCode *Okhttp3InternalHttp2ErrorCode_get_CANCEL();
J2OBJC_ENUM_CONSTANT(Okhttp3InternalHttp2ErrorCode, CANCEL)

FOUNDATION_EXPORT Okhttp3InternalHttp2ErrorCode *Okhttp3InternalHttp2ErrorCode_fromHttp2WithInt_(jint code);

FOUNDATION_EXPORT IOSObjectArray *Okhttp3InternalHttp2ErrorCode_values();

FOUNDATION_EXPORT Okhttp3InternalHttp2ErrorCode *Okhttp3InternalHttp2ErrorCode_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT Okhttp3InternalHttp2ErrorCode *Okhttp3InternalHttp2ErrorCode_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalHttp2ErrorCode)

#endif

#pragma pop_macro("INCLUDE_ALL_Okhttp3InternalHttp2ErrorCode")
