//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okhttp3/internal/http2/Http2Reader.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Byte.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/Short.h"
#include "java/util/List.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "okhttp3/internal/Util.h"
#include "okhttp3/internal/http2/ErrorCode.h"
#include "okhttp3/internal/http2/Hpack.h"
#include "okhttp3/internal/http2/Http2.h"
#include "okhttp3/internal/http2/Http2Reader.h"
#include "okhttp3/internal/http2/Settings.h"
#include "okio/Buffer.h"
#include "okio/BufferedSource.h"
#include "okio/ByteString.h"
#include "okio/Timeout.h"

@interface Okhttp3InternalHttp2Http2Reader () {
 @public
  id<OkioBufferedSource> source_;
  Okhttp3InternalHttp2Http2Reader_ContinuationSource *continuation_;
  jboolean client_;
}

- (void)readHeadersWithOkhttp3InternalHttp2Http2Reader_Handler:(id<Okhttp3InternalHttp2Http2Reader_Handler>)handler
                                                       withInt:(jint)length
                                                      withByte:(jbyte)flags
                                                       withInt:(jint)streamId;

- (id<JavaUtilList>)readHeaderBlockWithInt:(jint)length
                                 withShort:(jshort)padding
                                  withByte:(jbyte)flags
                                   withInt:(jint)streamId;

- (void)readDataWithOkhttp3InternalHttp2Http2Reader_Handler:(id<Okhttp3InternalHttp2Http2Reader_Handler>)handler
                                                    withInt:(jint)length
                                                   withByte:(jbyte)flags
                                                    withInt:(jint)streamId;

- (void)readPriorityWithOkhttp3InternalHttp2Http2Reader_Handler:(id<Okhttp3InternalHttp2Http2Reader_Handler>)handler
                                                        withInt:(jint)length
                                                       withByte:(jbyte)flags
                                                        withInt:(jint)streamId;

- (void)readPriorityWithOkhttp3InternalHttp2Http2Reader_Handler:(id<Okhttp3InternalHttp2Http2Reader_Handler>)handler
                                                        withInt:(jint)streamId;

- (void)readRstStreamWithOkhttp3InternalHttp2Http2Reader_Handler:(id<Okhttp3InternalHttp2Http2Reader_Handler>)handler
                                                         withInt:(jint)length
                                                        withByte:(jbyte)flags
                                                         withInt:(jint)streamId;

- (void)readSettingsWithOkhttp3InternalHttp2Http2Reader_Handler:(id<Okhttp3InternalHttp2Http2Reader_Handler>)handler
                                                        withInt:(jint)length
                                                       withByte:(jbyte)flags
                                                        withInt:(jint)streamId;

- (void)readPushPromiseWithOkhttp3InternalHttp2Http2Reader_Handler:(id<Okhttp3InternalHttp2Http2Reader_Handler>)handler
                                                           withInt:(jint)length
                                                          withByte:(jbyte)flags
                                                           withInt:(jint)streamId;

- (void)readPingWithOkhttp3InternalHttp2Http2Reader_Handler:(id<Okhttp3InternalHttp2Http2Reader_Handler>)handler
                                                    withInt:(jint)length
                                                   withByte:(jbyte)flags
                                                    withInt:(jint)streamId;

- (void)readGoAwayWithOkhttp3InternalHttp2Http2Reader_Handler:(id<Okhttp3InternalHttp2Http2Reader_Handler>)handler
                                                      withInt:(jint)length
                                                     withByte:(jbyte)flags
                                                      withInt:(jint)streamId;

- (void)readWindowUpdateWithOkhttp3InternalHttp2Http2Reader_Handler:(id<Okhttp3InternalHttp2Http2Reader_Handler>)handler
                                                            withInt:(jint)length
                                                           withByte:(jbyte)flags
                                                            withInt:(jint)streamId;

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Http2Reader, source_, id<OkioBufferedSource>)
J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Http2Reader, continuation_, Okhttp3InternalHttp2Http2Reader_ContinuationSource *)

__attribute__((unused)) static void Okhttp3InternalHttp2Http2Reader_readHeadersWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(Okhttp3InternalHttp2Http2Reader *self, id<Okhttp3InternalHttp2Http2Reader_Handler> handler, jint length, jbyte flags, jint streamId);

__attribute__((unused)) static id<JavaUtilList> Okhttp3InternalHttp2Http2Reader_readHeaderBlockWithInt_withShort_withByte_withInt_(Okhttp3InternalHttp2Http2Reader *self, jint length, jshort padding, jbyte flags, jint streamId);

__attribute__((unused)) static void Okhttp3InternalHttp2Http2Reader_readDataWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(Okhttp3InternalHttp2Http2Reader *self, id<Okhttp3InternalHttp2Http2Reader_Handler> handler, jint length, jbyte flags, jint streamId);

__attribute__((unused)) static void Okhttp3InternalHttp2Http2Reader_readPriorityWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(Okhttp3InternalHttp2Http2Reader *self, id<Okhttp3InternalHttp2Http2Reader_Handler> handler, jint length, jbyte flags, jint streamId);

__attribute__((unused)) static void Okhttp3InternalHttp2Http2Reader_readPriorityWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_(Okhttp3InternalHttp2Http2Reader *self, id<Okhttp3InternalHttp2Http2Reader_Handler> handler, jint streamId);

__attribute__((unused)) static void Okhttp3InternalHttp2Http2Reader_readRstStreamWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(Okhttp3InternalHttp2Http2Reader *self, id<Okhttp3InternalHttp2Http2Reader_Handler> handler, jint length, jbyte flags, jint streamId);

__attribute__((unused)) static void Okhttp3InternalHttp2Http2Reader_readSettingsWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(Okhttp3InternalHttp2Http2Reader *self, id<Okhttp3InternalHttp2Http2Reader_Handler> handler, jint length, jbyte flags, jint streamId);

__attribute__((unused)) static void Okhttp3InternalHttp2Http2Reader_readPushPromiseWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(Okhttp3InternalHttp2Http2Reader *self, id<Okhttp3InternalHttp2Http2Reader_Handler> handler, jint length, jbyte flags, jint streamId);

__attribute__((unused)) static void Okhttp3InternalHttp2Http2Reader_readPingWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(Okhttp3InternalHttp2Http2Reader *self, id<Okhttp3InternalHttp2Http2Reader_Handler> handler, jint length, jbyte flags, jint streamId);

__attribute__((unused)) static void Okhttp3InternalHttp2Http2Reader_readGoAwayWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(Okhttp3InternalHttp2Http2Reader *self, id<Okhttp3InternalHttp2Http2Reader_Handler> handler, jint length, jbyte flags, jint streamId);

__attribute__((unused)) static void Okhttp3InternalHttp2Http2Reader_readWindowUpdateWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(Okhttp3InternalHttp2Http2Reader *self, id<Okhttp3InternalHttp2Http2Reader_Handler> handler, jint length, jbyte flags, jint streamId);

@interface Okhttp3InternalHttp2Http2Reader_ContinuationSource () {
 @public
  id<OkioBufferedSource> source_;
}

- (void)readContinuationHeader;

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Http2Reader_ContinuationSource, source_, id<OkioBufferedSource>)

__attribute__((unused)) static void Okhttp3InternalHttp2Http2Reader_ContinuationSource_readContinuationHeader(Okhttp3InternalHttp2Http2Reader_ContinuationSource *self);

@interface Okhttp3InternalHttp2Http2Reader_Handler : NSObject

@end

J2OBJC_INITIALIZED_DEFN(Okhttp3InternalHttp2Http2Reader)

JavaUtilLoggingLogger *Okhttp3InternalHttp2Http2Reader_logger;

@implementation Okhttp3InternalHttp2Http2Reader

- (instancetype)initWithOkioBufferedSource:(id<OkioBufferedSource>)source
                               withBoolean:(jboolean)client {
  Okhttp3InternalHttp2Http2Reader_initWithOkioBufferedSource_withBoolean_(self, source, client);
  return self;
}

- (void)readConnectionPrefaceWithOkhttp3InternalHttp2Http2Reader_Handler:(id<Okhttp3InternalHttp2Http2Reader_Handler>)handler {
  if (client_) {
    if (![self nextFrameWithBoolean:true withOkhttp3InternalHttp2Http2Reader_Handler:handler]) {
      @throw Okhttp3InternalHttp2Http2_ioExceptionWithNSString_withNSObjectArray_(@"Required SETTINGS preface not received", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
    }
  }
  else {
    OkioByteString *connectionPreface = [((id<OkioBufferedSource>) nil_chk(source_)) readByteStringWithLong:[((OkioByteString *) nil_chk(JreLoadStatic(Okhttp3InternalHttp2Http2, CONNECTION_PREFACE))) size]];
    if ([((JavaUtilLoggingLogger *) nil_chk(Okhttp3InternalHttp2Http2Reader_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE)]) [Okhttp3InternalHttp2Http2Reader_logger fineWithNSString:Okhttp3InternalUtil_formatWithNSString_withNSObjectArray_(@"<< CONNECTION %s", [IOSObjectArray arrayWithObjects:(id[]){ [((OkioByteString *) nil_chk(connectionPreface)) hex] } count:1 type:NSObject_class_()])];
    if (![JreLoadStatic(Okhttp3InternalHttp2Http2, CONNECTION_PREFACE) isEqual:connectionPreface]) {
      @throw Okhttp3InternalHttp2Http2_ioExceptionWithNSString_withNSObjectArray_(@"Expected a connection header but was %s", [IOSObjectArray arrayWithObjects:(id[]){ [((OkioByteString *) nil_chk(connectionPreface)) utf8] } count:1 type:NSObject_class_()]);
    }
  }
}

- (jboolean)nextFrameWithBoolean:(jboolean)requireSettings
withOkhttp3InternalHttp2Http2Reader_Handler:(id<Okhttp3InternalHttp2Http2Reader_Handler>)handler {
  @try {
    [((id<OkioBufferedSource>) nil_chk(source_)) requireWithLong:9];
  }
  @catch (JavaIoIOException *e) {
    return false;
  }
  jint length = Okhttp3InternalHttp2Http2Reader_readMediumWithOkioBufferedSource_(source_);
  if (length < 0 || length > Okhttp3InternalHttp2Http2_INITIAL_MAX_FRAME_SIZE) {
    @throw Okhttp3InternalHttp2Http2_ioExceptionWithNSString_withNSObjectArray_(@"FRAME_SIZE_ERROR: %s", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(length) } count:1 type:NSObject_class_()]);
  }
  jbyte type = (jbyte) ([source_ readByte] & (jint) 0xff);
  if (requireSettings && type != Okhttp3InternalHttp2Http2_TYPE_SETTINGS) {
    @throw Okhttp3InternalHttp2Http2_ioExceptionWithNSString_withNSObjectArray_(@"Expected a SETTINGS frame but was %s", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangByte_valueOfWithByte_(type) } count:1 type:NSObject_class_()]);
  }
  jbyte flags = (jbyte) ([source_ readByte] & (jint) 0xff);
  jint streamId = ([source_ readInt] & (jint) 0x7fffffff);
  if ([((JavaUtilLoggingLogger *) nil_chk(Okhttp3InternalHttp2Http2Reader_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE)]) [Okhttp3InternalHttp2Http2Reader_logger fineWithNSString:Okhttp3InternalHttp2Http2_frameLogWithBoolean_withInt_withInt_withByte_withByte_(true, streamId, length, type, flags)];
  switch (type) {
    case Okhttp3InternalHttp2Http2_TYPE_DATA:
    Okhttp3InternalHttp2Http2Reader_readDataWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
    break;
    case Okhttp3InternalHttp2Http2_TYPE_HEADERS:
    Okhttp3InternalHttp2Http2Reader_readHeadersWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
    break;
    case Okhttp3InternalHttp2Http2_TYPE_PRIORITY:
    Okhttp3InternalHttp2Http2Reader_readPriorityWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
    break;
    case Okhttp3InternalHttp2Http2_TYPE_RST_STREAM:
    Okhttp3InternalHttp2Http2Reader_readRstStreamWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
    break;
    case Okhttp3InternalHttp2Http2_TYPE_SETTINGS:
    Okhttp3InternalHttp2Http2Reader_readSettingsWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
    break;
    case Okhttp3InternalHttp2Http2_TYPE_PUSH_PROMISE:
    Okhttp3InternalHttp2Http2Reader_readPushPromiseWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
    break;
    case Okhttp3InternalHttp2Http2_TYPE_PING:
    Okhttp3InternalHttp2Http2Reader_readPingWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
    break;
    case Okhttp3InternalHttp2Http2_TYPE_GOAWAY:
    Okhttp3InternalHttp2Http2Reader_readGoAwayWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
    break;
    case Okhttp3InternalHttp2Http2_TYPE_WINDOW_UPDATE:
    Okhttp3InternalHttp2Http2Reader_readWindowUpdateWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
    break;
    default:
    [source_ skipWithLong:length];
  }
  return true;
}

- (void)readHeadersWithOkhttp3InternalHttp2Http2Reader_Handler:(id<Okhttp3InternalHttp2Http2Reader_Handler>)handler
                                                       withInt:(jint)length
                                                      withByte:(jbyte)flags
                                                       withInt:(jint)streamId {
  Okhttp3InternalHttp2Http2Reader_readHeadersWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
}

- (id<JavaUtilList>)readHeaderBlockWithInt:(jint)length
                                 withShort:(jshort)padding
                                  withByte:(jbyte)flags
                                   withInt:(jint)streamId {
  return Okhttp3InternalHttp2Http2Reader_readHeaderBlockWithInt_withShort_withByte_withInt_(self, length, padding, flags, streamId);
}

- (void)readDataWithOkhttp3InternalHttp2Http2Reader_Handler:(id<Okhttp3InternalHttp2Http2Reader_Handler>)handler
                                                    withInt:(jint)length
                                                   withByte:(jbyte)flags
                                                    withInt:(jint)streamId {
  Okhttp3InternalHttp2Http2Reader_readDataWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
}

- (void)readPriorityWithOkhttp3InternalHttp2Http2Reader_Handler:(id<Okhttp3InternalHttp2Http2Reader_Handler>)handler
                                                        withInt:(jint)length
                                                       withByte:(jbyte)flags
                                                        withInt:(jint)streamId {
  Okhttp3InternalHttp2Http2Reader_readPriorityWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
}

- (void)readPriorityWithOkhttp3InternalHttp2Http2Reader_Handler:(id<Okhttp3InternalHttp2Http2Reader_Handler>)handler
                                                        withInt:(jint)streamId {
  Okhttp3InternalHttp2Http2Reader_readPriorityWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_(self, handler, streamId);
}

- (void)readRstStreamWithOkhttp3InternalHttp2Http2Reader_Handler:(id<Okhttp3InternalHttp2Http2Reader_Handler>)handler
                                                         withInt:(jint)length
                                                        withByte:(jbyte)flags
                                                         withInt:(jint)streamId {
  Okhttp3InternalHttp2Http2Reader_readRstStreamWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
}

- (void)readSettingsWithOkhttp3InternalHttp2Http2Reader_Handler:(id<Okhttp3InternalHttp2Http2Reader_Handler>)handler
                                                        withInt:(jint)length
                                                       withByte:(jbyte)flags
                                                        withInt:(jint)streamId {
  Okhttp3InternalHttp2Http2Reader_readSettingsWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
}

- (void)readPushPromiseWithOkhttp3InternalHttp2Http2Reader_Handler:(id<Okhttp3InternalHttp2Http2Reader_Handler>)handler
                                                           withInt:(jint)length
                                                          withByte:(jbyte)flags
                                                           withInt:(jint)streamId {
  Okhttp3InternalHttp2Http2Reader_readPushPromiseWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
}

- (void)readPingWithOkhttp3InternalHttp2Http2Reader_Handler:(id<Okhttp3InternalHttp2Http2Reader_Handler>)handler
                                                    withInt:(jint)length
                                                   withByte:(jbyte)flags
                                                    withInt:(jint)streamId {
  Okhttp3InternalHttp2Http2Reader_readPingWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
}

- (void)readGoAwayWithOkhttp3InternalHttp2Http2Reader_Handler:(id<Okhttp3InternalHttp2Http2Reader_Handler>)handler
                                                      withInt:(jint)length
                                                     withByte:(jbyte)flags
                                                      withInt:(jint)streamId {
  Okhttp3InternalHttp2Http2Reader_readGoAwayWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
}

- (void)readWindowUpdateWithOkhttp3InternalHttp2Http2Reader_Handler:(id<Okhttp3InternalHttp2Http2Reader_Handler>)handler
                                                            withInt:(jint)length
                                                           withByte:(jbyte)flags
                                                            withInt:(jint)streamId {
  Okhttp3InternalHttp2Http2Reader_readWindowUpdateWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(self, handler, length, flags, streamId);
}

- (void)close {
  [((id<OkioBufferedSource>) nil_chk(source_)) close];
}

+ (jint)readMediumWithOkioBufferedSource:(id<OkioBufferedSource>)source {
  return Okhttp3InternalHttp2Http2Reader_readMediumWithOkioBufferedSource_(source);
}

+ (jint)lengthWithoutPaddingWithInt:(jint)length
                           withByte:(jbyte)flags
                          withShort:(jshort)padding {
  return Okhttp3InternalHttp2Http2Reader_lengthWithoutPaddingWithInt_withByte_withShort_(length, flags, padding);
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(continuation_);
  RELEASE_(hpackReader_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, 3, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 8, 9, 3, 10, -1, -1 },
    { NULL, "V", 0x2, 11, 7, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 7, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 7, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 7, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 7, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 7, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 7, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 7, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x8, 20, 21, 3, -1, -1, -1 },
    { NULL, "I", 0x8, 22, 23, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkioBufferedSource:withBoolean:);
  methods[1].selector = @selector(readConnectionPrefaceWithOkhttp3InternalHttp2Http2Reader_Handler:);
  methods[2].selector = @selector(nextFrameWithBoolean:withOkhttp3InternalHttp2Http2Reader_Handler:);
  methods[3].selector = @selector(readHeadersWithOkhttp3InternalHttp2Http2Reader_Handler:withInt:withByte:withInt:);
  methods[4].selector = @selector(readHeaderBlockWithInt:withShort:withByte:withInt:);
  methods[5].selector = @selector(readDataWithOkhttp3InternalHttp2Http2Reader_Handler:withInt:withByte:withInt:);
  methods[6].selector = @selector(readPriorityWithOkhttp3InternalHttp2Http2Reader_Handler:withInt:withByte:withInt:);
  methods[7].selector = @selector(readPriorityWithOkhttp3InternalHttp2Http2Reader_Handler:withInt:);
  methods[8].selector = @selector(readRstStreamWithOkhttp3InternalHttp2Http2Reader_Handler:withInt:withByte:withInt:);
  methods[9].selector = @selector(readSettingsWithOkhttp3InternalHttp2Http2Reader_Handler:withInt:withByte:withInt:);
  methods[10].selector = @selector(readPushPromiseWithOkhttp3InternalHttp2Http2Reader_Handler:withInt:withByte:withInt:);
  methods[11].selector = @selector(readPingWithOkhttp3InternalHttp2Http2Reader_Handler:withInt:withByte:withInt:);
  methods[12].selector = @selector(readGoAwayWithOkhttp3InternalHttp2Http2Reader_Handler:withInt:withByte:withInt:);
  methods[13].selector = @selector(readWindowUpdateWithOkhttp3InternalHttp2Http2Reader_Handler:withInt:withByte:withInt:);
  methods[14].selector = @selector(close);
  methods[15].selector = @selector(readMediumWithOkioBufferedSource:);
  methods[16].selector = @selector(lengthWithoutPaddingWithInt:withByte:withShort:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x18, -1, 24, -1, -1 },
    { "source_", "LOkioBufferedSource;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "continuation_", "LOkhttp3InternalHttp2Http2Reader_ContinuationSource;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "client_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "hpackReader_", "LOkhttp3InternalHttp2Hpack_Reader;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkioBufferedSource;Z", "readConnectionPreface", "LOkhttp3InternalHttp2Http2Reader_Handler;", "LJavaIoIOException;", "nextFrame", "ZLOkhttp3InternalHttp2Http2Reader_Handler;", "readHeaders", "LOkhttp3InternalHttp2Http2Reader_Handler;IBI", "readHeaderBlock", "ISBI", "(ISBI)Ljava/util/List<Lokhttp3/internal/http2/Header;>;", "readData", "readPriority", "LOkhttp3InternalHttp2Http2Reader_Handler;I", "readRstStream", "readSettings", "readPushPromise", "readPing", "readGoAway", "readWindowUpdate", "readMedium", "LOkioBufferedSource;", "lengthWithoutPadding", "IBS", &Okhttp3InternalHttp2Http2Reader_logger, "LOkhttp3InternalHttp2Http2Reader_ContinuationSource;LOkhttp3InternalHttp2Http2Reader_Handler;" };
  static const J2ObjcClassInfo _Okhttp3InternalHttp2Http2Reader = { "Http2Reader", "okhttp3.internal.http2", ptrTable, methods, fields, 7, 0x10, 17, 5, -1, 25, -1, -1, -1 };
  return &_Okhttp3InternalHttp2Http2Reader;
}

+ (void)initialize {
  if (self == [Okhttp3InternalHttp2Http2Reader class]) {
    JreStrongAssign(&Okhttp3InternalHttp2Http2Reader_logger, JavaUtilLoggingLogger_getLoggerWithNSString_([Okhttp3InternalHttp2Http2_class_() getName]));
    J2OBJC_SET_INITIALIZED(Okhttp3InternalHttp2Http2Reader)
  }
}

@end

void Okhttp3InternalHttp2Http2Reader_initWithOkioBufferedSource_withBoolean_(Okhttp3InternalHttp2Http2Reader *self, id<OkioBufferedSource> source, jboolean client) {
  NSObject_init(self);
  JreStrongAssign(&self->source_, source);
  self->client_ = client;
  JreStrongAssignAndConsume(&self->continuation_, new_Okhttp3InternalHttp2Http2Reader_ContinuationSource_initWithOkioBufferedSource_(self->source_));
  JreStrongAssignAndConsume(&self->hpackReader_, new_Okhttp3InternalHttp2Hpack_Reader_initWithInt_withOkioSource_(4096, self->continuation_));
}

Okhttp3InternalHttp2Http2Reader *new_Okhttp3InternalHttp2Http2Reader_initWithOkioBufferedSource_withBoolean_(id<OkioBufferedSource> source, jboolean client) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttp2Http2Reader, initWithOkioBufferedSource_withBoolean_, source, client)
}

Okhttp3InternalHttp2Http2Reader *create_Okhttp3InternalHttp2Http2Reader_initWithOkioBufferedSource_withBoolean_(id<OkioBufferedSource> source, jboolean client) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttp2Http2Reader, initWithOkioBufferedSource_withBoolean_, source, client)
}

void Okhttp3InternalHttp2Http2Reader_readHeadersWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(Okhttp3InternalHttp2Http2Reader *self, id<Okhttp3InternalHttp2Http2Reader_Handler> handler, jint length, jbyte flags, jint streamId) {
  if (streamId == 0) @throw Okhttp3InternalHttp2Http2_ioExceptionWithNSString_withNSObjectArray_(@"PROTOCOL_ERROR: TYPE_HEADERS streamId == 0", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  jboolean endStream = (flags & Okhttp3InternalHttp2Http2_FLAG_END_STREAM) != 0;
  jshort padding = (flags & Okhttp3InternalHttp2Http2_FLAG_PADDED) != 0 ? (jshort) ([((id<OkioBufferedSource>) nil_chk(self->source_)) readByte] & (jint) 0xff) : 0;
  if ((flags & Okhttp3InternalHttp2Http2_FLAG_PRIORITY) != 0) {
    Okhttp3InternalHttp2Http2Reader_readPriorityWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_(self, handler, streamId);
    length -= 5;
  }
  length = Okhttp3InternalHttp2Http2Reader_lengthWithoutPaddingWithInt_withByte_withShort_(length, flags, padding);
  id<JavaUtilList> headerBlock = Okhttp3InternalHttp2Http2Reader_readHeaderBlockWithInt_withShort_withByte_withInt_(self, length, padding, flags, streamId);
  [((id<Okhttp3InternalHttp2Http2Reader_Handler>) nil_chk(handler)) headersWithBoolean:endStream withInt:streamId withInt:-1 withJavaUtilList:headerBlock];
}

id<JavaUtilList> Okhttp3InternalHttp2Http2Reader_readHeaderBlockWithInt_withShort_withByte_withInt_(Okhttp3InternalHttp2Http2Reader *self, jint length, jshort padding, jbyte flags, jint streamId) {
  ((Okhttp3InternalHttp2Http2Reader_ContinuationSource *) nil_chk(self->continuation_))->length_ = self->continuation_->left_ = length;
  self->continuation_->padding_ = padding;
  self->continuation_->flags_ = flags;
  self->continuation_->streamId_ = streamId;
  [((Okhttp3InternalHttp2Hpack_Reader *) nil_chk(self->hpackReader_)) readHeaders];
  return [self->hpackReader_ getAndResetHeaderList];
}

void Okhttp3InternalHttp2Http2Reader_readDataWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(Okhttp3InternalHttp2Http2Reader *self, id<Okhttp3InternalHttp2Http2Reader_Handler> handler, jint length, jbyte flags, jint streamId) {
  jboolean inFinished = (flags & Okhttp3InternalHttp2Http2_FLAG_END_STREAM) != 0;
  jboolean gzipped = (flags & Okhttp3InternalHttp2Http2_FLAG_COMPRESSED) != 0;
  if (gzipped) {
    @throw Okhttp3InternalHttp2Http2_ioExceptionWithNSString_withNSObjectArray_(@"PROTOCOL_ERROR: FLAG_COMPRESSED without SETTINGS_COMPRESS_DATA", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  }
  jshort padding = (flags & Okhttp3InternalHttp2Http2_FLAG_PADDED) != 0 ? (jshort) ([((id<OkioBufferedSource>) nil_chk(self->source_)) readByte] & (jint) 0xff) : 0;
  length = Okhttp3InternalHttp2Http2Reader_lengthWithoutPaddingWithInt_withByte_withShort_(length, flags, padding);
  [((id<Okhttp3InternalHttp2Http2Reader_Handler>) nil_chk(handler)) dataWithBoolean:inFinished withInt:streamId withOkioBufferedSource:self->source_ withInt:length];
  [((id<OkioBufferedSource>) nil_chk(self->source_)) skipWithLong:padding];
}

void Okhttp3InternalHttp2Http2Reader_readPriorityWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(Okhttp3InternalHttp2Http2Reader *self, id<Okhttp3InternalHttp2Http2Reader_Handler> handler, jint length, jbyte flags, jint streamId) {
  if (length != 5) @throw Okhttp3InternalHttp2Http2_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_PRIORITY length: %d != 5", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(length) } count:1 type:NSObject_class_()]);
  if (streamId == 0) @throw Okhttp3InternalHttp2Http2_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_PRIORITY streamId == 0", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  Okhttp3InternalHttp2Http2Reader_readPriorityWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_(self, handler, streamId);
}

void Okhttp3InternalHttp2Http2Reader_readPriorityWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_(Okhttp3InternalHttp2Http2Reader *self, id<Okhttp3InternalHttp2Http2Reader_Handler> handler, jint streamId) {
  jint w1 = [((id<OkioBufferedSource>) nil_chk(self->source_)) readInt];
  jboolean exclusive = (w1 & -0x7fffffff - 1) != 0;
  jint streamDependency = (w1 & (jint) 0x7fffffff);
  jint weight = ([self->source_ readByte] & (jint) 0xff) + 1;
  [((id<Okhttp3InternalHttp2Http2Reader_Handler>) nil_chk(handler)) priorityWithInt:streamId withInt:streamDependency withInt:weight withBoolean:exclusive];
}

void Okhttp3InternalHttp2Http2Reader_readRstStreamWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(Okhttp3InternalHttp2Http2Reader *self, id<Okhttp3InternalHttp2Http2Reader_Handler> handler, jint length, jbyte flags, jint streamId) {
  if (length != 4) @throw Okhttp3InternalHttp2Http2_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_RST_STREAM length: %d != 4", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(length) } count:1 type:NSObject_class_()]);
  if (streamId == 0) @throw Okhttp3InternalHttp2Http2_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_RST_STREAM streamId == 0", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  jint errorCodeInt = [((id<OkioBufferedSource>) nil_chk(self->source_)) readInt];
  Okhttp3InternalHttp2ErrorCode *errorCode = Okhttp3InternalHttp2ErrorCode_fromHttp2WithInt_(errorCodeInt);
  if (errorCode == nil) {
    @throw Okhttp3InternalHttp2Http2_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_RST_STREAM unexpected error code: %d", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(errorCodeInt) } count:1 type:NSObject_class_()]);
  }
  [((id<Okhttp3InternalHttp2Http2Reader_Handler>) nil_chk(handler)) rstStreamWithInt:streamId withOkhttp3InternalHttp2ErrorCode:errorCode];
}

void Okhttp3InternalHttp2Http2Reader_readSettingsWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(Okhttp3InternalHttp2Http2Reader *self, id<Okhttp3InternalHttp2Http2Reader_Handler> handler, jint length, jbyte flags, jint streamId) {
  if (streamId != 0) @throw Okhttp3InternalHttp2Http2_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_SETTINGS streamId != 0", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  if ((flags & Okhttp3InternalHttp2Http2_FLAG_ACK) != 0) {
    if (length != 0) @throw Okhttp3InternalHttp2Http2_ioExceptionWithNSString_withNSObjectArray_(@"FRAME_SIZE_ERROR ack frame should be empty!", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
    [((id<Okhttp3InternalHttp2Http2Reader_Handler>) nil_chk(handler)) ackSettings];
    return;
  }
  if (length % 6 != 0) @throw Okhttp3InternalHttp2Http2_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_SETTINGS length %% 6 != 0: %s", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(length) } count:1 type:NSObject_class_()]);
  Okhttp3InternalHttp2Settings *settings = create_Okhttp3InternalHttp2Settings_init();
  for (jint i = 0; i < length; i += 6) {
    jshort id_ = [((id<OkioBufferedSource>) nil_chk(self->source_)) readShort];
    jint value = [self->source_ readInt];
    switch (id_) {
      case 1:
      break;
      case 2:
      if (value != 0 && value != 1) {
        @throw Okhttp3InternalHttp2Http2_ioExceptionWithNSString_withNSObjectArray_(@"PROTOCOL_ERROR SETTINGS_ENABLE_PUSH != 0 or 1", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
      }
      break;
      case 3:
      id_ = 4;
      break;
      case 4:
      id_ = 7;
      if (value < 0) {
        @throw Okhttp3InternalHttp2Http2_ioExceptionWithNSString_withNSObjectArray_(@"PROTOCOL_ERROR SETTINGS_INITIAL_WINDOW_SIZE > 2^31 - 1", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
      }
      break;
      case 5:
      if (value < Okhttp3InternalHttp2Http2_INITIAL_MAX_FRAME_SIZE || value > 16777215) {
        @throw Okhttp3InternalHttp2Http2_ioExceptionWithNSString_withNSObjectArray_(@"PROTOCOL_ERROR SETTINGS_MAX_FRAME_SIZE: %s", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(value) } count:1 type:NSObject_class_()]);
      }
      break;
      case 6:
      break;
      default:
      break;
    }
    [settings setWithInt:id_ withInt:value];
  }
  [((id<Okhttp3InternalHttp2Http2Reader_Handler>) nil_chk(handler)) settingsWithBoolean:false withOkhttp3InternalHttp2Settings:settings];
}

void Okhttp3InternalHttp2Http2Reader_readPushPromiseWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(Okhttp3InternalHttp2Http2Reader *self, id<Okhttp3InternalHttp2Http2Reader_Handler> handler, jint length, jbyte flags, jint streamId) {
  if (streamId == 0) {
    @throw Okhttp3InternalHttp2Http2_ioExceptionWithNSString_withNSObjectArray_(@"PROTOCOL_ERROR: TYPE_PUSH_PROMISE streamId == 0", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  }
  jshort padding = (flags & Okhttp3InternalHttp2Http2_FLAG_PADDED) != 0 ? (jshort) ([((id<OkioBufferedSource>) nil_chk(self->source_)) readByte] & (jint) 0xff) : 0;
  jint promisedStreamId = [((id<OkioBufferedSource>) nil_chk(self->source_)) readInt] & (jint) 0x7fffffff;
  length -= 4;
  length = Okhttp3InternalHttp2Http2Reader_lengthWithoutPaddingWithInt_withByte_withShort_(length, flags, padding);
  id<JavaUtilList> headerBlock = Okhttp3InternalHttp2Http2Reader_readHeaderBlockWithInt_withShort_withByte_withInt_(self, length, padding, flags, streamId);
  [((id<Okhttp3InternalHttp2Http2Reader_Handler>) nil_chk(handler)) pushPromiseWithInt:streamId withInt:promisedStreamId withJavaUtilList:headerBlock];
}

void Okhttp3InternalHttp2Http2Reader_readPingWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(Okhttp3InternalHttp2Http2Reader *self, id<Okhttp3InternalHttp2Http2Reader_Handler> handler, jint length, jbyte flags, jint streamId) {
  if (length != 8) @throw Okhttp3InternalHttp2Http2_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_PING length != 8: %s", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(length) } count:1 type:NSObject_class_()]);
  if (streamId != 0) @throw Okhttp3InternalHttp2Http2_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_PING streamId != 0", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  jint payload1 = [((id<OkioBufferedSource>) nil_chk(self->source_)) readInt];
  jint payload2 = [self->source_ readInt];
  jboolean ack = (flags & Okhttp3InternalHttp2Http2_FLAG_ACK) != 0;
  [((id<Okhttp3InternalHttp2Http2Reader_Handler>) nil_chk(handler)) pingWithBoolean:ack withInt:payload1 withInt:payload2];
}

void Okhttp3InternalHttp2Http2Reader_readGoAwayWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(Okhttp3InternalHttp2Http2Reader *self, id<Okhttp3InternalHttp2Http2Reader_Handler> handler, jint length, jbyte flags, jint streamId) {
  if (length < 8) @throw Okhttp3InternalHttp2Http2_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_GOAWAY length < 8: %s", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(length) } count:1 type:NSObject_class_()]);
  if (streamId != 0) @throw Okhttp3InternalHttp2Http2_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_GOAWAY streamId != 0", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  jint lastStreamId = [((id<OkioBufferedSource>) nil_chk(self->source_)) readInt];
  jint errorCodeInt = [self->source_ readInt];
  jint opaqueDataLength = length - 8;
  Okhttp3InternalHttp2ErrorCode *errorCode = Okhttp3InternalHttp2ErrorCode_fromHttp2WithInt_(errorCodeInt);
  if (errorCode == nil) {
    @throw Okhttp3InternalHttp2Http2_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_GOAWAY unexpected error code: %d", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(errorCodeInt) } count:1 type:NSObject_class_()]);
  }
  OkioByteString *debugData = JreLoadStatic(OkioByteString, EMPTY);
  if (opaqueDataLength > 0) {
    debugData = [self->source_ readByteStringWithLong:opaqueDataLength];
  }
  [((id<Okhttp3InternalHttp2Http2Reader_Handler>) nil_chk(handler)) goAwayWithInt:lastStreamId withOkhttp3InternalHttp2ErrorCode:errorCode withOkioByteString:debugData];
}

void Okhttp3InternalHttp2Http2Reader_readWindowUpdateWithOkhttp3InternalHttp2Http2Reader_Handler_withInt_withByte_withInt_(Okhttp3InternalHttp2Http2Reader *self, id<Okhttp3InternalHttp2Http2Reader_Handler> handler, jint length, jbyte flags, jint streamId) {
  if (length != 4) @throw Okhttp3InternalHttp2Http2_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_WINDOW_UPDATE length !=4: %s", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(length) } count:1 type:NSObject_class_()]);
  jlong increment = ([((id<OkioBufferedSource>) nil_chk(self->source_)) readInt] & (jlong) 0x7fffffffLL);
  if (increment == 0) @throw Okhttp3InternalHttp2Http2_ioExceptionWithNSString_withNSObjectArray_(@"windowSizeIncrement was 0", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(increment) } count:1 type:NSObject_class_()]);
  [((id<Okhttp3InternalHttp2Http2Reader_Handler>) nil_chk(handler)) windowUpdateWithInt:streamId withLong:increment];
}

jint Okhttp3InternalHttp2Http2Reader_readMediumWithOkioBufferedSource_(id<OkioBufferedSource> source) {
  Okhttp3InternalHttp2Http2Reader_initialize();
  return (JreLShift32(([((id<OkioBufferedSource>) nil_chk(source)) readByte] & (jint) 0xff), 16)) | (JreLShift32(([source readByte] & (jint) 0xff), 8)) | ([source readByte] & (jint) 0xff);
}

jint Okhttp3InternalHttp2Http2Reader_lengthWithoutPaddingWithInt_withByte_withShort_(jint length, jbyte flags, jshort padding) {
  Okhttp3InternalHttp2Http2Reader_initialize();
  if ((flags & Okhttp3InternalHttp2Http2_FLAG_PADDED) != 0) length--;
  if (padding > length) {
    @throw Okhttp3InternalHttp2Http2_ioExceptionWithNSString_withNSObjectArray_(@"PROTOCOL_ERROR padding %s > remaining length %s", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangShort_valueOfWithShort_(padding), JavaLangInteger_valueOfWithInt_(length) } count:2 type:NSObject_class_()]);
  }
  return (jshort) (length - padding);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalHttp2Http2Reader)

@implementation Okhttp3InternalHttp2Http2Reader_ContinuationSource

- (instancetype)initWithOkioBufferedSource:(id<OkioBufferedSource>)source {
  Okhttp3InternalHttp2Http2Reader_ContinuationSource_initWithOkioBufferedSource_(self, source);
  return self;
}

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount {
  while (left_ == 0) {
    [((id<OkioBufferedSource>) nil_chk(source_)) skipWithLong:padding_];
    padding_ = 0;
    if ((flags_ & Okhttp3InternalHttp2Http2_FLAG_END_HEADERS) != 0) return -1;
    Okhttp3InternalHttp2Http2Reader_ContinuationSource_readContinuationHeader(self);
  }
  jlong read = [((id<OkioBufferedSource>) nil_chk(source_)) readWithOkioBuffer:sink withLong:JavaLangMath_minWithLong_withLong_(byteCount, left_)];
  if (read == -1) return -1;
  left_ -= read;
  return read;
}

- (OkioTimeout *)timeout {
  return [((id<OkioBufferedSource>) nil_chk(source_)) timeout];
}

- (void)close {
}

- (void)readContinuationHeader {
  Okhttp3InternalHttp2Http2Reader_ContinuationSource_readContinuationHeader(self);
}

- (void)dealloc {
  RELEASE_(source_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LOkioTimeout;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkioBufferedSource:);
  methods[1].selector = @selector(readWithOkioBuffer:withLong:);
  methods[2].selector = @selector(timeout);
  methods[3].selector = @selector(close);
  methods[4].selector = @selector(readContinuationHeader);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LOkioBufferedSource;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "length_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "flags_", "B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "streamId_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "left_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "padding_", "S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkioBufferedSource;", "read", "LOkioBuffer;J", "LJavaIoIOException;", "LOkhttp3InternalHttp2Http2Reader;" };
  static const J2ObjcClassInfo _Okhttp3InternalHttp2Http2Reader_ContinuationSource = { "ContinuationSource", "okhttp3.internal.http2", ptrTable, methods, fields, 7, 0x18, 5, 6, 4, -1, -1, -1, -1 };
  return &_Okhttp3InternalHttp2Http2Reader_ContinuationSource;
}

@end

void Okhttp3InternalHttp2Http2Reader_ContinuationSource_initWithOkioBufferedSource_(Okhttp3InternalHttp2Http2Reader_ContinuationSource *self, id<OkioBufferedSource> source) {
  NSObject_init(self);
  JreStrongAssign(&self->source_, source);
}

Okhttp3InternalHttp2Http2Reader_ContinuationSource *new_Okhttp3InternalHttp2Http2Reader_ContinuationSource_initWithOkioBufferedSource_(id<OkioBufferedSource> source) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttp2Http2Reader_ContinuationSource, initWithOkioBufferedSource_, source)
}

Okhttp3InternalHttp2Http2Reader_ContinuationSource *create_Okhttp3InternalHttp2Http2Reader_ContinuationSource_initWithOkioBufferedSource_(id<OkioBufferedSource> source) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttp2Http2Reader_ContinuationSource, initWithOkioBufferedSource_, source)
}

void Okhttp3InternalHttp2Http2Reader_ContinuationSource_readContinuationHeader(Okhttp3InternalHttp2Http2Reader_ContinuationSource *self) {
  jint previousStreamId = self->streamId_;
  self->length_ = self->left_ = Okhttp3InternalHttp2Http2Reader_readMediumWithOkioBufferedSource_(self->source_);
  jbyte type = (jbyte) ([((id<OkioBufferedSource>) nil_chk(self->source_)) readByte] & (jint) 0xff);
  self->flags_ = (jbyte) ([self->source_ readByte] & (jint) 0xff);
  if ([((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(Okhttp3InternalHttp2Http2Reader, logger))) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE)]) [JreLoadStatic(Okhttp3InternalHttp2Http2Reader, logger) fineWithNSString:Okhttp3InternalHttp2Http2_frameLogWithBoolean_withInt_withInt_withByte_withByte_(true, self->streamId_, self->length_, type, self->flags_)];
  self->streamId_ = ([self->source_ readInt] & (jint) 0x7fffffff);
  if (type != Okhttp3InternalHttp2Http2_TYPE_CONTINUATION) @throw Okhttp3InternalHttp2Http2_ioExceptionWithNSString_withNSObjectArray_(@"%s != TYPE_CONTINUATION", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangByte_valueOfWithByte_(type) } count:1 type:NSObject_class_()]);
  if (self->streamId_ != previousStreamId) @throw Okhttp3InternalHttp2Http2_ioExceptionWithNSString_withNSObjectArray_(@"TYPE_CONTINUATION streamId changed", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalHttp2Http2Reader_ContinuationSource)

@implementation Okhttp3InternalHttp2Http2Reader_Handler

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x401, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x401, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 18, 19, 2, 20, -1, -1 },
    { NULL, "V", 0x401, 21, 22, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(dataWithBoolean:withInt:withOkioBufferedSource:withInt:);
  methods[1].selector = @selector(headersWithBoolean:withInt:withInt:withJavaUtilList:);
  methods[2].selector = @selector(rstStreamWithInt:withOkhttp3InternalHttp2ErrorCode:);
  methods[3].selector = @selector(settingsWithBoolean:withOkhttp3InternalHttp2Settings:);
  methods[4].selector = @selector(ackSettings);
  methods[5].selector = @selector(pingWithBoolean:withInt:withInt:);
  methods[6].selector = @selector(goAwayWithInt:withOkhttp3InternalHttp2ErrorCode:withOkioByteString:);
  methods[7].selector = @selector(windowUpdateWithInt:withLong:);
  methods[8].selector = @selector(priorityWithInt:withInt:withInt:withBoolean:);
  methods[9].selector = @selector(pushPromiseWithInt:withInt:withJavaUtilList:);
  methods[10].selector = @selector(alternateServiceWithInt:withNSString:withOkioByteString:withNSString:withInt:withLong:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "data", "ZILOkioBufferedSource;I", "LJavaIoIOException;", "headers", "ZIILJavaUtilList;", "(ZIILjava/util/List<Lokhttp3/internal/http2/Header;>;)V", "rstStream", "ILOkhttp3InternalHttp2ErrorCode;", "settings", "ZLOkhttp3InternalHttp2Settings;", "ping", "ZII", "goAway", "ILOkhttp3InternalHttp2ErrorCode;LOkioByteString;", "windowUpdate", "IJ", "priority", "IIIZ", "pushPromise", "IILJavaUtilList;", "(IILjava/util/List<Lokhttp3/internal/http2/Header;>;)V", "alternateService", "ILNSString;LOkioByteString;LNSString;IJ", "LOkhttp3InternalHttp2Http2Reader;" };
  static const J2ObjcClassInfo _Okhttp3InternalHttp2Http2Reader_Handler = { "Handler", "okhttp3.internal.http2", ptrTable, methods, NULL, 7, 0x608, 11, 0, 23, -1, -1, -1, -1 };
  return &_Okhttp3InternalHttp2Http2Reader_Handler;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(Okhttp3InternalHttp2Http2Reader_Handler)
