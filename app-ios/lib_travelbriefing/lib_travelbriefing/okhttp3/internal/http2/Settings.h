//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okhttp3/internal/http2/Settings.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Okhttp3InternalHttp2Settings")
#ifdef RESTRICT_Okhttp3InternalHttp2Settings
#define INCLUDE_ALL_Okhttp3InternalHttp2Settings 0
#else
#define INCLUDE_ALL_Okhttp3InternalHttp2Settings 1
#endif
#undef RESTRICT_Okhttp3InternalHttp2Settings

#if !defined (Okhttp3InternalHttp2Settings_) && (INCLUDE_ALL_Okhttp3InternalHttp2Settings || defined(INCLUDE_Okhttp3InternalHttp2Settings))
#define Okhttp3InternalHttp2Settings_

@interface Okhttp3InternalHttp2Settings : NSObject

#pragma mark Public

- (instancetype)init;

#pragma mark Package-Private

- (void)clear;

- (jint)getWithInt:(jint)id_;

- (jboolean)getEnablePushWithBoolean:(jboolean)defaultValue;

- (jint)getHeaderTableSize;

- (jint)getInitialWindowSize;

- (jint)getMaxConcurrentStreamsWithInt:(jint)defaultValue;

- (jint)getMaxFrameSizeWithInt:(jint)defaultValue;

- (jint)getMaxHeaderListSizeWithInt:(jint)defaultValue;

- (jboolean)isSetWithInt:(jint)id_;

- (void)mergeWithOkhttp3InternalHttp2Settings:(Okhttp3InternalHttp2Settings *)other;

- (Okhttp3InternalHttp2Settings *)setWithInt:(jint)id_
                                     withInt:(jint)value;

- (jint)size;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalHttp2Settings)

inline jint Okhttp3InternalHttp2Settings_get_DEFAULT_INITIAL_WINDOW_SIZE();
#define Okhttp3InternalHttp2Settings_DEFAULT_INITIAL_WINDOW_SIZE 65535
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3InternalHttp2Settings, DEFAULT_INITIAL_WINDOW_SIZE, jint)

inline jint Okhttp3InternalHttp2Settings_get_HEADER_TABLE_SIZE();
#define Okhttp3InternalHttp2Settings_HEADER_TABLE_SIZE 1
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3InternalHttp2Settings, HEADER_TABLE_SIZE, jint)

inline jint Okhttp3InternalHttp2Settings_get_ENABLE_PUSH();
#define Okhttp3InternalHttp2Settings_ENABLE_PUSH 2
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3InternalHttp2Settings, ENABLE_PUSH, jint)

inline jint Okhttp3InternalHttp2Settings_get_MAX_CONCURRENT_STREAMS();
#define Okhttp3InternalHttp2Settings_MAX_CONCURRENT_STREAMS 4
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3InternalHttp2Settings, MAX_CONCURRENT_STREAMS, jint)

inline jint Okhttp3InternalHttp2Settings_get_MAX_FRAME_SIZE();
#define Okhttp3InternalHttp2Settings_MAX_FRAME_SIZE 5
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3InternalHttp2Settings, MAX_FRAME_SIZE, jint)

inline jint Okhttp3InternalHttp2Settings_get_MAX_HEADER_LIST_SIZE();
#define Okhttp3InternalHttp2Settings_MAX_HEADER_LIST_SIZE 6
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3InternalHttp2Settings, MAX_HEADER_LIST_SIZE, jint)

inline jint Okhttp3InternalHttp2Settings_get_INITIAL_WINDOW_SIZE();
#define Okhttp3InternalHttp2Settings_INITIAL_WINDOW_SIZE 7
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3InternalHttp2Settings, INITIAL_WINDOW_SIZE, jint)

inline jint Okhttp3InternalHttp2Settings_get_COUNT();
#define Okhttp3InternalHttp2Settings_COUNT 10
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3InternalHttp2Settings, COUNT, jint)

FOUNDATION_EXPORT void Okhttp3InternalHttp2Settings_init(Okhttp3InternalHttp2Settings *self);

FOUNDATION_EXPORT Okhttp3InternalHttp2Settings *new_Okhttp3InternalHttp2Settings_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3InternalHttp2Settings *create_Okhttp3InternalHttp2Settings_init();

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalHttp2Settings)

#endif

#pragma pop_macro("INCLUDE_ALL_Okhttp3InternalHttp2Settings")
