//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okhttp3/internal/Internal.java
//

#include "J2ObjC_source.h"
#include "java/net/Socket.h"
#include "javax/net/ssl/SSLSocket.h"
#include "okhttp3/Address.h"
#include "okhttp3/Call.h"
#include "okhttp3/ConnectionPool.h"
#include "okhttp3/ConnectionSpec.h"
#include "okhttp3/Headers.h"
#include "okhttp3/HttpUrl.h"
#include "okhttp3/OkHttpClient.h"
#include "okhttp3/Request.h"
#include "okhttp3/Response.h"
#include "okhttp3/internal/Internal.h"
#include "okhttp3/internal/cache/InternalCache.h"
#include "okhttp3/internal/connection/RealConnection.h"
#include "okhttp3/internal/connection/RouteDatabase.h"
#include "okhttp3/internal/connection/StreamAllocation.h"

Okhttp3InternalInternal *Okhttp3InternalInternal_instance;

@implementation Okhttp3InternalInternal

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3InternalInternal_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)initializeInstanceForTests {
  Okhttp3InternalInternal_initializeInstanceForTests();
}

- (void)addLenientWithOkhttp3Headers_Builder:(Okhttp3Headers_Builder *)builder
                                withNSString:(NSString *)line {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)addLenientWithOkhttp3Headers_Builder:(Okhttp3Headers_Builder *)builder
                                withNSString:(NSString *)name
                                withNSString:(NSString *)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setCacheWithOkhttp3OkHttpClient_Builder:(Okhttp3OkHttpClient_Builder *)builder
          withOkhttp3InternalCacheInternalCache:(id<Okhttp3InternalCacheInternalCache>)internalCache {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (Okhttp3InternalConnectionRealConnection *)getWithOkhttp3ConnectionPool:(Okhttp3ConnectionPool *)pool
                                                       withOkhttp3Address:(Okhttp3Address *)address
                            withOkhttp3InternalConnectionStreamAllocation:(Okhttp3InternalConnectionStreamAllocation *)streamAllocation {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaNetSocket *)deduplicateWithOkhttp3ConnectionPool:(Okhttp3ConnectionPool *)pool
                                     withOkhttp3Address:(Okhttp3Address *)address
          withOkhttp3InternalConnectionStreamAllocation:(Okhttp3InternalConnectionStreamAllocation *)streamAllocation {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)putWithOkhttp3ConnectionPool:(Okhttp3ConnectionPool *)pool
withOkhttp3InternalConnectionRealConnection:(Okhttp3InternalConnectionRealConnection *)connection {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)connectionBecameIdleWithOkhttp3ConnectionPool:(Okhttp3ConnectionPool *)pool
              withOkhttp3InternalConnectionRealConnection:(Okhttp3InternalConnectionRealConnection *)connection {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (Okhttp3InternalConnectionRouteDatabase *)routeDatabaseWithOkhttp3ConnectionPool:(Okhttp3ConnectionPool *)connectionPool {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)codeWithOkhttp3Response_Builder:(Okhttp3Response_Builder *)responseBuilder {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)applyWithOkhttp3ConnectionSpec:(Okhttp3ConnectionSpec *)tlsConfiguration
              withJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)sslSocket
                           withBoolean:(jboolean)isFallback {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (Okhttp3HttpUrl *)getHttpUrlCheckedWithNSString:(NSString *)url {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (Okhttp3InternalConnectionStreamAllocation *)streamAllocationWithOkhttp3Call:(id<Okhttp3Call>)call {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<Okhttp3Call>)newWebSocketCallWithOkhttp3OkHttpClient:(Okhttp3OkHttpClient *)client
                                        withOkhttp3Request:(Okhttp3Request *)request {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalConnectionRealConnection;", 0x401, 5, 6, -1, -1, -1, -1 },
    { NULL, "LJavaNetSocket;", 0x401, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 10, 9, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalConnectionRouteDatabase;", 0x401, 11, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 15, 16, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl;", 0x401, 17, 18, 19, -1, -1, -1 },
    { NULL, "LOkhttp3InternalConnectionStreamAllocation;", 0x401, 20, 21, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Call;", 0x401, 22, 23, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initializeInstanceForTests);
  methods[2].selector = @selector(addLenientWithOkhttp3Headers_Builder:withNSString:);
  methods[3].selector = @selector(addLenientWithOkhttp3Headers_Builder:withNSString:withNSString:);
  methods[4].selector = @selector(setCacheWithOkhttp3OkHttpClient_Builder:withOkhttp3InternalCacheInternalCache:);
  methods[5].selector = @selector(getWithOkhttp3ConnectionPool:withOkhttp3Address:withOkhttp3InternalConnectionStreamAllocation:);
  methods[6].selector = @selector(deduplicateWithOkhttp3ConnectionPool:withOkhttp3Address:withOkhttp3InternalConnectionStreamAllocation:);
  methods[7].selector = @selector(putWithOkhttp3ConnectionPool:withOkhttp3InternalConnectionRealConnection:);
  methods[8].selector = @selector(connectionBecameIdleWithOkhttp3ConnectionPool:withOkhttp3InternalConnectionRealConnection:);
  methods[9].selector = @selector(routeDatabaseWithOkhttp3ConnectionPool:);
  methods[10].selector = @selector(codeWithOkhttp3Response_Builder:);
  methods[11].selector = @selector(applyWithOkhttp3ConnectionSpec:withJavaxNetSslSSLSocket:withBoolean:);
  methods[12].selector = @selector(getHttpUrlCheckedWithNSString:);
  methods[13].selector = @selector(streamAllocationWithOkhttp3Call:);
  methods[14].selector = @selector(newWebSocketCallWithOkhttp3OkHttpClient:withOkhttp3Request:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "instance", "LOkhttp3InternalInternal;", .constantValue.asLong = 0, 0x9, -1, 24, -1, -1 },
  };
  static const void *ptrTable[] = { "addLenient", "LOkhttp3Headers_Builder;LNSString;", "LOkhttp3Headers_Builder;LNSString;LNSString;", "setCache", "LOkhttp3OkHttpClient_Builder;LOkhttp3InternalCacheInternalCache;", "get", "LOkhttp3ConnectionPool;LOkhttp3Address;LOkhttp3InternalConnectionStreamAllocation;", "deduplicate", "put", "LOkhttp3ConnectionPool;LOkhttp3InternalConnectionRealConnection;", "connectionBecameIdle", "routeDatabase", "LOkhttp3ConnectionPool;", "code", "LOkhttp3Response_Builder;", "apply", "LOkhttp3ConnectionSpec;LJavaxNetSslSSLSocket;Z", "getHttpUrlChecked", "LNSString;", "LJavaNetMalformedURLException;LJavaNetUnknownHostException;", "streamAllocation", "LOkhttp3Call;", "newWebSocketCall", "LOkhttp3OkHttpClient;LOkhttp3Request;", &Okhttp3InternalInternal_instance };
  static const J2ObjcClassInfo _Okhttp3InternalInternal = { "Internal", "okhttp3.internal", ptrTable, methods, fields, 7, 0x401, 15, 1, -1, -1, -1, -1, -1 };
  return &_Okhttp3InternalInternal;
}

@end

void Okhttp3InternalInternal_init(Okhttp3InternalInternal *self) {
  NSObject_init(self);
}

void Okhttp3InternalInternal_initializeInstanceForTests() {
  Okhttp3InternalInternal_initialize();
  create_Okhttp3OkHttpClient_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalInternal)
