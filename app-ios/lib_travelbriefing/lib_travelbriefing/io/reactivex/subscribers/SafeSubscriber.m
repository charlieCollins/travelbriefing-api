//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/subscribers/SafeSubscriber.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "io/reactivex/exceptions/CompositeException.h"
#include "io/reactivex/exceptions/Exceptions.h"
#include "io/reactivex/internal/subscriptions/EmptySubscription.h"
#include "io/reactivex/internal/subscriptions/SubscriptionHelper.h"
#include "io/reactivex/plugins/RxJavaPlugins.h"
#include "io/reactivex/subscribers/SafeSubscriber.h"
#include "java/lang/NullPointerException.h"
#include "org/reactivestreams/Subscriber.h"
#include "org/reactivestreams/Subscription.h"

@implementation IoReactivexSubscribersSafeSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual {
  IoReactivexSubscribersSafeSubscriber_initWithOrgReactivestreamsSubscriber_(self, actual);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    @try {
      [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
    }
    @catch (NSException *e) {
      IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(e);
      done_ = true;
      @try {
        [((id<OrgReactivestreamsSubscription>) nil_chk(s)) cancel];
      }
      @catch (NSException *e1) {
        IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(e1);
        IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_(create_IoReactivexExceptionsCompositeException_initWithNSExceptionArray_([IOSObjectArray arrayWithObjects:(id[]){ e, e1 } count:2 type:NSException_class_()]));
        return;
      }
      IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_(e);
    }
  }
}

- (void)onNextWithId:(id)t {
  if (done_) {
    return;
  }
  if (s_ == nil) {
    [self onNextNoSubscription];
    return;
  }
  if (t == nil) {
    NSException *ex = create_JavaLangNullPointerException_initWithNSString_(@"onNext called with null. Null values are generally not allowed in 2.x operators and sources.");
    @try {
      [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
    }
    @catch (NSException *e1) {
      IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(e1);
      [self onErrorWithNSException:create_IoReactivexExceptionsCompositeException_initWithNSExceptionArray_([IOSObjectArray arrayWithObjects:(id[]){ ex, e1 } count:2 type:NSException_class_()])];
      return;
    }
    [self onErrorWithNSException:ex];
    return;
  }
  @try {
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:t];
  }
  @catch (NSException *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(e);
    @try {
      [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
    }
    @catch (NSException *e1) {
      IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(e1);
      [self onErrorWithNSException:create_IoReactivexExceptionsCompositeException_initWithNSExceptionArray_([IOSObjectArray arrayWithObjects:(id[]){ e, e1 } count:2 type:NSException_class_()])];
      return;
    }
    [self onErrorWithNSException:e];
  }
}

- (void)onNextNoSubscription {
  done_ = true;
  NSException *ex = create_JavaLangNullPointerException_initWithNSString_(@"Subscription not set!");
  @try {
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:JreLoadEnum(IoReactivexInternalSubscriptionsEmptySubscription, INSTANCE)];
  }
  @catch (NSException *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(e);
    IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_(create_IoReactivexExceptionsCompositeException_initWithNSExceptionArray_([IOSObjectArray arrayWithObjects:(id[]){ ex, e } count:2 type:NSException_class_()]));
    return;
  }
  @try {
    [actual_ onErrorWithNSException:ex];
  }
  @catch (NSException *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(e);
    IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_(create_IoReactivexExceptionsCompositeException_initWithNSExceptionArray_([IOSObjectArray arrayWithObjects:(id[]){ ex, e } count:2 type:NSException_class_()]));
  }
}

- (void)onErrorWithNSException:(NSException *)t {
  if (done_) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_(t);
    return;
  }
  done_ = true;
  if (s_ == nil) {
    NSException *npe = create_JavaLangNullPointerException_initWithNSString_(@"Subscription not set!");
    @try {
      [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:JreLoadEnum(IoReactivexInternalSubscriptionsEmptySubscription, INSTANCE)];
    }
    @catch (NSException *e) {
      IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(e);
      IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_(create_IoReactivexExceptionsCompositeException_initWithNSExceptionArray_([IOSObjectArray arrayWithObjects:(id[]){ t, npe, e } count:3 type:NSException_class_()]));
      return;
    }
    @try {
      [actual_ onErrorWithNSException:create_IoReactivexExceptionsCompositeException_initWithNSExceptionArray_([IOSObjectArray arrayWithObjects:(id[]){ t, npe } count:2 type:NSException_class_()])];
    }
    @catch (NSException *e) {
      IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(e);
      IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_(create_IoReactivexExceptionsCompositeException_initWithNSExceptionArray_([IOSObjectArray arrayWithObjects:(id[]){ t, npe, e } count:3 type:NSException_class_()]));
    }
    return;
  }
  if (t == nil) {
    t = create_JavaLangNullPointerException_initWithNSString_(@"onError called with null. Null values are generally not allowed in 2.x operators and sources.");
  }
  @try {
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithNSException:t];
  }
  @catch (NSException *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(ex);
    IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_(create_IoReactivexExceptionsCompositeException_initWithNSExceptionArray_([IOSObjectArray arrayWithObjects:(id[]){ t, ex } count:2 type:NSException_class_()]));
  }
}

- (void)onComplete {
  if (done_) {
    return;
  }
  done_ = true;
  if (s_ == nil) {
    [self onCompleteNoSubscription];
    return;
  }
  @try {
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
  }
  @catch (NSException *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(e);
    IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_(e);
  }
}

- (void)onCompleteNoSubscription {
  NSException *ex = create_JavaLangNullPointerException_initWithNSString_(@"Subscription not set!");
  @try {
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:JreLoadEnum(IoReactivexInternalSubscriptionsEmptySubscription, INSTANCE)];
  }
  @catch (NSException *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(e);
    IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_(create_IoReactivexExceptionsCompositeException_initWithNSExceptionArray_([IOSObjectArray arrayWithObjects:(id[]){ ex, e } count:2 type:NSException_class_()]));
    return;
  }
  @try {
    [actual_ onErrorWithNSException:ex];
  }
  @catch (NSException *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(e);
    IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_(create_IoReactivexExceptionsCompositeException_initWithNSExceptionArray_([IOSObjectArray arrayWithObjects:(id[]){ ex, e } count:2 type:NSException_class_()]));
  }
}

- (void)requestWithLong:(jlong)n {
  @try {
    [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:n];
  }
  @catch (NSException *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(e);
    @try {
      [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
    }
    @catch (NSException *e1) {
      IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(e1);
      IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_(create_IoReactivexExceptionsCompositeException_initWithNSExceptionArray_([IOSObjectArray arrayWithObjects:(id[]){ e, e1 } count:2 type:NSException_class_()]));
      return;
    }
    IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_(e);
  }
}

- (void)cancel {
  @try {
    [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
  }
  @catch (NSException *e1) {
    IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(e1);
    IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_(e1);
  }
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onNextNoSubscription);
  methods[4].selector = @selector(onErrorWithNSException:);
  methods[5].selector = @selector(onComplete);
  methods[6].selector = @selector(onCompleteNoSubscription);
  methods[7].selector = @selector(requestWithLong:);
  methods[8].selector = @selector(cancel);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "request", "J", "Lorg/reactivestreams/Subscriber<-TT;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/reactivestreams/Subscriber<TT;>;Lorg/reactivestreams/Subscription;" };
  static const J2ObjcClassInfo _IoReactivexSubscribersSafeSubscriber = { "SafeSubscriber", "io.reactivex.subscribers", ptrTable, methods, fields, 7, 0x11, 9, 3, -1, -1, -1, 12, -1 };
  return &_IoReactivexSubscribersSafeSubscriber;
}

@end

void IoReactivexSubscribersSafeSubscriber_initWithOrgReactivestreamsSubscriber_(IoReactivexSubscribersSafeSubscriber *self, id<OrgReactivestreamsSubscriber> actual) {
  NSObject_init(self);
  JreStrongAssign(&self->actual_, actual);
}

IoReactivexSubscribersSafeSubscriber *new_IoReactivexSubscribersSafeSubscriber_initWithOrgReactivestreamsSubscriber_(id<OrgReactivestreamsSubscriber> actual) {
  J2OBJC_NEW_IMPL(IoReactivexSubscribersSafeSubscriber, initWithOrgReactivestreamsSubscriber_, actual)
}

IoReactivexSubscribersSafeSubscriber *create_IoReactivexSubscribersSafeSubscriber_initWithOrgReactivestreamsSubscriber_(id<OrgReactivestreamsSubscriber> actual) {
  J2OBJC_CREATE_IMPL(IoReactivexSubscribersSafeSubscriber, initWithOrgReactivestreamsSubscriber_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexSubscribersSafeSubscriber)
