//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/parallel/ParallelFlowable.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "io/reactivex/Flowable.h"
#include "io/reactivex/Scheduler.h"
#include "io/reactivex/annotations/BackpressureKind.h"
#include "io/reactivex/annotations/BackpressureSupport.h"
#include "io/reactivex/annotations/CheckReturnValue.h"
#include "io/reactivex/annotations/SchedulerSupport.h"
#include "io/reactivex/exceptions/Exceptions.h"
#include "io/reactivex/functions/Action.h"
#include "io/reactivex/functions/BiConsumer.h"
#include "io/reactivex/functions/BiFunction.h"
#include "io/reactivex/functions/Consumer.h"
#include "io/reactivex/functions/Function.h"
#include "io/reactivex/functions/LongConsumer.h"
#include "io/reactivex/functions/Predicate.h"
#include "io/reactivex/internal/functions/Functions.h"
#include "io/reactivex/internal/functions/ObjectHelper.h"
#include "io/reactivex/internal/operators/parallel/ParallelCollect.h"
#include "io/reactivex/internal/operators/parallel/ParallelConcatMap.h"
#include "io/reactivex/internal/operators/parallel/ParallelFilter.h"
#include "io/reactivex/internal/operators/parallel/ParallelFlatMap.h"
#include "io/reactivex/internal/operators/parallel/ParallelFromArray.h"
#include "io/reactivex/internal/operators/parallel/ParallelFromPublisher.h"
#include "io/reactivex/internal/operators/parallel/ParallelJoin.h"
#include "io/reactivex/internal/operators/parallel/ParallelMap.h"
#include "io/reactivex/internal/operators/parallel/ParallelPeek.h"
#include "io/reactivex/internal/operators/parallel/ParallelReduce.h"
#include "io/reactivex/internal/operators/parallel/ParallelReduceFull.h"
#include "io/reactivex/internal/operators/parallel/ParallelRunOn.h"
#include "io/reactivex/internal/operators/parallel/ParallelSortedJoin.h"
#include "io/reactivex/internal/subscriptions/EmptySubscription.h"
#include "io/reactivex/internal/util/ErrorMode.h"
#include "io/reactivex/internal/util/ExceptionHelper.h"
#include "io/reactivex/internal/util/ListAddBiConsumer.h"
#include "io/reactivex/internal/util/MergerBiFunction.h"
#include "io/reactivex/internal/util/SorterFunction.h"
#include "io/reactivex/parallel/ParallelFlowable.h"
#include "io/reactivex/plugins/RxJavaPlugins.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Runtime.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Comparator.h"
#include "java/util/concurrent/Callable.h"
#include "org/reactivestreams/Publisher.h"
#include "org/reactivestreams/Subscriber.h"

__attribute__((unused)) static IoReactivexParallelParallelFlowable *IoReactivexParallelParallelFlowable_mapWithIoReactivexFunctionsFunction_(IoReactivexParallelParallelFlowable *self, id<IoReactivexFunctionsFunction> mapper);

__attribute__((unused)) static IoReactivexParallelParallelFlowable *IoReactivexParallelParallelFlowable_runOnWithIoReactivexScheduler_withInt_(IoReactivexParallelParallelFlowable *self, IoReactivexScheduler *scheduler, jint prefetch);

__attribute__((unused)) static IoReactivexFlowable *IoReactivexParallelParallelFlowable_reduceWithIoReactivexFunctionsBiFunction_(IoReactivexParallelParallelFlowable *self, id<IoReactivexFunctionsBiFunction> reducer);

__attribute__((unused)) static IoReactivexParallelParallelFlowable *IoReactivexParallelParallelFlowable_reduceWithJavaUtilConcurrentCallable_withIoReactivexFunctionsBiFunction_(IoReactivexParallelParallelFlowable *self, id<JavaUtilConcurrentCallable> initialSupplier, id<IoReactivexFunctionsBiFunction> reducer);

__attribute__((unused)) static IoReactivexFlowable *IoReactivexParallelParallelFlowable_sequentialWithInt_(IoReactivexParallelParallelFlowable *self, jint prefetch);

__attribute__((unused)) static IoReactivexFlowable *IoReactivexParallelParallelFlowable_sortedWithJavaUtilComparator_withInt_(IoReactivexParallelParallelFlowable *self, id<JavaUtilComparator> comparator, jint capacityHint);

__attribute__((unused)) static IoReactivexFlowable *IoReactivexParallelParallelFlowable_toSortedListWithJavaUtilComparator_withInt_(IoReactivexParallelParallelFlowable *self, id<JavaUtilComparator> comparator, jint capacityHint);

__attribute__((unused)) static id IoReactivexParallelParallelFlowable_toWithIoReactivexFunctionsFunction_(IoReactivexParallelParallelFlowable *self, id<IoReactivexFunctionsFunction> converter);

__attribute__((unused)) static IoReactivexParallelParallelFlowable *IoReactivexParallelParallelFlowable_flatMapWithIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(IoReactivexParallelParallelFlowable *self, id<IoReactivexFunctionsFunction> mapper, jboolean delayError, jint maxConcurrency, jint prefetch);

__attribute__((unused)) static IoReactivexParallelParallelFlowable *IoReactivexParallelParallelFlowable_concatMapWithIoReactivexFunctionsFunction_withInt_(IoReactivexParallelParallelFlowable *self, id<IoReactivexFunctionsFunction> mapper, jint prefetch);

__attribute__((unused)) static IoReactivexParallelParallelFlowable *IoReactivexParallelParallelFlowable_concatMapDelayErrorWithIoReactivexFunctionsFunction_withInt_withBoolean_(IoReactivexParallelParallelFlowable *self, id<IoReactivexFunctionsFunction> mapper, jint prefetch, jboolean tillTheEnd);

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$0();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$1();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$2();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$3();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$4();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$5();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$6();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$7();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$8();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$9();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$10();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$11();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$12();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$13();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$14();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$15();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$16();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$17();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$18();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$19();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$20();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$21();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$22();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$23();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$24();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$25();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$26();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$27();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$28();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$29();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$30();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$31();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$32();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$33();

__attribute__((unused)) static IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$34();

@implementation IoReactivexParallelParallelFlowable

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexParallelParallelFlowable_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)subscribeWithOrgReactivestreamsSubscriberArray:(IOSObjectArray *)subscribers {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jint)parallelism {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)validateWithOrgReactivestreamsSubscriberArray:(IOSObjectArray *)subscribers {
  jint p = [self parallelism];
  if (((IOSObjectArray *) nil_chk(subscribers))->size_ != p) {
    NSException *iae = create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"parallelism = ", p, @", subscribers = ", subscribers->size_));
    {
      IOSObjectArray *a__ = subscribers;
      id<OrgReactivestreamsSubscriber> const *b__ = a__->buffer_;
      id<OrgReactivestreamsSubscriber> const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id<OrgReactivestreamsSubscriber> s = *b__++;
        IoReactivexInternalSubscriptionsEmptySubscription_errorWithNSException_withOrgReactivestreamsSubscriber_(iae, s);
      }
    }
    return false;
  }
  return true;
}

+ (IoReactivexParallelParallelFlowable *)fromWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source {
  return IoReactivexParallelParallelFlowable_fromWithOrgReactivestreamsPublisher_(source);
}

+ (IoReactivexParallelParallelFlowable *)fromWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                                                                     withInt:(jint)parallelism {
  return IoReactivexParallelParallelFlowable_fromWithOrgReactivestreamsPublisher_withInt_(source, parallelism);
}

+ (IoReactivexParallelParallelFlowable *)fromWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                                                                     withInt:(jint)parallelism
                                                                     withInt:(jint)prefetch {
  return IoReactivexParallelParallelFlowable_fromWithOrgReactivestreamsPublisher_withInt_withInt_(source, parallelism, prefetch);
}

- (IoReactivexParallelParallelFlowable *)mapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper {
  return IoReactivexParallelParallelFlowable_mapWithIoReactivexFunctionsFunction_(self, mapper);
}

- (IoReactivexParallelParallelFlowable *)filterWithIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)predicate {
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(predicate, @"predicate");
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexParallelParallelFlowable_(create_IoReactivexInternalOperatorsParallelParallelFilter_initWithIoReactivexParallelParallelFlowable_withIoReactivexFunctionsPredicate_(self, predicate));
}

- (IoReactivexParallelParallelFlowable *)runOnWithIoReactivexScheduler:(IoReactivexScheduler *)scheduler {
  return IoReactivexParallelParallelFlowable_runOnWithIoReactivexScheduler_withInt_(self, scheduler, IoReactivexFlowable_bufferSize());
}

- (IoReactivexParallelParallelFlowable *)runOnWithIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                                               withInt:(jint)prefetch {
  return IoReactivexParallelParallelFlowable_runOnWithIoReactivexScheduler_withInt_(self, scheduler, prefetch);
}

- (IoReactivexFlowable *)reduceWithIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)reducer {
  return IoReactivexParallelParallelFlowable_reduceWithIoReactivexFunctionsBiFunction_(self, reducer);
}

- (IoReactivexParallelParallelFlowable *)reduceWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)initialSupplier
                                           withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)reducer {
  return IoReactivexParallelParallelFlowable_reduceWithJavaUtilConcurrentCallable_withIoReactivexFunctionsBiFunction_(self, initialSupplier, reducer);
}

- (IoReactivexFlowable *)sequential {
  return IoReactivexParallelParallelFlowable_sequentialWithInt_(self, IoReactivexFlowable_bufferSize());
}

- (IoReactivexFlowable *)sequentialWithInt:(jint)prefetch {
  return IoReactivexParallelParallelFlowable_sequentialWithInt_(self, prefetch);
}

- (IoReactivexFlowable *)sortedWithJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  return IoReactivexParallelParallelFlowable_sortedWithJavaUtilComparator_withInt_(self, comparator, 16);
}

- (IoReactivexFlowable *)sortedWithJavaUtilComparator:(id<JavaUtilComparator>)comparator
                                              withInt:(jint)capacityHint {
  return IoReactivexParallelParallelFlowable_sortedWithJavaUtilComparator_withInt_(self, comparator, capacityHint);
}

- (IoReactivexFlowable *)toSortedListWithJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  return IoReactivexParallelParallelFlowable_toSortedListWithJavaUtilComparator_withInt_(self, comparator, 16);
}

- (IoReactivexFlowable *)toSortedListWithJavaUtilComparator:(id<JavaUtilComparator>)comparator
                                                    withInt:(jint)capacityHint {
  return IoReactivexParallelParallelFlowable_toSortedListWithJavaUtilComparator_withInt_(self, comparator, capacityHint);
}

- (IoReactivexParallelParallelFlowable *)doOnNextWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onNext {
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(onNext, @"onNext is null");
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexParallelParallelFlowable_(create_IoReactivexInternalOperatorsParallelParallelPeek_initWithIoReactivexParallelParallelFlowable_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_withIoReactivexFunctionsAction_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsLongConsumer_withIoReactivexFunctionsAction_(self, onNext, IoReactivexInternalFunctionsFunctions_emptyConsumer(), IoReactivexInternalFunctionsFunctions_emptyConsumer(), JreLoadStatic(IoReactivexInternalFunctionsFunctions, EMPTY_ACTION), JreLoadStatic(IoReactivexInternalFunctionsFunctions, EMPTY_ACTION), IoReactivexInternalFunctionsFunctions_emptyConsumer(), JreLoadStatic(IoReactivexInternalFunctionsFunctions, EMPTY_LONG_CONSUMER), JreLoadStatic(IoReactivexInternalFunctionsFunctions, EMPTY_ACTION)));
}

- (IoReactivexParallelParallelFlowable *)doAfterNextWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onAfterNext {
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(onAfterNext, @"onAfterNext is null");
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexParallelParallelFlowable_(create_IoReactivexInternalOperatorsParallelParallelPeek_initWithIoReactivexParallelParallelFlowable_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_withIoReactivexFunctionsAction_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsLongConsumer_withIoReactivexFunctionsAction_(self, IoReactivexInternalFunctionsFunctions_emptyConsumer(), onAfterNext, IoReactivexInternalFunctionsFunctions_emptyConsumer(), JreLoadStatic(IoReactivexInternalFunctionsFunctions, EMPTY_ACTION), JreLoadStatic(IoReactivexInternalFunctionsFunctions, EMPTY_ACTION), IoReactivexInternalFunctionsFunctions_emptyConsumer(), JreLoadStatic(IoReactivexInternalFunctionsFunctions, EMPTY_LONG_CONSUMER), JreLoadStatic(IoReactivexInternalFunctionsFunctions, EMPTY_ACTION)));
}

- (IoReactivexParallelParallelFlowable *)doOnErrorWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onError {
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(onError, @"onError is null");
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexParallelParallelFlowable_(create_IoReactivexInternalOperatorsParallelParallelPeek_initWithIoReactivexParallelParallelFlowable_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_withIoReactivexFunctionsAction_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsLongConsumer_withIoReactivexFunctionsAction_(self, IoReactivexInternalFunctionsFunctions_emptyConsumer(), IoReactivexInternalFunctionsFunctions_emptyConsumer(), onError, JreLoadStatic(IoReactivexInternalFunctionsFunctions, EMPTY_ACTION), JreLoadStatic(IoReactivexInternalFunctionsFunctions, EMPTY_ACTION), IoReactivexInternalFunctionsFunctions_emptyConsumer(), JreLoadStatic(IoReactivexInternalFunctionsFunctions, EMPTY_LONG_CONSUMER), JreLoadStatic(IoReactivexInternalFunctionsFunctions, EMPTY_ACTION)));
}

- (IoReactivexParallelParallelFlowable *)doOnCompleteWithIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onComplete {
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(onComplete, @"onComplete is null");
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexParallelParallelFlowable_(create_IoReactivexInternalOperatorsParallelParallelPeek_initWithIoReactivexParallelParallelFlowable_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_withIoReactivexFunctionsAction_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsLongConsumer_withIoReactivexFunctionsAction_(self, IoReactivexInternalFunctionsFunctions_emptyConsumer(), IoReactivexInternalFunctionsFunctions_emptyConsumer(), IoReactivexInternalFunctionsFunctions_emptyConsumer(), onComplete, JreLoadStatic(IoReactivexInternalFunctionsFunctions, EMPTY_ACTION), IoReactivexInternalFunctionsFunctions_emptyConsumer(), JreLoadStatic(IoReactivexInternalFunctionsFunctions, EMPTY_LONG_CONSUMER), JreLoadStatic(IoReactivexInternalFunctionsFunctions, EMPTY_ACTION)));
}

- (IoReactivexParallelParallelFlowable *)doAfterTerminatedWithIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onAfterTerminate {
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(onAfterTerminate, @"onAfterTerminate is null");
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexParallelParallelFlowable_(create_IoReactivexInternalOperatorsParallelParallelPeek_initWithIoReactivexParallelParallelFlowable_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_withIoReactivexFunctionsAction_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsLongConsumer_withIoReactivexFunctionsAction_(self, IoReactivexInternalFunctionsFunctions_emptyConsumer(), IoReactivexInternalFunctionsFunctions_emptyConsumer(), IoReactivexInternalFunctionsFunctions_emptyConsumer(), JreLoadStatic(IoReactivexInternalFunctionsFunctions, EMPTY_ACTION), onAfterTerminate, IoReactivexInternalFunctionsFunctions_emptyConsumer(), JreLoadStatic(IoReactivexInternalFunctionsFunctions, EMPTY_LONG_CONSUMER), JreLoadStatic(IoReactivexInternalFunctionsFunctions, EMPTY_ACTION)));
}

- (IoReactivexParallelParallelFlowable *)doOnSubscribeWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onSubscribe {
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(onSubscribe, @"onSubscribe is null");
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexParallelParallelFlowable_(create_IoReactivexInternalOperatorsParallelParallelPeek_initWithIoReactivexParallelParallelFlowable_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_withIoReactivexFunctionsAction_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsLongConsumer_withIoReactivexFunctionsAction_(self, IoReactivexInternalFunctionsFunctions_emptyConsumer(), IoReactivexInternalFunctionsFunctions_emptyConsumer(), IoReactivexInternalFunctionsFunctions_emptyConsumer(), JreLoadStatic(IoReactivexInternalFunctionsFunctions, EMPTY_ACTION), JreLoadStatic(IoReactivexInternalFunctionsFunctions, EMPTY_ACTION), onSubscribe, JreLoadStatic(IoReactivexInternalFunctionsFunctions, EMPTY_LONG_CONSUMER), JreLoadStatic(IoReactivexInternalFunctionsFunctions, EMPTY_ACTION)));
}

- (IoReactivexParallelParallelFlowable *)doOnRequestWithIoReactivexFunctionsLongConsumer:(id<IoReactivexFunctionsLongConsumer>)onRequest {
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(onRequest, @"onRequest is null");
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexParallelParallelFlowable_(create_IoReactivexInternalOperatorsParallelParallelPeek_initWithIoReactivexParallelParallelFlowable_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_withIoReactivexFunctionsAction_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsLongConsumer_withIoReactivexFunctionsAction_(self, IoReactivexInternalFunctionsFunctions_emptyConsumer(), IoReactivexInternalFunctionsFunctions_emptyConsumer(), IoReactivexInternalFunctionsFunctions_emptyConsumer(), JreLoadStatic(IoReactivexInternalFunctionsFunctions, EMPTY_ACTION), JreLoadStatic(IoReactivexInternalFunctionsFunctions, EMPTY_ACTION), IoReactivexInternalFunctionsFunctions_emptyConsumer(), onRequest, JreLoadStatic(IoReactivexInternalFunctionsFunctions, EMPTY_ACTION)));
}

- (IoReactivexParallelParallelFlowable *)doOnCancelWithIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onCancel {
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(onCancel, @"onCancel is null");
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexParallelParallelFlowable_(create_IoReactivexInternalOperatorsParallelParallelPeek_initWithIoReactivexParallelParallelFlowable_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_withIoReactivexFunctionsAction_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsLongConsumer_withIoReactivexFunctionsAction_(self, IoReactivexInternalFunctionsFunctions_emptyConsumer(), IoReactivexInternalFunctionsFunctions_emptyConsumer(), IoReactivexInternalFunctionsFunctions_emptyConsumer(), JreLoadStatic(IoReactivexInternalFunctionsFunctions, EMPTY_ACTION), JreLoadStatic(IoReactivexInternalFunctionsFunctions, EMPTY_ACTION), IoReactivexInternalFunctionsFunctions_emptyConsumer(), JreLoadStatic(IoReactivexInternalFunctionsFunctions, EMPTY_LONG_CONSUMER), onCancel));
}

- (IoReactivexParallelParallelFlowable *)collectWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)collectionSupplier
                                            withIoReactivexFunctionsBiConsumer:(id<IoReactivexFunctionsBiConsumer>)collector {
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(collectionSupplier, @"collectionSupplier is null");
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(collector, @"collector is null");
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexParallelParallelFlowable_(create_IoReactivexInternalOperatorsParallelParallelCollect_initWithIoReactivexParallelParallelFlowable_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiConsumer_(self, collectionSupplier, collector));
}

+ (IoReactivexParallelParallelFlowable *)fromArrayWithOrgReactivestreamsPublisherArray:(IOSObjectArray *)publishers {
  return IoReactivexParallelParallelFlowable_fromArrayWithOrgReactivestreamsPublisherArray_(publishers);
}

- (id)toWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)converter {
  return IoReactivexParallelParallelFlowable_toWithIoReactivexFunctionsFunction_(self, converter);
}

- (IoReactivexParallelParallelFlowable *)composeWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)composer {
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexParallelParallelFlowable_(IoReactivexParallelParallelFlowable_toWithIoReactivexFunctionsFunction_(self, composer));
}

- (IoReactivexParallelParallelFlowable *)flatMapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper {
  return IoReactivexParallelParallelFlowable_flatMapWithIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(self, mapper, false, JavaLangInteger_MAX_VALUE, IoReactivexFlowable_bufferSize());
}

- (IoReactivexParallelParallelFlowable *)flatMapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                                                     withBoolean:(jboolean)delayError {
  return IoReactivexParallelParallelFlowable_flatMapWithIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(self, mapper, delayError, JavaLangInteger_MAX_VALUE, IoReactivexFlowable_bufferSize());
}

- (IoReactivexParallelParallelFlowable *)flatMapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                                                     withBoolean:(jboolean)delayError
                                                                         withInt:(jint)maxConcurrency {
  return IoReactivexParallelParallelFlowable_flatMapWithIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(self, mapper, delayError, maxConcurrency, IoReactivexFlowable_bufferSize());
}

- (IoReactivexParallelParallelFlowable *)flatMapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                                                     withBoolean:(jboolean)delayError
                                                                         withInt:(jint)maxConcurrency
                                                                         withInt:(jint)prefetch {
  return IoReactivexParallelParallelFlowable_flatMapWithIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(self, mapper, delayError, maxConcurrency, prefetch);
}

- (IoReactivexParallelParallelFlowable *)concatMapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper {
  return IoReactivexParallelParallelFlowable_concatMapWithIoReactivexFunctionsFunction_withInt_(self, mapper, 2);
}

- (IoReactivexParallelParallelFlowable *)concatMapWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                                                           withInt:(jint)prefetch {
  return IoReactivexParallelParallelFlowable_concatMapWithIoReactivexFunctionsFunction_withInt_(self, mapper, prefetch);
}

- (IoReactivexParallelParallelFlowable *)concatMapDelayErrorWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                                                                 withBoolean:(jboolean)tillTheEnd {
  return IoReactivexParallelParallelFlowable_concatMapDelayErrorWithIoReactivexFunctionsFunction_withInt_withBoolean_(self, mapper, 2, tillTheEnd);
}

- (IoReactivexParallelParallelFlowable *)concatMapDelayErrorWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                                                                     withInt:(jint)prefetch
                                                                                 withBoolean:(jboolean)tillTheEnd {
  return IoReactivexParallelParallelFlowable_concatMapDelayErrorWithIoReactivexFunctionsFunction_withInt_withBoolean_(self, mapper, prefetch, tillTheEnd);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, -1, 2, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x14, 3, 1, -1, 4, -1, -1 },
    { NULL, "LIoReactivexParallelParallelFlowable;", 0x9, 5, 6, -1, 7, 8, -1 },
    { NULL, "LIoReactivexParallelParallelFlowable;", 0x9, 5, 9, -1, 10, 11, -1 },
    { NULL, "LIoReactivexParallelParallelFlowable;", 0x9, 5, 12, -1, 13, 14, -1 },
    { NULL, "LIoReactivexParallelParallelFlowable;", 0x11, 15, 16, -1, 17, 18, -1 },
    { NULL, "LIoReactivexParallelParallelFlowable;", 0x11, 19, 20, -1, 21, 22, -1 },
    { NULL, "LIoReactivexParallelParallelFlowable;", 0x11, 23, 24, -1, 25, 26, -1 },
    { NULL, "LIoReactivexParallelParallelFlowable;", 0x11, 23, 27, -1, 28, 29, -1 },
    { NULL, "LIoReactivexFlowable;", 0x11, 30, 31, -1, 32, 33, -1 },
    { NULL, "LIoReactivexParallelParallelFlowable;", 0x11, 30, 34, -1, 35, 36, -1 },
    { NULL, "LIoReactivexFlowable;", 0x11, -1, -1, -1, 37, 38, -1 },
    { NULL, "LIoReactivexFlowable;", 0x11, 39, 40, -1, 41, 42, -1 },
    { NULL, "LIoReactivexFlowable;", 0x11, 43, 44, -1, 45, 46, -1 },
    { NULL, "LIoReactivexFlowable;", 0x11, 43, 47, -1, 48, 49, -1 },
    { NULL, "LIoReactivexFlowable;", 0x11, 50, 44, -1, 51, 52, -1 },
    { NULL, "LIoReactivexFlowable;", 0x11, 50, 47, -1, 53, 54, -1 },
    { NULL, "LIoReactivexParallelParallelFlowable;", 0x11, 55, 56, -1, 57, 58, -1 },
    { NULL, "LIoReactivexParallelParallelFlowable;", 0x11, 59, 56, -1, 57, 60, -1 },
    { NULL, "LIoReactivexParallelParallelFlowable;", 0x11, 61, 56, -1, 62, 63, -1 },
    { NULL, "LIoReactivexParallelParallelFlowable;", 0x11, 64, 65, -1, 66, 67, -1 },
    { NULL, "LIoReactivexParallelParallelFlowable;", 0x11, 68, 65, -1, 66, 69, -1 },
    { NULL, "LIoReactivexParallelParallelFlowable;", 0x11, 70, 56, -1, 71, 72, -1 },
    { NULL, "LIoReactivexParallelParallelFlowable;", 0x11, 73, 74, -1, 75, 76, -1 },
    { NULL, "LIoReactivexParallelParallelFlowable;", 0x11, 77, 65, -1, 66, 78, -1 },
    { NULL, "LIoReactivexParallelParallelFlowable;", 0x11, 79, 80, -1, 81, 82, -1 },
    { NULL, "LIoReactivexParallelParallelFlowable;", 0x89, 83, 84, -1, 85, 86, -1 },
    { NULL, "LNSObject;", 0x11, 87, 16, -1, 88, 89, -1 },
    { NULL, "LIoReactivexParallelParallelFlowable;", 0x11, 90, 16, -1, 91, 92, -1 },
    { NULL, "LIoReactivexParallelParallelFlowable;", 0x11, 93, 16, -1, 94, 95, -1 },
    { NULL, "LIoReactivexParallelParallelFlowable;", 0x11, 93, 96, -1, 97, 98, -1 },
    { NULL, "LIoReactivexParallelParallelFlowable;", 0x11, 93, 99, -1, 100, 101, -1 },
    { NULL, "LIoReactivexParallelParallelFlowable;", 0x11, 93, 102, -1, 103, 104, -1 },
    { NULL, "LIoReactivexParallelParallelFlowable;", 0x11, 105, 16, -1, 94, 106, -1 },
    { NULL, "LIoReactivexParallelParallelFlowable;", 0x11, 105, 107, -1, 108, 109, -1 },
    { NULL, "LIoReactivexParallelParallelFlowable;", 0x11, 110, 96, -1, 97, 111, -1 },
    { NULL, "LIoReactivexParallelParallelFlowable;", 0x11, 110, 112, -1, 113, 114, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(subscribeWithOrgReactivestreamsSubscriberArray:);
  methods[2].selector = @selector(parallelism);
  methods[3].selector = @selector(validateWithOrgReactivestreamsSubscriberArray:);
  methods[4].selector = @selector(fromWithOrgReactivestreamsPublisher:);
  methods[5].selector = @selector(fromWithOrgReactivestreamsPublisher:withInt:);
  methods[6].selector = @selector(fromWithOrgReactivestreamsPublisher:withInt:withInt:);
  methods[7].selector = @selector(mapWithIoReactivexFunctionsFunction:);
  methods[8].selector = @selector(filterWithIoReactivexFunctionsPredicate:);
  methods[9].selector = @selector(runOnWithIoReactivexScheduler:);
  methods[10].selector = @selector(runOnWithIoReactivexScheduler:withInt:);
  methods[11].selector = @selector(reduceWithIoReactivexFunctionsBiFunction:);
  methods[12].selector = @selector(reduceWithJavaUtilConcurrentCallable:withIoReactivexFunctionsBiFunction:);
  methods[13].selector = @selector(sequential);
  methods[14].selector = @selector(sequentialWithInt:);
  methods[15].selector = @selector(sortedWithJavaUtilComparator:);
  methods[16].selector = @selector(sortedWithJavaUtilComparator:withInt:);
  methods[17].selector = @selector(toSortedListWithJavaUtilComparator:);
  methods[18].selector = @selector(toSortedListWithJavaUtilComparator:withInt:);
  methods[19].selector = @selector(doOnNextWithIoReactivexFunctionsConsumer:);
  methods[20].selector = @selector(doAfterNextWithIoReactivexFunctionsConsumer:);
  methods[21].selector = @selector(doOnErrorWithIoReactivexFunctionsConsumer:);
  methods[22].selector = @selector(doOnCompleteWithIoReactivexFunctionsAction:);
  methods[23].selector = @selector(doAfterTerminatedWithIoReactivexFunctionsAction:);
  methods[24].selector = @selector(doOnSubscribeWithIoReactivexFunctionsConsumer:);
  methods[25].selector = @selector(doOnRequestWithIoReactivexFunctionsLongConsumer:);
  methods[26].selector = @selector(doOnCancelWithIoReactivexFunctionsAction:);
  methods[27].selector = @selector(collectWithJavaUtilConcurrentCallable:withIoReactivexFunctionsBiConsumer:);
  methods[28].selector = @selector(fromArrayWithOrgReactivestreamsPublisherArray:);
  methods[29].selector = @selector(toWithIoReactivexFunctionsFunction:);
  methods[30].selector = @selector(composeWithIoReactivexFunctionsFunction:);
  methods[31].selector = @selector(flatMapWithIoReactivexFunctionsFunction:);
  methods[32].selector = @selector(flatMapWithIoReactivexFunctionsFunction:withBoolean:);
  methods[33].selector = @selector(flatMapWithIoReactivexFunctionsFunction:withBoolean:withInt:);
  methods[34].selector = @selector(flatMapWithIoReactivexFunctionsFunction:withBoolean:withInt:withInt:);
  methods[35].selector = @selector(concatMapWithIoReactivexFunctionsFunction:);
  methods[36].selector = @selector(concatMapWithIoReactivexFunctionsFunction:withInt:);
  methods[37].selector = @selector(concatMapDelayErrorWithIoReactivexFunctionsFunction:withBoolean:);
  methods[38].selector = @selector(concatMapDelayErrorWithIoReactivexFunctionsFunction:withInt:withBoolean:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "subscribe", "[LOrgReactivestreamsSubscriber;", "([Lorg/reactivestreams/Subscriber<-TT;>;)V", "validate", "([Lorg/reactivestreams/Subscriber<*>;)Z", "from", "LOrgReactivestreamsPublisher;", "<T:Ljava/lang/Object;>(Lorg/reactivestreams/Publisher<+TT;>;)Lio/reactivex/parallel/ParallelFlowable<TT;>;", (void *)&IoReactivexParallelParallelFlowable__Annotations$0, "LOrgReactivestreamsPublisher;I", "<T:Ljava/lang/Object;>(Lorg/reactivestreams/Publisher<+TT;>;I)Lio/reactivex/parallel/ParallelFlowable<TT;>;", (void *)&IoReactivexParallelParallelFlowable__Annotations$1, "LOrgReactivestreamsPublisher;II", "<T:Ljava/lang/Object;>(Lorg/reactivestreams/Publisher<+TT;>;II)Lio/reactivex/parallel/ParallelFlowable<TT;>;", (void *)&IoReactivexParallelParallelFlowable__Annotations$2, "map", "LIoReactivexFunctionsFunction;", "<R:Ljava/lang/Object;>(Lio/reactivex/functions/Function<-TT;+TR;>;)Lio/reactivex/parallel/ParallelFlowable<TR;>;", (void *)&IoReactivexParallelParallelFlowable__Annotations$3, "filter", "LIoReactivexFunctionsPredicate;", "(Lio/reactivex/functions/Predicate<-TT;>;)Lio/reactivex/parallel/ParallelFlowable<TT;>;", (void *)&IoReactivexParallelParallelFlowable__Annotations$4, "runOn", "LIoReactivexScheduler;", "(Lio/reactivex/Scheduler;)Lio/reactivex/parallel/ParallelFlowable<TT;>;", (void *)&IoReactivexParallelParallelFlowable__Annotations$5, "LIoReactivexScheduler;I", "(Lio/reactivex/Scheduler;I)Lio/reactivex/parallel/ParallelFlowable<TT;>;", (void *)&IoReactivexParallelParallelFlowable__Annotations$6, "reduce", "LIoReactivexFunctionsBiFunction;", "(Lio/reactivex/functions/BiFunction<TT;TT;TT;>;)Lio/reactivex/Flowable<TT;>;", (void *)&IoReactivexParallelParallelFlowable__Annotations$7, "LJavaUtilConcurrentCallable;LIoReactivexFunctionsBiFunction;", "<R:Ljava/lang/Object;>(Ljava/util/concurrent/Callable<TR;>;Lio/reactivex/functions/BiFunction<TR;-TT;TR;>;)Lio/reactivex/parallel/ParallelFlowable<TR;>;", (void *)&IoReactivexParallelParallelFlowable__Annotations$8, "()Lio/reactivex/Flowable<TT;>;", (void *)&IoReactivexParallelParallelFlowable__Annotations$9, "sequential", "I", "(I)Lio/reactivex/Flowable<TT;>;", (void *)&IoReactivexParallelParallelFlowable__Annotations$10, "sorted", "LJavaUtilComparator;", "(Ljava/util/Comparator<-TT;>;)Lio/reactivex/Flowable<TT;>;", (void *)&IoReactivexParallelParallelFlowable__Annotations$11, "LJavaUtilComparator;I", "(Ljava/util/Comparator<-TT;>;I)Lio/reactivex/Flowable<TT;>;", (void *)&IoReactivexParallelParallelFlowable__Annotations$12, "toSortedList", "(Ljava/util/Comparator<-TT;>;)Lio/reactivex/Flowable<Ljava/util/List<TT;>;>;", (void *)&IoReactivexParallelParallelFlowable__Annotations$13, "(Ljava/util/Comparator<-TT;>;I)Lio/reactivex/Flowable<Ljava/util/List<TT;>;>;", (void *)&IoReactivexParallelParallelFlowable__Annotations$14, "doOnNext", "LIoReactivexFunctionsConsumer;", "(Lio/reactivex/functions/Consumer<-TT;>;)Lio/reactivex/parallel/ParallelFlowable<TT;>;", (void *)&IoReactivexParallelParallelFlowable__Annotations$15, "doAfterNext", (void *)&IoReactivexParallelParallelFlowable__Annotations$16, "doOnError", "(Lio/reactivex/functions/Consumer<Ljava/lang/Throwable;>;)Lio/reactivex/parallel/ParallelFlowable<TT;>;", (void *)&IoReactivexParallelParallelFlowable__Annotations$17, "doOnComplete", "LIoReactivexFunctionsAction;", "(Lio/reactivex/functions/Action;)Lio/reactivex/parallel/ParallelFlowable<TT;>;", (void *)&IoReactivexParallelParallelFlowable__Annotations$18, "doAfterTerminated", (void *)&IoReactivexParallelParallelFlowable__Annotations$19, "doOnSubscribe", "(Lio/reactivex/functions/Consumer<-Lorg/reactivestreams/Subscription;>;)Lio/reactivex/parallel/ParallelFlowable<TT;>;", (void *)&IoReactivexParallelParallelFlowable__Annotations$20, "doOnRequest", "LIoReactivexFunctionsLongConsumer;", "(Lio/reactivex/functions/LongConsumer;)Lio/reactivex/parallel/ParallelFlowable<TT;>;", (void *)&IoReactivexParallelParallelFlowable__Annotations$21, "doOnCancel", (void *)&IoReactivexParallelParallelFlowable__Annotations$22, "collect", "LJavaUtilConcurrentCallable;LIoReactivexFunctionsBiConsumer;", "<C:Ljava/lang/Object;>(Ljava/util/concurrent/Callable<+TC;>;Lio/reactivex/functions/BiConsumer<-TC;-TT;>;)Lio/reactivex/parallel/ParallelFlowable<TC;>;", (void *)&IoReactivexParallelParallelFlowable__Annotations$23, "fromArray", "[LOrgReactivestreamsPublisher;", "<T:Ljava/lang/Object;>([Lorg/reactivestreams/Publisher<TT;>;)Lio/reactivex/parallel/ParallelFlowable<TT;>;", (void *)&IoReactivexParallelParallelFlowable__Annotations$24, "to", "<U:Ljava/lang/Object;>(Lio/reactivex/functions/Function<-Lio/reactivex/parallel/ParallelFlowable<TT;>;TU;>;)TU;", (void *)&IoReactivexParallelParallelFlowable__Annotations$25, "compose", "<U:Ljava/lang/Object;>(Lio/reactivex/functions/Function<-Lio/reactivex/parallel/ParallelFlowable<TT;>;Lio/reactivex/parallel/ParallelFlowable<TU;>;>;)Lio/reactivex/parallel/ParallelFlowable<TU;>;", (void *)&IoReactivexParallelParallelFlowable__Annotations$26, "flatMap", "<R:Ljava/lang/Object;>(Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TR;>;>;)Lio/reactivex/parallel/ParallelFlowable<TR;>;", (void *)&IoReactivexParallelParallelFlowable__Annotations$27, "LIoReactivexFunctionsFunction;Z", "<R:Ljava/lang/Object;>(Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TR;>;>;Z)Lio/reactivex/parallel/ParallelFlowable<TR;>;", (void *)&IoReactivexParallelParallelFlowable__Annotations$28, "LIoReactivexFunctionsFunction;ZI", "<R:Ljava/lang/Object;>(Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TR;>;>;ZI)Lio/reactivex/parallel/ParallelFlowable<TR;>;", (void *)&IoReactivexParallelParallelFlowable__Annotations$29, "LIoReactivexFunctionsFunction;ZII", "<R:Ljava/lang/Object;>(Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TR;>;>;ZII)Lio/reactivex/parallel/ParallelFlowable<TR;>;", (void *)&IoReactivexParallelParallelFlowable__Annotations$30, "concatMap", (void *)&IoReactivexParallelParallelFlowable__Annotations$31, "LIoReactivexFunctionsFunction;I", "<R:Ljava/lang/Object;>(Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TR;>;>;I)Lio/reactivex/parallel/ParallelFlowable<TR;>;", (void *)&IoReactivexParallelParallelFlowable__Annotations$32, "concatMapDelayError", (void *)&IoReactivexParallelParallelFlowable__Annotations$33, "LIoReactivexFunctionsFunction;IZ", "<R:Ljava/lang/Object;>(Lio/reactivex/functions/Function<-TT;+Lorg/reactivestreams/Publisher<+TR;>;>;IZ)Lio/reactivex/parallel/ParallelFlowable<TR;>;", (void *)&IoReactivexParallelParallelFlowable__Annotations$34, "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _IoReactivexParallelParallelFlowable = { "ParallelFlowable", "io.reactivex.parallel", ptrTable, methods, NULL, 7, 0x401, 39, 0, -1, -1, -1, 115, -1 };
  return &_IoReactivexParallelParallelFlowable;
}

@end

void IoReactivexParallelParallelFlowable_init(IoReactivexParallelParallelFlowable *self) {
  NSObject_init(self);
}

IoReactivexParallelParallelFlowable *IoReactivexParallelParallelFlowable_fromWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> source) {
  IoReactivexParallelParallelFlowable_initialize();
  return IoReactivexParallelParallelFlowable_fromWithOrgReactivestreamsPublisher_withInt_withInt_(source, [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) availableProcessors], IoReactivexFlowable_bufferSize());
}

IoReactivexParallelParallelFlowable *IoReactivexParallelParallelFlowable_fromWithOrgReactivestreamsPublisher_withInt_(id<OrgReactivestreamsPublisher> source, jint parallelism) {
  IoReactivexParallelParallelFlowable_initialize();
  return IoReactivexParallelParallelFlowable_fromWithOrgReactivestreamsPublisher_withInt_withInt_(source, parallelism, IoReactivexFlowable_bufferSize());
}

IoReactivexParallelParallelFlowable *IoReactivexParallelParallelFlowable_fromWithOrgReactivestreamsPublisher_withInt_withInt_(id<OrgReactivestreamsPublisher> source, jint parallelism, jint prefetch) {
  IoReactivexParallelParallelFlowable_initialize();
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(source, @"source");
  IoReactivexInternalFunctionsObjectHelper_verifyPositiveWithInt_withNSString_(parallelism, @"parallelism");
  IoReactivexInternalFunctionsObjectHelper_verifyPositiveWithInt_withNSString_(prefetch, @"prefetch");
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexParallelParallelFlowable_(create_IoReactivexInternalOperatorsParallelParallelFromPublisher_initWithOrgReactivestreamsPublisher_withInt_withInt_(source, parallelism, prefetch));
}

IoReactivexParallelParallelFlowable *IoReactivexParallelParallelFlowable_mapWithIoReactivexFunctionsFunction_(IoReactivexParallelParallelFlowable *self, id<IoReactivexFunctionsFunction> mapper) {
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(mapper, @"mapper");
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexParallelParallelFlowable_(create_IoReactivexInternalOperatorsParallelParallelMap_initWithIoReactivexParallelParallelFlowable_withIoReactivexFunctionsFunction_(self, mapper));
}

IoReactivexParallelParallelFlowable *IoReactivexParallelParallelFlowable_runOnWithIoReactivexScheduler_withInt_(IoReactivexParallelParallelFlowable *self, IoReactivexScheduler *scheduler, jint prefetch) {
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(scheduler, @"scheduler");
  IoReactivexInternalFunctionsObjectHelper_verifyPositiveWithInt_withNSString_(prefetch, @"prefetch");
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexParallelParallelFlowable_(create_IoReactivexInternalOperatorsParallelParallelRunOn_initWithIoReactivexParallelParallelFlowable_withIoReactivexScheduler_withInt_(self, scheduler, prefetch));
}

IoReactivexFlowable *IoReactivexParallelParallelFlowable_reduceWithIoReactivexFunctionsBiFunction_(IoReactivexParallelParallelFlowable *self, id<IoReactivexFunctionsBiFunction> reducer) {
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(reducer, @"reducer");
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexFlowable_(create_IoReactivexInternalOperatorsParallelParallelReduceFull_initWithIoReactivexParallelParallelFlowable_withIoReactivexFunctionsBiFunction_(self, reducer));
}

IoReactivexParallelParallelFlowable *IoReactivexParallelParallelFlowable_reduceWithJavaUtilConcurrentCallable_withIoReactivexFunctionsBiFunction_(IoReactivexParallelParallelFlowable *self, id<JavaUtilConcurrentCallable> initialSupplier, id<IoReactivexFunctionsBiFunction> reducer) {
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(initialSupplier, @"initialSupplier");
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(reducer, @"reducer");
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexParallelParallelFlowable_(create_IoReactivexInternalOperatorsParallelParallelReduce_initWithIoReactivexParallelParallelFlowable_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiFunction_(self, initialSupplier, reducer));
}

IoReactivexFlowable *IoReactivexParallelParallelFlowable_sequentialWithInt_(IoReactivexParallelParallelFlowable *self, jint prefetch) {
  IoReactivexInternalFunctionsObjectHelper_verifyPositiveWithInt_withNSString_(prefetch, @"prefetch");
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexFlowable_(create_IoReactivexInternalOperatorsParallelParallelJoin_initWithIoReactivexParallelParallelFlowable_withInt_(self, prefetch));
}

IoReactivexFlowable *IoReactivexParallelParallelFlowable_sortedWithJavaUtilComparator_withInt_(IoReactivexParallelParallelFlowable *self, id<JavaUtilComparator> comparator, jint capacityHint) {
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(comparator, @"comparator is null");
  IoReactivexInternalFunctionsObjectHelper_verifyPositiveWithInt_withNSString_(capacityHint, @"capacityHint");
  jint ch = capacityHint / [self parallelism] + 1;
  IoReactivexParallelParallelFlowable *railReduced = IoReactivexParallelParallelFlowable_reduceWithJavaUtilConcurrentCallable_withIoReactivexFunctionsBiFunction_(self, IoReactivexInternalFunctionsFunctions_createArrayListWithInt_(ch), IoReactivexInternalUtilListAddBiConsumer_instance());
  IoReactivexParallelParallelFlowable *railSorted = IoReactivexParallelParallelFlowable_mapWithIoReactivexFunctionsFunction_(nil_chk(railReduced), create_IoReactivexInternalUtilSorterFunction_initWithJavaUtilComparator_(comparator));
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexFlowable_(create_IoReactivexInternalOperatorsParallelParallelSortedJoin_initWithIoReactivexParallelParallelFlowable_withJavaUtilComparator_(railSorted, comparator));
}

IoReactivexFlowable *IoReactivexParallelParallelFlowable_toSortedListWithJavaUtilComparator_withInt_(IoReactivexParallelParallelFlowable *self, id<JavaUtilComparator> comparator, jint capacityHint) {
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(comparator, @"comparator is null");
  IoReactivexInternalFunctionsObjectHelper_verifyPositiveWithInt_withNSString_(capacityHint, @"capacityHint");
  jint ch = capacityHint / [self parallelism] + 1;
  IoReactivexParallelParallelFlowable *railReduced = IoReactivexParallelParallelFlowable_reduceWithJavaUtilConcurrentCallable_withIoReactivexFunctionsBiFunction_(self, IoReactivexInternalFunctionsFunctions_createArrayListWithInt_(ch), IoReactivexInternalUtilListAddBiConsumer_instance());
  IoReactivexParallelParallelFlowable *railSorted = IoReactivexParallelParallelFlowable_mapWithIoReactivexFunctionsFunction_(nil_chk(railReduced), create_IoReactivexInternalUtilSorterFunction_initWithJavaUtilComparator_(comparator));
  IoReactivexFlowable *merged = IoReactivexParallelParallelFlowable_reduceWithIoReactivexFunctionsBiFunction_(nil_chk(railSorted), create_IoReactivexInternalUtilMergerBiFunction_initWithJavaUtilComparator_(comparator));
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexFlowable_(merged);
}

IoReactivexParallelParallelFlowable *IoReactivexParallelParallelFlowable_fromArrayWithOrgReactivestreamsPublisherArray_(IOSObjectArray *publishers) {
  IoReactivexParallelParallelFlowable_initialize();
  if (((IOSObjectArray *) nil_chk(publishers))->size_ == 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Zero publishers not supported");
  }
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexParallelParallelFlowable_(create_IoReactivexInternalOperatorsParallelParallelFromArray_initWithOrgReactivestreamsPublisherArray_(publishers));
}

id IoReactivexParallelParallelFlowable_toWithIoReactivexFunctionsFunction_(IoReactivexParallelParallelFlowable *self, id<IoReactivexFunctionsFunction> converter) {
  @try {
    return [((id<IoReactivexFunctionsFunction>) nil_chk(converter)) applyWithId:self];
  }
  @catch (NSException *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(ex);
    @throw IoReactivexInternalUtilExceptionHelper_wrapOrThrowWithNSException_(ex);
  }
}

IoReactivexParallelParallelFlowable *IoReactivexParallelParallelFlowable_flatMapWithIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(IoReactivexParallelParallelFlowable *self, id<IoReactivexFunctionsFunction> mapper, jboolean delayError, jint maxConcurrency, jint prefetch) {
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(mapper, @"mapper is null");
  IoReactivexInternalFunctionsObjectHelper_verifyPositiveWithInt_withNSString_(maxConcurrency, @"maxConcurrency");
  IoReactivexInternalFunctionsObjectHelper_verifyPositiveWithInt_withNSString_(prefetch, @"prefetch");
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexParallelParallelFlowable_(create_IoReactivexInternalOperatorsParallelParallelFlatMap_initWithIoReactivexParallelParallelFlowable_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(self, mapper, delayError, maxConcurrency, prefetch));
}

IoReactivexParallelParallelFlowable *IoReactivexParallelParallelFlowable_concatMapWithIoReactivexFunctionsFunction_withInt_(IoReactivexParallelParallelFlowable *self, id<IoReactivexFunctionsFunction> mapper, jint prefetch) {
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(mapper, @"mapper is null");
  IoReactivexInternalFunctionsObjectHelper_verifyPositiveWithInt_withNSString_(prefetch, @"prefetch");
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexParallelParallelFlowable_(create_IoReactivexInternalOperatorsParallelParallelConcatMap_initWithIoReactivexParallelParallelFlowable_withIoReactivexFunctionsFunction_withInt_withIoReactivexInternalUtilErrorMode_(self, mapper, prefetch, JreLoadEnum(IoReactivexInternalUtilErrorMode, IMMEDIATE)));
}

IoReactivexParallelParallelFlowable *IoReactivexParallelParallelFlowable_concatMapDelayErrorWithIoReactivexFunctionsFunction_withInt_withBoolean_(IoReactivexParallelParallelFlowable *self, id<IoReactivexFunctionsFunction> mapper, jint prefetch, jboolean tillTheEnd) {
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(mapper, @"mapper is null");
  IoReactivexInternalFunctionsObjectHelper_verifyPositiveWithInt_withNSString_(prefetch, @"prefetch");
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexParallelParallelFlowable_(create_IoReactivexInternalOperatorsParallelParallelConcatMap_initWithIoReactivexParallelParallelFlowable_withIoReactivexFunctionsFunction_withInt_withIoReactivexInternalUtilErrorMode_(self, mapper, prefetch, tillTheEnd ? JreLoadEnum(IoReactivexInternalUtilErrorMode, END) : JreLoadEnum(IoReactivexInternalUtilErrorMode, BOUNDARY)));
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$7() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$8() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$9() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsBackpressureSupport(JreLoadEnum(IoReactivexAnnotationsBackpressureKind, FULL)), create_IoReactivexAnnotationsSchedulerSupport(@"none"), create_IoReactivexAnnotationsCheckReturnValue() } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$10() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsBackpressureSupport(JreLoadEnum(IoReactivexAnnotationsBackpressureKind, FULL)), create_IoReactivexAnnotationsSchedulerSupport(@"none"), create_IoReactivexAnnotationsCheckReturnValue() } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$11() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$12() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$13() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$14() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$15() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$16() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$17() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$18() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$19() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$20() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$21() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$22() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$23() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$24() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$25() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$26() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$27() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$28() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$29() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$30() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$31() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$32() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$33() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexParallelParallelFlowable__Annotations$34() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexParallelParallelFlowable)
