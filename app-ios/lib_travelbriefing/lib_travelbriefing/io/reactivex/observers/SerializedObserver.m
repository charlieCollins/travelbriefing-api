//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/observers/SerializedObserver.java
//

#include "J2ObjC_source.h"
#include "io/reactivex/Observer.h"
#include "io/reactivex/disposables/Disposable.h"
#include "io/reactivex/internal/disposables/DisposableHelper.h"
#include "io/reactivex/internal/util/AppendOnlyLinkedArrayList.h"
#include "io/reactivex/internal/util/NotificationLite.h"
#include "io/reactivex/observers/SerializedObserver.h"
#include "io/reactivex/plugins/RxJavaPlugins.h"
#include "java/lang/NullPointerException.h"

@implementation IoReactivexObserversSerializedObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual {
  IoReactivexObserversSerializedObserver_initWithIoReactivexObserver_(self, actual);
  return self;
}

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                withBoolean:(jboolean)delayError {
  IoReactivexObserversSerializedObserver_initWithIoReactivexObserver_withBoolean_(self, actual, delayError);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
  }
}

- (void)dispose {
  [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
}

- (jboolean)isDisposed {
  return [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) isDisposed];
}

- (void)onNextWithId:(id)t {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  if (t == nil) {
    [((id<IoReactivexDisposablesDisposable>) nil_chk(s_)) dispose];
    [self onErrorWithNSException:create_JavaLangNullPointerException_initWithNSString_(@"onNext called with null. Null values are generally not allowed in 2.x operators and sources.")];
    return;
  }
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&done_)) {
      return;
    }
    if (emitting_) {
      IoReactivexInternalUtilAppendOnlyLinkedArrayList *q = queue_;
      if (q == nil) {
        q = create_IoReactivexInternalUtilAppendOnlyLinkedArrayList_initWithInt_(IoReactivexObserversSerializedObserver_QUEUE_LINK_SIZE);
        JreStrongAssign(&queue_, q);
      }
      [q addWithId:IoReactivexInternalUtilNotificationLite_nextWithId_(t)];
      return;
    }
    emitting_ = true;
  }
  [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:t];
  [self emitLoop];
}

- (void)onErrorWithNSException:(NSException *)t {
  if (JreLoadVolatileBoolean(&done_)) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_(t);
    return;
  }
  jboolean reportError;
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&done_)) {
      reportError = true;
    }
    else if (emitting_) {
      JreAssignVolatileBoolean(&done_, true);
      IoReactivexInternalUtilAppendOnlyLinkedArrayList *q = queue_;
      if (q == nil) {
        q = create_IoReactivexInternalUtilAppendOnlyLinkedArrayList_initWithInt_(IoReactivexObserversSerializedObserver_QUEUE_LINK_SIZE);
        JreStrongAssign(&queue_, q);
      }
      id err = IoReactivexInternalUtilNotificationLite_errorWithNSException_(t);
      if (delayError_) {
        [q addWithId:err];
      }
      else {
        [q setFirstWithId:err];
      }
      return;
    }
    else {
      JreAssignVolatileBoolean(&done_, true);
      emitting_ = true;
      reportError = false;
    }
  }
  if (reportError) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_(t);
    return;
  }
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithNSException:t];
}

- (void)onComplete {
  if (JreLoadVolatileBoolean(&done_)) {
    return;
  }
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&done_)) {
      return;
    }
    if (emitting_) {
      IoReactivexInternalUtilAppendOnlyLinkedArrayList *q = queue_;
      if (q == nil) {
        q = create_IoReactivexInternalUtilAppendOnlyLinkedArrayList_initWithInt_(IoReactivexObserversSerializedObserver_QUEUE_LINK_SIZE);
        JreStrongAssign(&queue_, q);
      }
      [q addWithId:IoReactivexInternalUtilNotificationLite_complete()];
      return;
    }
    JreAssignVolatileBoolean(&done_, true);
    emitting_ = true;
  }
  [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
}

- (void)emitLoop {
  for (; ; ) {
    IoReactivexInternalUtilAppendOnlyLinkedArrayList *q;
    @synchronized(self) {
      q = queue_;
      if (q == nil) {
        emitting_ = false;
        return;
      }
      JreStrongAssign(&queue_, nil);
    }
    if ([q acceptWithIoReactivexObserver:actual_]) {
      return;
    }
  }
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(s_);
  RELEASE_(queue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:);
  methods[1].selector = @selector(initWithIoReactivexObserver:withBoolean:);
  methods[2].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[3].selector = @selector(dispose);
  methods[4].selector = @selector(isDisposed);
  methods[5].selector = @selector(onNextWithId:);
  methods[6].selector = @selector(onErrorWithNSException:);
  methods[7].selector = @selector(onComplete);
  methods[8].selector = @selector(emitLoop);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "delayError_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "QUEUE_LINK_SIZE", "I", .constantValue.asInt = IoReactivexObserversSerializedObserver_QUEUE_LINK_SIZE, 0x18, -1, -1, -1, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "emitting_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "queue_", "LIoReactivexInternalUtilAppendOnlyLinkedArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 12, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "LIoReactivexObserver;Z", "(Lio/reactivex/Observer<-TT;>;Z)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "Lio/reactivex/Observer<-TT;>;", "Lio/reactivex/internal/util/AppendOnlyLinkedArrayList<Ljava/lang/Object;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexObserversSerializedObserver = { "SerializedObserver", "io.reactivex.observers", ptrTable, methods, fields, 7, 0x11, 9, 7, -1, -1, -1, 13, -1 };
  return &_IoReactivexObserversSerializedObserver;
}

@end

void IoReactivexObserversSerializedObserver_initWithIoReactivexObserver_(IoReactivexObserversSerializedObserver *self, id<IoReactivexObserver> actual) {
  IoReactivexObserversSerializedObserver_initWithIoReactivexObserver_withBoolean_(self, actual, false);
}

IoReactivexObserversSerializedObserver *new_IoReactivexObserversSerializedObserver_initWithIoReactivexObserver_(id<IoReactivexObserver> actual) {
  J2OBJC_NEW_IMPL(IoReactivexObserversSerializedObserver, initWithIoReactivexObserver_, actual)
}

IoReactivexObserversSerializedObserver *create_IoReactivexObserversSerializedObserver_initWithIoReactivexObserver_(id<IoReactivexObserver> actual) {
  J2OBJC_CREATE_IMPL(IoReactivexObserversSerializedObserver, initWithIoReactivexObserver_, actual)
}

void IoReactivexObserversSerializedObserver_initWithIoReactivexObserver_withBoolean_(IoReactivexObserversSerializedObserver *self, id<IoReactivexObserver> actual, jboolean delayError) {
  NSObject_init(self);
  JreStrongAssign(&self->actual_, actual);
  self->delayError_ = delayError;
}

IoReactivexObserversSerializedObserver *new_IoReactivexObserversSerializedObserver_initWithIoReactivexObserver_withBoolean_(id<IoReactivexObserver> actual, jboolean delayError) {
  J2OBJC_NEW_IMPL(IoReactivexObserversSerializedObserver, initWithIoReactivexObserver_withBoolean_, actual, delayError)
}

IoReactivexObserversSerializedObserver *create_IoReactivexObserversSerializedObserver_initWithIoReactivexObserver_withBoolean_(id<IoReactivexObserver> actual, jboolean delayError) {
  J2OBJC_CREATE_IMPL(IoReactivexObserversSerializedObserver, initWithIoReactivexObserver_withBoolean_, actual, delayError)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexObserversSerializedObserver)
