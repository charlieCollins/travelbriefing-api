//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/observers/ResourceObserver.java
//

#include "J2ObjC_source.h"
#include "io/reactivex/disposables/Disposable.h"
#include "io/reactivex/internal/disposables/DisposableHelper.h"
#include "io/reactivex/internal/disposables/ListCompositeDisposable.h"
#include "io/reactivex/internal/functions/ObjectHelper.h"
#include "io/reactivex/observers/ResourceObserver.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface IoReactivexObserversResourceObserver () {
 @public
  JavaUtilConcurrentAtomicAtomicReference *s_;
  IoReactivexInternalDisposablesListCompositeDisposable *resources_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexObserversResourceObserver, s_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexObserversResourceObserver, resources_, IoReactivexInternalDisposablesListCompositeDisposable *)

@implementation IoReactivexObserversResourceObserver

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexObserversResourceObserver_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)resource {
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(resource, @"resource is null");
  [((IoReactivexInternalDisposablesListCompositeDisposable *) nil_chk(resources_)) addWithIoReactivexDisposablesDisposable:resource];
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    [self onStart];
  }
}

- (void)onStart {
}

- (void)dispose {
  if (IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(s_)) {
    [((IoReactivexInternalDisposablesListCompositeDisposable *) nil_chk(resources_)) dispose];
  }
}

- (jboolean)isDisposed {
  return IoReactivexInternalDisposablesDisposableHelper_isDisposedWithIoReactivexDisposablesDisposable_([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(s_)) get]);
}

- (void)dealloc {
  RELEASE_(s_);
  RELEASE_(resources_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[3].selector = @selector(onStart);
  methods[4].selector = @selector(dispose);
  methods[5].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "s_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
    { "resources_", "LIoReactivexInternalDisposablesListCompositeDisposable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "add", "LIoReactivexDisposablesDisposable;", "onSubscribe", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexObserversResourceObserver = { "ResourceObserver", "io.reactivex.observers", ptrTable, methods, fields, 7, 0x401, 6, 2, -1, -1, -1, 4, -1 };
  return &_IoReactivexObserversResourceObserver;
}

@end

void IoReactivexObserversResourceObserver_init(IoReactivexObserversResourceObserver *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->s_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssignAndConsume(&self->resources_, new_IoReactivexInternalDisposablesListCompositeDisposable_init());
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexObserversResourceObserver)
