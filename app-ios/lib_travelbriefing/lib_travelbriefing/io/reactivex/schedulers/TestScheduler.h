//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/schedulers/TestScheduler.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexSchedulersTestScheduler")
#ifdef RESTRICT_IoReactivexSchedulersTestScheduler
#define INCLUDE_ALL_IoReactivexSchedulersTestScheduler 0
#else
#define INCLUDE_ALL_IoReactivexSchedulersTestScheduler 1
#endif
#undef RESTRICT_IoReactivexSchedulersTestScheduler

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoReactivexSchedulersTestScheduler_) && (INCLUDE_ALL_IoReactivexSchedulersTestScheduler || defined(INCLUDE_IoReactivexSchedulersTestScheduler))
#define IoReactivexSchedulersTestScheduler_

#define RESTRICT_IoReactivexScheduler 1
#define INCLUDE_IoReactivexScheduler 1
#include "io/reactivex/Scheduler.h"

@class IoReactivexScheduler_Worker;
@class JavaUtilConcurrentTimeUnit;
@protocol JavaUtilQueue;

@interface IoReactivexSchedulersTestScheduler : IoReactivexScheduler {
 @public
  id<JavaUtilQueue> queue_;
  jlong counter_;
  volatile_jlong time_;
}

#pragma mark Public

- (instancetype)init;

- (void)advanceTimeByWithLong:(jlong)delayTime
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (void)advanceTimeToWithLong:(jlong)delayTime
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (IoReactivexScheduler_Worker *)createWorker;

- (jlong)nowWithJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (void)triggerActions;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexSchedulersTestScheduler)

J2OBJC_FIELD_SETTER(IoReactivexSchedulersTestScheduler, queue_, id<JavaUtilQueue>)

FOUNDATION_EXPORT void IoReactivexSchedulersTestScheduler_init(IoReactivexSchedulersTestScheduler *self);

FOUNDATION_EXPORT IoReactivexSchedulersTestScheduler *new_IoReactivexSchedulersTestScheduler_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexSchedulersTestScheduler *create_IoReactivexSchedulersTestScheduler_init();

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexSchedulersTestScheduler)

#endif

#if !defined (IoReactivexSchedulersTestScheduler_TimedRunnable_) && (INCLUDE_ALL_IoReactivexSchedulersTestScheduler || defined(INCLUDE_IoReactivexSchedulersTestScheduler_TimedRunnable))
#define IoReactivexSchedulersTestScheduler_TimedRunnable_

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

@class IoReactivexSchedulersTestScheduler_TestWorker;
@protocol JavaLangRunnable;

@interface IoReactivexSchedulersTestScheduler_TimedRunnable : NSObject < JavaLangComparable > {
 @public
  jlong time_;
  id<JavaLangRunnable> run_;
  IoReactivexSchedulersTestScheduler_TestWorker *scheduler_;
  jlong count_;
}

#pragma mark Public

- (jint)compareToWithId:(IoReactivexSchedulersTestScheduler_TimedRunnable *)o;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexSchedulersTestScheduler_TestWorker:(IoReactivexSchedulersTestScheduler_TestWorker *)scheduler
                                                             withLong:(jlong)time
                                                 withJavaLangRunnable:(id<JavaLangRunnable>)run
                                                             withLong:(jlong)count;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexSchedulersTestScheduler_TimedRunnable)

J2OBJC_FIELD_SETTER(IoReactivexSchedulersTestScheduler_TimedRunnable, run_, id<JavaLangRunnable>)
J2OBJC_FIELD_SETTER(IoReactivexSchedulersTestScheduler_TimedRunnable, scheduler_, IoReactivexSchedulersTestScheduler_TestWorker *)

FOUNDATION_EXPORT void IoReactivexSchedulersTestScheduler_TimedRunnable_initWithIoReactivexSchedulersTestScheduler_TestWorker_withLong_withJavaLangRunnable_withLong_(IoReactivexSchedulersTestScheduler_TimedRunnable *self, IoReactivexSchedulersTestScheduler_TestWorker *scheduler, jlong time, id<JavaLangRunnable> run, jlong count);

FOUNDATION_EXPORT IoReactivexSchedulersTestScheduler_TimedRunnable *new_IoReactivexSchedulersTestScheduler_TimedRunnable_initWithIoReactivexSchedulersTestScheduler_TestWorker_withLong_withJavaLangRunnable_withLong_(IoReactivexSchedulersTestScheduler_TestWorker *scheduler, jlong time, id<JavaLangRunnable> run, jlong count) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexSchedulersTestScheduler_TimedRunnable *create_IoReactivexSchedulersTestScheduler_TimedRunnable_initWithIoReactivexSchedulersTestScheduler_TestWorker_withLong_withJavaLangRunnable_withLong_(IoReactivexSchedulersTestScheduler_TestWorker *scheduler, jlong time, id<JavaLangRunnable> run, jlong count);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexSchedulersTestScheduler_TimedRunnable)

#endif

#if !defined (IoReactivexSchedulersTestScheduler_TestWorker_) && (INCLUDE_ALL_IoReactivexSchedulersTestScheduler || defined(INCLUDE_IoReactivexSchedulersTestScheduler_TestWorker))
#define IoReactivexSchedulersTestScheduler_TestWorker_

#define RESTRICT_IoReactivexScheduler 1
#define INCLUDE_IoReactivexScheduler_Worker 1
#include "io/reactivex/Scheduler.h"

@class IoReactivexSchedulersTestScheduler;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexDisposablesDisposable;
@protocol JavaLangRunnable;

@interface IoReactivexSchedulersTestScheduler_TestWorker : IoReactivexScheduler_Worker {
 @public
  volatile_jboolean disposed_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (jlong)nowWithJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (id<IoReactivexDisposablesDisposable>)scheduleWithJavaLangRunnable:(id<JavaLangRunnable>)run;

- (id<IoReactivexDisposablesDisposable>)scheduleWithJavaLangRunnable:(id<JavaLangRunnable>)run
                                                            withLong:(jlong)delayTime
                                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexSchedulersTestScheduler:(IoReactivexSchedulersTestScheduler *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexSchedulersTestScheduler_TestWorker)

FOUNDATION_EXPORT void IoReactivexSchedulersTestScheduler_TestWorker_initWithIoReactivexSchedulersTestScheduler_(IoReactivexSchedulersTestScheduler_TestWorker *self, IoReactivexSchedulersTestScheduler *outer$);

FOUNDATION_EXPORT IoReactivexSchedulersTestScheduler_TestWorker *new_IoReactivexSchedulersTestScheduler_TestWorker_initWithIoReactivexSchedulersTestScheduler_(IoReactivexSchedulersTestScheduler *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexSchedulersTestScheduler_TestWorker *create_IoReactivexSchedulersTestScheduler_TestWorker_initWithIoReactivexSchedulersTestScheduler_(IoReactivexSchedulersTestScheduler *outer$);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexSchedulersTestScheduler_TestWorker)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoReactivexSchedulersTestScheduler")
