//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/schedulers/ExecutorScheduler.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalSchedulersExecutorScheduler")
#ifdef RESTRICT_IoReactivexInternalSchedulersExecutorScheduler
#define INCLUDE_ALL_IoReactivexInternalSchedulersExecutorScheduler 0
#else
#define INCLUDE_ALL_IoReactivexInternalSchedulersExecutorScheduler 1
#endif
#undef RESTRICT_IoReactivexInternalSchedulersExecutorScheduler

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoReactivexInternalSchedulersExecutorScheduler_) && (INCLUDE_ALL_IoReactivexInternalSchedulersExecutorScheduler || defined(INCLUDE_IoReactivexInternalSchedulersExecutorScheduler))
#define IoReactivexInternalSchedulersExecutorScheduler_

#define RESTRICT_IoReactivexScheduler 1
#define INCLUDE_IoReactivexScheduler 1
#include "io/reactivex/Scheduler.h"

@class IoReactivexScheduler_Worker;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexDisposablesDisposable;
@protocol JavaLangRunnable;
@protocol JavaUtilConcurrentExecutor;

@interface IoReactivexInternalSchedulersExecutorScheduler : IoReactivexScheduler {
 @public
  id<JavaUtilConcurrentExecutor> executor_;
}

#pragma mark Public

- (instancetype)initWithJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

- (IoReactivexScheduler_Worker *)createWorker;

- (id<IoReactivexDisposablesDisposable>)scheduleDirectWithJavaLangRunnable:(id<JavaLangRunnable>)run;

- (id<IoReactivexDisposablesDisposable>)scheduleDirectWithJavaLangRunnable:(id<JavaLangRunnable>)run
                                                                  withLong:(jlong)delay
                                            withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

- (id<IoReactivexDisposablesDisposable>)schedulePeriodicallyDirectWithJavaLangRunnable:(id<JavaLangRunnable>)run
                                                                              withLong:(jlong)initialDelay
                                                                              withLong:(jlong)period
                                                        withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

@end

J2OBJC_STATIC_INIT(IoReactivexInternalSchedulersExecutorScheduler)

J2OBJC_FIELD_SETTER(IoReactivexInternalSchedulersExecutorScheduler, executor_, id<JavaUtilConcurrentExecutor>)

inline IoReactivexScheduler *IoReactivexInternalSchedulersExecutorScheduler_get_HELPER();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IoReactivexScheduler *IoReactivexInternalSchedulersExecutorScheduler_HELPER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalSchedulersExecutorScheduler, HELPER, IoReactivexScheduler *)

FOUNDATION_EXPORT void IoReactivexInternalSchedulersExecutorScheduler_initWithJavaUtilConcurrentExecutor_(IoReactivexInternalSchedulersExecutorScheduler *self, id<JavaUtilConcurrentExecutor> executor);

FOUNDATION_EXPORT IoReactivexInternalSchedulersExecutorScheduler *new_IoReactivexInternalSchedulersExecutorScheduler_initWithJavaUtilConcurrentExecutor_(id<JavaUtilConcurrentExecutor> executor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalSchedulersExecutorScheduler *create_IoReactivexInternalSchedulersExecutorScheduler_initWithJavaUtilConcurrentExecutor_(id<JavaUtilConcurrentExecutor> executor);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalSchedulersExecutorScheduler)

#endif

#if !defined (IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_) && (INCLUDE_ALL_IoReactivexInternalSchedulersExecutorScheduler || defined(INCLUDE_IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker))
#define IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_

#define RESTRICT_IoReactivexScheduler 1
#define INCLUDE_IoReactivexScheduler_Worker 1
#include "io/reactivex/Scheduler.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IoReactivexDisposablesCompositeDisposable;
@class IoReactivexInternalQueueMpscLinkedQueue;
@class JavaUtilConcurrentAtomicAtomicInteger;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexDisposablesDisposable;
@protocol JavaUtilConcurrentExecutor;

@interface IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker : IoReactivexScheduler_Worker < JavaLangRunnable > {
 @public
  id<JavaUtilConcurrentExecutor> executor_;
  IoReactivexInternalQueueMpscLinkedQueue *queue_;
  volatile_jboolean disposed_;
  JavaUtilConcurrentAtomicAtomicInteger *wip_;
  IoReactivexDisposablesCompositeDisposable *tasks_;
}

#pragma mark Public

- (instancetype)initWithJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor;

- (void)dispose;

- (jboolean)isDisposed;

- (void)run;

- (id<IoReactivexDisposablesDisposable>)scheduleWithJavaLangRunnable:(id<JavaLangRunnable>)run;

- (id<IoReactivexDisposablesDisposable>)scheduleWithJavaLangRunnable:(id<JavaLangRunnable>)run
                                                            withLong:(jlong)delay
                                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker)

J2OBJC_FIELD_SETTER(IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker, executor_, id<JavaUtilConcurrentExecutor>)
J2OBJC_FIELD_SETTER(IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker, queue_, IoReactivexInternalQueueMpscLinkedQueue *)
J2OBJC_FIELD_SETTER(IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker, wip_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker, tasks_, IoReactivexDisposablesCompositeDisposable *)

FOUNDATION_EXPORT void IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_initWithJavaUtilConcurrentExecutor_(IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker *self, id<JavaUtilConcurrentExecutor> executor);

FOUNDATION_EXPORT IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker *new_IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_initWithJavaUtilConcurrentExecutor_(id<JavaUtilConcurrentExecutor> executor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker *create_IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_initWithJavaUtilConcurrentExecutor_(id<JavaUtilConcurrentExecutor> executor);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker)

#endif

#if !defined (IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_BooleanRunnable_) && (INCLUDE_ALL_IoReactivexInternalSchedulersExecutorScheduler || defined(INCLUDE_IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_BooleanRunnable))
#define IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_BooleanRunnable_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicBoolean 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicBoolean 1
#include "java/util/concurrent/atomic/AtomicBoolean.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "io/reactivex/disposables/Disposable.h"

@interface IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_BooleanRunnable : JavaUtilConcurrentAtomicAtomicBoolean < JavaLangRunnable, IoReactivexDisposablesDisposable > {
 @public
  id<JavaLangRunnable> actual_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)actual;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_BooleanRunnable)

J2OBJC_FIELD_SETTER(IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_BooleanRunnable, actual_, id<JavaLangRunnable>)

FOUNDATION_EXPORT void IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_BooleanRunnable_initWithJavaLangRunnable_(IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_BooleanRunnable *self, id<JavaLangRunnable> actual);

FOUNDATION_EXPORT IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_BooleanRunnable *new_IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_BooleanRunnable_initWithJavaLangRunnable_(id<JavaLangRunnable> actual) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_BooleanRunnable *create_IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_BooleanRunnable_initWithJavaLangRunnable_(id<JavaLangRunnable> actual);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalSchedulersExecutorScheduler_ExecutorWorker_BooleanRunnable)

#endif

#if !defined (IoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable_) && (INCLUDE_ALL_IoReactivexInternalSchedulersExecutorScheduler || defined(INCLUDE_IoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable))
#define IoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "io/reactivex/disposables/Disposable.h"

@class IoReactivexInternalDisposablesSequentialDisposable;

@interface IoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable : JavaUtilConcurrentAtomicAtomicReference < JavaLangRunnable, IoReactivexDisposablesDisposable > {
 @public
  IoReactivexInternalDisposablesSequentialDisposable *timed_;
  IoReactivexInternalDisposablesSequentialDisposable *direct_;
}

#pragma mark Public

- (void)dispose;

- (id<JavaLangRunnable>)get;

- (id<JavaLangRunnable>)getAndSetWithId:(id<JavaLangRunnable>)arg0;

- (jboolean)isDisposed;

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)run;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable)

J2OBJC_FIELD_SETTER(IoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable, timed_, IoReactivexInternalDisposablesSequentialDisposable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable, direct_, IoReactivexInternalDisposablesSequentialDisposable *)

FOUNDATION_EXPORT void IoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable_initWithJavaLangRunnable_(IoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable *self, id<JavaLangRunnable> run);

FOUNDATION_EXPORT IoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable *new_IoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable_initWithJavaLangRunnable_(id<JavaLangRunnable> run) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable *create_IoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable_initWithJavaLangRunnable_(id<JavaLangRunnable> run);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalSchedulersExecutorScheduler_DelayedRunnable)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalSchedulersExecutorScheduler")
