//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/schedulers/TrampolineScheduler.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalSchedulersTrampolineScheduler")
#ifdef RESTRICT_IoReactivexInternalSchedulersTrampolineScheduler
#define INCLUDE_ALL_IoReactivexInternalSchedulersTrampolineScheduler 0
#else
#define INCLUDE_ALL_IoReactivexInternalSchedulersTrampolineScheduler 1
#endif
#undef RESTRICT_IoReactivexInternalSchedulersTrampolineScheduler

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoReactivexInternalSchedulersTrampolineScheduler_) && (INCLUDE_ALL_IoReactivexInternalSchedulersTrampolineScheduler || defined(INCLUDE_IoReactivexInternalSchedulersTrampolineScheduler))
#define IoReactivexInternalSchedulersTrampolineScheduler_

#define RESTRICT_IoReactivexScheduler 1
#define INCLUDE_IoReactivexScheduler 1
#include "io/reactivex/Scheduler.h"

@class IoReactivexScheduler_Worker;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexDisposablesDisposable;
@protocol JavaLangRunnable;

@interface IoReactivexInternalSchedulersTrampolineScheduler : IoReactivexScheduler

#pragma mark Public

- (IoReactivexScheduler_Worker *)createWorker;

+ (IoReactivexInternalSchedulersTrampolineScheduler *)instance;

- (id<IoReactivexDisposablesDisposable>)scheduleDirectWithJavaLangRunnable:(id<JavaLangRunnable>)run;

- (id<IoReactivexDisposablesDisposable>)scheduleDirectWithJavaLangRunnable:(id<JavaLangRunnable>)run
                                                                  withLong:(jlong)delay
                                            withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_STATIC_INIT(IoReactivexInternalSchedulersTrampolineScheduler)

FOUNDATION_EXPORT IoReactivexInternalSchedulersTrampolineScheduler *IoReactivexInternalSchedulersTrampolineScheduler_instance();

FOUNDATION_EXPORT void IoReactivexInternalSchedulersTrampolineScheduler_init(IoReactivexInternalSchedulersTrampolineScheduler *self);

FOUNDATION_EXPORT IoReactivexInternalSchedulersTrampolineScheduler *new_IoReactivexInternalSchedulersTrampolineScheduler_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalSchedulersTrampolineScheduler *create_IoReactivexInternalSchedulersTrampolineScheduler_init();

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalSchedulersTrampolineScheduler)

#endif

#if !defined (IoReactivexInternalSchedulersTrampolineScheduler_TrampolineWorker_) && (INCLUDE_ALL_IoReactivexInternalSchedulersTrampolineScheduler || defined(INCLUDE_IoReactivexInternalSchedulersTrampolineScheduler_TrampolineWorker))
#define IoReactivexInternalSchedulersTrampolineScheduler_TrampolineWorker_

#define RESTRICT_IoReactivexScheduler 1
#define INCLUDE_IoReactivexScheduler_Worker 1
#include "io/reactivex/Scheduler.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "io/reactivex/disposables/Disposable.h"

@class JavaUtilConcurrentAtomicAtomicInteger;
@class JavaUtilConcurrentPriorityBlockingQueue;
@class JavaUtilConcurrentTimeUnit;
@protocol JavaLangRunnable;

@interface IoReactivexInternalSchedulersTrampolineScheduler_TrampolineWorker : IoReactivexScheduler_Worker < IoReactivexDisposablesDisposable > {
 @public
  JavaUtilConcurrentPriorityBlockingQueue *queue_;
  JavaUtilConcurrentAtomicAtomicInteger *counter_;
  volatile_jboolean disposed_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (id<IoReactivexDisposablesDisposable>)scheduleWithJavaLangRunnable:(id<JavaLangRunnable>)action;

- (id<IoReactivexDisposablesDisposable>)scheduleWithJavaLangRunnable:(id<JavaLangRunnable>)action
                                                            withLong:(jlong)delayTime
                                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit;

#pragma mark Package-Private

- (instancetype)init;

- (id<IoReactivexDisposablesDisposable>)enqueueWithJavaLangRunnable:(id<JavaLangRunnable>)action
                                                           withLong:(jlong)execTime;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalSchedulersTrampolineScheduler_TrampolineWorker)

J2OBJC_FIELD_SETTER(IoReactivexInternalSchedulersTrampolineScheduler_TrampolineWorker, queue_, JavaUtilConcurrentPriorityBlockingQueue *)
J2OBJC_FIELD_SETTER(IoReactivexInternalSchedulersTrampolineScheduler_TrampolineWorker, counter_, JavaUtilConcurrentAtomicAtomicInteger *)

FOUNDATION_EXPORT void IoReactivexInternalSchedulersTrampolineScheduler_TrampolineWorker_init(IoReactivexInternalSchedulersTrampolineScheduler_TrampolineWorker *self);

FOUNDATION_EXPORT IoReactivexInternalSchedulersTrampolineScheduler_TrampolineWorker *new_IoReactivexInternalSchedulersTrampolineScheduler_TrampolineWorker_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalSchedulersTrampolineScheduler_TrampolineWorker *create_IoReactivexInternalSchedulersTrampolineScheduler_TrampolineWorker_init();

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalSchedulersTrampolineScheduler_TrampolineWorker)

#endif

#if !defined (IoReactivexInternalSchedulersTrampolineScheduler_TimedRunnable_) && (INCLUDE_ALL_IoReactivexInternalSchedulersTrampolineScheduler || defined(INCLUDE_IoReactivexInternalSchedulersTrampolineScheduler_TimedRunnable))
#define IoReactivexInternalSchedulersTrampolineScheduler_TimedRunnable_

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

@class JavaLangLong;
@protocol JavaLangRunnable;

@interface IoReactivexInternalSchedulersTrampolineScheduler_TimedRunnable : NSObject < JavaLangComparable > {
 @public
  id<JavaLangRunnable> run_;
  jlong execTime_;
  jint count_;
  volatile_jboolean disposed_;
}

#pragma mark Public

- (jint)compareToWithId:(IoReactivexInternalSchedulersTrampolineScheduler_TimedRunnable *)that;

#pragma mark Package-Private

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)run
                        withJavaLangLong:(JavaLangLong *)execTime
                                 withInt:(jint)count;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalSchedulersTrampolineScheduler_TimedRunnable)

J2OBJC_FIELD_SETTER(IoReactivexInternalSchedulersTrampolineScheduler_TimedRunnable, run_, id<JavaLangRunnable>)

FOUNDATION_EXPORT void IoReactivexInternalSchedulersTrampolineScheduler_TimedRunnable_initWithJavaLangRunnable_withJavaLangLong_withInt_(IoReactivexInternalSchedulersTrampolineScheduler_TimedRunnable *self, id<JavaLangRunnable> run, JavaLangLong *execTime, jint count);

FOUNDATION_EXPORT IoReactivexInternalSchedulersTrampolineScheduler_TimedRunnable *new_IoReactivexInternalSchedulersTrampolineScheduler_TimedRunnable_initWithJavaLangRunnable_withJavaLangLong_withInt_(id<JavaLangRunnable> run, JavaLangLong *execTime, jint count) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalSchedulersTrampolineScheduler_TimedRunnable *create_IoReactivexInternalSchedulersTrampolineScheduler_TimedRunnable_initWithJavaLangRunnable_withJavaLangLong_withInt_(id<JavaLangRunnable> run, JavaLangLong *execTime, jint count);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalSchedulersTrampolineScheduler_TimedRunnable)

#endif

#if !defined (IoReactivexInternalSchedulersTrampolineScheduler_SleepingRunnable_) && (INCLUDE_ALL_IoReactivexInternalSchedulersTrampolineScheduler || defined(INCLUDE_IoReactivexInternalSchedulersTrampolineScheduler_SleepingRunnable))
#define IoReactivexInternalSchedulersTrampolineScheduler_SleepingRunnable_

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IoReactivexInternalSchedulersTrampolineScheduler_TrampolineWorker;

@interface IoReactivexInternalSchedulersTrampolineScheduler_SleepingRunnable : NSObject < JavaLangRunnable >

#pragma mark Public

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)run
withIoReactivexInternalSchedulersTrampolineScheduler_TrampolineWorker:(IoReactivexInternalSchedulersTrampolineScheduler_TrampolineWorker *)worker
                                withLong:(jlong)execTime;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalSchedulersTrampolineScheduler_SleepingRunnable)

FOUNDATION_EXPORT void IoReactivexInternalSchedulersTrampolineScheduler_SleepingRunnable_initWithJavaLangRunnable_withIoReactivexInternalSchedulersTrampolineScheduler_TrampolineWorker_withLong_(IoReactivexInternalSchedulersTrampolineScheduler_SleepingRunnable *self, id<JavaLangRunnable> run, IoReactivexInternalSchedulersTrampolineScheduler_TrampolineWorker *worker, jlong execTime);

FOUNDATION_EXPORT IoReactivexInternalSchedulersTrampolineScheduler_SleepingRunnable *new_IoReactivexInternalSchedulersTrampolineScheduler_SleepingRunnable_initWithJavaLangRunnable_withIoReactivexInternalSchedulersTrampolineScheduler_TrampolineWorker_withLong_(id<JavaLangRunnable> run, IoReactivexInternalSchedulersTrampolineScheduler_TrampolineWorker *worker, jlong execTime) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalSchedulersTrampolineScheduler_SleepingRunnable *create_IoReactivexInternalSchedulersTrampolineScheduler_SleepingRunnable_initWithJavaLangRunnable_withIoReactivexInternalSchedulersTrampolineScheduler_TrampolineWorker_withLong_(id<JavaLangRunnable> run, IoReactivexInternalSchedulersTrampolineScheduler_TrampolineWorker *worker, jlong execTime);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalSchedulersTrampolineScheduler_SleepingRunnable)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalSchedulersTrampolineScheduler")
