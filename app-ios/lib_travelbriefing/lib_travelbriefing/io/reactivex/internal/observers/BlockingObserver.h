//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/observers/BlockingObserver.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalObserversBlockingObserver")
#ifdef RESTRICT_IoReactivexInternalObserversBlockingObserver
#define INCLUDE_ALL_IoReactivexInternalObserversBlockingObserver 0
#else
#define INCLUDE_ALL_IoReactivexInternalObserversBlockingObserver 1
#endif
#undef RESTRICT_IoReactivexInternalObserversBlockingObserver

#if !defined (IoReactivexInternalObserversBlockingObserver_) && (INCLUDE_ALL_IoReactivexInternalObserversBlockingObserver || defined(INCLUDE_IoReactivexInternalObserversBlockingObserver))
#define IoReactivexInternalObserversBlockingObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "io/reactivex/Observer.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "io/reactivex/disposables/Disposable.h"

@protocol JavaUtilQueue;

@interface IoReactivexInternalObserversBlockingObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexObserver, IoReactivexDisposablesDisposable > {
 @public
  id<JavaUtilQueue> queue_;
}

#pragma mark Public

- (instancetype)initWithJavaUtilQueue:(id<JavaUtilQueue>)queue;

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

@end

J2OBJC_STATIC_INIT(IoReactivexInternalObserversBlockingObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalObserversBlockingObserver, queue_, id<JavaUtilQueue>)

inline id IoReactivexInternalObserversBlockingObserver_get_TERMINATED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id IoReactivexInternalObserversBlockingObserver_TERMINATED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalObserversBlockingObserver, TERMINATED, id)

FOUNDATION_EXPORT void IoReactivexInternalObserversBlockingObserver_initWithJavaUtilQueue_(IoReactivexInternalObserversBlockingObserver *self, id<JavaUtilQueue> queue);

FOUNDATION_EXPORT IoReactivexInternalObserversBlockingObserver *new_IoReactivexInternalObserversBlockingObserver_initWithJavaUtilQueue_(id<JavaUtilQueue> queue) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalObserversBlockingObserver *create_IoReactivexInternalObserversBlockingObserver_initWithJavaUtilQueue_(id<JavaUtilQueue> queue);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalObserversBlockingObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalObserversBlockingObserver")
