//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/observers/QueueDrainObserver.java
//

#include "J2ObjC_source.h"
#include "io/reactivex/Observer.h"
#include "io/reactivex/disposables/Disposable.h"
#include "io/reactivex/internal/fuseable/SimpleQueue.h"
#include "io/reactivex/internal/observers/QueueDrainObserver.h"
#include "io/reactivex/internal/util/QueueDrainHelper.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"

#pragma clang diagnostic ignored "-Wprotocol"

__attribute__((unused)) static jboolean IoReactivexInternalObserversQueueDrainObserver_enter(IoReactivexInternalObserversQueueDrainObserver *self);

__attribute__((unused)) static jint IoReactivexInternalObserversQueueDrainObserver_leaveWithInt_(IoReactivexInternalObserversQueueDrainObserver *self, jint m);

@implementation IoReactivexInternalObserversQueueDrainSubscriberPad0

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalObserversQueueDrainSubscriberPad0_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "p1_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p2_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p3_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p4_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p5_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p6_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p7_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p8_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p9_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p10_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p11_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p12_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p13_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p14_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p15_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const J2ObjcClassInfo _IoReactivexInternalObserversQueueDrainSubscriberPad0 = { "QueueDrainSubscriberPad0", "io.reactivex.internal.observers", NULL, methods, fields, 7, 0x0, 1, 15, -1, -1, -1, -1, -1 };
  return &_IoReactivexInternalObserversQueueDrainSubscriberPad0;
}

@end

void IoReactivexInternalObserversQueueDrainSubscriberPad0_init(IoReactivexInternalObserversQueueDrainSubscriberPad0 *self) {
  NSObject_init(self);
}

IoReactivexInternalObserversQueueDrainSubscriberPad0 *new_IoReactivexInternalObserversQueueDrainSubscriberPad0_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalObserversQueueDrainSubscriberPad0, init)
}

IoReactivexInternalObserversQueueDrainSubscriberPad0 *create_IoReactivexInternalObserversQueueDrainSubscriberPad0_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalObserversQueueDrainSubscriberPad0, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalObserversQueueDrainSubscriberPad0)

@implementation IoReactivexInternalObserversQueueDrainSubscriberWip

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalObserversQueueDrainSubscriberWip_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(wip_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "wip_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const J2ObjcClassInfo _IoReactivexInternalObserversQueueDrainSubscriberWip = { "QueueDrainSubscriberWip", "io.reactivex.internal.observers", NULL, methods, fields, 7, 0x0, 1, 1, -1, -1, -1, -1, -1 };
  return &_IoReactivexInternalObserversQueueDrainSubscriberWip;
}

@end

void IoReactivexInternalObserversQueueDrainSubscriberWip_init(IoReactivexInternalObserversQueueDrainSubscriberWip *self) {
  IoReactivexInternalObserversQueueDrainSubscriberPad0_init(self);
  JreStrongAssignAndConsume(&self->wip_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
}

IoReactivexInternalObserversQueueDrainSubscriberWip *new_IoReactivexInternalObserversQueueDrainSubscriberWip_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalObserversQueueDrainSubscriberWip, init)
}

IoReactivexInternalObserversQueueDrainSubscriberWip *create_IoReactivexInternalObserversQueueDrainSubscriberWip_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalObserversQueueDrainSubscriberWip, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalObserversQueueDrainSubscriberWip)

@implementation IoReactivexInternalObserversQueueDrainSubscriberPad2

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalObserversQueueDrainSubscriberPad2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "p1a_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p2a_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p3a_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p4a_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p5a_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p6a_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p7a_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p8a_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p9a_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p10a_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p11a_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p12a_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p13a_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p14a_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "p15a_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const J2ObjcClassInfo _IoReactivexInternalObserversQueueDrainSubscriberPad2 = { "QueueDrainSubscriberPad2", "io.reactivex.internal.observers", NULL, methods, fields, 7, 0x0, 1, 15, -1, -1, -1, -1, -1 };
  return &_IoReactivexInternalObserversQueueDrainSubscriberPad2;
}

@end

void IoReactivexInternalObserversQueueDrainSubscriberPad2_init(IoReactivexInternalObserversQueueDrainSubscriberPad2 *self) {
  IoReactivexInternalObserversQueueDrainSubscriberWip_init(self);
}

IoReactivexInternalObserversQueueDrainSubscriberPad2 *new_IoReactivexInternalObserversQueueDrainSubscriberPad2_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalObserversQueueDrainSubscriberPad2, init)
}

IoReactivexInternalObserversQueueDrainSubscriberPad2 *create_IoReactivexInternalObserversQueueDrainSubscriberPad2_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalObserversQueueDrainSubscriberPad2, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalObserversQueueDrainSubscriberPad2)

@implementation IoReactivexInternalObserversQueueDrainObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
 withIoReactivexInternalFuseableSimpleQueue:(id<IoReactivexInternalFuseableSimpleQueue>)queue {
  IoReactivexInternalObserversQueueDrainObserver_initWithIoReactivexObserver_withIoReactivexInternalFuseableSimpleQueue_(self, actual, queue);
  return self;
}

- (jboolean)cancelled {
  return JreLoadVolatileBoolean(&cancelled_);
}

- (jboolean)done {
  return JreLoadVolatileBoolean(&done_);
}

- (jboolean)enter {
  return IoReactivexInternalObserversQueueDrainObserver_enter(self);
}

- (jboolean)fastEnter {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(wip_)) get] == 0 && [wip_ compareAndSetWithInt:0 withInt:1];
}

- (void)fastPathEmitWithId:(id)value
               withBoolean:(jboolean)delayError
withIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)dispose {
  id<IoReactivexObserver> s = actual_;
  id<IoReactivexInternalFuseableSimpleQueue> q = queue_;
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(wip_)) get] == 0 && [wip_ compareAndSetWithInt:0 withInt:1]) {
    [self acceptWithIoReactivexObserver:s withId:value];
    if (IoReactivexInternalObserversQueueDrainObserver_leaveWithInt_(self, -1) == 0) {
      return;
    }
  }
  else {
    [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) offerWithId:value];
    if (!IoReactivexInternalObserversQueueDrainObserver_enter(self)) {
      return;
    }
  }
  IoReactivexInternalUtilQueueDrainHelper_drainLoopWithIoReactivexInternalFuseableSimpleQueue_withIoReactivexObserver_withBoolean_withIoReactivexDisposablesDisposable_withIoReactivexInternalUtilObservableQueueDrain_(q, s, delayError, dispose, self);
}

- (void)fastPathOrderedEmitWithId:(id)value
                      withBoolean:(jboolean)delayError
withIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)disposable {
  id<IoReactivexObserver> s = actual_;
  id<IoReactivexInternalFuseableSimpleQueue> q = queue_;
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(wip_)) get] == 0 && [wip_ compareAndSetWithInt:0 withInt:1]) {
    if ([((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) isEmpty]) {
      [self acceptWithIoReactivexObserver:s withId:value];
      if (IoReactivexInternalObserversQueueDrainObserver_leaveWithInt_(self, -1) == 0) {
        return;
      }
    }
    else {
      [q offerWithId:value];
    }
  }
  else {
    [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) offerWithId:value];
    if (!IoReactivexInternalObserversQueueDrainObserver_enter(self)) {
      return;
    }
  }
  IoReactivexInternalUtilQueueDrainHelper_drainLoopWithIoReactivexInternalFuseableSimpleQueue_withIoReactivexObserver_withBoolean_withIoReactivexDisposablesDisposable_withIoReactivexInternalUtilObservableQueueDrain_(q, s, delayError, disposable, self);
}

- (NSException *)error {
  return error_;
}

- (jint)leaveWithInt:(jint)m {
  return IoReactivexInternalObserversQueueDrainObserver_leaveWithInt_(self, m);
}

- (void)drainWithBoolean:(jboolean)delayError
withIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)dispose {
  if (IoReactivexInternalObserversQueueDrainObserver_enter(self)) {
    IoReactivexInternalUtilQueueDrainHelper_drainLoopWithIoReactivexInternalFuseableSimpleQueue_withIoReactivexObserver_withBoolean_withIoReactivexDisposablesDisposable_withIoReactivexInternalUtilObservableQueueDrain_(queue_, actual_, delayError, dispose, self);
  }
}

- (void)acceptWithIoReactivexObserver:(id<IoReactivexObserver>)a
                               withId:(id)v {
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(queue_);
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x14, 5, 3, -1, 4, -1, -1 },
    { NULL, "LNSException;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, 12, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withIoReactivexInternalFuseableSimpleQueue:);
  methods[1].selector = @selector(cancelled);
  methods[2].selector = @selector(done);
  methods[3].selector = @selector(enter);
  methods[4].selector = @selector(fastEnter);
  methods[5].selector = @selector(fastPathEmitWithId:withBoolean:withIoReactivexDisposablesDisposable:);
  methods[6].selector = @selector(fastPathOrderedEmitWithId:withBoolean:withIoReactivexDisposablesDisposable:);
  methods[7].selector = @selector(error);
  methods[8].selector = @selector(leaveWithInt:);
  methods[9].selector = @selector(drainWithBoolean:withIoReactivexDisposablesDisposable:);
  methods[10].selector = @selector(acceptWithIoReactivexObserver:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x14, -1, -1, 13, -1 },
    { "queue_", "LIoReactivexInternalFuseableSimpleQueue;", .constantValue.asLong = 0, 0x14, -1, -1, 14, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "error_", "LNSException;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LIoReactivexInternalFuseableSimpleQueue;", "(Lio/reactivex/Observer<-TV;>;Lio/reactivex/internal/fuseable/SimpleQueue<TU;>;)V", "fastPathEmit", "LNSObject;ZLIoReactivexDisposablesDisposable;", "(TU;ZLio/reactivex/disposables/Disposable;)V", "fastPathOrderedEmit", "leave", "I", "drain", "ZLIoReactivexDisposablesDisposable;", "accept", "LIoReactivexObserver;LNSObject;", "(Lio/reactivex/Observer<-TV;>;TU;)V", "Lio/reactivex/Observer<-TV;>;", "Lio/reactivex/internal/fuseable/SimpleQueue<TU;>;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;V:Ljava/lang/Object;>Lio/reactivex/internal/observers/QueueDrainSubscriberPad2;Lio/reactivex/Observer<TT;>;Lio/reactivex/internal/util/ObservableQueueDrain<TU;TV;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalObserversQueueDrainObserver = { "QueueDrainObserver", "io.reactivex.internal.observers", ptrTable, methods, fields, 7, 0x401, 11, 5, -1, -1, -1, 15, -1 };
  return &_IoReactivexInternalObserversQueueDrainObserver;
}

@end

void IoReactivexInternalObserversQueueDrainObserver_initWithIoReactivexObserver_withIoReactivexInternalFuseableSimpleQueue_(IoReactivexInternalObserversQueueDrainObserver *self, id<IoReactivexObserver> actual, id<IoReactivexInternalFuseableSimpleQueue> queue) {
  IoReactivexInternalObserversQueueDrainSubscriberPad2_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->queue_, queue);
}

jboolean IoReactivexInternalObserversQueueDrainObserver_enter(IoReactivexInternalObserversQueueDrainObserver *self) {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->wip_)) getAndIncrement] == 0;
}

jint IoReactivexInternalObserversQueueDrainObserver_leaveWithInt_(IoReactivexInternalObserversQueueDrainObserver *self, jint m) {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->wip_)) addAndGetWithInt:m];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalObserversQueueDrainObserver)
