//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/util/QueueDrainHelper.java
//

#include "J2ObjC_source.h"
#include "io/reactivex/Observer.h"
#include "io/reactivex/disposables/Disposable.h"
#include "io/reactivex/exceptions/Exceptions.h"
#include "io/reactivex/exceptions/MissingBackpressureException.h"
#include "io/reactivex/functions/BooleanSupplier.h"
#include "io/reactivex/internal/fuseable/SimpleQueue.h"
#include "io/reactivex/internal/queue/SpscArrayQueue.h"
#include "io/reactivex/internal/queue/SpscLinkedArrayQueue.h"
#include "io/reactivex/internal/util/BackpressureHelper.h"
#include "io/reactivex/internal/util/ObservableQueueDrain.h"
#include "io/reactivex/internal/util/QueueDrain.h"
#include "io/reactivex/internal/util/QueueDrainHelper.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Long.h"
#include "java/util/Queue.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "org/reactivestreams/Subscriber.h"
#include "org/reactivestreams/Subscription.h"

@interface IoReactivexInternalUtilQueueDrainHelper ()

- (instancetype)init;

@end

__attribute__((unused)) static void IoReactivexInternalUtilQueueDrainHelper_init(IoReactivexInternalUtilQueueDrainHelper *self);

__attribute__((unused)) static IoReactivexInternalUtilQueueDrainHelper *new_IoReactivexInternalUtilQueueDrainHelper_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalUtilQueueDrainHelper *create_IoReactivexInternalUtilQueueDrainHelper_init();

@implementation IoReactivexInternalUtilQueueDrainHelper

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalUtilQueueDrainHelper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)drainLoopWithIoReactivexInternalFuseableSimpleQueue:(id<IoReactivexInternalFuseableSimpleQueue>)q
                           withOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)a
                                                withBoolean:(jboolean)delayError
                      withIoReactivexInternalUtilQueueDrain:(id<IoReactivexInternalUtilQueueDrain>)qd {
  IoReactivexInternalUtilQueueDrainHelper_drainLoopWithIoReactivexInternalFuseableSimpleQueue_withOrgReactivestreamsSubscriber_withBoolean_withIoReactivexInternalUtilQueueDrain_(q, a, delayError, qd);
}

+ (void)drainMaxLoopWithIoReactivexInternalFuseableSimpleQueue:(id<IoReactivexInternalFuseableSimpleQueue>)q
                              withOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)a
                                                   withBoolean:(jboolean)delayError
                          withIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)dispose
                         withIoReactivexInternalUtilQueueDrain:(id<IoReactivexInternalUtilQueueDrain>)qd {
  IoReactivexInternalUtilQueueDrainHelper_drainMaxLoopWithIoReactivexInternalFuseableSimpleQueue_withOrgReactivestreamsSubscriber_withBoolean_withIoReactivexDisposablesDisposable_withIoReactivexInternalUtilQueueDrain_(q, a, delayError, dispose, qd);
}

+ (jboolean)checkTerminatedWithBoolean:(jboolean)d
                           withBoolean:(jboolean)empty
      withOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s
                           withBoolean:(jboolean)delayError
withIoReactivexInternalFuseableSimpleQueue:(id<IoReactivexInternalFuseableSimpleQueue>)q
 withIoReactivexInternalUtilQueueDrain:(id<IoReactivexInternalUtilQueueDrain>)qd {
  return IoReactivexInternalUtilQueueDrainHelper_checkTerminatedWithBoolean_withBoolean_withOrgReactivestreamsSubscriber_withBoolean_withIoReactivexInternalFuseableSimpleQueue_withIoReactivexInternalUtilQueueDrain_(d, empty, s, delayError, q, qd);
}

+ (void)drainLoopWithIoReactivexInternalFuseableSimpleQueue:(id<IoReactivexInternalFuseableSimpleQueue>)q
                                    withIoReactivexObserver:(id<IoReactivexObserver>)a
                                                withBoolean:(jboolean)delayError
                       withIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)dispose
            withIoReactivexInternalUtilObservableQueueDrain:(id<IoReactivexInternalUtilObservableQueueDrain>)qd {
  IoReactivexInternalUtilQueueDrainHelper_drainLoopWithIoReactivexInternalFuseableSimpleQueue_withIoReactivexObserver_withBoolean_withIoReactivexDisposablesDisposable_withIoReactivexInternalUtilObservableQueueDrain_(q, a, delayError, dispose, qd);
}

+ (jboolean)checkTerminatedWithBoolean:(jboolean)d
                           withBoolean:(jboolean)empty
               withIoReactivexObserver:(id<IoReactivexObserver>)s
                           withBoolean:(jboolean)delayError
withIoReactivexInternalFuseableSimpleQueue:(id<IoReactivexInternalFuseableSimpleQueue>)q
  withIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)disposable
withIoReactivexInternalUtilObservableQueueDrain:(id<IoReactivexInternalUtilObservableQueueDrain>)qd {
  return IoReactivexInternalUtilQueueDrainHelper_checkTerminatedWithBoolean_withBoolean_withIoReactivexObserver_withBoolean_withIoReactivexInternalFuseableSimpleQueue_withIoReactivexDisposablesDisposable_withIoReactivexInternalUtilObservableQueueDrain_(d, empty, s, delayError, q, disposable, qd);
}

+ (id<IoReactivexInternalFuseableSimpleQueue>)createQueueWithInt:(jint)capacityHint {
  return IoReactivexInternalUtilQueueDrainHelper_createQueueWithInt_(capacityHint);
}

+ (void)requestWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s
                                          withInt:(jint)prefetch {
  IoReactivexInternalUtilQueueDrainHelper_requestWithOrgReactivestreamsSubscription_withInt_(s, prefetch);
}

+ (jboolean)postCompleteRequestWithLong:(jlong)n
       withOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                      withJavaUtilQueue:(id<JavaUtilQueue>)queue
 withJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)state
withIoReactivexFunctionsBooleanSupplier:(id<IoReactivexFunctionsBooleanSupplier>)isCancelled {
  return IoReactivexInternalUtilQueueDrainHelper_postCompleteRequestWithLong_withOrgReactivestreamsSubscriber_withJavaUtilQueue_withJavaUtilConcurrentAtomicAtomicLong_withIoReactivexFunctionsBooleanSupplier_(n, actual, queue, state, isCancelled);
}

+ (jboolean)isCancelledWithIoReactivexFunctionsBooleanSupplier:(id<IoReactivexFunctionsBooleanSupplier>)cancelled {
  return IoReactivexInternalUtilQueueDrainHelper_isCancelledWithIoReactivexFunctionsBooleanSupplier_(cancelled);
}

+ (jboolean)postCompleteDrainWithLong:(jlong)n
     withOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                    withJavaUtilQueue:(id<JavaUtilQueue>)queue
withJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)state
withIoReactivexFunctionsBooleanSupplier:(id<IoReactivexFunctionsBooleanSupplier>)isCancelled {
  return IoReactivexInternalUtilQueueDrainHelper_postCompleteDrainWithLong_withOrgReactivestreamsSubscriber_withJavaUtilQueue_withJavaUtilConcurrentAtomicAtomicLong_withIoReactivexFunctionsBooleanSupplier_(n, actual, queue, state, isCancelled);
}

+ (void)postCompleteWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                   withJavaUtilQueue:(id<JavaUtilQueue>)queue
              withJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)state
             withIoReactivexFunctionsBooleanSupplier:(id<IoReactivexFunctionsBooleanSupplier>)isCancelled {
  IoReactivexInternalUtilQueueDrainHelper_postCompleteWithOrgReactivestreamsSubscriber_withJavaUtilQueue_withJavaUtilConcurrentAtomicAtomicLong_withIoReactivexFunctionsBooleanSupplier_(actual, queue, state, isCancelled);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x9, 3, 4, -1, 5, -1, -1 },
    { NULL, "Z", 0x9, 6, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x9, 0, 9, -1, 10, -1, -1 },
    { NULL, "Z", 0x9, 6, 11, -1, 12, -1, -1 },
    { NULL, "LIoReactivexInternalFuseableSimpleQueue;", 0x9, 13, 14, -1, 15, -1, -1 },
    { NULL, "V", 0x9, 16, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 18, 19, -1, 20, -1, -1 },
    { NULL, "Z", 0x8, 21, 22, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 23, 19, -1, 20, -1, -1 },
    { NULL, "V", 0x9, 24, 25, -1, 26, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(drainLoopWithIoReactivexInternalFuseableSimpleQueue:withOrgReactivestreamsSubscriber:withBoolean:withIoReactivexInternalUtilQueueDrain:);
  methods[2].selector = @selector(drainMaxLoopWithIoReactivexInternalFuseableSimpleQueue:withOrgReactivestreamsSubscriber:withBoolean:withIoReactivexDisposablesDisposable:withIoReactivexInternalUtilQueueDrain:);
  methods[3].selector = @selector(checkTerminatedWithBoolean:withBoolean:withOrgReactivestreamsSubscriber:withBoolean:withIoReactivexInternalFuseableSimpleQueue:withIoReactivexInternalUtilQueueDrain:);
  methods[4].selector = @selector(drainLoopWithIoReactivexInternalFuseableSimpleQueue:withIoReactivexObserver:withBoolean:withIoReactivexDisposablesDisposable:withIoReactivexInternalUtilObservableQueueDrain:);
  methods[5].selector = @selector(checkTerminatedWithBoolean:withBoolean:withIoReactivexObserver:withBoolean:withIoReactivexInternalFuseableSimpleQueue:withIoReactivexDisposablesDisposable:withIoReactivexInternalUtilObservableQueueDrain:);
  methods[6].selector = @selector(createQueueWithInt:);
  methods[7].selector = @selector(requestWithOrgReactivestreamsSubscription:withInt:);
  methods[8].selector = @selector(postCompleteRequestWithLong:withOrgReactivestreamsSubscriber:withJavaUtilQueue:withJavaUtilConcurrentAtomicAtomicLong:withIoReactivexFunctionsBooleanSupplier:);
  methods[9].selector = @selector(isCancelledWithIoReactivexFunctionsBooleanSupplier:);
  methods[10].selector = @selector(postCompleteDrainWithLong:withOrgReactivestreamsSubscriber:withJavaUtilQueue:withJavaUtilConcurrentAtomicAtomicLong:withIoReactivexFunctionsBooleanSupplier:);
  methods[11].selector = @selector(postCompleteWithOrgReactivestreamsSubscriber:withJavaUtilQueue:withJavaUtilConcurrentAtomicAtomicLong:withIoReactivexFunctionsBooleanSupplier:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "COMPLETED_MASK", "J", .constantValue.asLong = IoReactivexInternalUtilQueueDrainHelper_COMPLETED_MASK, 0x18, -1, -1, -1, -1 },
    { "REQUESTED_MASK", "J", .constantValue.asLong = IoReactivexInternalUtilQueueDrainHelper_REQUESTED_MASK, 0x18, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "drainLoop", "LIoReactivexInternalFuseableSimpleQueue;LOrgReactivestreamsSubscriber;ZLIoReactivexInternalUtilQueueDrain;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>(Lio/reactivex/internal/fuseable/SimpleQueue<TT;>;Lorg/reactivestreams/Subscriber<-TU;>;ZLio/reactivex/internal/util/QueueDrain<TT;TU;>;)V", "drainMaxLoop", "LIoReactivexInternalFuseableSimpleQueue;LOrgReactivestreamsSubscriber;ZLIoReactivexDisposablesDisposable;LIoReactivexInternalUtilQueueDrain;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>(Lio/reactivex/internal/fuseable/SimpleQueue<TT;>;Lorg/reactivestreams/Subscriber<-TU;>;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/QueueDrain<TT;TU;>;)V", "checkTerminated", "ZZLOrgReactivestreamsSubscriber;ZLIoReactivexInternalFuseableSimpleQueue;LIoReactivexInternalUtilQueueDrain;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>(ZZLorg/reactivestreams/Subscriber<*>;ZLio/reactivex/internal/fuseable/SimpleQueue<*>;Lio/reactivex/internal/util/QueueDrain<TT;TU;>;)Z", "LIoReactivexInternalFuseableSimpleQueue;LIoReactivexObserver;ZLIoReactivexDisposablesDisposable;LIoReactivexInternalUtilObservableQueueDrain;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>(Lio/reactivex/internal/fuseable/SimpleQueue<TT;>;Lio/reactivex/Observer<-TU;>;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/ObservableQueueDrain<TT;TU;>;)V", "ZZLIoReactivexObserver;ZLIoReactivexInternalFuseableSimpleQueue;LIoReactivexDisposablesDisposable;LIoReactivexInternalUtilObservableQueueDrain;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>(ZZLio/reactivex/Observer<*>;ZLio/reactivex/internal/fuseable/SimpleQueue<*>;Lio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/ObservableQueueDrain<TT;TU;>;)Z", "createQueue", "I", "<T:Ljava/lang/Object;>(I)Lio/reactivex/internal/fuseable/SimpleQueue<TT;>;", "request", "LOrgReactivestreamsSubscription;I", "postCompleteRequest", "JLOrgReactivestreamsSubscriber;LJavaUtilQueue;LJavaUtilConcurrentAtomicAtomicLong;LIoReactivexFunctionsBooleanSupplier;", "<T:Ljava/lang/Object;>(JLorg/reactivestreams/Subscriber<-TT;>;Ljava/util/Queue<TT;>;Ljava/util/concurrent/atomic/AtomicLong;Lio/reactivex/functions/BooleanSupplier;)Z", "isCancelled", "LIoReactivexFunctionsBooleanSupplier;", "postCompleteDrain", "postComplete", "LOrgReactivestreamsSubscriber;LJavaUtilQueue;LJavaUtilConcurrentAtomicAtomicLong;LIoReactivexFunctionsBooleanSupplier;", "<T:Ljava/lang/Object;>(Lorg/reactivestreams/Subscriber<-TT;>;Ljava/util/Queue<TT;>;Ljava/util/concurrent/atomic/AtomicLong;Lio/reactivex/functions/BooleanSupplier;)V" };
  static const J2ObjcClassInfo _IoReactivexInternalUtilQueueDrainHelper = { "QueueDrainHelper", "io.reactivex.internal.util", ptrTable, methods, fields, 7, 0x11, 12, 2, -1, -1, -1, -1, -1 };
  return &_IoReactivexInternalUtilQueueDrainHelper;
}

@end

void IoReactivexInternalUtilQueueDrainHelper_init(IoReactivexInternalUtilQueueDrainHelper *self) {
  NSObject_init(self);
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"No instances!");
}

IoReactivexInternalUtilQueueDrainHelper *new_IoReactivexInternalUtilQueueDrainHelper_init() {
  J2OBJC_NEW_IMPL(IoReactivexInternalUtilQueueDrainHelper, init)
}

IoReactivexInternalUtilQueueDrainHelper *create_IoReactivexInternalUtilQueueDrainHelper_init() {
  J2OBJC_CREATE_IMPL(IoReactivexInternalUtilQueueDrainHelper, init)
}

void IoReactivexInternalUtilQueueDrainHelper_drainLoopWithIoReactivexInternalFuseableSimpleQueue_withOrgReactivestreamsSubscriber_withBoolean_withIoReactivexInternalUtilQueueDrain_(id<IoReactivexInternalFuseableSimpleQueue> q, id<OrgReactivestreamsSubscriber> a, jboolean delayError, id<IoReactivexInternalUtilQueueDrain> qd) {
  IoReactivexInternalUtilQueueDrainHelper_initialize();
  jint missed = 1;
  for (; ; ) {
    if (IoReactivexInternalUtilQueueDrainHelper_checkTerminatedWithBoolean_withBoolean_withOrgReactivestreamsSubscriber_withBoolean_withIoReactivexInternalFuseableSimpleQueue_withIoReactivexInternalUtilQueueDrain_([((id<IoReactivexInternalUtilQueueDrain>) nil_chk(qd)) done], [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) isEmpty], a, delayError, q, qd)) {
      return;
    }
    jlong r = [qd requested];
    jlong e = 0LL;
    while (e != r) {
      jboolean d = [qd done];
      id v;
      @try {
        v = [q poll];
      }
      @catch (NSException *ex) {
        IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(ex);
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithNSException:ex];
        return;
      }
      jboolean empty = v == nil;
      if (IoReactivexInternalUtilQueueDrainHelper_checkTerminatedWithBoolean_withBoolean_withOrgReactivestreamsSubscriber_withBoolean_withIoReactivexInternalFuseableSimpleQueue_withIoReactivexInternalUtilQueueDrain_(d, empty, a, delayError, q, qd)) {
        return;
      }
      if (empty) {
        break;
      }
      if ([qd acceptWithOrgReactivestreamsSubscriber:a withId:v]) {
        e++;
      }
    }
    if (e != 0LL && r != JavaLangLong_MAX_VALUE) {
      [qd producedWithLong:e];
    }
    missed = [qd leaveWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

void IoReactivexInternalUtilQueueDrainHelper_drainMaxLoopWithIoReactivexInternalFuseableSimpleQueue_withOrgReactivestreamsSubscriber_withBoolean_withIoReactivexDisposablesDisposable_withIoReactivexInternalUtilQueueDrain_(id<IoReactivexInternalFuseableSimpleQueue> q, id<OrgReactivestreamsSubscriber> a, jboolean delayError, id<IoReactivexDisposablesDisposable> dispose, id<IoReactivexInternalUtilQueueDrain> qd) {
  IoReactivexInternalUtilQueueDrainHelper_initialize();
  jint missed = 1;
  for (; ; ) {
    for (; ; ) {
      jboolean d = [((id<IoReactivexInternalUtilQueueDrain>) nil_chk(qd)) done];
      id v;
      @try {
        v = [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) poll];
      }
      @catch (NSException *ex) {
        IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(ex);
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithNSException:ex];
        return;
      }
      jboolean empty = v == nil;
      if (IoReactivexInternalUtilQueueDrainHelper_checkTerminatedWithBoolean_withBoolean_withOrgReactivestreamsSubscriber_withBoolean_withIoReactivexInternalFuseableSimpleQueue_withIoReactivexInternalUtilQueueDrain_(d, empty, a, delayError, q, qd)) {
        if (dispose != nil) {
          [dispose dispose];
        }
        return;
      }
      if (empty) {
        break;
      }
      jlong r = [qd requested];
      if (r != 0LL) {
        if ([qd acceptWithOrgReactivestreamsSubscriber:a withId:v]) {
          if (r != JavaLangLong_MAX_VALUE) {
            [qd producedWithLong:1];
          }
        }
      }
      else {
        [q clear];
        if (dispose != nil) {
          [dispose dispose];
        }
        [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithNSException:create_IoReactivexExceptionsMissingBackpressureException_initWithNSString_(@"Could not emit value due to lack of requests.")];
        return;
      }
    }
    missed = [qd leaveWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

jboolean IoReactivexInternalUtilQueueDrainHelper_checkTerminatedWithBoolean_withBoolean_withOrgReactivestreamsSubscriber_withBoolean_withIoReactivexInternalFuseableSimpleQueue_withIoReactivexInternalUtilQueueDrain_(jboolean d, jboolean empty, id<OrgReactivestreamsSubscriber> s, jboolean delayError, id<IoReactivexInternalFuseableSimpleQueue> q, id<IoReactivexInternalUtilQueueDrain> qd) {
  IoReactivexInternalUtilQueueDrainHelper_initialize();
  if ([((id<IoReactivexInternalUtilQueueDrain>) nil_chk(qd)) cancelled]) {
    [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) clear];
    return true;
  }
  if (d) {
    if (delayError) {
      if (empty) {
        NSException *err = [qd error];
        if (err != nil) {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(s)) onErrorWithNSException:err];
        }
        else {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(s)) onComplete];
        }
        return true;
      }
    }
    else {
      NSException *err = [qd error];
      if (err != nil) {
        [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) clear];
        [((id<OrgReactivestreamsSubscriber>) nil_chk(s)) onErrorWithNSException:err];
        return true;
      }
      else if (empty) {
        [((id<OrgReactivestreamsSubscriber>) nil_chk(s)) onComplete];
        return true;
      }
    }
  }
  return false;
}

void IoReactivexInternalUtilQueueDrainHelper_drainLoopWithIoReactivexInternalFuseableSimpleQueue_withIoReactivexObserver_withBoolean_withIoReactivexDisposablesDisposable_withIoReactivexInternalUtilObservableQueueDrain_(id<IoReactivexInternalFuseableSimpleQueue> q, id<IoReactivexObserver> a, jboolean delayError, id<IoReactivexDisposablesDisposable> dispose, id<IoReactivexInternalUtilObservableQueueDrain> qd) {
  IoReactivexInternalUtilQueueDrainHelper_initialize();
  jint missed = 1;
  for (; ; ) {
    if (IoReactivexInternalUtilQueueDrainHelper_checkTerminatedWithBoolean_withBoolean_withIoReactivexObserver_withBoolean_withIoReactivexInternalFuseableSimpleQueue_withIoReactivexDisposablesDisposable_withIoReactivexInternalUtilObservableQueueDrain_([((id<IoReactivexInternalUtilObservableQueueDrain>) nil_chk(qd)) done], [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) isEmpty], a, delayError, q, dispose, qd)) {
      return;
    }
    for (; ; ) {
      jboolean d = [qd done];
      id v;
      @try {
        v = [q poll];
      }
      @catch (NSException *ex) {
        IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(ex);
        [((id<IoReactivexObserver>) nil_chk(a)) onErrorWithNSException:ex];
        return;
      }
      jboolean empty = v == nil;
      if (IoReactivexInternalUtilQueueDrainHelper_checkTerminatedWithBoolean_withBoolean_withIoReactivexObserver_withBoolean_withIoReactivexInternalFuseableSimpleQueue_withIoReactivexDisposablesDisposable_withIoReactivexInternalUtilObservableQueueDrain_(d, empty, a, delayError, q, dispose, qd)) {
        return;
      }
      if (empty) {
        break;
      }
      [qd acceptWithIoReactivexObserver:a withId:v];
    }
    missed = [qd leaveWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

jboolean IoReactivexInternalUtilQueueDrainHelper_checkTerminatedWithBoolean_withBoolean_withIoReactivexObserver_withBoolean_withIoReactivexInternalFuseableSimpleQueue_withIoReactivexDisposablesDisposable_withIoReactivexInternalUtilObservableQueueDrain_(jboolean d, jboolean empty, id<IoReactivexObserver> s, jboolean delayError, id<IoReactivexInternalFuseableSimpleQueue> q, id<IoReactivexDisposablesDisposable> disposable, id<IoReactivexInternalUtilObservableQueueDrain> qd) {
  IoReactivexInternalUtilQueueDrainHelper_initialize();
  if ([((id<IoReactivexInternalUtilObservableQueueDrain>) nil_chk(qd)) cancelled]) {
    [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) clear];
    [((id<IoReactivexDisposablesDisposable>) nil_chk(disposable)) dispose];
    return true;
  }
  if (d) {
    if (delayError) {
      if (empty) {
        [((id<IoReactivexDisposablesDisposable>) nil_chk(disposable)) dispose];
        NSException *err = [qd error];
        if (err != nil) {
          [((id<IoReactivexObserver>) nil_chk(s)) onErrorWithNSException:err];
        }
        else {
          [((id<IoReactivexObserver>) nil_chk(s)) onComplete];
        }
        return true;
      }
    }
    else {
      NSException *err = [qd error];
      if (err != nil) {
        [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) clear];
        [((id<IoReactivexDisposablesDisposable>) nil_chk(disposable)) dispose];
        [((id<IoReactivexObserver>) nil_chk(s)) onErrorWithNSException:err];
        return true;
      }
      else if (empty) {
        [((id<IoReactivexDisposablesDisposable>) nil_chk(disposable)) dispose];
        [((id<IoReactivexObserver>) nil_chk(s)) onComplete];
        return true;
      }
    }
  }
  return false;
}

id<IoReactivexInternalFuseableSimpleQueue> IoReactivexInternalUtilQueueDrainHelper_createQueueWithInt_(jint capacityHint) {
  IoReactivexInternalUtilQueueDrainHelper_initialize();
  if (capacityHint < 0) {
    return create_IoReactivexInternalQueueSpscLinkedArrayQueue_initWithInt_(-capacityHint);
  }
  return create_IoReactivexInternalQueueSpscArrayQueue_initWithInt_(capacityHint);
}

void IoReactivexInternalUtilQueueDrainHelper_requestWithOrgReactivestreamsSubscription_withInt_(id<OrgReactivestreamsSubscription> s, jint prefetch) {
  IoReactivexInternalUtilQueueDrainHelper_initialize();
  [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:prefetch < 0 ? JavaLangLong_MAX_VALUE : prefetch];
}

jboolean IoReactivexInternalUtilQueueDrainHelper_postCompleteRequestWithLong_withOrgReactivestreamsSubscriber_withJavaUtilQueue_withJavaUtilConcurrentAtomicAtomicLong_withIoReactivexFunctionsBooleanSupplier_(jlong n, id<OrgReactivestreamsSubscriber> actual, id<JavaUtilQueue> queue, JavaUtilConcurrentAtomicAtomicLong *state, id<IoReactivexFunctionsBooleanSupplier> isCancelled) {
  IoReactivexInternalUtilQueueDrainHelper_initialize();
  for (; ; ) {
    jlong r = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(state)) get];
    jlong r0 = r & IoReactivexInternalUtilQueueDrainHelper_REQUESTED_MASK;
    jlong u = (r & IoReactivexInternalUtilQueueDrainHelper_COMPLETED_MASK) | IoReactivexInternalUtilBackpressureHelper_addCapWithLong_withLong_(r0, n);
    if ([state compareAndSetWithLong:r withLong:u]) {
      if (r == IoReactivexInternalUtilQueueDrainHelper_COMPLETED_MASK) {
        IoReactivexInternalUtilQueueDrainHelper_postCompleteDrainWithLong_withOrgReactivestreamsSubscriber_withJavaUtilQueue_withJavaUtilConcurrentAtomicAtomicLong_withIoReactivexFunctionsBooleanSupplier_(n | IoReactivexInternalUtilQueueDrainHelper_COMPLETED_MASK, actual, queue, state, isCancelled);
        return true;
      }
      return false;
    }
  }
}

jboolean IoReactivexInternalUtilQueueDrainHelper_isCancelledWithIoReactivexFunctionsBooleanSupplier_(id<IoReactivexFunctionsBooleanSupplier> cancelled) {
  IoReactivexInternalUtilQueueDrainHelper_initialize();
  @try {
    return [((id<IoReactivexFunctionsBooleanSupplier>) nil_chk(cancelled)) getAsBoolean];
  }
  @catch (NSException *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(ex);
    return true;
  }
}

jboolean IoReactivexInternalUtilQueueDrainHelper_postCompleteDrainWithLong_withOrgReactivestreamsSubscriber_withJavaUtilQueue_withJavaUtilConcurrentAtomicAtomicLong_withIoReactivexFunctionsBooleanSupplier_(jlong n, id<OrgReactivestreamsSubscriber> actual, id<JavaUtilQueue> queue, JavaUtilConcurrentAtomicAtomicLong *state, id<IoReactivexFunctionsBooleanSupplier> isCancelled) {
  IoReactivexInternalUtilQueueDrainHelper_initialize();
  jlong e = n & IoReactivexInternalUtilQueueDrainHelper_COMPLETED_MASK;
  for (; ; ) {
    while (e != n) {
      if (IoReactivexInternalUtilQueueDrainHelper_isCancelledWithIoReactivexFunctionsBooleanSupplier_(isCancelled)) {
        return true;
      }
      id t = [((id<JavaUtilQueue>) nil_chk(queue)) poll];
      if (t == nil) {
        [((id<OrgReactivestreamsSubscriber>) nil_chk(actual)) onComplete];
        return true;
      }
      [((id<OrgReactivestreamsSubscriber>) nil_chk(actual)) onNextWithId:t];
      e++;
    }
    if (IoReactivexInternalUtilQueueDrainHelper_isCancelledWithIoReactivexFunctionsBooleanSupplier_(isCancelled)) {
      return true;
    }
    if ([((id<JavaUtilQueue>) nil_chk(queue)) isEmpty]) {
      [((id<OrgReactivestreamsSubscriber>) nil_chk(actual)) onComplete];
      return true;
    }
    n = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(state)) get];
    if (n == e) {
      n = [state addAndGetWithLong:-(e & IoReactivexInternalUtilQueueDrainHelper_REQUESTED_MASK)];
      if ((n & IoReactivexInternalUtilQueueDrainHelper_REQUESTED_MASK) == 0LL) {
        return false;
      }
      e = n & IoReactivexInternalUtilQueueDrainHelper_COMPLETED_MASK;
    }
  }
}

void IoReactivexInternalUtilQueueDrainHelper_postCompleteWithOrgReactivestreamsSubscriber_withJavaUtilQueue_withJavaUtilConcurrentAtomicAtomicLong_withIoReactivexFunctionsBooleanSupplier_(id<OrgReactivestreamsSubscriber> actual, id<JavaUtilQueue> queue, JavaUtilConcurrentAtomicAtomicLong *state, id<IoReactivexFunctionsBooleanSupplier> isCancelled) {
  IoReactivexInternalUtilQueueDrainHelper_initialize();
  if ([((id<JavaUtilQueue>) nil_chk(queue)) isEmpty]) {
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual)) onComplete];
    return;
  }
  if (IoReactivexInternalUtilQueueDrainHelper_postCompleteDrainWithLong_withOrgReactivestreamsSubscriber_withJavaUtilQueue_withJavaUtilConcurrentAtomicAtomicLong_withIoReactivexFunctionsBooleanSupplier_([((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(state)) get], actual, queue, state, isCancelled)) {
    return;
  }
  for (; ; ) {
    jlong r = [state get];
    if ((r & IoReactivexInternalUtilQueueDrainHelper_COMPLETED_MASK) != 0LL) {
      return;
    }
    jlong u = r | IoReactivexInternalUtilQueueDrainHelper_COMPLETED_MASK;
    if ([state compareAndSetWithLong:r withLong:u]) {
      if (r != 0LL) {
        IoReactivexInternalUtilQueueDrainHelper_postCompleteDrainWithLong_withOrgReactivestreamsSubscriber_withJavaUtilQueue_withJavaUtilConcurrentAtomicAtomicLong_withIoReactivexFunctionsBooleanSupplier_(u, actual, queue, state, isCancelled);
      }
      return;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalUtilQueueDrainHelper)
