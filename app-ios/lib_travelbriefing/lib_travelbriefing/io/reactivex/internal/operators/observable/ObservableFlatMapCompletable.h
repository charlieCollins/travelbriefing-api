//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/observable/ObservableFlatMapCompletable.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableFlatMapCompletable")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableFlatMapCompletable
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableFlatMapCompletable 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableFlatMapCompletable 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableFlatMapCompletable

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableFlatMapCompletable || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableFlatMapCompletable))
#define IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_

#define RESTRICT_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#include "io/reactivex/internal/operators/observable/AbstractObservableWithUpstream.h"

@protocol IoReactivexFunctionsFunction;
@protocol IoReactivexObservableSource;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservableFlatMapCompletable : IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream {
 @public
  id<IoReactivexFunctionsFunction> mapper_;
  jboolean delayErrors_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                        withBoolean:(jboolean)delayErrors;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)observer;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableFlatMapCompletable)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableFlatMapCompletable, mapper_, id<IoReactivexFunctionsFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withBoolean_(IoReactivexInternalOperatorsObservableObservableFlatMapCompletable *self, id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableFlatMapCompletable *new_IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withBoolean_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableFlatMapCompletable *create_IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_initWithIoReactivexObservableSource_withIoReactivexFunctionsFunction_withBoolean_(id<IoReactivexObservableSource> source, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableFlatMapCompletable)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableFlatMapCompletable || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver))
#define IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver_

#define RESTRICT_IoReactivexInternalObserversBasicIntQueueDisposable 1
#define INCLUDE_IoReactivexInternalObserversBasicIntQueueDisposable 1
#include "io/reactivex/internal/observers/BasicIntQueueDisposable.h"

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "io/reactivex/Observer.h"

@class IoReactivexDisposablesCompositeDisposable;
@class IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver_InnerObserver;
@class IoReactivexInternalUtilAtomicThrowable;
@protocol IoReactivexDisposablesDisposable;
@protocol IoReactivexFunctionsFunction;

@interface IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver : IoReactivexInternalObserversBasicIntQueueDisposable < IoReactivexObserver > {
 @public
  id<IoReactivexObserver> actual_;
  IoReactivexInternalUtilAtomicThrowable *errors_;
  id<IoReactivexFunctionsFunction> mapper_;
  jboolean delayErrors_;
  IoReactivexDisposablesCompositeDisposable *set_;
  id<IoReactivexDisposablesDisposable> d_;
}

#pragma mark Public

- (void)clear;

- (void)dispose;

- (jboolean)isDisposed;

- (jboolean)isEmpty;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)value;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (id)poll;

- (jint)requestFusionWithInt:(jint)mode;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)observer
           withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                withBoolean:(jboolean)delayErrors;

- (void)innerCompleteWithIoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver_InnerObserver:(IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver_InnerObserver *)inner;

- (void)innerErrorWithIoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver_InnerObserver:(IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver_InnerObserver *)inner
                                                                                                                      withNSException:(NSException *)e;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver, errors_, IoReactivexInternalUtilAtomicThrowable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver, mapper_, id<IoReactivexFunctionsFunction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver, set_, IoReactivexDisposablesCompositeDisposable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver, d_, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withBoolean_(IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver *self, id<IoReactivexObserver> observer, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver *new_IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withBoolean_(id<IoReactivexObserver> observer, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver *create_IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver_initWithIoReactivexObserver_withIoReactivexFunctionsFunction_withBoolean_(id<IoReactivexObserver> observer, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver_InnerObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableFlatMapCompletable || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver_InnerObserver))
#define IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver_InnerObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexCompletableObserver 1
#define INCLUDE_IoReactivexCompletableObserver 1
#include "io/reactivex/CompletableObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "io/reactivex/disposables/Disposable.h"

@class IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver;

@interface IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver_InnerObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexCompletableObserver, IoReactivexDisposablesDisposable >

#pragma mark Public

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver:(IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver_InnerObserver)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver_InnerObserver_initWithIoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver_(IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver_InnerObserver *self, IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver *outer$);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver_InnerObserver *new_IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver_InnerObserver_initWithIoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver_(IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver_InnerObserver *create_IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver_InnerObserver_initWithIoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver_(IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver *outer$);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableFlatMapCompletable_FlatMapCompletableMainObserver_InnerObserver)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableFlatMapCompletable")
