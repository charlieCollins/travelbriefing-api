//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/observable/ObservableRefCount.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableRefCount")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableRefCount
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableRefCount 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableRefCount 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableRefCount

#if !defined (IoReactivexInternalOperatorsObservableObservableRefCount_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableRefCount || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableRefCount))
#define IoReactivexInternalOperatorsObservableObservableRefCount_

#define RESTRICT_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#include "io/reactivex/internal/operators/observable/AbstractObservableWithUpstream.h"

@class IoReactivexDisposablesCompositeDisposable;
@class IoReactivexObservablesConnectableObservable;
@class JavaUtilConcurrentAtomicAtomicInteger;
@class JavaUtilConcurrentLocksReentrantLock;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservableRefCount : IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream {
 @public
  IoReactivexObservablesConnectableObservable *source_ObservableRefCount_;
  volatile_id baseDisposable_;
  JavaUtilConcurrentAtomicAtomicInteger *subscriptionCount_;
  JavaUtilConcurrentLocksReentrantLock *lock_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexObservablesConnectableObservable:(IoReactivexObservablesConnectableObservable *)source;

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)subscriber;

#pragma mark Package-Private

- (void)doSubscribeWithIoReactivexObserver:(id<IoReactivexObserver>)observer
withIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)currentBase;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableRefCount)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableRefCount, source_ObservableRefCount_, IoReactivexObservablesConnectableObservable *)
J2OBJC_VOLATILE_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableRefCount, baseDisposable_, IoReactivexDisposablesCompositeDisposable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableRefCount, subscriptionCount_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableRefCount, lock_, JavaUtilConcurrentLocksReentrantLock *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableRefCount_initWithIoReactivexObservablesConnectableObservable_(IoReactivexInternalOperatorsObservableObservableRefCount *self, IoReactivexObservablesConnectableObservable *source);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableRefCount *new_IoReactivexInternalOperatorsObservableObservableRefCount_initWithIoReactivexObservablesConnectableObservable_(IoReactivexObservablesConnectableObservable *source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableRefCount *create_IoReactivexInternalOperatorsObservableObservableRefCount_initWithIoReactivexObservablesConnectableObservable_(IoReactivexObservablesConnectableObservable *source);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableRefCount)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableRefCount || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver))
#define IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "io/reactivex/Observer.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "io/reactivex/disposables/Disposable.h"

@class IoReactivexDisposablesCompositeDisposable;
@class IoReactivexInternalOperatorsObservableObservableRefCount;

@interface IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexObserver> subscriber_;
  IoReactivexDisposablesCompositeDisposable *currentBase_;
  id<IoReactivexDisposablesDisposable> resource_;
}

#pragma mark Public

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableRefCount:(IoReactivexInternalOperatorsObservableObservableRefCount *)outer$
                                                         withIoReactivexObserver:(id<IoReactivexObserver>)subscriber
                                   withIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)currentBase
                                            withIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)resource;

- (void)cleanup;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver, subscriber_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver, currentBase_, IoReactivexDisposablesCompositeDisposable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver, resource_, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver_initWithIoReactivexInternalOperatorsObservableObservableRefCount_withIoReactivexObserver_withIoReactivexDisposablesCompositeDisposable_withIoReactivexDisposablesDisposable_(IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver *self, IoReactivexInternalOperatorsObservableObservableRefCount *outer$, id<IoReactivexObserver> subscriber, IoReactivexDisposablesCompositeDisposable *currentBase, id<IoReactivexDisposablesDisposable> resource);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver *new_IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver_initWithIoReactivexInternalOperatorsObservableObservableRefCount_withIoReactivexObserver_withIoReactivexDisposablesCompositeDisposable_withIoReactivexDisposablesDisposable_(IoReactivexInternalOperatorsObservableObservableRefCount *outer$, id<IoReactivexObserver> subscriber, IoReactivexDisposablesCompositeDisposable *currentBase, id<IoReactivexDisposablesDisposable> resource) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver *create_IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver_initWithIoReactivexInternalOperatorsObservableObservableRefCount_withIoReactivexObserver_withIoReactivexDisposablesCompositeDisposable_withIoReactivexDisposablesDisposable_(IoReactivexInternalOperatorsObservableObservableRefCount *outer$, id<IoReactivexObserver> subscriber, IoReactivexDisposablesCompositeDisposable *currentBase, id<IoReactivexDisposablesDisposable> resource);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableRefCount_ConnectionObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableRefCount")
