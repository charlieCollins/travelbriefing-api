//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/parallel/ParallelJoin.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelJoin")
#ifdef RESTRICT_IoReactivexInternalOperatorsParallelParallelJoin
#define INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelJoin 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelJoin 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsParallelParallelJoin

#if !defined (IoReactivexInternalOperatorsParallelParallelJoin_) && (INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelJoin || defined(INCLUDE_IoReactivexInternalOperatorsParallelParallelJoin))
#define IoReactivexInternalOperatorsParallelParallelJoin_

#define RESTRICT_IoReactivexFlowable 1
#define INCLUDE_IoReactivexFlowable 1
#include "io/reactivex/Flowable.h"

@class IoReactivexParallelParallelFlowable;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsParallelParallelJoin : IoReactivexFlowable {
 @public
  IoReactivexParallelParallelFlowable *source_;
  jint prefetch_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexParallelParallelFlowable:(IoReactivexParallelParallelFlowable *)source
                                                    withInt:(jint)prefetch;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsParallelParallelJoin)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelJoin, source_, IoReactivexParallelParallelFlowable *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsParallelParallelJoin_initWithIoReactivexParallelParallelFlowable_withInt_(IoReactivexInternalOperatorsParallelParallelJoin *self, IoReactivexParallelParallelFlowable *source, jint prefetch);

FOUNDATION_EXPORT IoReactivexInternalOperatorsParallelParallelJoin *new_IoReactivexInternalOperatorsParallelParallelJoin_initWithIoReactivexParallelParallelFlowable_withInt_(IoReactivexParallelParallelFlowable *source, jint prefetch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsParallelParallelJoin *create_IoReactivexInternalOperatorsParallelParallelJoin_initWithIoReactivexParallelParallelFlowable_withInt_(IoReactivexParallelParallelFlowable *source, jint prefetch);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsParallelParallelJoin)

#endif

#if !defined (IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription_) && (INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelJoin || defined(INCLUDE_IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription))
#define IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "org/reactivestreams/Subscription.h"

@class IOSObjectArray;
@class IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber;
@class JavaUtilConcurrentAtomicAtomicLong;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription : JavaUtilConcurrentAtomicAtomicInteger < OrgReactivestreamsSubscription > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  IOSObjectArray *subscribers_;
  JavaUtilConcurrentAtomicAtomicReference *error_;
  JavaUtilConcurrentAtomicAtomicLong *requested_;
  volatile_jboolean cancelled_;
  JavaUtilConcurrentAtomicAtomicInteger *done_;
}

#pragma mark Public

- (void)cancel;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                             withInt:(jint)n
                                             withInt:(jint)prefetch;

- (void)cancelAll;

- (void)cleanup;

- (void)drain;

- (void)drainLoop;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithIoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber:(IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *)inner
                                                                                withId:(id)value;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription, subscribers_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription, error_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription, requested_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription, done_, JavaUtilConcurrentAtomicAtomicInteger *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription_initWithOrgReactivestreamsSubscriber_withInt_withInt_(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription *self, id<OrgReactivestreamsSubscriber> actual, jint n, jint prefetch);

FOUNDATION_EXPORT IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription *new_IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription_initWithOrgReactivestreamsSubscriber_withInt_withInt_(id<OrgReactivestreamsSubscriber> actual, jint n, jint prefetch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription *create_IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription_initWithOrgReactivestreamsSubscriber_withInt_withInt_(id<OrgReactivestreamsSubscriber> actual, jint n, jint prefetch);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription)

#endif

#if !defined (IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelJoin || defined(INCLUDE_IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber))
#define IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_OrgReactivestreamsSubscriber 1
#define INCLUDE_OrgReactivestreamsSubscriber 1
#include "org/reactivestreams/Subscriber.h"

@class IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription;
@protocol IoReactivexInternalFuseableSimplePlainQueue;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber : JavaUtilConcurrentAtomicAtomicReference < OrgReactivestreamsSubscriber > {
 @public
  IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription *parent_;
  jint prefetch_;
  jint limit_;
  jlong produced_;
  volatile_id queue_;
  volatile_jboolean done_;
}

#pragma mark Public

- (void)cancel;

- (id<OrgReactivestreamsSubscription>)get;

- (id<OrgReactivestreamsSubscription>)getAndSetWithId:(id<OrgReactivestreamsSubscription>)arg0;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)requestWithLong:(jlong)n;

- (void)requestOne;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription:(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription *)parent
                                                                                  withInt:(jint)prefetch;

- (id<IoReactivexInternalFuseableSimplePlainQueue>)getQueue;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber, parent_, IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription *)
J2OBJC_VOLATILE_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber, queue_, id<IoReactivexInternalFuseableSimplePlainQueue>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber_initWithIoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription_withInt_(IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *self, IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription *parent, jint prefetch);

FOUNDATION_EXPORT IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *new_IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber_initWithIoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription_withInt_(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription *parent, jint prefetch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber *create_IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber_initWithIoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription_withInt_(IoReactivexInternalOperatorsParallelParallelJoin_JoinSubscription *parent, jint prefetch);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsParallelParallelJoin_JoinInnerSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelJoin")
