//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/completable/CompletableError.java
//

#include "J2ObjC_source.h"
#include "io/reactivex/Completable.h"
#include "io/reactivex/CompletableObserver.h"
#include "io/reactivex/internal/disposables/EmptyDisposable.h"
#include "io/reactivex/internal/operators/completable/CompletableError.h"

@implementation IoReactivexInternalOperatorsCompletableCompletableError

- (instancetype)initWithNSException:(NSException *)error {
  IoReactivexInternalOperatorsCompletableCompletableError_initWithNSException_(self, error);
  return self;
}

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s {
  IoReactivexInternalDisposablesEmptyDisposable_errorWithNSException_withIoReactivexCompletableObserver_(error_, s);
}

- (void)dealloc {
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSException:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexCompletableObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "error_", "LNSException;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSException;", "subscribeActual", "LIoReactivexCompletableObserver;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableError = { "CompletableError", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableError;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableError_initWithNSException_(IoReactivexInternalOperatorsCompletableCompletableError *self, NSException *error) {
  IoReactivexCompletable_init(self);
  JreStrongAssign(&self->error_, error);
}

IoReactivexInternalOperatorsCompletableCompletableError *new_IoReactivexInternalOperatorsCompletableCompletableError_initWithNSException_(NSException *error) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableError, initWithNSException_, error)
}

IoReactivexInternalOperatorsCompletableCompletableError *create_IoReactivexInternalOperatorsCompletableCompletableError_initWithNSException_(NSException *error) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableError, initWithNSException_, error)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableError)
