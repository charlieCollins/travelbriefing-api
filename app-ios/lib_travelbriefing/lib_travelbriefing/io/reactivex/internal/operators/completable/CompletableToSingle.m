//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/completable/CompletableToSingle.java
//

#include "J2ObjC_source.h"
#include "io/reactivex/CompletableObserver.h"
#include "io/reactivex/CompletableSource.h"
#include "io/reactivex/Single.h"
#include "io/reactivex/SingleObserver.h"
#include "io/reactivex/disposables/Disposable.h"
#include "io/reactivex/exceptions/Exceptions.h"
#include "io/reactivex/internal/operators/completable/CompletableToSingle.h"
#include "java/lang/NullPointerException.h"
#include "java/util/concurrent/Callable.h"

@interface IoReactivexInternalOperatorsCompletableCompletableToSingle_1 : NSObject < IoReactivexCompletableObserver > {
 @public
  IoReactivexInternalOperatorsCompletableCompletableToSingle *this$0_;
  id<IoReactivexSingleObserver> val$s_;
}

- (instancetype)initWithIoReactivexInternalOperatorsCompletableCompletableToSingle:(IoReactivexInternalOperatorsCompletableCompletableToSingle *)outer$
                                                     withIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)capture$0;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsCompletableCompletableToSingle_1)

__attribute__((unused)) static void IoReactivexInternalOperatorsCompletableCompletableToSingle_1_initWithIoReactivexInternalOperatorsCompletableCompletableToSingle_withIoReactivexSingleObserver_(IoReactivexInternalOperatorsCompletableCompletableToSingle_1 *self, IoReactivexInternalOperatorsCompletableCompletableToSingle *outer$, id<IoReactivexSingleObserver> capture$0);

__attribute__((unused)) static IoReactivexInternalOperatorsCompletableCompletableToSingle_1 *new_IoReactivexInternalOperatorsCompletableCompletableToSingle_1_initWithIoReactivexInternalOperatorsCompletableCompletableToSingle_withIoReactivexSingleObserver_(IoReactivexInternalOperatorsCompletableCompletableToSingle *outer$, id<IoReactivexSingleObserver> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalOperatorsCompletableCompletableToSingle_1 *create_IoReactivexInternalOperatorsCompletableCompletableToSingle_1_initWithIoReactivexInternalOperatorsCompletableCompletableToSingle_withIoReactivexSingleObserver_(IoReactivexInternalOperatorsCompletableCompletableToSingle *outer$, id<IoReactivexSingleObserver> capture$0);

@implementation IoReactivexInternalOperatorsCompletableCompletableToSingle

- (instancetype)initWithIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)source
                      withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)completionValueSupplier
                                              withId:(id)completionValue {
  IoReactivexInternalOperatorsCompletableCompletableToSingle_initWithIoReactivexCompletableSource_withJavaUtilConcurrentCallable_withId_(self, source, completionValueSupplier, completionValue);
  return self;
}

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s {
  [((id<IoReactivexCompletableSource>) nil_chk(source_)) subscribeWithIoReactivexCompletableObserver:create_IoReactivexInternalOperatorsCompletableCompletableToSingle_1_initWithIoReactivexInternalOperatorsCompletableCompletableToSingle_withIoReactivexSingleObserver_(self, s)];
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(completionValueSupplier_);
  RELEASE_(completionValue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexCompletableSource:withJavaUtilConcurrentCallable:withId:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexSingleObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexCompletableSource;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "completionValueSupplier_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "completionValue_", "LNSObject;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexCompletableSource;LJavaUtilConcurrentCallable;LNSObject;", "(Lio/reactivex/CompletableSource;Ljava/util/concurrent/Callable<+TT;>;TT;)V", "subscribeActual", "LIoReactivexSingleObserver;", "(Lio/reactivex/SingleObserver<-TT;>;)V", "Ljava/util/concurrent/Callable<+TT;>;", "TT;", "<T:Ljava/lang/Object;>Lio/reactivex/Single<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableToSingle = { "CompletableToSingle", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x11, 2, 3, -1, -1, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableToSingle;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableToSingle_initWithIoReactivexCompletableSource_withJavaUtilConcurrentCallable_withId_(IoReactivexInternalOperatorsCompletableCompletableToSingle *self, id<IoReactivexCompletableSource> source, id<JavaUtilConcurrentCallable> completionValueSupplier, id completionValue) {
  IoReactivexSingle_init(self);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->completionValue_, completionValue);
  JreStrongAssign(&self->completionValueSupplier_, completionValueSupplier);
}

IoReactivexInternalOperatorsCompletableCompletableToSingle *new_IoReactivexInternalOperatorsCompletableCompletableToSingle_initWithIoReactivexCompletableSource_withJavaUtilConcurrentCallable_withId_(id<IoReactivexCompletableSource> source, id<JavaUtilConcurrentCallable> completionValueSupplier, id completionValue) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableToSingle, initWithIoReactivexCompletableSource_withJavaUtilConcurrentCallable_withId_, source, completionValueSupplier, completionValue)
}

IoReactivexInternalOperatorsCompletableCompletableToSingle *create_IoReactivexInternalOperatorsCompletableCompletableToSingle_initWithIoReactivexCompletableSource_withJavaUtilConcurrentCallable_withId_(id<IoReactivexCompletableSource> source, id<JavaUtilConcurrentCallable> completionValueSupplier, id completionValue) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableToSingle, initWithIoReactivexCompletableSource_withJavaUtilConcurrentCallable_withId_, source, completionValueSupplier, completionValue)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableToSingle)

@implementation IoReactivexInternalOperatorsCompletableCompletableToSingle_1

- (instancetype)initWithIoReactivexInternalOperatorsCompletableCompletableToSingle:(IoReactivexInternalOperatorsCompletableCompletableToSingle *)outer$
                                                     withIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)capture$0 {
  IoReactivexInternalOperatorsCompletableCompletableToSingle_1_initWithIoReactivexInternalOperatorsCompletableCompletableToSingle_withIoReactivexSingleObserver_(self, outer$, capture$0);
  return self;
}

- (void)onComplete {
  id v;
  if (this$0_->completionValueSupplier_ != nil) {
    @try {
      v = [this$0_->completionValueSupplier_ call];
    }
    @catch (NSException *e) {
      IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(e);
      [((id<IoReactivexSingleObserver>) nil_chk(val$s_)) onErrorWithNSException:e];
      return;
    }
  }
  else {
    v = this$0_->completionValue_;
  }
  if (v == nil) {
    [((id<IoReactivexSingleObserver>) nil_chk(val$s_)) onErrorWithNSException:create_JavaLangNullPointerException_initWithNSString_(@"The value supplied is null")];
  }
  else {
    [((id<IoReactivexSingleObserver>) nil_chk(val$s_)) onSuccessWithId:v];
  }
}

- (void)onErrorWithNSException:(NSException *)e {
  [((id<IoReactivexSingleObserver>) nil_chk(val$s_)) onErrorWithNSException:e];
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  [((id<IoReactivexSingleObserver>) nil_chk(val$s_)) onSubscribeWithIoReactivexDisposablesDisposable:d];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsCompletableCompletableToSingle:withIoReactivexSingleObserver:);
  methods[1].selector = @selector(onComplete);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsCompletableCompletableToSingle;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
    { "val$s_", "LIoReactivexSingleObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onSubscribe", "LIoReactivexDisposablesDisposable;", "Lio/reactivex/internal/operators/completable/CompletableToSingle<TT;>;", "Lio/reactivex/SingleObserver<-TT;>;", "LIoReactivexInternalOperatorsCompletableCompletableToSingle;", "subscribeActualWithIoReactivexSingleObserver:" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableToSingle_1 = { "", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x8018, 4, 2, 6, -1, 7, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableToSingle_1;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableToSingle_1_initWithIoReactivexInternalOperatorsCompletableCompletableToSingle_withIoReactivexSingleObserver_(IoReactivexInternalOperatorsCompletableCompletableToSingle_1 *self, IoReactivexInternalOperatorsCompletableCompletableToSingle *outer$, id<IoReactivexSingleObserver> capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$s_, capture$0);
  NSObject_init(self);
}

IoReactivexInternalOperatorsCompletableCompletableToSingle_1 *new_IoReactivexInternalOperatorsCompletableCompletableToSingle_1_initWithIoReactivexInternalOperatorsCompletableCompletableToSingle_withIoReactivexSingleObserver_(IoReactivexInternalOperatorsCompletableCompletableToSingle *outer$, id<IoReactivexSingleObserver> capture$0) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableToSingle_1, initWithIoReactivexInternalOperatorsCompletableCompletableToSingle_withIoReactivexSingleObserver_, outer$, capture$0)
}

IoReactivexInternalOperatorsCompletableCompletableToSingle_1 *create_IoReactivexInternalOperatorsCompletableCompletableToSingle_1_initWithIoReactivexInternalOperatorsCompletableCompletableToSingle_withIoReactivexSingleObserver_(IoReactivexInternalOperatorsCompletableCompletableToSingle *outer$, id<IoReactivexSingleObserver> capture$0) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableToSingle_1, initWithIoReactivexInternalOperatorsCompletableCompletableToSingle_withIoReactivexSingleObserver_, outer$, capture$0)
}
