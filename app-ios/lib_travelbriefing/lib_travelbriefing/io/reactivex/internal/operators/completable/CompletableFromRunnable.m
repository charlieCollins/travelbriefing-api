//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/completable/CompletableFromRunnable.java
//

#include "J2ObjC_source.h"
#include "io/reactivex/Completable.h"
#include "io/reactivex/CompletableObserver.h"
#include "io/reactivex/disposables/Disposable.h"
#include "io/reactivex/disposables/Disposables.h"
#include "io/reactivex/exceptions/Exceptions.h"
#include "io/reactivex/internal/operators/completable/CompletableFromRunnable.h"
#include "java/lang/Runnable.h"

@implementation IoReactivexInternalOperatorsCompletableCompletableFromRunnable

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  IoReactivexInternalOperatorsCompletableCompletableFromRunnable_initWithJavaLangRunnable_(self, runnable);
  return self;
}

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s {
  id<IoReactivexDisposablesDisposable> d = IoReactivexDisposablesDisposables_empty();
  [((id<IoReactivexCompletableObserver>) nil_chk(s)) onSubscribeWithIoReactivexDisposablesDisposable:d];
  @try {
    [((id<JavaLangRunnable>) nil_chk(runnable_)) run];
  }
  @catch (NSException *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(e);
    if (![((id<IoReactivexDisposablesDisposable>) nil_chk(d)) isDisposed]) {
      [s onErrorWithNSException:e];
    }
    return;
  }
  if (![((id<IoReactivexDisposablesDisposable>) nil_chk(d)) isDisposed]) {
    [s onComplete];
  }
}

- (void)dealloc {
  RELEASE_(runnable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangRunnable:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexCompletableObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "runnable_", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangRunnable;", "subscribeActual", "LIoReactivexCompletableObserver;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableFromRunnable = { "CompletableFromRunnable", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableFromRunnable;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableFromRunnable_initWithJavaLangRunnable_(IoReactivexInternalOperatorsCompletableCompletableFromRunnable *self, id<JavaLangRunnable> runnable) {
  IoReactivexCompletable_init(self);
  JreStrongAssign(&self->runnable_, runnable);
}

IoReactivexInternalOperatorsCompletableCompletableFromRunnable *new_IoReactivexInternalOperatorsCompletableCompletableFromRunnable_initWithJavaLangRunnable_(id<JavaLangRunnable> runnable) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableFromRunnable, initWithJavaLangRunnable_, runnable)
}

IoReactivexInternalOperatorsCompletableCompletableFromRunnable *create_IoReactivexInternalOperatorsCompletableCompletableFromRunnable_initWithJavaLangRunnable_(id<JavaLangRunnable> runnable) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableFromRunnable, initWithJavaLangRunnable_, runnable)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableFromRunnable)
