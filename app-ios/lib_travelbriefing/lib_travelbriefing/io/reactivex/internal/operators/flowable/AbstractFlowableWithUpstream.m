//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream.java
//

#include "J2ObjC_source.h"
#include "io/reactivex/Flowable.h"
#include "io/reactivex/internal/functions/ObjectHelper.h"
#include "io/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream.h"
#include "org/reactivestreams/Publisher.h"

@implementation IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithOrgReactivestreamsPublisher_(self, source);
  return self;
}

- (id<OrgReactivestreamsPublisher>)source {
  return source_;
}

- (void)dealloc {
  RELEASE_(source_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LOrgReactivestreamsPublisher;", 0x11, -1, -1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsPublisher:);
  methods[1].selector = @selector(source);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x14, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsPublisher;", "(Lorg/reactivestreams/Publisher<TT;>;)V", "()Lorg/reactivestreams/Publisher<TT;>;", "Lorg/reactivestreams/Publisher<TT;>;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Lio/reactivex/Flowable<TR;>;Lio/reactivex/internal/fuseable/HasUpstreamPublisher<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream = { "AbstractFlowableWithUpstream", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x400, 2, 1, -1, -1, -1, 4, -1 };
  return &_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream;
}

@end

void IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithOrgReactivestreamsPublisher_(IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream *self, id<OrgReactivestreamsPublisher> source) {
  IoReactivexFlowable_init(self);
  JreStrongAssign(&self->source_, IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(source, @"source is null"));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream)
