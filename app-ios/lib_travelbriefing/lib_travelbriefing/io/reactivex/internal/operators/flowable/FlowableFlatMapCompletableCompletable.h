//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable

#if !defined (IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable))
#define IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_

#define RESTRICT_IoReactivexCompletable 1
#define INCLUDE_IoReactivexCompletable 1
#include "io/reactivex/Completable.h"

#define RESTRICT_IoReactivexInternalFuseableFuseToFlowable 1
#define INCLUDE_IoReactivexInternalFuseableFuseToFlowable 1
#include "io/reactivex/internal/fuseable/FuseToFlowable.h"

@class IoReactivexFlowable;
@protocol IoReactivexCompletableObserver;
@protocol IoReactivexFunctionsFunction;
@protocol OrgReactivestreamsPublisher;

@interface IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable : IoReactivexCompletable < IoReactivexInternalFuseableFuseToFlowable > {
 @public
  id<OrgReactivestreamsPublisher> source_;
  id<IoReactivexFunctionsFunction> mapper_;
  jint maxConcurrency_;
  jboolean delayErrors_;
}

#pragma mark Public

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                        withBoolean:(jboolean)delayErrors
                                            withInt:(jint)maxConcurrency;

- (IoReactivexFlowable *)fuseToFlowable;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)observer;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable, source_, id<OrgReactivestreamsPublisher>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable, mapper_, id<IoReactivexFunctionsFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withBoolean_withInt_(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable *self, id<OrgReactivestreamsPublisher> source, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable *new_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withBoolean_withInt_(id<OrgReactivestreamsPublisher> source, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable *create_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withBoolean_withInt_(id<OrgReactivestreamsPublisher> source, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

#define RESTRICT_OrgReactivestreamsSubscriber 1
#define INCLUDE_OrgReactivestreamsSubscriber 1
#include "org/reactivestreams/Subscriber.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "io/reactivex/disposables/Disposable.h"

@class IoReactivexDisposablesCompositeDisposable;
@class IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver;
@class IoReactivexInternalUtilAtomicThrowable;
@protocol IoReactivexCompletableObserver;
@protocol IoReactivexFunctionsFunction;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber : JavaUtilConcurrentAtomicAtomicInteger < OrgReactivestreamsSubscriber, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexCompletableObserver> actual_;
  IoReactivexInternalUtilAtomicThrowable *errors_;
  id<IoReactivexFunctionsFunction> mapper_;
  jboolean delayErrors_;
  IoReactivexDisposablesCompositeDisposable *set_;
  jint maxConcurrency_;
  id<OrgReactivestreamsSubscription> s_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)value;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)observer
                      withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                           withBoolean:(jboolean)delayErrors
                                               withInt:(jint)maxConcurrency;

- (void)innerCompleteWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver:(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver *)inner;

- (void)innerErrorWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver:(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver *)inner
                                                                                                                               withNSException:(NSException *)e;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber, actual_, id<IoReactivexCompletableObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber, errors_, IoReactivexInternalUtilAtomicThrowable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber, mapper_, id<IoReactivexFunctionsFunction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber, set_, IoReactivexDisposablesCompositeDisposable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber, s_, id<OrgReactivestreamsSubscription>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_initWithIoReactivexCompletableObserver_withIoReactivexFunctionsFunction_withBoolean_withInt_(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber *self, id<IoReactivexCompletableObserver> observer, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_initWithIoReactivexCompletableObserver_withIoReactivexFunctionsFunction_withBoolean_withInt_(id<IoReactivexCompletableObserver> observer, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_initWithIoReactivexCompletableObserver_withIoReactivexFunctionsFunction_withBoolean_withInt_(id<IoReactivexCompletableObserver> observer, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver))
#define IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexCompletableObserver 1
#define INCLUDE_IoReactivexCompletableObserver 1
#include "io/reactivex/CompletableObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "io/reactivex/disposables/Disposable.h"

@class IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexCompletableObserver, IoReactivexDisposablesDisposable >

#pragma mark Public

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber:(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver_initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver *self, IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber *outer$);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver *new_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver_initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver *create_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver_initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber *outer$);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable_FlatMapCompletableMainSubscriber_InnerObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFlatMapCompletableCompletable")
