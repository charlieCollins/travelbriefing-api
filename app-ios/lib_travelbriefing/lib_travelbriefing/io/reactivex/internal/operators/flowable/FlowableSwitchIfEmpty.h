//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/flowable/FlowableSwitchIfEmpty.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty

#if !defined (IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty))
#define IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "io/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream.h"

@protocol OrgReactivestreamsPublisher;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  id<OrgReactivestreamsPublisher> other_;
}

#pragma mark Public

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                    withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty, other_, id<OrgReactivestreamsPublisher>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_initWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_(IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty *self, id<OrgReactivestreamsPublisher> source, id<OrgReactivestreamsPublisher> other);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty *new_IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_initWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> source, id<OrgReactivestreamsPublisher> other) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty *create_IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_initWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> source, id<OrgReactivestreamsPublisher> other);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_SwitchIfEmptySubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_SwitchIfEmptySubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_SwitchIfEmptySubscriber_

#define RESTRICT_OrgReactivestreamsSubscriber 1
#define INCLUDE_OrgReactivestreamsSubscriber 1
#include "org/reactivestreams/Subscriber.h"

@class IoReactivexInternalSubscriptionsSubscriptionArbiter;
@protocol OrgReactivestreamsPublisher;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_SwitchIfEmptySubscriber : NSObject < OrgReactivestreamsSubscriber > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  id<OrgReactivestreamsPublisher> other_;
  IoReactivexInternalSubscriptionsSubscriptionArbiter *arbiter_;
  jboolean empty_;
}

#pragma mark Public

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                     withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_SwitchIfEmptySubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_SwitchIfEmptySubscriber, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_SwitchIfEmptySubscriber, other_, id<OrgReactivestreamsPublisher>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_SwitchIfEmptySubscriber, arbiter_, IoReactivexInternalSubscriptionsSubscriptionArbiter *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_SwitchIfEmptySubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_(IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_SwitchIfEmptySubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<OrgReactivestreamsPublisher> other);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_SwitchIfEmptySubscriber *new_IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_SwitchIfEmptySubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_(id<OrgReactivestreamsSubscriber> actual, id<OrgReactivestreamsPublisher> other) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_SwitchIfEmptySubscriber *create_IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_SwitchIfEmptySubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_(id<OrgReactivestreamsSubscriber> actual, id<OrgReactivestreamsPublisher> other);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty_SwitchIfEmptySubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSwitchIfEmpty")
