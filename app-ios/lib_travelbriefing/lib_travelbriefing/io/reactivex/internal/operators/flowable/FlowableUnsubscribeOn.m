//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/flowable/FlowableUnsubscribeOn.java
//

#include "J2ObjC_source.h"
#include "io/reactivex/Scheduler.h"
#include "io/reactivex/disposables/Disposable.h"
#include "io/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream.h"
#include "io/reactivex/internal/operators/flowable/FlowableUnsubscribeOn.h"
#include "io/reactivex/internal/subscriptions/SubscriptionHelper.h"
#include "io/reactivex/plugins/RxJavaPlugins.h"
#include "java/lang/Runnable.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "org/reactivestreams/Publisher.h"
#include "org/reactivestreams/Subscriber.h"
#include "org/reactivestreams/Subscription.h"

inline jlong IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_serialVersionUID 1015244841293359600LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber, serialVersionUID, jlong)

@interface IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_1 : NSObject < JavaLangRunnable > {
 @public
  IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber *this$0_;
}

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber:(IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_1)

__attribute__((unused)) static void IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_1_initWithIoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_(IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_1 *self, IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber *outer$);

__attribute__((unused)) static IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_1 *new_IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_1_initWithIoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_(IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_1 *create_IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_1_initWithIoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_(IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber *outer$);

@implementation IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                           withIoReactivexScheduler:(IoReactivexScheduler *)scheduler {
  IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_initWithOrgReactivestreamsPublisher_withIoReactivexScheduler_(self, source, scheduler);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  [((id<OrgReactivestreamsPublisher>) nil_chk(source_)) subscribeWithOrgReactivestreamsSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexScheduler_(s, scheduler_)];
}

- (void)dealloc {
  RELEASE_(scheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsPublisher:withIoReactivexScheduler:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsPublisher;LIoReactivexScheduler;", "(Lorg/reactivestreams/Publisher<TT;>;Lio/reactivex/Scheduler;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "LIoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn = { "FlowableUnsubscribeOn", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 5, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_initWithOrgReactivestreamsPublisher_withIoReactivexScheduler_(IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn *self, id<OrgReactivestreamsPublisher> source, IoReactivexScheduler *scheduler) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithOrgReactivestreamsPublisher_(self, source);
  JreStrongAssign(&self->scheduler_, scheduler);
}

IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn *new_IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_initWithOrgReactivestreamsPublisher_withIoReactivexScheduler_(id<OrgReactivestreamsPublisher> source, IoReactivexScheduler *scheduler) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn, initWithOrgReactivestreamsPublisher_withIoReactivexScheduler_, source, scheduler)
}

IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn *create_IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_initWithOrgReactivestreamsPublisher_withIoReactivexScheduler_(id<OrgReactivestreamsPublisher> source, IoReactivexScheduler *scheduler) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn, initWithOrgReactivestreamsPublisher_withIoReactivexScheduler_, source, scheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn)

@implementation IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                            withIoReactivexScheduler:(IoReactivexScheduler *)scheduler {
  IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexScheduler_(self, actual, scheduler);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
  }
}

- (void)onNextWithId:(id)t {
  if (![self get]) {
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:t];
  }
}

- (void)onErrorWithNSException:(NSException *)t {
  if ([self get]) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_(t);
    return;
  }
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithNSException:t];
}

- (void)onComplete {
  if (![self get]) {
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onComplete];
  }
}

- (void)requestWithLong:(jlong)n {
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) requestWithLong:n];
}

- (void)cancel {
  if ([self compareAndSetWithBoolean:false withBoolean:true]) {
    [((IoReactivexScheduler *) nil_chk(scheduler_)) scheduleDirectWithJavaLangRunnable:create_IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_1_initWithIoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_(self)];
  }
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(scheduler_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withIoReactivexScheduler:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithNSException:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(requestWithLong:);
  methods[6].selector = @selector(cancel);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LIoReactivexScheduler;", "(Lorg/reactivestreams/Subscriber<-TT;>;Lio/reactivex/Scheduler;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "request", "J", "Lorg/reactivestreams/Subscriber<-TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicBoolean;Lorg/reactivestreams/Subscriber<TT;>;Lorg/reactivestreams/Subscription;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber = { "UnsubscribeSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 7, 4, 12, -1, -1, 13, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexScheduler_(IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber *self, id<OrgReactivestreamsSubscriber> actual, IoReactivexScheduler *scheduler) {
  JavaUtilConcurrentAtomicAtomicBoolean_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->scheduler_, scheduler);
}

IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexScheduler_(id<OrgReactivestreamsSubscriber> actual, IoReactivexScheduler *scheduler) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexScheduler_, actual, scheduler)
}

IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexScheduler_(id<OrgReactivestreamsSubscriber> actual, IoReactivexScheduler *scheduler) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber, initWithOrgReactivestreamsSubscriber_withIoReactivexScheduler_, actual, scheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_1

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber:(IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber *)outer$ {
  IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_1_initWithIoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_(self, outer$);
  return self;
}

- (void)run {
  [((id<OrgReactivestreamsSubscription>) nil_chk(this$0_->s_)) cancel];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 0, -1 },
  };
  static const void *ptrTable[] = { "Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn$UnsubscribeSubscriber<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber;", "cancel" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_1 = { "", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x8018, 2, 1, 1, -1, 2, -1, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_1;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_1_initWithIoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_(IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_1 *self, IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_1 *new_IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_1_initWithIoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_(IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber *outer$) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_1, initWithIoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_, outer$)
}

IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_1 *create_IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_1_initWithIoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_(IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber *outer$) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_1, initWithIoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_, outer$)
}
