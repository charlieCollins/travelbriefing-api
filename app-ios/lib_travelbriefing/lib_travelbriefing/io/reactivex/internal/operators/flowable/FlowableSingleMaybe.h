//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/flowable/FlowableSingleMaybe.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSingleMaybe")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableSingleMaybe
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSingleMaybe 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSingleMaybe 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableSingleMaybe

#if !defined (IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSingleMaybe || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableSingleMaybe))
#define IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_

#define RESTRICT_IoReactivexMaybe 1
#define INCLUDE_IoReactivexMaybe 1
#include "io/reactivex/Maybe.h"

#define RESTRICT_IoReactivexInternalFuseableFuseToFlowable 1
#define INCLUDE_IoReactivexInternalFuseableFuseToFlowable 1
#include "io/reactivex/internal/fuseable/FuseToFlowable.h"

@class IoReactivexFlowable;
@protocol IoReactivexMaybeObserver;
@protocol OrgReactivestreamsPublisher;

@interface IoReactivexInternalOperatorsFlowableFlowableSingleMaybe : IoReactivexMaybe < IoReactivexInternalFuseableFuseToFlowable > {
 @public
  id<OrgReactivestreamsPublisher> source_;
}

#pragma mark Public

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source;

- (IoReactivexFlowable *)fuseToFlowable;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableSingleMaybe)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSingleMaybe, source_, id<OrgReactivestreamsPublisher>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_initWithOrgReactivestreamsPublisher_(IoReactivexInternalOperatorsFlowableFlowableSingleMaybe *self, id<OrgReactivestreamsPublisher> source);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSingleMaybe *new_IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_initWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSingleMaybe *create_IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_initWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> source);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableSingleMaybe)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_SingleElementSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSingleMaybe || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_SingleElementSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_SingleElementSubscriber_

#define RESTRICT_OrgReactivestreamsSubscriber 1
#define INCLUDE_OrgReactivestreamsSubscriber 1
#include "org/reactivestreams/Subscriber.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "io/reactivex/disposables/Disposable.h"

@protocol IoReactivexMaybeObserver;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_SingleElementSubscriber : NSObject < OrgReactivestreamsSubscriber, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexMaybeObserver> actual_;
  id<OrgReactivestreamsSubscription> s_;
  jboolean done_;
  id value_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)actual;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_SingleElementSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_SingleElementSubscriber, actual_, id<IoReactivexMaybeObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_SingleElementSubscriber, s_, id<OrgReactivestreamsSubscription>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_SingleElementSubscriber, value_, id)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_SingleElementSubscriber_initWithIoReactivexMaybeObserver_(IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_SingleElementSubscriber *self, id<IoReactivexMaybeObserver> actual);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_SingleElementSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_SingleElementSubscriber_initWithIoReactivexMaybeObserver_(id<IoReactivexMaybeObserver> actual) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_SingleElementSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_SingleElementSubscriber_initWithIoReactivexMaybeObserver_(id<IoReactivexMaybeObserver> actual);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableSingleMaybe_SingleElementSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSingleMaybe")
