//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/flowable/FlowableRetryPredicate.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableRetryPredicate")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableRetryPredicate
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableRetryPredicate 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableRetryPredicate 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableRetryPredicate

#if !defined (IoReactivexInternalOperatorsFlowableFlowableRetryPredicate_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableRetryPredicate || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableRetryPredicate))
#define IoReactivexInternalOperatorsFlowableFlowableRetryPredicate_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "io/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream.h"

@protocol IoReactivexFunctionsPredicate;
@protocol OrgReactivestreamsPublisher;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableRetryPredicate : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  id<IoReactivexFunctionsPredicate> predicate_;
  jlong count_;
}

#pragma mark Public

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                                           withLong:(jlong)count
                  withIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)predicate;

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableRetryPredicate)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableRetryPredicate, predicate_, id<IoReactivexFunctionsPredicate>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableRetryPredicate_initWithOrgReactivestreamsPublisher_withLong_withIoReactivexFunctionsPredicate_(IoReactivexInternalOperatorsFlowableFlowableRetryPredicate *self, id<OrgReactivestreamsPublisher> source, jlong count, id<IoReactivexFunctionsPredicate> predicate);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableRetryPredicate *new_IoReactivexInternalOperatorsFlowableFlowableRetryPredicate_initWithOrgReactivestreamsPublisher_withLong_withIoReactivexFunctionsPredicate_(id<OrgReactivestreamsPublisher> source, jlong count, id<IoReactivexFunctionsPredicate> predicate) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableRetryPredicate *create_IoReactivexInternalOperatorsFlowableFlowableRetryPredicate_initWithOrgReactivestreamsPublisher_withLong_withIoReactivexFunctionsPredicate_(id<OrgReactivestreamsPublisher> source, jlong count, id<IoReactivexFunctionsPredicate> predicate);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableRetryPredicate)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableRetryPredicate_RepeatSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableRetryPredicate || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableRetryPredicate_RepeatSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableRetryPredicate_RepeatSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

#define RESTRICT_OrgReactivestreamsSubscriber 1
#define INCLUDE_OrgReactivestreamsSubscriber 1
#include "org/reactivestreams/Subscriber.h"

@class IoReactivexInternalSubscriptionsSubscriptionArbiter;
@protocol IoReactivexFunctionsPredicate;
@protocol OrgReactivestreamsPublisher;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsFlowableFlowableRetryPredicate_RepeatSubscriber : JavaUtilConcurrentAtomicAtomicInteger < OrgReactivestreamsSubscriber > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  IoReactivexInternalSubscriptionsSubscriptionArbiter *sa_;
  id<OrgReactivestreamsPublisher> source_;
  id<IoReactivexFunctionsPredicate> predicate_;
  jlong remaining_;
}

#pragma mark Public

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                            withLong:(jlong)count
                   withIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)predicate
withIoReactivexInternalSubscriptionsSubscriptionArbiter:(IoReactivexInternalSubscriptionsSubscriptionArbiter *)sa
                     withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source;

- (void)subscribeNext;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableRetryPredicate_RepeatSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableRetryPredicate_RepeatSubscriber, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableRetryPredicate_RepeatSubscriber, sa_, IoReactivexInternalSubscriptionsSubscriptionArbiter *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableRetryPredicate_RepeatSubscriber, source_, id<OrgReactivestreamsPublisher>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableRetryPredicate_RepeatSubscriber, predicate_, id<IoReactivexFunctionsPredicate>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableRetryPredicate_RepeatSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withIoReactivexFunctionsPredicate_withIoReactivexInternalSubscriptionsSubscriptionArbiter_withOrgReactivestreamsPublisher_(IoReactivexInternalOperatorsFlowableFlowableRetryPredicate_RepeatSubscriber *self, id<OrgReactivestreamsSubscriber> actual, jlong count, id<IoReactivexFunctionsPredicate> predicate, IoReactivexInternalSubscriptionsSubscriptionArbiter *sa, id<OrgReactivestreamsPublisher> source);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableRetryPredicate_RepeatSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableRetryPredicate_RepeatSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withIoReactivexFunctionsPredicate_withIoReactivexInternalSubscriptionsSubscriptionArbiter_withOrgReactivestreamsPublisher_(id<OrgReactivestreamsSubscriber> actual, jlong count, id<IoReactivexFunctionsPredicate> predicate, IoReactivexInternalSubscriptionsSubscriptionArbiter *sa, id<OrgReactivestreamsPublisher> source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableRetryPredicate_RepeatSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableRetryPredicate_RepeatSubscriber_initWithOrgReactivestreamsSubscriber_withLong_withIoReactivexFunctionsPredicate_withIoReactivexInternalSubscriptionsSubscriptionArbiter_withOrgReactivestreamsPublisher_(id<OrgReactivestreamsSubscriber> actual, jlong count, id<IoReactivexFunctionsPredicate> predicate, IoReactivexInternalSubscriptionsSubscriptionArbiter *sa, id<OrgReactivestreamsPublisher> source);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableRetryPredicate_RepeatSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableRetryPredicate")
