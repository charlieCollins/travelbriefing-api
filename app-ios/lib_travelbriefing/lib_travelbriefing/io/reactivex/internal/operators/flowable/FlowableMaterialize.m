//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/flowable/FlowableMaterialize.java
//

#include "J2ObjC_source.h"
#include "io/reactivex/Notification.h"
#include "io/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream.h"
#include "io/reactivex/internal/operators/flowable/FlowableMaterialize.h"
#include "io/reactivex/internal/subscribers/SinglePostCompleteSubscriber.h"
#include "io/reactivex/plugins/RxJavaPlugins.h"
#include "org/reactivestreams/Publisher.h"
#include "org/reactivestreams/Subscriber.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber_serialVersionUID -3740826063558713822LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsFlowableFlowableMaterialize

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source {
  IoReactivexInternalOperatorsFlowableFlowableMaterialize_initWithOrgReactivestreamsPublisher_(self, source);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  [((id<OrgReactivestreamsPublisher>) nil_chk(source_)) subscribeWithOrgReactivestreamsSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber_initWithOrgReactivestreamsSubscriber_(s)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsPublisher:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgReactivestreamsPublisher;", "(Lorg/reactivestreams/Publisher<TT;>;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-Lio/reactivex/Notification<TT;>;>;)V", "LIoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;Lio/reactivex/Notification<TT;>;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableMaterialize = { "FlowableMaterialize", "io.reactivex.internal.operators.flowable", ptrTable, methods, NULL, 7, 0x11, 2, 0, -1, 5, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableMaterialize;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableMaterialize_initWithOrgReactivestreamsPublisher_(IoReactivexInternalOperatorsFlowableFlowableMaterialize *self, id<OrgReactivestreamsPublisher> source) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithOrgReactivestreamsPublisher_(self, source);
}

IoReactivexInternalOperatorsFlowableFlowableMaterialize *new_IoReactivexInternalOperatorsFlowableFlowableMaterialize_initWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> source) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableMaterialize, initWithOrgReactivestreamsPublisher_, source)
}

IoReactivexInternalOperatorsFlowableFlowableMaterialize *create_IoReactivexInternalOperatorsFlowableFlowableMaterialize_initWithOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> source) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableMaterialize, initWithOrgReactivestreamsPublisher_, source)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableMaterialize)

@implementation IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual {
  IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber_initWithOrgReactivestreamsSubscriber_(self, actual);
  return self;
}

- (void)onNextWithId:(id)t {
  produced_++;
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:IoReactivexNotification_createOnNextWithId_(t)];
}

- (void)onErrorWithNSException:(NSException *)t {
  [self completeWithId:IoReactivexNotification_createOnErrorWithNSException_(t)];
}

- (void)onComplete {
  [self completeWithId:IoReactivexNotification_createOnComplete()];
}

- (void)onDropWithId:(IoReactivexNotification *)n {
  if ([((IoReactivexNotification *) nil_chk(n)) isOnError]) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_([n getError]);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 8, -1, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onComplete);
  methods[4].selector = @selector(onDropWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-Lio/reactivex/Notification<TT;>;>;)V", "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "onDrop", "LIoReactivexNotification;", "(Lio/reactivex/Notification<TT;>;)V", "LIoReactivexInternalOperatorsFlowableFlowableMaterialize;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber<TT;Lio/reactivex/Notification<TT;>;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber = { "MaterializeSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 5, 1, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber_initWithOrgReactivestreamsSubscriber_(IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber *self, id<OrgReactivestreamsSubscriber> actual) {
  IoReactivexInternalSubscribersSinglePostCompleteSubscriber_initWithOrgReactivestreamsSubscriber_(self, actual);
}

IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber_initWithOrgReactivestreamsSubscriber_(id<OrgReactivestreamsSubscriber> actual) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber, initWithOrgReactivestreamsSubscriber_, actual)
}

IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber_initWithOrgReactivestreamsSubscriber_(id<OrgReactivestreamsSubscriber> actual) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber, initWithOrgReactivestreamsSubscriber_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableMaterialize_MaterializeSubscriber)
