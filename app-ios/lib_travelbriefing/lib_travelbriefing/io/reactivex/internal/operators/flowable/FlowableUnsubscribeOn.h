//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/flowable/FlowableUnsubscribeOn.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn

#if !defined (IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn))
#define IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "io/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream.h"

@class IoReactivexScheduler;
@protocol OrgReactivestreamsPublisher;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  IoReactivexScheduler *scheduler_;
}

#pragma mark Public

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                           withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn, scheduler_, IoReactivexScheduler *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_initWithOrgReactivestreamsPublisher_withIoReactivexScheduler_(IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn *self, id<OrgReactivestreamsPublisher> source, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn *new_IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_initWithOrgReactivestreamsPublisher_withIoReactivexScheduler_(id<OrgReactivestreamsPublisher> source, IoReactivexScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn *create_IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_initWithOrgReactivestreamsPublisher_withIoReactivexScheduler_(id<OrgReactivestreamsPublisher> source, IoReactivexScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicBoolean 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicBoolean 1
#include "java/util/concurrent/atomic/AtomicBoolean.h"

#define RESTRICT_OrgReactivestreamsSubscriber 1
#define INCLUDE_OrgReactivestreamsSubscriber 1
#include "org/reactivestreams/Subscriber.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "org/reactivestreams/Subscription.h"

@class IoReactivexScheduler;

@interface IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber : JavaUtilConcurrentAtomicAtomicBoolean < OrgReactivestreamsSubscriber, OrgReactivestreamsSubscription > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  IoReactivexScheduler *scheduler_;
  id<OrgReactivestreamsSubscription> s_;
}

#pragma mark Public

- (void)cancel;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                            withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber, scheduler_, IoReactivexScheduler *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber, s_, id<OrgReactivestreamsSubscription>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexScheduler_(IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber *self, id<OrgReactivestreamsSubscriber> actual, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexScheduler_(id<OrgReactivestreamsSubscriber> actual, IoReactivexScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexScheduler_(id<OrgReactivestreamsSubscriber> actual, IoReactivexScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn_UnsubscribeSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableUnsubscribeOn")
