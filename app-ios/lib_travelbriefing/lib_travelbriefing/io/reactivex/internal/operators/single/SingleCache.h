//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/single/SingleCache.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleCache")
#ifdef RESTRICT_IoReactivexInternalOperatorsSingleSingleCache
#define INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleCache 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleCache 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsSingleSingleCache

#if !defined (IoReactivexInternalOperatorsSingleSingleCache_) && (INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleCache || defined(INCLUDE_IoReactivexInternalOperatorsSingleSingleCache))
#define IoReactivexInternalOperatorsSingleSingleCache_

#define RESTRICT_IoReactivexSingle 1
#define INCLUDE_IoReactivexSingle 1
#include "io/reactivex/Single.h"

#define RESTRICT_IoReactivexSingleObserver 1
#define INCLUDE_IoReactivexSingleObserver 1
#include "io/reactivex/SingleObserver.h"

@class IOSObjectArray;
@class IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable;
@class JavaUtilConcurrentAtomicAtomicInteger;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexDisposablesDisposable;
@protocol IoReactivexSingleSource;

@interface IoReactivexInternalOperatorsSingleSingleCache : IoReactivexSingle < IoReactivexSingleObserver > {
 @public
  id<IoReactivexSingleSource> source_;
  JavaUtilConcurrentAtomicAtomicInteger *wip_;
  JavaUtilConcurrentAtomicAtomicReference *observers_;
  id value_;
  NSException *error_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s;

#pragma mark Package-Private

- (jboolean)addWithIoReactivexInternalOperatorsSingleSingleCache_CacheDisposable:(IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable *)observer;

- (void)removeWithIoReactivexInternalOperatorsSingleSingleCache_CacheDisposable:(IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable *)observer;

@end

J2OBJC_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleCache)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleCache, source_, id<IoReactivexSingleSource>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleCache, wip_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleCache, observers_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleCache, value_, id)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleCache, error_, NSException *)

inline IOSObjectArray *IoReactivexInternalOperatorsSingleSingleCache_get_EMPTY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexInternalOperatorsSingleSingleCache_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsSingleSingleCache, EMPTY, IOSObjectArray *)

inline IOSObjectArray *IoReactivexInternalOperatorsSingleSingleCache_get_TERMINATED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexInternalOperatorsSingleSingleCache_TERMINATED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsSingleSingleCache, TERMINATED, IOSObjectArray *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsSingleSingleCache_initWithIoReactivexSingleSource_(IoReactivexInternalOperatorsSingleSingleCache *self, id<IoReactivexSingleSource> source);

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleCache *new_IoReactivexInternalOperatorsSingleSingleCache_initWithIoReactivexSingleSource_(id<IoReactivexSingleSource> source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleCache *create_IoReactivexInternalOperatorsSingleSingleCache_initWithIoReactivexSingleSource_(id<IoReactivexSingleSource> source);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsSingleSingleCache)

#endif

#if !defined (IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable_) && (INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleCache || defined(INCLUDE_IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable))
#define IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicBoolean 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicBoolean 1
#include "java/util/concurrent/atomic/AtomicBoolean.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "io/reactivex/disposables/Disposable.h"

@class IoReactivexInternalOperatorsSingleSingleCache;
@protocol IoReactivexSingleObserver;

@interface IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable : JavaUtilConcurrentAtomicAtomicBoolean < IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexSingleObserver> actual_;
  IoReactivexInternalOperatorsSingleSingleCache *parent_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual
withIoReactivexInternalOperatorsSingleSingleCache:(IoReactivexInternalOperatorsSingleSingleCache *)parent;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable, actual_, id<IoReactivexSingleObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable, parent_, IoReactivexInternalOperatorsSingleSingleCache *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable_initWithIoReactivexSingleObserver_withIoReactivexInternalOperatorsSingleSingleCache_(IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable *self, id<IoReactivexSingleObserver> actual, IoReactivexInternalOperatorsSingleSingleCache *parent);

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable *new_IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable_initWithIoReactivexSingleObserver_withIoReactivexInternalOperatorsSingleSingleCache_(id<IoReactivexSingleObserver> actual, IoReactivexInternalOperatorsSingleSingleCache *parent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable *create_IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable_initWithIoReactivexSingleObserver_withIoReactivexInternalOperatorsSingleSingleCache_(id<IoReactivexSingleObserver> actual, IoReactivexInternalOperatorsSingleSingleCache *parent);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsSingleSingleCache_CacheDisposable)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleCache")
