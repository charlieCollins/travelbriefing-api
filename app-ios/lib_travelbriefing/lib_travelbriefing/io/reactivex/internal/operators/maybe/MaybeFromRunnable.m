//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/maybe/MaybeFromRunnable.java
//

#include "J2ObjC_source.h"
#include "io/reactivex/Maybe.h"
#include "io/reactivex/MaybeObserver.h"
#include "io/reactivex/disposables/Disposable.h"
#include "io/reactivex/disposables/Disposables.h"
#include "io/reactivex/exceptions/Exceptions.h"
#include "io/reactivex/internal/operators/maybe/MaybeFromRunnable.h"
#include "io/reactivex/plugins/RxJavaPlugins.h"
#include "java/lang/Runnable.h"

@implementation IoReactivexInternalOperatorsMaybeMaybeFromRunnable

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  IoReactivexInternalOperatorsMaybeMaybeFromRunnable_initWithJavaLangRunnable_(self, runnable);
  return self;
}

- (void)subscribeActualWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)observer {
  id<IoReactivexDisposablesDisposable> d = IoReactivexDisposablesDisposables_empty();
  [((id<IoReactivexMaybeObserver>) nil_chk(observer)) onSubscribeWithIoReactivexDisposablesDisposable:d];
  if (![((id<IoReactivexDisposablesDisposable>) nil_chk(d)) isDisposed]) {
    @try {
      [((id<JavaLangRunnable>) nil_chk(runnable_)) run];
    }
    @catch (NSException *ex) {
      IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(ex);
      if (![d isDisposed]) {
        [observer onErrorWithNSException:ex];
      }
      else {
        IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_(ex);
      }
      return;
    }
    if (![d isDisposed]) {
      [observer onComplete];
    }
  }
}

- (id)call {
  [((id<JavaLangRunnable>) nil_chk(runnable_)) run];
  return nil;
}

- (void)dealloc {
  RELEASE_(runnable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 4, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangRunnable:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexMaybeObserver:);
  methods[2].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "runnable_", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangRunnable;", "subscribeActual", "LIoReactivexMaybeObserver;", "(Lio/reactivex/MaybeObserver<-TT;>;)V", "LJavaLangException;", "()TT;", "<T:Ljava/lang/Object;>Lio/reactivex/Maybe<TT;>;Ljava/util/concurrent/Callable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeFromRunnable = { "MaybeFromRunnable", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x11, 3, 1, -1, -1, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeFromRunnable;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeFromRunnable_initWithJavaLangRunnable_(IoReactivexInternalOperatorsMaybeMaybeFromRunnable *self, id<JavaLangRunnable> runnable) {
  IoReactivexMaybe_init(self);
  JreStrongAssign(&self->runnable_, runnable);
}

IoReactivexInternalOperatorsMaybeMaybeFromRunnable *new_IoReactivexInternalOperatorsMaybeMaybeFromRunnable_initWithJavaLangRunnable_(id<JavaLangRunnable> runnable) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeFromRunnable, initWithJavaLangRunnable_, runnable)
}

IoReactivexInternalOperatorsMaybeMaybeFromRunnable *create_IoReactivexInternalOperatorsMaybeMaybeFromRunnable_initWithJavaLangRunnable_(id<JavaLangRunnable> runnable) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeFromRunnable, initWithJavaLangRunnable_, runnable)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeFromRunnable)
