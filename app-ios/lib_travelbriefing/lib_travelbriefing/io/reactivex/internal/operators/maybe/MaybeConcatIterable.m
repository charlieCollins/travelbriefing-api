//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/maybe/MaybeConcatIterable.java
//

#include "J2ObjC_source.h"
#include "io/reactivex/Flowable.h"
#include "io/reactivex/MaybeSource.h"
#include "io/reactivex/disposables/Disposable.h"
#include "io/reactivex/exceptions/Exceptions.h"
#include "io/reactivex/internal/disposables/SequentialDisposable.h"
#include "io/reactivex/internal/functions/ObjectHelper.h"
#include "io/reactivex/internal/operators/maybe/MaybeConcatIterable.h"
#include "io/reactivex/internal/subscriptions/EmptySubscription.h"
#include "io/reactivex/internal/subscriptions/SubscriptionHelper.h"
#include "io/reactivex/internal/util/BackpressureHelper.h"
#include "io/reactivex/internal/util/NotificationLite.h"
#include "java/lang/Iterable.h"
#include "java/util/Iterator.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/reactivestreams/Subscriber.h"

inline jlong IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver_serialVersionUID 3520831347801429610LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsMaybeMaybeConcatIterable

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)sources {
  IoReactivexInternalOperatorsMaybeMaybeConcatIterable_initWithJavaLangIterable_(self, sources);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  id<JavaUtilIterator> it;
  @try {
    it = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaLangIterable>) nil_chk(sources_)) iterator], @"The sources Iterable returned a null Iterator");
  }
  @catch (NSException *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(ex);
    IoReactivexInternalSubscriptionsEmptySubscription_errorWithNSException_withOrgReactivestreamsSubscriber_(ex, s);
    return;
  }
  IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver *parent = create_IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver_initWithOrgReactivestreamsSubscriber_withJavaUtilIterator_(s, it);
  [((id<OrgReactivestreamsSubscriber>) nil_chk(s)) onSubscribeWithOrgReactivestreamsSubscription:parent];
  [parent drain];
}

- (void)dealloc {
  RELEASE_(sources_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangIterable:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sources_", "LJavaLangIterable;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangIterable;", "(Ljava/lang/Iterable<+Lio/reactivex/MaybeSource<+TT;>;>;)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "Ljava/lang/Iterable<+Lio/reactivex/MaybeSource<+TT;>;>;", "LIoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver;", "<T:Ljava/lang/Object;>Lio/reactivex/Flowable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeConcatIterable = { "MaybeConcatIterable", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeConcatIterable;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeConcatIterable_initWithJavaLangIterable_(IoReactivexInternalOperatorsMaybeMaybeConcatIterable *self, id<JavaLangIterable> sources) {
  IoReactivexFlowable_init(self);
  JreStrongAssign(&self->sources_, sources);
}

IoReactivexInternalOperatorsMaybeMaybeConcatIterable *new_IoReactivexInternalOperatorsMaybeMaybeConcatIterable_initWithJavaLangIterable_(id<JavaLangIterable> sources) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeConcatIterable, initWithJavaLangIterable_, sources)
}

IoReactivexInternalOperatorsMaybeMaybeConcatIterable *create_IoReactivexInternalOperatorsMaybeMaybeConcatIterable_initWithJavaLangIterable_(id<JavaLangIterable> sources) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeConcatIterable, initWithJavaLangIterable_, sources)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeConcatIterable)

@implementation IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                withJavaUtilIterator:(id<JavaUtilIterator>)sources {
  IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver_initWithOrgReactivestreamsSubscriber_withJavaUtilIterator_(self, actual, sources);
  return self;
}

- (void)requestWithLong:(jlong)n {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    IoReactivexInternalUtilBackpressureHelper_addWithJavaUtilConcurrentAtomicAtomicLong_withLong_(requested_, n);
    [self drain];
  }
}

- (void)cancel {
  [((IoReactivexInternalDisposablesSequentialDisposable *) nil_chk(disposables_)) dispose];
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  [((IoReactivexInternalDisposablesSequentialDisposable *) nil_chk(disposables_)) replaceWithIoReactivexDisposablesDisposable:d];
}

- (void)onSuccessWithId:(id)value {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(current_)) lazySetWithId:value];
  [self drain];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithNSException:e];
}

- (void)onComplete {
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(current_)) lazySetWithId:JreLoadEnum(IoReactivexInternalUtilNotificationLite, COMPLETE)];
  [self drain];
}

- (void)drain {
  if ([self getAndIncrement] != 0) {
    return;
  }
  JavaUtilConcurrentAtomicAtomicReference *c = current_;
  id<OrgReactivestreamsSubscriber> a = actual_;
  for (; ; ) {
    if ([((IoReactivexInternalDisposablesSequentialDisposable *) nil_chk(disposables_)) isDisposed]) {
      [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(c)) lazySetWithId:nil];
      return;
    }
    id o = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(c)) get];
    if (o != nil) {
      jboolean goNextSource;
      if (o != JreLoadEnum(IoReactivexInternalUtilNotificationLite, COMPLETE)) {
        jlong p = produced_;
        if (p != [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(requested_)) get]) {
          produced_ = p + 1;
          [c lazySetWithId:nil];
          goNextSource = true;
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:o];
        }
        else {
          goNextSource = false;
        }
      }
      else {
        goNextSource = true;
        [c lazySetWithId:nil];
      }
      if (goNextSource) {
        jboolean b;
        @try {
          b = [((id<JavaUtilIterator>) nil_chk(sources_)) hasNext];
        }
        @catch (NSException *ex) {
          IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(ex);
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithNSException:ex];
          return;
        }
        if (b) {
          id<IoReactivexMaybeSource> source;
          @try {
            source = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([sources_ next], @"The source Iterator returned a null MaybeSource");
          }
          @catch (NSException *ex) {
            IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(ex);
            [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onErrorWithNSException:ex];
            return;
          }
          [((id<IoReactivexMaybeSource>) nil_chk(source)) subscribeWithIoReactivexMaybeObserver:self];
        }
        else {
          [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onComplete];
        }
      }
    }
    if ([self decrementAndGet] == 0) {
      break;
    }
  }
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(requested_);
  RELEASE_(current_);
  RELEASE_(disposables_);
  RELEASE_(sources_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withJavaUtilIterator:);
  methods[1].selector = @selector(requestWithLong:);
  methods[2].selector = @selector(cancel);
  methods[3].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[4].selector = @selector(onSuccessWithId:);
  methods[5].selector = @selector(onErrorWithNSException:);
  methods[6].selector = @selector(onComplete);
  methods[7].selector = @selector(drain);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "requested_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "current_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "disposables_", "LIoReactivexInternalDisposablesSequentialDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "sources_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x10, -1, -1, 13, -1 },
    { "produced_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LJavaUtilIterator;", "(Lorg/reactivestreams/Subscriber<-TT;>;Ljava/util/Iterator<+Lio/reactivex/MaybeSource<+TT;>;>;)V", "request", "J", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onSuccess", "LNSObject;", "(TT;)V", "onError", "LNSException;", "Lorg/reactivestreams/Subscriber<-TT;>;", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Object;>;", "Ljava/util/Iterator<+Lio/reactivex/MaybeSource<+TT;>;>;", "LIoReactivexInternalOperatorsMaybeMaybeConcatIterable;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/MaybeObserver<TT;>;Lorg/reactivestreams/Subscription;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver = { "ConcatMaybeObserver", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x18, 8, 7, 14, -1, -1, 15, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver_initWithOrgReactivestreamsSubscriber_withJavaUtilIterator_(IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver *self, id<OrgReactivestreamsSubscriber> actual, id<JavaUtilIterator> sources) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->sources_, sources);
  JreStrongAssignAndConsume(&self->requested_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssignAndConsume(&self->disposables_, new_IoReactivexInternalDisposablesSequentialDisposable_init());
  JreStrongAssignAndConsume(&self->current_, new_JavaUtilConcurrentAtomicAtomicReference_initWithId_(JreLoadEnum(IoReactivexInternalUtilNotificationLite, COMPLETE)));
}

IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver *new_IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver_initWithOrgReactivestreamsSubscriber_withJavaUtilIterator_(id<OrgReactivestreamsSubscriber> actual, id<JavaUtilIterator> sources) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver, initWithOrgReactivestreamsSubscriber_withJavaUtilIterator_, actual, sources)
}

IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver *create_IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver_initWithOrgReactivestreamsSubscriber_withJavaUtilIterator_(id<OrgReactivestreamsSubscriber> actual, id<JavaUtilIterator> sources) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver, initWithOrgReactivestreamsSubscriber_withJavaUtilIterator_, actual, sources)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeConcatIterable_ConcatMaybeObserver)
