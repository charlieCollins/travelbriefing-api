//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/maybe/MaybeZipArray.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeZipArray")
#ifdef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeZipArray
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeZipArray 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeZipArray 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeZipArray

#if !defined (IoReactivexInternalOperatorsMaybeMaybeZipArray_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeZipArray || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeZipArray))
#define IoReactivexInternalOperatorsMaybeMaybeZipArray_

#define RESTRICT_IoReactivexMaybe 1
#define INCLUDE_IoReactivexMaybe 1
#include "io/reactivex/Maybe.h"

@class IOSObjectArray;
@protocol IoReactivexFunctionsFunction;
@protocol IoReactivexMaybeObserver;

@interface IoReactivexInternalOperatorsMaybeMaybeZipArray : IoReactivexMaybe {
 @public
  IOSObjectArray *sources_;
  id<IoReactivexFunctionsFunction> zipper_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexMaybeSourceArray:(IOSObjectArray *)sources
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)zipper;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)observer;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeZipArray)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeZipArray, sources_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeZipArray, zipper_, id<IoReactivexFunctionsFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeZipArray_initWithIoReactivexMaybeSourceArray_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsMaybeMaybeZipArray *self, IOSObjectArray *sources, id<IoReactivexFunctionsFunction> zipper);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeZipArray *new_IoReactivexInternalOperatorsMaybeMaybeZipArray_initWithIoReactivexMaybeSourceArray_withIoReactivexFunctionsFunction_(IOSObjectArray *sources, id<IoReactivexFunctionsFunction> zipper) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeZipArray *create_IoReactivexInternalOperatorsMaybeMaybeZipArray_initWithIoReactivexMaybeSourceArray_withIoReactivexFunctionsFunction_(IOSObjectArray *sources, id<IoReactivexFunctionsFunction> zipper);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeZipArray)

#endif

#if !defined (IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipCoordinator_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeZipArray || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipCoordinator))
#define IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipCoordinator_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "io/reactivex/disposables/Disposable.h"

@class IOSObjectArray;
@protocol IoReactivexFunctionsFunction;
@protocol IoReactivexMaybeObserver;

@interface IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipCoordinator : JavaUtilConcurrentAtomicAtomicInteger < IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexMaybeObserver> actual_;
  id<IoReactivexFunctionsFunction> zipper_;
  IOSObjectArray *observers_;
  IOSObjectArray *values_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)observer
                                         withInt:(jint)n
                withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)zipper;

- (void)disposeExceptWithInt:(jint)index;

- (void)innerCompleteWithInt:(jint)index;

- (void)innerErrorWithNSException:(NSException *)ex
                          withInt:(jint)index;

- (void)innerSuccessWithId:(id)value
                   withInt:(jint)index;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipCoordinator)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipCoordinator, actual_, id<IoReactivexMaybeObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipCoordinator, zipper_, id<IoReactivexFunctionsFunction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipCoordinator, observers_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipCoordinator, values_, IOSObjectArray *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipCoordinator_initWithIoReactivexMaybeObserver_withInt_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipCoordinator *self, id<IoReactivexMaybeObserver> observer, jint n, id<IoReactivexFunctionsFunction> zipper);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipCoordinator *new_IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipCoordinator_initWithIoReactivexMaybeObserver_withInt_withIoReactivexFunctionsFunction_(id<IoReactivexMaybeObserver> observer, jint n, id<IoReactivexFunctionsFunction> zipper) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipCoordinator *create_IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipCoordinator_initWithIoReactivexMaybeObserver_withInt_withIoReactivexFunctionsFunction_(id<IoReactivexMaybeObserver> observer, jint n, id<IoReactivexFunctionsFunction> zipper);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipCoordinator)

#endif

#if !defined (IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipMaybeObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeZipArray || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipMaybeObserver))
#define IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipMaybeObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexMaybeObserver 1
#define INCLUDE_IoReactivexMaybeObserver 1
#include "io/reactivex/MaybeObserver.h"

@class IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipCoordinator;
@protocol IoReactivexDisposablesDisposable;

@interface IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipMaybeObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexMaybeObserver > {
 @public
  IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipCoordinator *parent_;
  jint index_;
}

#pragma mark Public

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsMaybeMaybeZipArray_ZipCoordinator:(IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipCoordinator *)parent
                                                                              withInt:(jint)index;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipMaybeObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipMaybeObserver, parent_, IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipCoordinator *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipMaybeObserver_initWithIoReactivexInternalOperatorsMaybeMaybeZipArray_ZipCoordinator_withInt_(IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipMaybeObserver *self, IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipCoordinator *parent, jint index);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipMaybeObserver *new_IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipMaybeObserver_initWithIoReactivexInternalOperatorsMaybeMaybeZipArray_ZipCoordinator_withInt_(IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipCoordinator *parent, jint index) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipMaybeObserver *create_IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipMaybeObserver_initWithIoReactivexInternalOperatorsMaybeMaybeZipArray_ZipCoordinator_withInt_(IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipCoordinator *parent, jint index);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeZipArray_ZipMaybeObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeZipArray")
