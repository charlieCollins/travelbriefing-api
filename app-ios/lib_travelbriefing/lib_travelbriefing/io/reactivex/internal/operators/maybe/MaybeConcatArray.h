//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/maybe/MaybeConcatArray.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeConcatArray")
#ifdef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeConcatArray
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeConcatArray 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeConcatArray 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeConcatArray

#if !defined (IoReactivexInternalOperatorsMaybeMaybeConcatArray_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeConcatArray || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeConcatArray))
#define IoReactivexInternalOperatorsMaybeMaybeConcatArray_

#define RESTRICT_IoReactivexFlowable 1
#define INCLUDE_IoReactivexFlowable 1
#include "io/reactivex/Flowable.h"

@class IOSObjectArray;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsMaybeMaybeConcatArray : IoReactivexFlowable {
 @public
  IOSObjectArray *sources_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexMaybeSourceArray:(IOSObjectArray *)sources;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeConcatArray)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeConcatArray, sources_, IOSObjectArray *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeConcatArray_initWithIoReactivexMaybeSourceArray_(IoReactivexInternalOperatorsMaybeMaybeConcatArray *self, IOSObjectArray *sources);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeConcatArray *new_IoReactivexInternalOperatorsMaybeMaybeConcatArray_initWithIoReactivexMaybeSourceArray_(IOSObjectArray *sources) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeConcatArray *create_IoReactivexInternalOperatorsMaybeMaybeConcatArray_initWithIoReactivexMaybeSourceArray_(IOSObjectArray *sources);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeConcatArray)

#endif

#if !defined (IoReactivexInternalOperatorsMaybeMaybeConcatArray_ConcatMaybeObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeConcatArray || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeConcatArray_ConcatMaybeObserver))
#define IoReactivexInternalOperatorsMaybeMaybeConcatArray_ConcatMaybeObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

#define RESTRICT_IoReactivexMaybeObserver 1
#define INCLUDE_IoReactivexMaybeObserver 1
#include "io/reactivex/MaybeObserver.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "org/reactivestreams/Subscription.h"

@class IOSObjectArray;
@class IoReactivexInternalDisposablesSequentialDisposable;
@class JavaUtilConcurrentAtomicAtomicLong;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexDisposablesDisposable;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsMaybeMaybeConcatArray_ConcatMaybeObserver : JavaUtilConcurrentAtomicAtomicInteger < IoReactivexMaybeObserver, OrgReactivestreamsSubscription > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  JavaUtilConcurrentAtomicAtomicLong *requested_;
  JavaUtilConcurrentAtomicAtomicReference *current_;
  IoReactivexInternalDisposablesSequentialDisposable *disposables_;
  IOSObjectArray *sources_;
  jint index_;
  jlong produced_;
}

#pragma mark Public

- (void)cancel;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                     withIoReactivexMaybeSourceArray:(IOSObjectArray *)sources;

- (void)drain;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeConcatArray_ConcatMaybeObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeConcatArray_ConcatMaybeObserver, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeConcatArray_ConcatMaybeObserver, requested_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeConcatArray_ConcatMaybeObserver, current_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeConcatArray_ConcatMaybeObserver, disposables_, IoReactivexInternalDisposablesSequentialDisposable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeConcatArray_ConcatMaybeObserver, sources_, IOSObjectArray *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeConcatArray_ConcatMaybeObserver_initWithOrgReactivestreamsSubscriber_withIoReactivexMaybeSourceArray_(IoReactivexInternalOperatorsMaybeMaybeConcatArray_ConcatMaybeObserver *self, id<OrgReactivestreamsSubscriber> actual, IOSObjectArray *sources);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeConcatArray_ConcatMaybeObserver *new_IoReactivexInternalOperatorsMaybeMaybeConcatArray_ConcatMaybeObserver_initWithOrgReactivestreamsSubscriber_withIoReactivexMaybeSourceArray_(id<OrgReactivestreamsSubscriber> actual, IOSObjectArray *sources) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeConcatArray_ConcatMaybeObserver *create_IoReactivexInternalOperatorsMaybeMaybeConcatArray_ConcatMaybeObserver_initWithOrgReactivestreamsSubscriber_withIoReactivexMaybeSourceArray_(id<OrgReactivestreamsSubscriber> actual, IOSObjectArray *sources);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeConcatArray_ConcatMaybeObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeConcatArray")
