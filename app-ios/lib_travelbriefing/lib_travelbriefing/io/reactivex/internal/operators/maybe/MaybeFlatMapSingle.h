//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/maybe/MaybeFlatMapSingle.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle")
#ifdef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle

#if !defined (IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle))
#define IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle_

#define RESTRICT_IoReactivexSingle 1
#define INCLUDE_IoReactivexSingle 1
#include "io/reactivex/Single.h"

@protocol IoReactivexFunctionsFunction;
@protocol IoReactivexMaybeSource;
@protocol IoReactivexSingleObserver;

@interface IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle : IoReactivexSingle {
 @public
  id<IoReactivexMaybeSource> source_;
  id<IoReactivexFunctionsFunction> mapper_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source
              withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle, source_, id<IoReactivexMaybeSource>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle, mapper_, id<IoReactivexFunctionsFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle_initWithIoReactivexMaybeSource_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle *self, id<IoReactivexMaybeSource> source, id<IoReactivexFunctionsFunction> mapper);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle *new_IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle_initWithIoReactivexMaybeSource_withIoReactivexFunctionsFunction_(id<IoReactivexMaybeSource> source, id<IoReactivexFunctionsFunction> mapper) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle *create_IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle_initWithIoReactivexMaybeSource_withIoReactivexFunctionsFunction_(id<IoReactivexMaybeSource> source, id<IoReactivexFunctionsFunction> mapper);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle)

#endif

#if !defined (IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle_FlatMapMaybeObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle_FlatMapMaybeObserver))
#define IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle_FlatMapMaybeObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexMaybeObserver 1
#define INCLUDE_IoReactivexMaybeObserver 1
#include "io/reactivex/MaybeObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "io/reactivex/disposables/Disposable.h"

@protocol IoReactivexFunctionsFunction;
@protocol IoReactivexSingleObserver;

@interface IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle_FlatMapMaybeObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexMaybeObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexSingleObserver> actual_;
  id<IoReactivexFunctionsFunction> mapper_;
}

#pragma mark Public

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual
                 withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle_FlatMapMaybeObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle_FlatMapMaybeObserver, actual_, id<IoReactivexSingleObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle_FlatMapMaybeObserver, mapper_, id<IoReactivexFunctionsFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle_FlatMapMaybeObserver_initWithIoReactivexSingleObserver_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle_FlatMapMaybeObserver *self, id<IoReactivexSingleObserver> actual, id<IoReactivexFunctionsFunction> mapper);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle_FlatMapMaybeObserver *new_IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle_FlatMapMaybeObserver_initWithIoReactivexSingleObserver_withIoReactivexFunctionsFunction_(id<IoReactivexSingleObserver> actual, id<IoReactivexFunctionsFunction> mapper) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle_FlatMapMaybeObserver *create_IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle_FlatMapMaybeObserver_initWithIoReactivexSingleObserver_withIoReactivexFunctionsFunction_(id<IoReactivexSingleObserver> actual, id<IoReactivexFunctionsFunction> mapper);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle_FlatMapMaybeObserver)

#endif

#if !defined (IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle_FlatMapSingleObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle_FlatMapSingleObserver))
#define IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle_FlatMapSingleObserver_

#define RESTRICT_IoReactivexSingleObserver 1
#define INCLUDE_IoReactivexSingleObserver 1
#include "io/reactivex/SingleObserver.h"

@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexDisposablesDisposable;

@interface IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle_FlatMapSingleObserver : NSObject < IoReactivexSingleObserver > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *parent_;
  id<IoReactivexSingleObserver> actual_;
}

#pragma mark Public

- (void)onErrorWithNSException:(NSException *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)parent
                                  withIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle_FlatMapSingleObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle_FlatMapSingleObserver, parent_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle_FlatMapSingleObserver, actual_, id<IoReactivexSingleObserver>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle_FlatMapSingleObserver_initWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexSingleObserver_(IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle_FlatMapSingleObserver *self, JavaUtilConcurrentAtomicAtomicReference *parent, id<IoReactivexSingleObserver> actual);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle_FlatMapSingleObserver *new_IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle_FlatMapSingleObserver_initWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexSingleObserver_(JavaUtilConcurrentAtomicAtomicReference *parent, id<IoReactivexSingleObserver> actual) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle_FlatMapSingleObserver *create_IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle_FlatMapSingleObserver_initWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexSingleObserver_(JavaUtilConcurrentAtomicAtomicReference *parent, id<IoReactivexSingleObserver> actual);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle_FlatMapSingleObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeFlatMapSingle")
