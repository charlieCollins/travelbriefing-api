//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/retrofit2/Utils.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Retrofit2Utils")
#ifdef RESTRICT_Retrofit2Utils
#define INCLUDE_ALL_Retrofit2Utils 0
#else
#define INCLUDE_ALL_Retrofit2Utils 1
#endif
#undef RESTRICT_Retrofit2Utils

#if !defined (Retrofit2Utils_) && (INCLUDE_ALL_Retrofit2Utils || defined(INCLUDE_Retrofit2Utils))
#define Retrofit2Utils_

@class IOSClass;
@class IOSObjectArray;
@class Okhttp3ResponseBody;
@protocol JavaLangReflectParameterizedType;
@protocol JavaLangReflectType;

@interface Retrofit2Utils : NSObject

#pragma mark Package-Private

+ (Okhttp3ResponseBody *)bufferWithOkhttp3ResponseBody:(Okhttp3ResponseBody *)body;

+ (id)checkNotNullWithId:(id)object
            withNSString:(NSString *)message;

+ (void)checkNotPrimitiveWithJavaLangReflectType:(id<JavaLangReflectType>)type;

+ (jboolean)equalsWithJavaLangReflectType:(id<JavaLangReflectType>)a
                  withJavaLangReflectType:(id<JavaLangReflectType>)b;

+ (id<JavaLangReflectType>)getCallResponseTypeWithJavaLangReflectType:(id<JavaLangReflectType>)returnType;

+ (id<JavaLangReflectType>)getGenericSupertypeWithJavaLangReflectType:(id<JavaLangReflectType>)context
                                                         withIOSClass:(IOSClass *)rawType
                                                         withIOSClass:(IOSClass *)toResolve;

+ (id<JavaLangReflectType>)getParameterUpperBoundWithInt:(jint)index
                    withJavaLangReflectParameterizedType:(id<JavaLangReflectParameterizedType>)type;

+ (IOSClass *)getRawTypeWithJavaLangReflectType:(id<JavaLangReflectType>)type;

+ (id<JavaLangReflectType>)getSupertypeWithJavaLangReflectType:(id<JavaLangReflectType>)context
                                                  withIOSClass:(IOSClass *)contextRawType
                                                  withIOSClass:(IOSClass *)supertype;

+ (jint)hashCodeOrZeroWithId:(id)o;

+ (jboolean)hasUnresolvableTypeWithJavaLangReflectType:(id<JavaLangReflectType>)type;

+ (jboolean)isAnnotationPresentWithJavaLangAnnotationAnnotationArray:(IOSObjectArray *)annotations
                                                        withIOSClass:(IOSClass *)cls;

+ (id<JavaLangReflectType>)resolveWithJavaLangReflectType:(id<JavaLangReflectType>)context
                                             withIOSClass:(IOSClass *)contextRawType
                                  withJavaLangReflectType:(id<JavaLangReflectType>)toResolve;

+ (NSString *)typeToStringWithJavaLangReflectType:(id<JavaLangReflectType>)type;

+ (void)validateServiceInterfaceWithIOSClass:(IOSClass *)service;

@end

J2OBJC_STATIC_INIT(Retrofit2Utils)

inline IOSObjectArray *Retrofit2Utils_get_EMPTY_TYPE_ARRAY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *Retrofit2Utils_EMPTY_TYPE_ARRAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Retrofit2Utils, EMPTY_TYPE_ARRAY, IOSObjectArray *)

FOUNDATION_EXPORT IOSClass *Retrofit2Utils_getRawTypeWithJavaLangReflectType_(id<JavaLangReflectType> type);

FOUNDATION_EXPORT jboolean Retrofit2Utils_equalsWithJavaLangReflectType_withJavaLangReflectType_(id<JavaLangReflectType> a, id<JavaLangReflectType> b);

FOUNDATION_EXPORT id<JavaLangReflectType> Retrofit2Utils_getGenericSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(id<JavaLangReflectType> context, IOSClass *rawType, IOSClass *toResolve);

FOUNDATION_EXPORT jint Retrofit2Utils_hashCodeOrZeroWithId_(id o);

FOUNDATION_EXPORT NSString *Retrofit2Utils_typeToStringWithJavaLangReflectType_(id<JavaLangReflectType> type);

FOUNDATION_EXPORT id<JavaLangReflectType> Retrofit2Utils_getSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(id<JavaLangReflectType> context, IOSClass *contextRawType, IOSClass *supertype);

FOUNDATION_EXPORT id<JavaLangReflectType> Retrofit2Utils_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_(id<JavaLangReflectType> context, IOSClass *contextRawType, id<JavaLangReflectType> toResolve);

FOUNDATION_EXPORT void Retrofit2Utils_checkNotPrimitiveWithJavaLangReflectType_(id<JavaLangReflectType> type);

FOUNDATION_EXPORT id Retrofit2Utils_checkNotNullWithId_withNSString_(id object, NSString *message);

FOUNDATION_EXPORT jboolean Retrofit2Utils_isAnnotationPresentWithJavaLangAnnotationAnnotationArray_withIOSClass_(IOSObjectArray *annotations, IOSClass *cls);

FOUNDATION_EXPORT Okhttp3ResponseBody *Retrofit2Utils_bufferWithOkhttp3ResponseBody_(Okhttp3ResponseBody *body);

FOUNDATION_EXPORT void Retrofit2Utils_validateServiceInterfaceWithIOSClass_(IOSClass *service);

FOUNDATION_EXPORT id<JavaLangReflectType> Retrofit2Utils_getParameterUpperBoundWithInt_withJavaLangReflectParameterizedType_(jint index, id<JavaLangReflectParameterizedType> type);

FOUNDATION_EXPORT jboolean Retrofit2Utils_hasUnresolvableTypeWithJavaLangReflectType_(id<JavaLangReflectType> type);

FOUNDATION_EXPORT id<JavaLangReflectType> Retrofit2Utils_getCallResponseTypeWithJavaLangReflectType_(id<JavaLangReflectType> returnType);

J2OBJC_TYPE_LITERAL_HEADER(Retrofit2Utils)

#endif

#pragma pop_macro("INCLUDE_ALL_Retrofit2Utils")
