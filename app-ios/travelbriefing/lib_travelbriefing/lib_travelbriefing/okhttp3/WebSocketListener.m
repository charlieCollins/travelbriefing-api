//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okhttp3/WebSocketListener.java
//

#include "J2ObjC_source.h"
#include "okhttp3/Response.h"
#include "okhttp3/WebSocket.h"
#include "okhttp3/WebSocketListener.h"
#include "okio/ByteString.h"

@implementation Okhttp3WebSocketListener

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3WebSocketListener_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onOpenWithOkhttp3WebSocket:(id<Okhttp3WebSocket>)webSocket
               withOkhttp3Response:(Okhttp3Response *)response {
}

- (void)onMessageWithOkhttp3WebSocket:(id<Okhttp3WebSocket>)webSocket
                         withNSString:(NSString *)text {
}

- (void)onMessageWithOkhttp3WebSocket:(id<Okhttp3WebSocket>)webSocket
                   withOkioByteString:(OkioByteString *)bytes {
}

- (void)onClosingWithOkhttp3WebSocket:(id<Okhttp3WebSocket>)webSocket
                              withInt:(jint)code
                         withNSString:(NSString *)reason {
}

- (void)onClosedWithOkhttp3WebSocket:(id<Okhttp3WebSocket>)webSocket
                             withInt:(jint)code
                        withNSString:(NSString *)reason {
}

- (void)onFailureWithOkhttp3WebSocket:(id<Okhttp3WebSocket>)webSocket
                      withNSException:(NSException *)t
                  withOkhttp3Response:(Okhttp3Response *)response {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onOpenWithOkhttp3WebSocket:withOkhttp3Response:);
  methods[2].selector = @selector(onMessageWithOkhttp3WebSocket:withNSString:);
  methods[3].selector = @selector(onMessageWithOkhttp3WebSocket:withOkioByteString:);
  methods[4].selector = @selector(onClosingWithOkhttp3WebSocket:withInt:withNSString:);
  methods[5].selector = @selector(onClosedWithOkhttp3WebSocket:withInt:withNSString:);
  methods[6].selector = @selector(onFailureWithOkhttp3WebSocket:withNSException:withOkhttp3Response:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onOpen", "LOkhttp3WebSocket;LOkhttp3Response;", "onMessage", "LOkhttp3WebSocket;LNSString;", "LOkhttp3WebSocket;LOkioByteString;", "onClosing", "LOkhttp3WebSocket;ILNSString;", "onClosed", "onFailure", "LOkhttp3WebSocket;LNSException;LOkhttp3Response;" };
  static const J2ObjcClassInfo _Okhttp3WebSocketListener = { "WebSocketListener", "okhttp3", ptrTable, methods, NULL, 7, 0x401, 7, 0, -1, -1, -1, -1, -1 };
  return &_Okhttp3WebSocketListener;
}

@end

void Okhttp3WebSocketListener_init(Okhttp3WebSocketListener *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3WebSocketListener)
