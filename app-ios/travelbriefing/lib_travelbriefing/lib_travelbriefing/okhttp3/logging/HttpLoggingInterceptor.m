//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okhttp3/logging/HttpLoggingInterceptor.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/EOFException.h"
#include "java/lang/Character.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/UnsupportedCharsetException.h"
#include "java/util/concurrent/TimeUnit.h"
#include "okhttp3/Connection.h"
#include "okhttp3/Headers.h"
#include "okhttp3/HttpUrl.h"
#include "okhttp3/Interceptor.h"
#include "okhttp3/MediaType.h"
#include "okhttp3/Protocol.h"
#include "okhttp3/Request.h"
#include "okhttp3/RequestBody.h"
#include "okhttp3/Response.h"
#include "okhttp3/ResponseBody.h"
#include "okhttp3/internal/http/HttpHeaders.h"
#include "okhttp3/internal/platform/Platform.h"
#include "okhttp3/logging/HttpLoggingInterceptor.h"
#include "okio/Buffer.h"
#include "okio/BufferedSource.h"

@interface Okhttp3LoggingHttpLoggingInterceptor () {
 @public
  id<Okhttp3LoggingHttpLoggingInterceptor_Logger> logger_;
  volatile_id level_;
}

- (jboolean)bodyEncodedWithOkhttp3Headers:(Okhttp3Headers *)headers;

@end

J2OBJC_FIELD_SETTER(Okhttp3LoggingHttpLoggingInterceptor, logger_, id<Okhttp3LoggingHttpLoggingInterceptor_Logger>)
J2OBJC_VOLATILE_FIELD_SETTER(Okhttp3LoggingHttpLoggingInterceptor, level_, Okhttp3LoggingHttpLoggingInterceptor_Level *)

inline JavaNioCharsetCharset *Okhttp3LoggingHttpLoggingInterceptor_get_UTF8();
static JavaNioCharsetCharset *Okhttp3LoggingHttpLoggingInterceptor_UTF8;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3LoggingHttpLoggingInterceptor, UTF8, JavaNioCharsetCharset *)

__attribute__((unused)) static jboolean Okhttp3LoggingHttpLoggingInterceptor_bodyEncodedWithOkhttp3Headers_(Okhttp3LoggingHttpLoggingInterceptor *self, Okhttp3Headers *headers);

__attribute__((unused)) static void Okhttp3LoggingHttpLoggingInterceptor_Level_initWithNSString_withInt_(Okhttp3LoggingHttpLoggingInterceptor_Level *self, NSString *__name, jint __ordinal);

@interface Okhttp3LoggingHttpLoggingInterceptor_Logger_1 : NSObject < Okhttp3LoggingHttpLoggingInterceptor_Logger >

- (instancetype)init;

- (void)logWithNSString:(NSString *)message;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3LoggingHttpLoggingInterceptor_Logger_1)

__attribute__((unused)) static void Okhttp3LoggingHttpLoggingInterceptor_Logger_1_init(Okhttp3LoggingHttpLoggingInterceptor_Logger_1 *self);

__attribute__((unused)) static Okhttp3LoggingHttpLoggingInterceptor_Logger_1 *new_Okhttp3LoggingHttpLoggingInterceptor_Logger_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3LoggingHttpLoggingInterceptor_Logger_1 *create_Okhttp3LoggingHttpLoggingInterceptor_Logger_1_init();

J2OBJC_INITIALIZED_DEFN(Okhttp3LoggingHttpLoggingInterceptor)

@implementation Okhttp3LoggingHttpLoggingInterceptor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3LoggingHttpLoggingInterceptor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOkhttp3LoggingHttpLoggingInterceptor_Logger:(id<Okhttp3LoggingHttpLoggingInterceptor_Logger>)logger {
  Okhttp3LoggingHttpLoggingInterceptor_initWithOkhttp3LoggingHttpLoggingInterceptor_Logger_(self, logger);
  return self;
}

- (Okhttp3LoggingHttpLoggingInterceptor *)setLevelWithOkhttp3LoggingHttpLoggingInterceptor_Level:(Okhttp3LoggingHttpLoggingInterceptor_Level *)level {
  if (level == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"level == null. Use Level.NONE instead.");
  JreVolatileStrongAssign(&self->level_, level);
  return self;
}

- (Okhttp3LoggingHttpLoggingInterceptor_Level *)getLevel {
  return JreLoadVolatileId(&level_);
}

- (Okhttp3Response *)interceptWithOkhttp3Interceptor_Chain:(id<Okhttp3Interceptor_Chain>)chain {
  Okhttp3LoggingHttpLoggingInterceptor_Level *level = JreLoadVolatileId(&self->level_);
  Okhttp3Request *request = [((id<Okhttp3Interceptor_Chain>) nil_chk(chain)) request];
  if (level == JreLoadEnum(Okhttp3LoggingHttpLoggingInterceptor_Level, NONE)) {
    return [chain proceedWithOkhttp3Request:request];
  }
  jboolean logBody = level == JreLoadEnum(Okhttp3LoggingHttpLoggingInterceptor_Level, BODY);
  jboolean logHeaders = logBody || level == JreLoadEnum(Okhttp3LoggingHttpLoggingInterceptor_Level, HEADERS);
  Okhttp3RequestBody *requestBody = [((Okhttp3Request *) nil_chk(request)) body];
  jboolean hasRequestBody = requestBody != nil;
  id<Okhttp3Connection> connection = [chain connection];
  Okhttp3Protocol *protocol = connection != nil ? [connection protocol] : JreLoadEnum(Okhttp3Protocol, HTTP_1_1);
  NSString *requestStartMessage = JreStrcat("$$C@C@", @"--> ", [request method], ' ', [request url], ' ', protocol);
  if (!logHeaders && hasRequestBody) {
    JreStrAppend(&requestStartMessage, "$J$", @" (", [((Okhttp3RequestBody *) nil_chk(requestBody)) contentLength], @"-byte body)");
  }
  [((id<Okhttp3LoggingHttpLoggingInterceptor_Logger>) nil_chk(logger_)) logWithNSString:requestStartMessage];
  if (logHeaders) {
    if (hasRequestBody) {
      if ([((Okhttp3RequestBody *) nil_chk(requestBody)) contentType] != nil) {
        [logger_ logWithNSString:JreStrcat("$@", @"Content-Type: ", [requestBody contentType])];
      }
      if ([requestBody contentLength] != -1) {
        [logger_ logWithNSString:JreStrcat("$J", @"Content-Length: ", [requestBody contentLength])];
      }
    }
    Okhttp3Headers *headers = [request headers];
    for (jint i = 0, count = [((Okhttp3Headers *) nil_chk(headers)) size]; i < count; i++) {
      NSString *name = [headers nameWithInt:i];
      if (![@"Content-Type" java_equalsIgnoreCase:name] && ![@"Content-Length" java_equalsIgnoreCase:name]) {
        [logger_ logWithNSString:JreStrcat("$$$", name, @": ", [headers valueWithInt:i])];
      }
    }
    if (!logBody || !hasRequestBody) {
      [logger_ logWithNSString:JreStrcat("$$", @"--> END ", [request method])];
    }
    else if (Okhttp3LoggingHttpLoggingInterceptor_bodyEncodedWithOkhttp3Headers_(self, [request headers])) {
      [logger_ logWithNSString:JreStrcat("$$$", @"--> END ", [request method], @" (encoded body omitted)")];
    }
    else {
      OkioBuffer *buffer = create_OkioBuffer_init();
      [((Okhttp3RequestBody *) nil_chk(requestBody)) writeToWithOkioBufferedSink:buffer];
      JavaNioCharsetCharset *charset = Okhttp3LoggingHttpLoggingInterceptor_UTF8;
      Okhttp3MediaType *contentType = [requestBody contentType];
      if (contentType != nil) {
        charset = [contentType charsetWithJavaNioCharsetCharset:Okhttp3LoggingHttpLoggingInterceptor_UTF8];
      }
      [logger_ logWithNSString:@""];
      if (Okhttp3LoggingHttpLoggingInterceptor_isPlaintextWithOkioBuffer_(buffer)) {
        [logger_ logWithNSString:[buffer readStringWithJavaNioCharsetCharset:charset]];
        [logger_ logWithNSString:JreStrcat("$$$J$", @"--> END ", [request method], @" (", [requestBody contentLength], @"-byte body)")];
      }
      else {
        [logger_ logWithNSString:JreStrcat("$$$J$", @"--> END ", [request method], @" (binary ", [requestBody contentLength], @"-byte body omitted)")];
      }
    }
  }
  jlong startNs = JavaLangSystem_nanoTime();
  Okhttp3Response *response;
  @try {
    response = [chain proceedWithOkhttp3Request:request];
  }
  @catch (JavaLangException *e) {
    [logger_ logWithNSString:JreStrcat("$@", @"<-- HTTP FAILED: ", e)];
    @throw e;
  }
  jlong tookMs = [((JavaUtilConcurrentTimeUnit *) nil_chk(JreLoadEnum(JavaUtilConcurrentTimeUnit, NANOSECONDS))) toMillisWithLong:JavaLangSystem_nanoTime() - startNs];
  Okhttp3ResponseBody *responseBody = [((Okhttp3Response *) nil_chk(response)) body];
  jlong contentLength = [((Okhttp3ResponseBody *) nil_chk(responseBody)) contentLength];
  NSString *bodySize = contentLength != -1 ? JreStrcat("J$", contentLength, @"-byte") : @"unknown-length";
  [logger_ logWithNSString:JreStrcat("$IC$C@$J$$C", @"<-- ", [response code], ' ', [response message], ' ', [((Okhttp3Request *) nil_chk([response request])) url], @" (", tookMs, @"ms", (!logHeaders ? JreStrcat("$$$", @", ", bodySize, @" body") : @""), ')')];
  if (logHeaders) {
    Okhttp3Headers *headers = [response headers];
    for (jint i = 0, count = [((Okhttp3Headers *) nil_chk(headers)) size]; i < count; i++) {
      [logger_ logWithNSString:JreStrcat("$$$", [headers nameWithInt:i], @": ", [headers valueWithInt:i])];
    }
    if (!logBody || !Okhttp3InternalHttpHttpHeaders_hasBodyWithOkhttp3Response_(response)) {
      [logger_ logWithNSString:@"<-- END HTTP"];
    }
    else if (Okhttp3LoggingHttpLoggingInterceptor_bodyEncodedWithOkhttp3Headers_(self, [response headers])) {
      [logger_ logWithNSString:@"<-- END HTTP (encoded body omitted)"];
    }
    else {
      id<OkioBufferedSource> source = [responseBody source];
      [((id<OkioBufferedSource>) nil_chk(source)) requestWithLong:JavaLangLong_MAX_VALUE];
      OkioBuffer *buffer = [source buffer];
      JavaNioCharsetCharset *charset = Okhttp3LoggingHttpLoggingInterceptor_UTF8;
      Okhttp3MediaType *contentType = [responseBody contentType];
      if (contentType != nil) {
        @try {
          charset = [contentType charsetWithJavaNioCharsetCharset:Okhttp3LoggingHttpLoggingInterceptor_UTF8];
        }
        @catch (JavaNioCharsetUnsupportedCharsetException *e) {
          [logger_ logWithNSString:@""];
          [logger_ logWithNSString:@"Couldn't decode the response body; charset is likely malformed."];
          [logger_ logWithNSString:@"<-- END HTTP"];
          return response;
        }
      }
      if (!Okhttp3LoggingHttpLoggingInterceptor_isPlaintextWithOkioBuffer_(buffer)) {
        [logger_ logWithNSString:@""];
        [logger_ logWithNSString:JreStrcat("$J$", @"<-- END HTTP (binary ", [((OkioBuffer *) nil_chk(buffer)) size], @"-byte body omitted)")];
        return response;
      }
      if (contentLength != 0) {
        [logger_ logWithNSString:@""];
        [logger_ logWithNSString:[((OkioBuffer *) nil_chk([((OkioBuffer *) nil_chk(buffer)) java_clone])) readStringWithJavaNioCharsetCharset:charset]];
      }
      [logger_ logWithNSString:JreStrcat("$J$", @"<-- END HTTP (", [((OkioBuffer *) nil_chk(buffer)) size], @"-byte body)")];
    }
  }
  return response;
}

+ (jboolean)isPlaintextWithOkioBuffer:(OkioBuffer *)buffer {
  return Okhttp3LoggingHttpLoggingInterceptor_isPlaintextWithOkioBuffer_(buffer);
}

- (jboolean)bodyEncodedWithOkhttp3Headers:(Okhttp3Headers *)headers {
  return Okhttp3LoggingHttpLoggingInterceptor_bodyEncodedWithOkhttp3Headers_(self, headers);
}

- (void)__javaClone:(Okhttp3LoggingHttpLoggingInterceptor *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&level_, &original->level_);
}

- (void)dealloc {
  RELEASE_(logger_);
  JreReleaseVolatile(&level_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOkhttp3LoggingHttpLoggingInterceptor;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOkhttp3LoggingHttpLoggingInterceptor_Level;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response;", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "Z", 0x8, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithOkhttp3LoggingHttpLoggingInterceptor_Logger:);
  methods[2].selector = @selector(setLevelWithOkhttp3LoggingHttpLoggingInterceptor_Level:);
  methods[3].selector = @selector(getLevel);
  methods[4].selector = @selector(interceptWithOkhttp3Interceptor_Chain:);
  methods[5].selector = @selector(isPlaintextWithOkioBuffer:);
  methods[6].selector = @selector(bodyEncodedWithOkhttp3Headers:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "UTF8", "LJavaNioCharsetCharset;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "logger_", "LOkhttp3LoggingHttpLoggingInterceptor_Logger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "level_", "LOkhttp3LoggingHttpLoggingInterceptor_Level;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3LoggingHttpLoggingInterceptor_Logger;", "setLevel", "LOkhttp3LoggingHttpLoggingInterceptor_Level;", "intercept", "LOkhttp3Interceptor_Chain;", "LJavaIoIOException;", "isPlaintext", "LOkioBuffer;", "bodyEncoded", "LOkhttp3Headers;", &Okhttp3LoggingHttpLoggingInterceptor_UTF8, "LOkhttp3LoggingHttpLoggingInterceptor_Level;LOkhttp3LoggingHttpLoggingInterceptor_Logger;" };
  static const J2ObjcClassInfo _Okhttp3LoggingHttpLoggingInterceptor = { "HttpLoggingInterceptor", "okhttp3.logging", ptrTable, methods, fields, 7, 0x11, 7, 3, -1, 11, -1, -1, -1 };
  return &_Okhttp3LoggingHttpLoggingInterceptor;
}

+ (void)initialize {
  if (self == [Okhttp3LoggingHttpLoggingInterceptor class]) {
    JreStrongAssign(&Okhttp3LoggingHttpLoggingInterceptor_UTF8, JavaNioCharsetCharset_forNameWithNSString_(@"UTF-8"));
    J2OBJC_SET_INITIALIZED(Okhttp3LoggingHttpLoggingInterceptor)
  }
}

@end

void Okhttp3LoggingHttpLoggingInterceptor_init(Okhttp3LoggingHttpLoggingInterceptor *self) {
  Okhttp3LoggingHttpLoggingInterceptor_initWithOkhttp3LoggingHttpLoggingInterceptor_Logger_(self, JreLoadStatic(Okhttp3LoggingHttpLoggingInterceptor_Logger, DEFAULT));
}

Okhttp3LoggingHttpLoggingInterceptor *new_Okhttp3LoggingHttpLoggingInterceptor_init() {
  J2OBJC_NEW_IMPL(Okhttp3LoggingHttpLoggingInterceptor, init)
}

Okhttp3LoggingHttpLoggingInterceptor *create_Okhttp3LoggingHttpLoggingInterceptor_init() {
  J2OBJC_CREATE_IMPL(Okhttp3LoggingHttpLoggingInterceptor, init)
}

void Okhttp3LoggingHttpLoggingInterceptor_initWithOkhttp3LoggingHttpLoggingInterceptor_Logger_(Okhttp3LoggingHttpLoggingInterceptor *self, id<Okhttp3LoggingHttpLoggingInterceptor_Logger> logger) {
  NSObject_init(self);
  JreVolatileStrongAssign(&self->level_, JreLoadEnum(Okhttp3LoggingHttpLoggingInterceptor_Level, NONE));
  JreStrongAssign(&self->logger_, logger);
}

Okhttp3LoggingHttpLoggingInterceptor *new_Okhttp3LoggingHttpLoggingInterceptor_initWithOkhttp3LoggingHttpLoggingInterceptor_Logger_(id<Okhttp3LoggingHttpLoggingInterceptor_Logger> logger) {
  J2OBJC_NEW_IMPL(Okhttp3LoggingHttpLoggingInterceptor, initWithOkhttp3LoggingHttpLoggingInterceptor_Logger_, logger)
}

Okhttp3LoggingHttpLoggingInterceptor *create_Okhttp3LoggingHttpLoggingInterceptor_initWithOkhttp3LoggingHttpLoggingInterceptor_Logger_(id<Okhttp3LoggingHttpLoggingInterceptor_Logger> logger) {
  J2OBJC_CREATE_IMPL(Okhttp3LoggingHttpLoggingInterceptor, initWithOkhttp3LoggingHttpLoggingInterceptor_Logger_, logger)
}

jboolean Okhttp3LoggingHttpLoggingInterceptor_isPlaintextWithOkioBuffer_(OkioBuffer *buffer) {
  Okhttp3LoggingHttpLoggingInterceptor_initialize();
  @try {
    OkioBuffer *prefix = create_OkioBuffer_init();
    jlong byteCount = [((OkioBuffer *) nil_chk(buffer)) size] < 64 ? [buffer size] : 64;
    [buffer copyToWithOkioBuffer:prefix withLong:0 withLong:byteCount];
    for (jint i = 0; i < 16; i++) {
      if ([prefix exhausted]) {
        break;
      }
      jint codePoint = [prefix readUtf8CodePoint];
      if (JavaLangCharacter_isISOControlWithInt_(codePoint) && !JavaLangCharacter_isWhitespaceWithInt_(codePoint)) {
        return false;
      }
    }
    return true;
  }
  @catch (JavaIoEOFException *e) {
    return false;
  }
}

jboolean Okhttp3LoggingHttpLoggingInterceptor_bodyEncodedWithOkhttp3Headers_(Okhttp3LoggingHttpLoggingInterceptor *self, Okhttp3Headers *headers) {
  NSString *contentEncoding = [((Okhttp3Headers *) nil_chk(headers)) getWithNSString:@"Content-Encoding"];
  return contentEncoding != nil && ![contentEncoding java_equalsIgnoreCase:@"identity"];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3LoggingHttpLoggingInterceptor)

J2OBJC_INITIALIZED_DEFN(Okhttp3LoggingHttpLoggingInterceptor_Level)

Okhttp3LoggingHttpLoggingInterceptor_Level *Okhttp3LoggingHttpLoggingInterceptor_Level_values_[4];

@implementation Okhttp3LoggingHttpLoggingInterceptor_Level

+ (IOSObjectArray *)values {
  return Okhttp3LoggingHttpLoggingInterceptor_Level_values();
}

+ (Okhttp3LoggingHttpLoggingInterceptor_Level *)valueOfWithNSString:(NSString *)name {
  return Okhttp3LoggingHttpLoggingInterceptor_Level_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LOkhttp3LoggingHttpLoggingInterceptor_Level;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3LoggingHttpLoggingInterceptor_Level;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NONE", "LOkhttp3LoggingHttpLoggingInterceptor_Level;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "BASIC", "LOkhttp3LoggingHttpLoggingInterceptor_Level;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "HEADERS", "LOkhttp3LoggingHttpLoggingInterceptor_Level;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "BODY", "LOkhttp3LoggingHttpLoggingInterceptor_Level;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(Okhttp3LoggingHttpLoggingInterceptor_Level, NONE), &JreEnum(Okhttp3LoggingHttpLoggingInterceptor_Level, BASIC), &JreEnum(Okhttp3LoggingHttpLoggingInterceptor_Level, HEADERS), &JreEnum(Okhttp3LoggingHttpLoggingInterceptor_Level, BODY), "LOkhttp3LoggingHttpLoggingInterceptor;", "Ljava/lang/Enum<Lokhttp3/logging/HttpLoggingInterceptor$Level;>;" };
  static const J2ObjcClassInfo _Okhttp3LoggingHttpLoggingInterceptor_Level = { "Level", "okhttp3.logging", ptrTable, methods, fields, 7, 0x4019, 2, 4, 6, -1, -1, 7, -1 };
  return &_Okhttp3LoggingHttpLoggingInterceptor_Level;
}

+ (void)initialize {
  if (self == [Okhttp3LoggingHttpLoggingInterceptor_Level class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 4 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"NONE", @"BASIC", @"HEADERS", @"BODY",
    };
    for (jint i = 0; i < 4; i++) {
      (Okhttp3LoggingHttpLoggingInterceptor_Level_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      Okhttp3LoggingHttpLoggingInterceptor_Level_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(Okhttp3LoggingHttpLoggingInterceptor_Level)
  }
}

@end

void Okhttp3LoggingHttpLoggingInterceptor_Level_initWithNSString_withInt_(Okhttp3LoggingHttpLoggingInterceptor_Level *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *Okhttp3LoggingHttpLoggingInterceptor_Level_values() {
  Okhttp3LoggingHttpLoggingInterceptor_Level_initialize();
  return [IOSObjectArray arrayWithObjects:Okhttp3LoggingHttpLoggingInterceptor_Level_values_ count:4 type:Okhttp3LoggingHttpLoggingInterceptor_Level_class_()];
}

Okhttp3LoggingHttpLoggingInterceptor_Level *Okhttp3LoggingHttpLoggingInterceptor_Level_valueOfWithNSString_(NSString *name) {
  Okhttp3LoggingHttpLoggingInterceptor_Level_initialize();
  for (int i = 0; i < 4; i++) {
    Okhttp3LoggingHttpLoggingInterceptor_Level *e = Okhttp3LoggingHttpLoggingInterceptor_Level_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

Okhttp3LoggingHttpLoggingInterceptor_Level *Okhttp3LoggingHttpLoggingInterceptor_Level_fromOrdinal(NSUInteger ordinal) {
  Okhttp3LoggingHttpLoggingInterceptor_Level_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return Okhttp3LoggingHttpLoggingInterceptor_Level_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3LoggingHttpLoggingInterceptor_Level)

J2OBJC_INITIALIZED_DEFN(Okhttp3LoggingHttpLoggingInterceptor_Logger)

id<Okhttp3LoggingHttpLoggingInterceptor_Logger> Okhttp3LoggingHttpLoggingInterceptor_Logger_DEFAULT;

@implementation Okhttp3LoggingHttpLoggingInterceptor_Logger

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(logWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT", "LOkhttp3LoggingHttpLoggingInterceptor_Logger;", .constantValue.asLong = 0, 0x19, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "log", "LNSString;", &Okhttp3LoggingHttpLoggingInterceptor_Logger_DEFAULT, "LOkhttp3LoggingHttpLoggingInterceptor;" };
  static const J2ObjcClassInfo _Okhttp3LoggingHttpLoggingInterceptor_Logger = { "Logger", "okhttp3.logging", ptrTable, methods, fields, 7, 0x609, 1, 1, 3, -1, -1, -1, -1 };
  return &_Okhttp3LoggingHttpLoggingInterceptor_Logger;
}

+ (void)initialize {
  if (self == [Okhttp3LoggingHttpLoggingInterceptor_Logger class]) {
    JreStrongAssignAndConsume(&Okhttp3LoggingHttpLoggingInterceptor_Logger_DEFAULT, new_Okhttp3LoggingHttpLoggingInterceptor_Logger_1_init());
    J2OBJC_SET_INITIALIZED(Okhttp3LoggingHttpLoggingInterceptor_Logger)
  }
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(Okhttp3LoggingHttpLoggingInterceptor_Logger)

@implementation Okhttp3LoggingHttpLoggingInterceptor_Logger_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3LoggingHttpLoggingInterceptor_Logger_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)logWithNSString:(NSString *)message {
  [((Okhttp3InternalPlatformPlatform *) nil_chk(Okhttp3InternalPlatformPlatform_get())) logWithInt:Okhttp3InternalPlatformPlatform_INFO withNSString:message withNSException:nil];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(logWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "log", "LNSString;", "LOkhttp3LoggingHttpLoggingInterceptor_Logger;" };
  static const J2ObjcClassInfo _Okhttp3LoggingHttpLoggingInterceptor_Logger_1 = { "", "okhttp3.logging", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, -1, -1, -1 };
  return &_Okhttp3LoggingHttpLoggingInterceptor_Logger_1;
}

@end

void Okhttp3LoggingHttpLoggingInterceptor_Logger_1_init(Okhttp3LoggingHttpLoggingInterceptor_Logger_1 *self) {
  NSObject_init(self);
}

Okhttp3LoggingHttpLoggingInterceptor_Logger_1 *new_Okhttp3LoggingHttpLoggingInterceptor_Logger_1_init() {
  J2OBJC_NEW_IMPL(Okhttp3LoggingHttpLoggingInterceptor_Logger_1, init)
}

Okhttp3LoggingHttpLoggingInterceptor_Logger_1 *create_Okhttp3LoggingHttpLoggingInterceptor_Logger_1_init() {
  J2OBJC_CREATE_IMPL(Okhttp3LoggingHttpLoggingInterceptor_Logger_1, init)
}
