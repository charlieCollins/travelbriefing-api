//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okhttp3/internal/ws/WebSocketReader.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/net/ProtocolException.h"
#include "java/util/concurrent/TimeUnit.h"
#include "okhttp3/internal/ws/WebSocketProtocol.h"
#include "okhttp3/internal/ws/WebSocketReader.h"
#include "okio/Buffer.h"
#include "okio/BufferedSource.h"
#include "okio/ByteString.h"
#include "okio/Timeout.h"

@interface Okhttp3InternalWsWebSocketReader ()

- (void)readHeader;

- (void)readControlFrame;

- (void)readMessageFrame;

- (void)readMessageWithOkioBuffer:(OkioBuffer *)sink;

@end

__attribute__((unused)) static void Okhttp3InternalWsWebSocketReader_readHeader(Okhttp3InternalWsWebSocketReader *self);

__attribute__((unused)) static void Okhttp3InternalWsWebSocketReader_readControlFrame(Okhttp3InternalWsWebSocketReader *self);

__attribute__((unused)) static void Okhttp3InternalWsWebSocketReader_readMessageFrame(Okhttp3InternalWsWebSocketReader *self);

__attribute__((unused)) static void Okhttp3InternalWsWebSocketReader_readMessageWithOkioBuffer_(Okhttp3InternalWsWebSocketReader *self, OkioBuffer *sink);

@interface Okhttp3InternalWsWebSocketReader_FrameCallback : NSObject

@end

@implementation Okhttp3InternalWsWebSocketReader

- (instancetype)initWithBoolean:(jboolean)isClient
         withOkioBufferedSource:(id<OkioBufferedSource>)source
withOkhttp3InternalWsWebSocketReader_FrameCallback:(id<Okhttp3InternalWsWebSocketReader_FrameCallback>)frameCallback {
  Okhttp3InternalWsWebSocketReader_initWithBoolean_withOkioBufferedSource_withOkhttp3InternalWsWebSocketReader_FrameCallback_(self, isClient, source, frameCallback);
  return self;
}

- (void)processNextFrame {
  Okhttp3InternalWsWebSocketReader_readHeader(self);
  if (isControlFrame_) {
    Okhttp3InternalWsWebSocketReader_readControlFrame(self);
  }
  else {
    Okhttp3InternalWsWebSocketReader_readMessageFrame(self);
  }
}

- (void)readHeader {
  Okhttp3InternalWsWebSocketReader_readHeader(self);
}

- (void)readControlFrame {
  Okhttp3InternalWsWebSocketReader_readControlFrame(self);
}

- (void)readMessageFrame {
  Okhttp3InternalWsWebSocketReader_readMessageFrame(self);
}

- (void)readUntilNonControlFrame {
  while (!closed_) {
    Okhttp3InternalWsWebSocketReader_readHeader(self);
    if (!isControlFrame_) {
      break;
    }
    Okhttp3InternalWsWebSocketReader_readControlFrame(self);
  }
}

- (void)readMessageWithOkioBuffer:(OkioBuffer *)sink {
  Okhttp3InternalWsWebSocketReader_readMessageWithOkioBuffer_(self, sink);
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(frameCallback_);
  RELEASE_(maskKey_);
  RELEASE_(maskBuffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithBoolean:withOkioBufferedSource:withOkhttp3InternalWsWebSocketReader_FrameCallback:);
  methods[1].selector = @selector(processNextFrame);
  methods[2].selector = @selector(readHeader);
  methods[3].selector = @selector(readControlFrame);
  methods[4].selector = @selector(readMessageFrame);
  methods[5].selector = @selector(readUntilNonControlFrame);
  methods[6].selector = @selector(readMessageWithOkioBuffer:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "isClient_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "source_", "LOkioBufferedSource;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "frameCallback_", "LOkhttp3InternalWsWebSocketReader_FrameCallback;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "closed_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "opcode_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "frameLength_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "frameBytesRead_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "isFinalFrame_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "isControlFrame_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "isMasked_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "maskKey_", "[B", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maskBuffer_", "[B", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ZLOkioBufferedSource;LOkhttp3InternalWsWebSocketReader_FrameCallback;", "LJavaIoIOException;", "readMessage", "LOkioBuffer;", "LOkhttp3InternalWsWebSocketReader_FrameCallback;" };
  static const J2ObjcClassInfo _Okhttp3InternalWsWebSocketReader = { "WebSocketReader", "okhttp3.internal.ws", ptrTable, methods, fields, 7, 0x10, 7, 12, -1, 4, -1, -1, -1 };
  return &_Okhttp3InternalWsWebSocketReader;
}

@end

void Okhttp3InternalWsWebSocketReader_initWithBoolean_withOkioBufferedSource_withOkhttp3InternalWsWebSocketReader_FrameCallback_(Okhttp3InternalWsWebSocketReader *self, jboolean isClient, id<OkioBufferedSource> source, id<Okhttp3InternalWsWebSocketReader_FrameCallback> frameCallback) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->maskKey_, [IOSByteArray newArrayWithLength:4]);
  JreStrongAssignAndConsume(&self->maskBuffer_, [IOSByteArray newArrayWithLength:8192]);
  if (source == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"source == null");
  if (frameCallback == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"frameCallback == null");
  self->isClient_ = isClient;
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->frameCallback_, frameCallback);
}

Okhttp3InternalWsWebSocketReader *new_Okhttp3InternalWsWebSocketReader_initWithBoolean_withOkioBufferedSource_withOkhttp3InternalWsWebSocketReader_FrameCallback_(jboolean isClient, id<OkioBufferedSource> source, id<Okhttp3InternalWsWebSocketReader_FrameCallback> frameCallback) {
  J2OBJC_NEW_IMPL(Okhttp3InternalWsWebSocketReader, initWithBoolean_withOkioBufferedSource_withOkhttp3InternalWsWebSocketReader_FrameCallback_, isClient, source, frameCallback)
}

Okhttp3InternalWsWebSocketReader *create_Okhttp3InternalWsWebSocketReader_initWithBoolean_withOkioBufferedSource_withOkhttp3InternalWsWebSocketReader_FrameCallback_(jboolean isClient, id<OkioBufferedSource> source, id<Okhttp3InternalWsWebSocketReader_FrameCallback> frameCallback) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalWsWebSocketReader, initWithBoolean_withOkioBufferedSource_withOkhttp3InternalWsWebSocketReader_FrameCallback_, isClient, source, frameCallback)
}

void Okhttp3InternalWsWebSocketReader_readHeader(Okhttp3InternalWsWebSocketReader *self) {
  if (self->closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
  jint b0;
  jlong timeoutBefore = [((OkioTimeout *) nil_chk([((id<OkioBufferedSource>) nil_chk(self->source_)) timeout])) timeoutNanos];
  [((OkioTimeout *) nil_chk([self->source_ timeout])) clearTimeout];
  @try {
    b0 = [self->source_ readByte] & (jint) 0xff;
  }
  @finally {
    [((OkioTimeout *) nil_chk([self->source_ timeout])) timeoutWithLong:timeoutBefore withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, NANOSECONDS)];
  }
  self->opcode_ = b0 & Okhttp3InternalWsWebSocketProtocol_B0_MASK_OPCODE;
  self->isFinalFrame_ = ((b0 & Okhttp3InternalWsWebSocketProtocol_B0_FLAG_FIN) != 0);
  self->isControlFrame_ = ((b0 & Okhttp3InternalWsWebSocketProtocol_OPCODE_FLAG_CONTROL) != 0);
  if (self->isControlFrame_ && !self->isFinalFrame_) {
    @throw create_JavaNetProtocolException_initWithNSString_(@"Control frames must be final.");
  }
  jboolean reservedFlag1 = (b0 & Okhttp3InternalWsWebSocketProtocol_B0_FLAG_RSV1) != 0;
  jboolean reservedFlag2 = (b0 & Okhttp3InternalWsWebSocketProtocol_B0_FLAG_RSV2) != 0;
  jboolean reservedFlag3 = (b0 & Okhttp3InternalWsWebSocketProtocol_B0_FLAG_RSV3) != 0;
  if (reservedFlag1 || reservedFlag2 || reservedFlag3) {
    @throw create_JavaNetProtocolException_initWithNSString_(@"Reserved flags are unsupported.");
  }
  jint b1 = [self->source_ readByte] & (jint) 0xff;
  self->isMasked_ = ((b1 & Okhttp3InternalWsWebSocketProtocol_B1_FLAG_MASK) != 0);
  if (self->isMasked_ == self->isClient_) {
    @throw create_JavaNetProtocolException_initWithNSString_(self->isClient_ ? @"Server-sent frames must not be masked." : @"Client-sent frames must be masked.");
  }
  self->frameLength_ = b1 & Okhttp3InternalWsWebSocketProtocol_B1_MASK_LENGTH;
  if (self->frameLength_ == Okhttp3InternalWsWebSocketProtocol_PAYLOAD_SHORT) {
    self->frameLength_ = [self->source_ readShort] & (jlong) 0xffffLL;
  }
  else if (self->frameLength_ == Okhttp3InternalWsWebSocketProtocol_PAYLOAD_LONG) {
    self->frameLength_ = [self->source_ readLong];
    if (self->frameLength_ < 0) {
      @throw create_JavaNetProtocolException_initWithNSString_(JreStrcat("$$$", @"Frame length 0x", JavaLangLong_toHexStringWithLong_(self->frameLength_), @" > 0x7FFFFFFFFFFFFFFF"));
    }
  }
  self->frameBytesRead_ = 0;
  if (self->isControlFrame_ && self->frameLength_ > Okhttp3InternalWsWebSocketProtocol_PAYLOAD_BYTE_MAX) {
    @throw create_JavaNetProtocolException_initWithNSString_(JreStrcat("$J$", @"Control frame must be less than ", Okhttp3InternalWsWebSocketProtocol_PAYLOAD_BYTE_MAX, @"B."));
  }
  if (self->isMasked_) {
    [self->source_ readFullyWithByteArray:self->maskKey_];
  }
}

void Okhttp3InternalWsWebSocketReader_readControlFrame(Okhttp3InternalWsWebSocketReader *self) {
  OkioBuffer *buffer = create_OkioBuffer_init();
  if (self->frameBytesRead_ < self->frameLength_) {
    if (self->isClient_) {
      [((id<OkioBufferedSource>) nil_chk(self->source_)) readFullyWithOkioBuffer:buffer withLong:self->frameLength_];
    }
    else {
      while (self->frameBytesRead_ < self->frameLength_) {
        jint toRead = (jint) JavaLangMath_minWithLong_withLong_(self->frameLength_ - self->frameBytesRead_, ((IOSByteArray *) nil_chk(self->maskBuffer_))->size_);
        jint read = [((id<OkioBufferedSource>) nil_chk(self->source_)) readWithByteArray:self->maskBuffer_ withInt:0 withInt:toRead];
        if (read == -1) @throw create_JavaIoEOFException_init();
        Okhttp3InternalWsWebSocketProtocol_toggleMaskWithByteArray_withLong_withByteArray_withLong_(self->maskBuffer_, read, self->maskKey_, self->frameBytesRead_);
        [buffer writeWithByteArray:self->maskBuffer_ withInt:0 withInt:read];
        self->frameBytesRead_ += read;
      }
    }
  }
  {
    jint code;
    NSString *reason;
    jlong bufferSize;
    switch (self->opcode_) {
      case Okhttp3InternalWsWebSocketProtocol_OPCODE_CONTROL_PING:
      [((id<Okhttp3InternalWsWebSocketReader_FrameCallback>) nil_chk(self->frameCallback_)) onReadPingWithOkioByteString:[buffer readByteString]];
      break;
      case Okhttp3InternalWsWebSocketProtocol_OPCODE_CONTROL_PONG:
      [((id<Okhttp3InternalWsWebSocketReader_FrameCallback>) nil_chk(self->frameCallback_)) onReadPongWithOkioByteString:[buffer readByteString]];
      break;
      case Okhttp3InternalWsWebSocketProtocol_OPCODE_CONTROL_CLOSE:
      code = Okhttp3InternalWsWebSocketProtocol_CLOSE_NO_STATUS_CODE;
      reason = @"";
      bufferSize = [buffer size];
      if (bufferSize == 1) {
        @throw create_JavaNetProtocolException_initWithNSString_(@"Malformed close payload length of 1.");
      }
      else if (bufferSize != 0) {
        code = [buffer readShort];
        reason = [buffer readUtf8];
        NSString *codeExceptionMessage = Okhttp3InternalWsWebSocketProtocol_closeCodeExceptionMessageWithInt_(code);
        if (codeExceptionMessage != nil) @throw create_JavaNetProtocolException_initWithNSString_(codeExceptionMessage);
      }
      [((id<Okhttp3InternalWsWebSocketReader_FrameCallback>) nil_chk(self->frameCallback_)) onReadCloseWithInt:code withNSString:reason];
      self->closed_ = true;
      break;
      default:
      @throw create_JavaNetProtocolException_initWithNSString_(JreStrcat("$$", @"Unknown control opcode: ", JavaLangInteger_toHexStringWithInt_(self->opcode_)));
    }
  }
}

void Okhttp3InternalWsWebSocketReader_readMessageFrame(Okhttp3InternalWsWebSocketReader *self) {
  jint opcode = self->opcode_;
  if (opcode != Okhttp3InternalWsWebSocketProtocol_OPCODE_TEXT && opcode != Okhttp3InternalWsWebSocketProtocol_OPCODE_BINARY) {
    @throw create_JavaNetProtocolException_initWithNSString_(JreStrcat("$$", @"Unknown opcode: ", JavaLangInteger_toHexStringWithInt_(opcode)));
  }
  OkioBuffer *message = create_OkioBuffer_init();
  Okhttp3InternalWsWebSocketReader_readMessageWithOkioBuffer_(self, message);
  if (opcode == Okhttp3InternalWsWebSocketProtocol_OPCODE_TEXT) {
    [((id<Okhttp3InternalWsWebSocketReader_FrameCallback>) nil_chk(self->frameCallback_)) onReadMessageWithNSString:[message readUtf8]];
  }
  else {
    [((id<Okhttp3InternalWsWebSocketReader_FrameCallback>) nil_chk(self->frameCallback_)) onReadMessageWithOkioByteString:[message readByteString]];
  }
}

void Okhttp3InternalWsWebSocketReader_readMessageWithOkioBuffer_(Okhttp3InternalWsWebSocketReader *self, OkioBuffer *sink) {
  while (true) {
    if (self->closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    if (self->frameBytesRead_ == self->frameLength_) {
      if (self->isFinalFrame_) return;
      [self readUntilNonControlFrame];
      if (self->opcode_ != Okhttp3InternalWsWebSocketProtocol_OPCODE_CONTINUATION) {
        @throw create_JavaNetProtocolException_initWithNSString_(JreStrcat("$$", @"Expected continuation opcode. Got: ", JavaLangInteger_toHexStringWithInt_(self->opcode_)));
      }
      if (self->isFinalFrame_ && self->frameLength_ == 0) {
        return;
      }
    }
    jlong toRead = self->frameLength_ - self->frameBytesRead_;
    jlong read;
    if (self->isMasked_) {
      toRead = JavaLangMath_minWithLong_withLong_(toRead, ((IOSByteArray *) nil_chk(self->maskBuffer_))->size_);
      read = [((id<OkioBufferedSource>) nil_chk(self->source_)) readWithByteArray:self->maskBuffer_ withInt:0 withInt:(jint) toRead];
      if (read == -1) @throw create_JavaIoEOFException_init();
      Okhttp3InternalWsWebSocketProtocol_toggleMaskWithByteArray_withLong_withByteArray_withLong_(self->maskBuffer_, read, self->maskKey_, self->frameBytesRead_);
      [((OkioBuffer *) nil_chk(sink)) writeWithByteArray:self->maskBuffer_ withInt:0 withInt:(jint) read];
    }
    else {
      read = [((id<OkioBufferedSource>) nil_chk(self->source_)) readWithOkioBuffer:sink withLong:toRead];
      if (read == -1) @throw create_JavaIoEOFException_init();
    }
    self->frameBytesRead_ += read;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalWsWebSocketReader)

@implementation Okhttp3InternalWsWebSocketReader_FrameCallback

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 3, 2, -1, -1, -1 },
    { NULL, "V", 0x401, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 5, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(onReadMessageWithNSString:);
  methods[1].selector = @selector(onReadMessageWithOkioByteString:);
  methods[2].selector = @selector(onReadPingWithOkioByteString:);
  methods[3].selector = @selector(onReadPongWithOkioByteString:);
  methods[4].selector = @selector(onReadCloseWithInt:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onReadMessage", "LNSString;", "LJavaIoIOException;", "LOkioByteString;", "onReadPing", "onReadPong", "onReadClose", "ILNSString;", "LOkhttp3InternalWsWebSocketReader;" };
  static const J2ObjcClassInfo _Okhttp3InternalWsWebSocketReader_FrameCallback = { "FrameCallback", "okhttp3.internal.ws", ptrTable, methods, NULL, 7, 0x609, 5, 0, 8, -1, -1, -1, -1 };
  return &_Okhttp3InternalWsWebSocketReader_FrameCallback;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(Okhttp3InternalWsWebSocketReader_FrameCallback)
