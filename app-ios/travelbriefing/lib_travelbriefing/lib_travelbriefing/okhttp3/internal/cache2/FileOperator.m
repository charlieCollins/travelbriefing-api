//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okhttp3/internal/cache2/FileOperator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/EOFException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Math.h"
#include "java/nio/Buffer.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/channels/FileChannel.h"
#include "okhttp3/internal/cache2/FileOperator.h"
#include "okio/Buffer.h"

@interface Okhttp3InternalCache2FileOperator () {
 @public
  IOSByteArray *byteArray_;
  JavaNioByteBuffer *byteBuffer_;
  JavaNioChannelsFileChannel *fileChannel_;
}

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalCache2FileOperator, byteArray_, IOSByteArray *)
J2OBJC_FIELD_SETTER(Okhttp3InternalCache2FileOperator, byteBuffer_, JavaNioByteBuffer *)
J2OBJC_FIELD_SETTER(Okhttp3InternalCache2FileOperator, fileChannel_, JavaNioChannelsFileChannel *)

inline jint Okhttp3InternalCache2FileOperator_get_BUFFER_SIZE();
#define Okhttp3InternalCache2FileOperator_BUFFER_SIZE 8192
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3InternalCache2FileOperator, BUFFER_SIZE, jint)

@implementation Okhttp3InternalCache2FileOperator

- (instancetype)initWithJavaNioChannelsFileChannel:(JavaNioChannelsFileChannel *)fileChannel {
  Okhttp3InternalCache2FileOperator_initWithJavaNioChannelsFileChannel_(self, fileChannel);
  return self;
}

- (void)writeWithLong:(jlong)pos
       withOkioBuffer:(OkioBuffer *)source
             withLong:(jlong)byteCount {
  if (byteCount < 0 || byteCount > [((OkioBuffer *) nil_chk(source)) size]) @throw create_JavaLangIndexOutOfBoundsException_init();
  while (byteCount > 0LL) {
    @try {
      jint toWrite = (jint) JavaLangMath_minWithLong_withLong_(Okhttp3InternalCache2FileOperator_BUFFER_SIZE, byteCount);
      [((OkioBuffer *) nil_chk(source)) readWithByteArray:byteArray_ withInt:0 withInt:toWrite];
      [((JavaNioByteBuffer *) nil_chk(byteBuffer_)) limitWithInt:toWrite];
      do {
        jint bytesWritten = [((JavaNioChannelsFileChannel *) nil_chk(fileChannel_)) writeWithJavaNioByteBuffer:byteBuffer_ withLong:pos];
        pos += bytesWritten;
      }
      while ([byteBuffer_ hasRemaining]);
      byteCount -= toWrite;
    }
    @finally {
      [((JavaNioByteBuffer *) nil_chk(byteBuffer_)) clear];
    }
  }
}

- (void)readWithLong:(jlong)pos
      withOkioBuffer:(OkioBuffer *)sink
            withLong:(jlong)byteCount {
  if (byteCount < 0) @throw create_JavaLangIndexOutOfBoundsException_init();
  while (byteCount > 0LL) {
    @try {
      [((JavaNioByteBuffer *) nil_chk(byteBuffer_)) limitWithInt:(jint) JavaLangMath_minWithLong_withLong_(Okhttp3InternalCache2FileOperator_BUFFER_SIZE, byteCount)];
      if ([((JavaNioChannelsFileChannel *) nil_chk(fileChannel_)) readWithJavaNioByteBuffer:byteBuffer_ withLong:pos] == -1) @throw create_JavaIoEOFException_init();
      jint bytesRead = [byteBuffer_ position];
      [((OkioBuffer *) nil_chk(sink)) writeWithByteArray:byteArray_ withInt:0 withInt:bytesRead];
      pos += bytesRead;
      byteCount -= bytesRead;
    }
    @finally {
      [byteBuffer_ clear];
    }
  }
}

- (void)dealloc {
  RELEASE_(byteArray_);
  RELEASE_(byteBuffer_);
  RELEASE_(fileChannel_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaNioChannelsFileChannel:);
  methods[1].selector = @selector(writeWithLong:withOkioBuffer:withLong:);
  methods[2].selector = @selector(readWithLong:withOkioBuffer:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BUFFER_SIZE", "I", .constantValue.asInt = Okhttp3InternalCache2FileOperator_BUFFER_SIZE, 0x1a, -1, -1, -1, -1 },
    { "byteArray_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "byteBuffer_", "LJavaNioByteBuffer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fileChannel_", "LJavaNioChannelsFileChannel;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaNioChannelsFileChannel;", "write", "JLOkioBuffer;J", "LJavaIoIOException;", "read" };
  static const J2ObjcClassInfo _Okhttp3InternalCache2FileOperator = { "FileOperator", "okhttp3.internal.cache2", ptrTable, methods, fields, 7, 0x10, 3, 4, -1, -1, -1, -1, -1 };
  return &_Okhttp3InternalCache2FileOperator;
}

@end

void Okhttp3InternalCache2FileOperator_initWithJavaNioChannelsFileChannel_(Okhttp3InternalCache2FileOperator *self, JavaNioChannelsFileChannel *fileChannel) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->byteArray_, [IOSByteArray newArrayWithLength:Okhttp3InternalCache2FileOperator_BUFFER_SIZE]);
  JreStrongAssign(&self->byteBuffer_, JavaNioByteBuffer_wrapWithByteArray_(self->byteArray_));
  JreStrongAssign(&self->fileChannel_, fileChannel);
}

Okhttp3InternalCache2FileOperator *new_Okhttp3InternalCache2FileOperator_initWithJavaNioChannelsFileChannel_(JavaNioChannelsFileChannel *fileChannel) {
  J2OBJC_NEW_IMPL(Okhttp3InternalCache2FileOperator, initWithJavaNioChannelsFileChannel_, fileChannel)
}

Okhttp3InternalCache2FileOperator *create_Okhttp3InternalCache2FileOperator_initWithJavaNioChannelsFileChannel_(JavaNioChannelsFileChannel *fileChannel) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalCache2FileOperator, initWithJavaNioChannelsFileChannel_, fileChannel)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalCache2FileOperator)
