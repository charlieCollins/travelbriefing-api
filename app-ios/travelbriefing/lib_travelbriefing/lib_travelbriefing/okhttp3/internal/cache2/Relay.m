//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okhttp3/internal/cache2/Relay.java
//

#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/io/RandomAccessFile.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/lang/Thread.h"
#include "java/nio/channels/FileChannel.h"
#include "okhttp3/internal/Util.h"
#include "okhttp3/internal/cache2/FileOperator.h"
#include "okhttp3/internal/cache2/Relay.h"
#include "okio/Buffer.h"
#include "okio/ByteString.h"
#include "okio/Source.h"
#include "okio/Timeout.h"

@interface Okhttp3InternalCache2Relay () {
 @public
  OkioByteString *metadata_;
}

- (instancetype)initWithJavaIoRandomAccessFile:(JavaIoRandomAccessFile *)file
                                withOkioSource:(id<OkioSource>)upstream
                                      withLong:(jlong)upstreamPos
                            withOkioByteString:(OkioByteString *)metadata
                                      withLong:(jlong)bufferMaxSize;

- (void)writeHeaderWithOkioByteString:(OkioByteString *)prefix
                             withLong:(jlong)upstreamSize
                             withLong:(jlong)metadataSize;

- (void)writeMetadataWithLong:(jlong)upstreamSize;

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalCache2Relay, metadata_, OkioByteString *)

inline jint Okhttp3InternalCache2Relay_get_SOURCE_UPSTREAM();
#define Okhttp3InternalCache2Relay_SOURCE_UPSTREAM 1
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3InternalCache2Relay, SOURCE_UPSTREAM, jint)

inline jint Okhttp3InternalCache2Relay_get_SOURCE_FILE();
#define Okhttp3InternalCache2Relay_SOURCE_FILE 2
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3InternalCache2Relay, SOURCE_FILE, jint)

inline jlong Okhttp3InternalCache2Relay_get_FILE_HEADER_SIZE();
#define Okhttp3InternalCache2Relay_FILE_HEADER_SIZE 32LL
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3InternalCache2Relay, FILE_HEADER_SIZE, jlong)

__attribute__((unused)) static void Okhttp3InternalCache2Relay_initWithJavaIoRandomAccessFile_withOkioSource_withLong_withOkioByteString_withLong_(Okhttp3InternalCache2Relay *self, JavaIoRandomAccessFile *file, id<OkioSource> upstream, jlong upstreamPos, OkioByteString *metadata, jlong bufferMaxSize);

__attribute__((unused)) static Okhttp3InternalCache2Relay *new_Okhttp3InternalCache2Relay_initWithJavaIoRandomAccessFile_withOkioSource_withLong_withOkioByteString_withLong_(JavaIoRandomAccessFile *file, id<OkioSource> upstream, jlong upstreamPos, OkioByteString *metadata, jlong bufferMaxSize) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalCache2Relay *create_Okhttp3InternalCache2Relay_initWithJavaIoRandomAccessFile_withOkioSource_withLong_withOkioByteString_withLong_(JavaIoRandomAccessFile *file, id<OkioSource> upstream, jlong upstreamPos, OkioByteString *metadata, jlong bufferMaxSize);

__attribute__((unused)) static void Okhttp3InternalCache2Relay_writeHeaderWithOkioByteString_withLong_withLong_(Okhttp3InternalCache2Relay *self, OkioByteString *prefix, jlong upstreamSize, jlong metadataSize);

__attribute__((unused)) static void Okhttp3InternalCache2Relay_writeMetadataWithLong_(Okhttp3InternalCache2Relay *self, jlong upstreamSize);

@interface Okhttp3InternalCache2Relay_RelaySource () {
 @public
  Okhttp3InternalCache2Relay *this$0_;
  OkioTimeout *timeout_;
  Okhttp3InternalCache2FileOperator *fileOperator_;
  jlong sourcePos_;
}

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalCache2Relay_RelaySource, timeout_, OkioTimeout *)
J2OBJC_FIELD_SETTER(Okhttp3InternalCache2Relay_RelaySource, fileOperator_, Okhttp3InternalCache2FileOperator *)

J2OBJC_INITIALIZED_DEFN(Okhttp3InternalCache2Relay)

OkioByteString *Okhttp3InternalCache2Relay_PREFIX_CLEAN;
OkioByteString *Okhttp3InternalCache2Relay_PREFIX_DIRTY;

@implementation Okhttp3InternalCache2Relay

- (instancetype)initWithJavaIoRandomAccessFile:(JavaIoRandomAccessFile *)file
                                withOkioSource:(id<OkioSource>)upstream
                                      withLong:(jlong)upstreamPos
                            withOkioByteString:(OkioByteString *)metadata
                                      withLong:(jlong)bufferMaxSize {
  Okhttp3InternalCache2Relay_initWithJavaIoRandomAccessFile_withOkioSource_withLong_withOkioByteString_withLong_(self, file, upstream, upstreamPos, metadata, bufferMaxSize);
  return self;
}

+ (Okhttp3InternalCache2Relay *)editWithJavaIoFile:(JavaIoFile *)file
                                    withOkioSource:(id<OkioSource>)upstream
                                withOkioByteString:(OkioByteString *)metadata
                                          withLong:(jlong)bufferMaxSize {
  return Okhttp3InternalCache2Relay_editWithJavaIoFile_withOkioSource_withOkioByteString_withLong_(file, upstream, metadata, bufferMaxSize);
}

+ (Okhttp3InternalCache2Relay *)readWithJavaIoFile:(JavaIoFile *)file {
  return Okhttp3InternalCache2Relay_readWithJavaIoFile_(file);
}

- (void)writeHeaderWithOkioByteString:(OkioByteString *)prefix
                             withLong:(jlong)upstreamSize
                             withLong:(jlong)metadataSize {
  Okhttp3InternalCache2Relay_writeHeaderWithOkioByteString_withLong_withLong_(self, prefix, upstreamSize, metadataSize);
}

- (void)writeMetadataWithLong:(jlong)upstreamSize {
  Okhttp3InternalCache2Relay_writeMetadataWithLong_(self, upstreamSize);
}

- (void)commitWithLong:(jlong)upstreamSize {
  Okhttp3InternalCache2Relay_writeMetadataWithLong_(self, upstreamSize);
  [((JavaNioChannelsFileChannel *) nil_chk([((JavaIoRandomAccessFile *) nil_chk(file_)) getChannel])) forceWithBoolean:false];
  Okhttp3InternalCache2Relay_writeHeaderWithOkioByteString_withLong_withLong_(self, Okhttp3InternalCache2Relay_PREFIX_CLEAN, upstreamSize, [((OkioByteString *) nil_chk(metadata_)) size]);
  [((JavaNioChannelsFileChannel *) nil_chk([((JavaIoRandomAccessFile *) nil_chk(file_)) getChannel])) forceWithBoolean:false];
  @synchronized(self) {
    complete_ = true;
  }
  Okhttp3InternalUtil_closeQuietlyWithJavaIoCloseable_(upstream_);
  JreStrongAssign(&upstream_, nil);
}

- (jboolean)isClosed {
  return file_ == nil;
}

- (OkioByteString *)metadata {
  return metadata_;
}

- (id<OkioSource>)newSource {
  @synchronized(self) {
    if (file_ == nil) return nil;
    sourceCount_++;
  }
  return create_Okhttp3InternalCache2Relay_RelaySource_initWithOkhttp3InternalCache2Relay_(self);
}

- (void)dealloc {
  RELEASE_(file_);
  RELEASE_(upstreamReader_);
  RELEASE_(upstream_);
  RELEASE_(upstreamBuffer_);
  RELEASE_(metadata_);
  RELEASE_(buffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalCache2Relay;", 0x9, 1, 2, 3, -1, -1, -1 },
    { NULL, "LOkhttp3InternalCache2Relay;", 0x9, 4, 5, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, 3, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 9, 3, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkioByteString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkioSource;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaIoRandomAccessFile:withOkioSource:withLong:withOkioByteString:withLong:);
  methods[1].selector = @selector(editWithJavaIoFile:withOkioSource:withOkioByteString:withLong:);
  methods[2].selector = @selector(readWithJavaIoFile:);
  methods[3].selector = @selector(writeHeaderWithOkioByteString:withLong:withLong:);
  methods[4].selector = @selector(writeMetadataWithLong:);
  methods[5].selector = @selector(commitWithLong:);
  methods[6].selector = @selector(isClosed);
  methods[7].selector = @selector(metadata);
  methods[8].selector = @selector(newSource);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SOURCE_UPSTREAM", "I", .constantValue.asInt = Okhttp3InternalCache2Relay_SOURCE_UPSTREAM, 0x1a, -1, -1, -1, -1 },
    { "SOURCE_FILE", "I", .constantValue.asInt = Okhttp3InternalCache2Relay_SOURCE_FILE, 0x1a, -1, -1, -1, -1 },
    { "PREFIX_CLEAN", "LOkioByteString;", .constantValue.asLong = 0, 0x18, -1, 11, -1, -1 },
    { "PREFIX_DIRTY", "LOkioByteString;", .constantValue.asLong = 0, 0x18, -1, 12, -1, -1 },
    { "FILE_HEADER_SIZE", "J", .constantValue.asLong = Okhttp3InternalCache2Relay_FILE_HEADER_SIZE, 0x1a, -1, -1, -1, -1 },
    { "file_", "LJavaIoRandomAccessFile;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "upstreamReader_", "LJavaLangThread;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "upstream_", "LOkioSource;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "upstreamBuffer_", "LOkioBuffer;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "upstreamPos_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "complete_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "metadata_", "LOkioByteString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "buffer_", "LOkioBuffer;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bufferMaxSize_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "sourceCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoRandomAccessFile;LOkioSource;JLOkioByteString;J", "edit", "LJavaIoFile;LOkioSource;LOkioByteString;J", "LJavaIoIOException;", "read", "LJavaIoFile;", "writeHeader", "LOkioByteString;JJ", "writeMetadata", "J", "commit", &Okhttp3InternalCache2Relay_PREFIX_CLEAN, &Okhttp3InternalCache2Relay_PREFIX_DIRTY, "LOkhttp3InternalCache2Relay_RelaySource;" };
  static const J2ObjcClassInfo _Okhttp3InternalCache2Relay = { "Relay", "okhttp3.internal.cache2", ptrTable, methods, fields, 7, 0x10, 9, 15, -1, 13, -1, -1, -1 };
  return &_Okhttp3InternalCache2Relay;
}

+ (void)initialize {
  if (self == [Okhttp3InternalCache2Relay class]) {
    JreStrongAssign(&Okhttp3InternalCache2Relay_PREFIX_CLEAN, OkioByteString_encodeUtf8WithNSString_(@"OkHttp cache v1\n"));
    JreStrongAssign(&Okhttp3InternalCache2Relay_PREFIX_DIRTY, OkioByteString_encodeUtf8WithNSString_(@"OkHttp DIRTY :(\n"));
    J2OBJC_SET_INITIALIZED(Okhttp3InternalCache2Relay)
  }
}

@end

void Okhttp3InternalCache2Relay_initWithJavaIoRandomAccessFile_withOkioSource_withLong_withOkioByteString_withLong_(Okhttp3InternalCache2Relay *self, JavaIoRandomAccessFile *file, id<OkioSource> upstream, jlong upstreamPos, OkioByteString *metadata, jlong bufferMaxSize) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->upstreamBuffer_, new_OkioBuffer_init());
  JreStrongAssignAndConsume(&self->buffer_, new_OkioBuffer_init());
  JreStrongAssign(&self->file_, file);
  JreStrongAssign(&self->upstream_, upstream);
  self->complete_ = (upstream == nil);
  self->upstreamPos_ = upstreamPos;
  JreStrongAssign(&self->metadata_, metadata);
  self->bufferMaxSize_ = bufferMaxSize;
}

Okhttp3InternalCache2Relay *new_Okhttp3InternalCache2Relay_initWithJavaIoRandomAccessFile_withOkioSource_withLong_withOkioByteString_withLong_(JavaIoRandomAccessFile *file, id<OkioSource> upstream, jlong upstreamPos, OkioByteString *metadata, jlong bufferMaxSize) {
  J2OBJC_NEW_IMPL(Okhttp3InternalCache2Relay, initWithJavaIoRandomAccessFile_withOkioSource_withLong_withOkioByteString_withLong_, file, upstream, upstreamPos, metadata, bufferMaxSize)
}

Okhttp3InternalCache2Relay *create_Okhttp3InternalCache2Relay_initWithJavaIoRandomAccessFile_withOkioSource_withLong_withOkioByteString_withLong_(JavaIoRandomAccessFile *file, id<OkioSource> upstream, jlong upstreamPos, OkioByteString *metadata, jlong bufferMaxSize) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalCache2Relay, initWithJavaIoRandomAccessFile_withOkioSource_withLong_withOkioByteString_withLong_, file, upstream, upstreamPos, metadata, bufferMaxSize)
}

Okhttp3InternalCache2Relay *Okhttp3InternalCache2Relay_editWithJavaIoFile_withOkioSource_withOkioByteString_withLong_(JavaIoFile *file, id<OkioSource> upstream, OkioByteString *metadata, jlong bufferMaxSize) {
  Okhttp3InternalCache2Relay_initialize();
  JavaIoRandomAccessFile *randomAccessFile = create_JavaIoRandomAccessFile_initWithJavaIoFile_withNSString_(file, @"rw");
  Okhttp3InternalCache2Relay *result = create_Okhttp3InternalCache2Relay_initWithJavaIoRandomAccessFile_withOkioSource_withLong_withOkioByteString_withLong_(randomAccessFile, upstream, 0LL, metadata, bufferMaxSize);
  [randomAccessFile setLengthWithLong:0LL];
  Okhttp3InternalCache2Relay_writeHeaderWithOkioByteString_withLong_withLong_(result, Okhttp3InternalCache2Relay_PREFIX_DIRTY, -1LL, -1LL);
  return result;
}

Okhttp3InternalCache2Relay *Okhttp3InternalCache2Relay_readWithJavaIoFile_(JavaIoFile *file) {
  Okhttp3InternalCache2Relay_initialize();
  JavaIoRandomAccessFile *randomAccessFile = create_JavaIoRandomAccessFile_initWithJavaIoFile_withNSString_(file, @"rw");
  Okhttp3InternalCache2FileOperator *fileOperator = create_Okhttp3InternalCache2FileOperator_initWithJavaNioChannelsFileChannel_([randomAccessFile getChannel]);
  OkioBuffer *header = create_OkioBuffer_init();
  [fileOperator readWithLong:0 withOkioBuffer:header withLong:Okhttp3InternalCache2Relay_FILE_HEADER_SIZE];
  OkioByteString *prefix = [header readByteStringWithLong:[((OkioByteString *) nil_chk(Okhttp3InternalCache2Relay_PREFIX_CLEAN)) size]];
  if (![((OkioByteString *) nil_chk(prefix)) isEqual:Okhttp3InternalCache2Relay_PREFIX_CLEAN]) @throw create_JavaIoIOException_initWithNSString_(@"unreadable cache file");
  jlong upstreamSize = [header readLong];
  jlong metadataSize = [header readLong];
  OkioBuffer *metadataBuffer = create_OkioBuffer_init();
  [fileOperator readWithLong:Okhttp3InternalCache2Relay_FILE_HEADER_SIZE + upstreamSize withOkioBuffer:metadataBuffer withLong:metadataSize];
  OkioByteString *metadata = [metadataBuffer readByteString];
  return create_Okhttp3InternalCache2Relay_initWithJavaIoRandomAccessFile_withOkioSource_withLong_withOkioByteString_withLong_(randomAccessFile, nil, upstreamSize, metadata, 0LL);
}

void Okhttp3InternalCache2Relay_writeHeaderWithOkioByteString_withLong_withLong_(Okhttp3InternalCache2Relay *self, OkioByteString *prefix, jlong upstreamSize, jlong metadataSize) {
  OkioBuffer *header = create_OkioBuffer_init();
  [header writeWithOkioByteString:prefix];
  [header writeLongWithLong:upstreamSize];
  [header writeLongWithLong:metadataSize];
  if ([header size] != Okhttp3InternalCache2Relay_FILE_HEADER_SIZE) @throw create_JavaLangIllegalArgumentException_init();
  Okhttp3InternalCache2FileOperator *fileOperator = create_Okhttp3InternalCache2FileOperator_initWithJavaNioChannelsFileChannel_([((JavaIoRandomAccessFile *) nil_chk(self->file_)) getChannel]);
  [fileOperator writeWithLong:0 withOkioBuffer:header withLong:Okhttp3InternalCache2Relay_FILE_HEADER_SIZE];
}

void Okhttp3InternalCache2Relay_writeMetadataWithLong_(Okhttp3InternalCache2Relay *self, jlong upstreamSize) {
  OkioBuffer *metadataBuffer = create_OkioBuffer_init();
  [metadataBuffer writeWithOkioByteString:self->metadata_];
  Okhttp3InternalCache2FileOperator *fileOperator = create_Okhttp3InternalCache2FileOperator_initWithJavaNioChannelsFileChannel_([((JavaIoRandomAccessFile *) nil_chk(self->file_)) getChannel]);
  [fileOperator writeWithLong:Okhttp3InternalCache2Relay_FILE_HEADER_SIZE + upstreamSize withOkioBuffer:metadataBuffer withLong:[((OkioByteString *) nil_chk(self->metadata_)) size]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalCache2Relay)

@implementation Okhttp3InternalCache2Relay_RelaySource

- (instancetype)initWithOkhttp3InternalCache2Relay:(Okhttp3InternalCache2Relay *)outer$ {
  Okhttp3InternalCache2Relay_RelaySource_initWithOkhttp3InternalCache2Relay_(self, outer$);
  return self;
}

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount {
  if (fileOperator_ == nil) @throw create_JavaLangIllegalStateException_initWithNSString_(@"closed");
  jlong upstreamPos;
  jint source;
  @synchronized(this$0_) {
    while (sourcePos_ == (upstreamPos = this$0_->upstreamPos_)) {
      if (this$0_->complete_) return -1LL;
      if (this$0_->upstreamReader_ != nil) {
        [((OkioTimeout *) nil_chk(timeout_)) waitUntilNotifiedWithId:this$0_];
        continue;
      }
      JreStrongAssign(&this$0_->upstreamReader_, JavaLangThread_currentThread());
      source = Okhttp3InternalCache2Relay_SOURCE_UPSTREAM;
      goto break_selectSource;
    }
    jlong bufferPos = upstreamPos - [((OkioBuffer *) nil_chk(this$0_->buffer_)) size];
    if (sourcePos_ < bufferPos) {
      source = Okhttp3InternalCache2Relay_SOURCE_FILE;
      goto break_selectSource;
    }
    jlong bytesToRead = JavaLangMath_minWithLong_withLong_(byteCount, upstreamPos - sourcePos_);
    [this$0_->buffer_ copyToWithOkioBuffer:sink withLong:sourcePos_ - bufferPos withLong:bytesToRead];
    sourcePos_ += bytesToRead;
    return bytesToRead;
  }
  break_selectSource: ;
  if (source == Okhttp3InternalCache2Relay_SOURCE_FILE) {
    jlong bytesToRead = JavaLangMath_minWithLong_withLong_(byteCount, upstreamPos - sourcePos_);
    [((Okhttp3InternalCache2FileOperator *) nil_chk(fileOperator_)) readWithLong:Okhttp3InternalCache2Relay_FILE_HEADER_SIZE + sourcePos_ withOkioBuffer:sink withLong:bytesToRead];
    sourcePos_ += bytesToRead;
    return bytesToRead;
  }
  @try {
    jlong upstreamBytesRead = [((id<OkioSource>) nil_chk(this$0_->upstream_)) readWithOkioBuffer:this$0_->upstreamBuffer_ withLong:this$0_->bufferMaxSize_];
    if (upstreamBytesRead == -1LL) {
      [this$0_ commitWithLong:upstreamPos];
      return -1LL;
    }
    jlong bytesRead = JavaLangMath_minWithLong_withLong_(upstreamBytesRead, byteCount);
    [((OkioBuffer *) nil_chk(this$0_->upstreamBuffer_)) copyToWithOkioBuffer:sink withLong:0 withLong:bytesRead];
    sourcePos_ += bytesRead;
    [((Okhttp3InternalCache2FileOperator *) nil_chk(fileOperator_)) writeWithLong:Okhttp3InternalCache2Relay_FILE_HEADER_SIZE + upstreamPos withOkioBuffer:[this$0_->upstreamBuffer_ java_clone] withLong:upstreamBytesRead];
    @synchronized(this$0_) {
      [((OkioBuffer *) nil_chk(this$0_->buffer_)) writeWithOkioBuffer:this$0_->upstreamBuffer_ withLong:upstreamBytesRead];
      if ([this$0_->buffer_ size] > this$0_->bufferMaxSize_) {
        [this$0_->buffer_ skipWithLong:[this$0_->buffer_ size] - this$0_->bufferMaxSize_];
      }
      this$0_->upstreamPos_ += upstreamBytesRead;
    }
    return bytesRead;
  }
  @finally {
    @synchronized(this$0_) {
      JreStrongAssign(&this$0_->upstreamReader_, nil);
      [this$0_ java_notifyAll];
    }
  }
}

- (OkioTimeout *)timeout {
  return timeout_;
}

- (void)close {
  if (fileOperator_ == nil) return;
  JreStrongAssign(&fileOperator_, nil);
  JavaIoRandomAccessFile *fileToClose = nil;
  @synchronized(this$0_) {
    this$0_->sourceCount_--;
    if (this$0_->sourceCount_ == 0) {
      fileToClose = this$0_->file_;
      JreStrongAssign(&this$0_->file_, nil);
    }
  }
  if (fileToClose != nil) {
    Okhttp3InternalUtil_closeQuietlyWithJavaIoCloseable_(fileToClose);
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(timeout_);
  RELEASE_(fileOperator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOkioTimeout;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalCache2Relay:);
  methods[1].selector = @selector(readWithOkioBuffer:withLong:);
  methods[2].selector = @selector(timeout);
  methods[3].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3InternalCache2Relay;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "timeout_", "LOkioTimeout;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fileOperator_", "LOkhttp3InternalCache2FileOperator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sourcePos_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "read", "LOkioBuffer;J", "LJavaIoIOException;", "LOkhttp3InternalCache2Relay;" };
  static const J2ObjcClassInfo _Okhttp3InternalCache2Relay_RelaySource = { "RelaySource", "okhttp3.internal.cache2", ptrTable, methods, fields, 7, 0x0, 4, 4, 3, -1, -1, -1, -1 };
  return &_Okhttp3InternalCache2Relay_RelaySource;
}

@end

void Okhttp3InternalCache2Relay_RelaySource_initWithOkhttp3InternalCache2Relay_(Okhttp3InternalCache2Relay_RelaySource *self, Okhttp3InternalCache2Relay *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->timeout_, new_OkioTimeout_init());
  JreStrongAssignAndConsume(&self->fileOperator_, new_Okhttp3InternalCache2FileOperator_initWithJavaNioChannelsFileChannel_([((JavaIoRandomAccessFile *) nil_chk(outer$->file_)) getChannel]));
}

Okhttp3InternalCache2Relay_RelaySource *new_Okhttp3InternalCache2Relay_RelaySource_initWithOkhttp3InternalCache2Relay_(Okhttp3InternalCache2Relay *outer$) {
  J2OBJC_NEW_IMPL(Okhttp3InternalCache2Relay_RelaySource, initWithOkhttp3InternalCache2Relay_, outer$)
}

Okhttp3InternalCache2Relay_RelaySource *create_Okhttp3InternalCache2Relay_RelaySource_initWithOkhttp3InternalCache2Relay_(Okhttp3InternalCache2Relay *outer$) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalCache2Relay_RelaySource, initWithOkhttp3InternalCache2Relay_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalCache2Relay_RelaySource)
