//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okhttp3/internal/http2/Ping.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"
#include "okhttp3/internal/http2/Ping.h"

@interface Okhttp3InternalHttp2Ping () {
 @public
  JavaUtilConcurrentCountDownLatch *latch_;
  jlong sent_;
  jlong received_;
}

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Ping, latch_, JavaUtilConcurrentCountDownLatch *)

@implementation Okhttp3InternalHttp2Ping

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3InternalHttp2Ping_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)send {
  if (sent_ != -1) @throw create_JavaLangIllegalStateException_init();
  sent_ = JavaLangSystem_nanoTime();
}

- (void)receive {
  if (received_ != -1 || sent_ == -1) @throw create_JavaLangIllegalStateException_init();
  received_ = JavaLangSystem_nanoTime();
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(latch_)) countDown];
}

- (void)cancel {
  if (received_ != -1 || sent_ == -1) @throw create_JavaLangIllegalStateException_init();
  received_ = sent_ - 1;
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(latch_)) countDown];
}

- (jlong)roundTripTime {
  [((JavaUtilConcurrentCountDownLatch *) nil_chk(latch_)) await];
  return received_ - sent_;
}

- (jlong)roundTripTimeWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  if ([((JavaUtilConcurrentCountDownLatch *) nil_chk(latch_)) awaitWithLong:timeout withJavaUtilConcurrentTimeUnit:unit]) {
    return received_ - sent_;
  }
  else {
    return -2;
  }
}

- (void)dealloc {
  RELEASE_(latch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "J", 0x1, 1, 2, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(send);
  methods[2].selector = @selector(receive);
  methods[3].selector = @selector(cancel);
  methods[4].selector = @selector(roundTripTime);
  methods[5].selector = @selector(roundTripTimeWithLong:withJavaUtilConcurrentTimeUnit:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "latch_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "sent_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "received_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangInterruptedException;", "roundTripTime", "JLJavaUtilConcurrentTimeUnit;" };
  static const J2ObjcClassInfo _Okhttp3InternalHttp2Ping = { "Ping", "okhttp3.internal.http2", ptrTable, methods, fields, 7, 0x10, 6, 3, -1, -1, -1, -1, -1 };
  return &_Okhttp3InternalHttp2Ping;
}

@end

void Okhttp3InternalHttp2Ping_init(Okhttp3InternalHttp2Ping *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->latch_, new_JavaUtilConcurrentCountDownLatch_initWithInt_(1));
  self->sent_ = -1;
  self->received_ = -1;
}

Okhttp3InternalHttp2Ping *new_Okhttp3InternalHttp2Ping_init() {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttp2Ping, init)
}

Okhttp3InternalHttp2Ping *create_Okhttp3InternalHttp2Ping_init() {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttp2Ping, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalHttp2Ping)
