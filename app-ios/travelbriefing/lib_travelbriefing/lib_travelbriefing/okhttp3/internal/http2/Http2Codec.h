//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okhttp3/internal/http2/Http2Codec.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Okhttp3InternalHttp2Http2Codec")
#ifdef RESTRICT_Okhttp3InternalHttp2Http2Codec
#define INCLUDE_ALL_Okhttp3InternalHttp2Http2Codec 0
#else
#define INCLUDE_ALL_Okhttp3InternalHttp2Http2Codec 1
#endif
#undef RESTRICT_Okhttp3InternalHttp2Http2Codec

#if !defined (Okhttp3InternalHttp2Http2Codec_) && (INCLUDE_ALL_Okhttp3InternalHttp2Http2Codec || defined(INCLUDE_Okhttp3InternalHttp2Http2Codec))
#define Okhttp3InternalHttp2Http2Codec_

#define RESTRICT_Okhttp3InternalHttpHttpCodec 1
#define INCLUDE_Okhttp3InternalHttpHttpCodec 1
#include "okhttp3/internal/http/HttpCodec.h"

@class Okhttp3InternalConnectionStreamAllocation;
@class Okhttp3InternalHttp2Http2Connection;
@class Okhttp3OkHttpClient;
@class Okhttp3Request;
@class Okhttp3Response;
@class Okhttp3ResponseBody;
@class Okhttp3Response_Builder;
@protocol JavaUtilList;
@protocol OkioSink;

@interface Okhttp3InternalHttp2Http2Codec : NSObject < Okhttp3InternalHttpHttpCodec > {
 @public
  Okhttp3InternalConnectionStreamAllocation *streamAllocation_;
}

#pragma mark Public

- (instancetype)initWithOkhttp3OkHttpClient:(Okhttp3OkHttpClient *)client
withOkhttp3InternalConnectionStreamAllocation:(Okhttp3InternalConnectionStreamAllocation *)streamAllocation
    withOkhttp3InternalHttp2Http2Connection:(Okhttp3InternalHttp2Http2Connection *)connection;

- (void)cancel;

- (id<OkioSink>)createRequestBodyWithOkhttp3Request:(Okhttp3Request *)request
                                           withLong:(jlong)contentLength;

- (void)finishRequest;

- (void)flushRequest;

+ (id<JavaUtilList>)http2HeadersListWithOkhttp3Request:(Okhttp3Request *)request;

- (Okhttp3ResponseBody *)openResponseBodyWithOkhttp3Response:(Okhttp3Response *)response;

+ (Okhttp3Response_Builder *)readHttp2HeadersListWithJavaUtilList:(id<JavaUtilList>)headerBlock;

- (Okhttp3Response_Builder *)readResponseHeadersWithBoolean:(jboolean)expectContinue;

- (void)writeRequestHeadersWithOkhttp3Request:(Okhttp3Request *)request;

@end

J2OBJC_STATIC_INIT(Okhttp3InternalHttp2Http2Codec)

J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Http2Codec, streamAllocation_, Okhttp3InternalConnectionStreamAllocation *)

FOUNDATION_EXPORT void Okhttp3InternalHttp2Http2Codec_initWithOkhttp3OkHttpClient_withOkhttp3InternalConnectionStreamAllocation_withOkhttp3InternalHttp2Http2Connection_(Okhttp3InternalHttp2Http2Codec *self, Okhttp3OkHttpClient *client, Okhttp3InternalConnectionStreamAllocation *streamAllocation, Okhttp3InternalHttp2Http2Connection *connection);

FOUNDATION_EXPORT Okhttp3InternalHttp2Http2Codec *new_Okhttp3InternalHttp2Http2Codec_initWithOkhttp3OkHttpClient_withOkhttp3InternalConnectionStreamAllocation_withOkhttp3InternalHttp2Http2Connection_(Okhttp3OkHttpClient *client, Okhttp3InternalConnectionStreamAllocation *streamAllocation, Okhttp3InternalHttp2Http2Connection *connection) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3InternalHttp2Http2Codec *create_Okhttp3InternalHttp2Http2Codec_initWithOkhttp3OkHttpClient_withOkhttp3InternalConnectionStreamAllocation_withOkhttp3InternalHttp2Http2Connection_(Okhttp3OkHttpClient *client, Okhttp3InternalConnectionStreamAllocation *streamAllocation, Okhttp3InternalHttp2Http2Connection *connection);

FOUNDATION_EXPORT id<JavaUtilList> Okhttp3InternalHttp2Http2Codec_http2HeadersListWithOkhttp3Request_(Okhttp3Request *request);

FOUNDATION_EXPORT Okhttp3Response_Builder *Okhttp3InternalHttp2Http2Codec_readHttp2HeadersListWithJavaUtilList_(id<JavaUtilList> headerBlock);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalHttp2Http2Codec)

#endif

#if !defined (Okhttp3InternalHttp2Http2Codec_StreamFinishingSource_) && (INCLUDE_ALL_Okhttp3InternalHttp2Http2Codec || defined(INCLUDE_Okhttp3InternalHttp2Http2Codec_StreamFinishingSource))
#define Okhttp3InternalHttp2Http2Codec_StreamFinishingSource_

#define RESTRICT_OkioForwardingSource 1
#define INCLUDE_OkioForwardingSource 1
#include "okio/ForwardingSource.h"

@class Okhttp3InternalHttp2Http2Codec;
@protocol OkioSource;

@interface Okhttp3InternalHttp2Http2Codec_StreamFinishingSource : OkioForwardingSource

#pragma mark Public

- (instancetype)initWithOkhttp3InternalHttp2Http2Codec:(Okhttp3InternalHttp2Http2Codec *)outer$
                                        withOkioSource:(id<OkioSource>)delegate;

- (void)close;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalHttp2Http2Codec_StreamFinishingSource)

FOUNDATION_EXPORT void Okhttp3InternalHttp2Http2Codec_StreamFinishingSource_initWithOkhttp3InternalHttp2Http2Codec_withOkioSource_(Okhttp3InternalHttp2Http2Codec_StreamFinishingSource *self, Okhttp3InternalHttp2Http2Codec *outer$, id<OkioSource> delegate);

FOUNDATION_EXPORT Okhttp3InternalHttp2Http2Codec_StreamFinishingSource *new_Okhttp3InternalHttp2Http2Codec_StreamFinishingSource_initWithOkhttp3InternalHttp2Http2Codec_withOkioSource_(Okhttp3InternalHttp2Http2Codec *outer$, id<OkioSource> delegate) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3InternalHttp2Http2Codec_StreamFinishingSource *create_Okhttp3InternalHttp2Http2Codec_StreamFinishingSource_initWithOkhttp3InternalHttp2Http2Codec_withOkioSource_(Okhttp3InternalHttp2Http2Codec *outer$, id<OkioSource> delegate);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalHttp2Http2Codec_StreamFinishingSource)

#endif

#pragma pop_macro("INCLUDE_ALL_Okhttp3InternalHttp2Http2Codec")
