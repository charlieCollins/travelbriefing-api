//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okhttp3/internal/http2/Header.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "okhttp3/internal/Util.h"
#include "okhttp3/internal/http2/Header.h"
#include "okio/ByteString.h"

J2OBJC_INITIALIZED_DEFN(Okhttp3InternalHttp2Header)

OkioByteString *Okhttp3InternalHttp2Header_PSEUDO_PREFIX;
OkioByteString *Okhttp3InternalHttp2Header_RESPONSE_STATUS;
OkioByteString *Okhttp3InternalHttp2Header_TARGET_METHOD;
OkioByteString *Okhttp3InternalHttp2Header_TARGET_PATH;
OkioByteString *Okhttp3InternalHttp2Header_TARGET_SCHEME;
OkioByteString *Okhttp3InternalHttp2Header_TARGET_AUTHORITY;

@implementation Okhttp3InternalHttp2Header

- (instancetype)initWithNSString:(NSString *)name
                    withNSString:(NSString *)value {
  Okhttp3InternalHttp2Header_initWithNSString_withNSString_(self, name, value);
  return self;
}

- (instancetype)initWithOkioByteString:(OkioByteString *)name
                          withNSString:(NSString *)value {
  Okhttp3InternalHttp2Header_initWithOkioByteString_withNSString_(self, name, value);
  return self;
}

- (instancetype)initWithOkioByteString:(OkioByteString *)name
                    withOkioByteString:(OkioByteString *)value {
  Okhttp3InternalHttp2Header_initWithOkioByteString_withOkioByteString_(self, name, value);
  return self;
}

- (jboolean)isEqual:(id)other {
  if ([other isKindOfClass:[Okhttp3InternalHttp2Header class]]) {
    Okhttp3InternalHttp2Header *that = (Okhttp3InternalHttp2Header *) cast_chk(other, [Okhttp3InternalHttp2Header class]);
    return [((OkioByteString *) nil_chk(self->name_)) isEqual:((Okhttp3InternalHttp2Header *) nil_chk(that))->name_] && [((OkioByteString *) nil_chk(self->value_)) isEqual:that->value_];
  }
  return false;
}

- (NSUInteger)hash {
  jint result = 17;
  result = 31 * result + ((jint) [((OkioByteString *) nil_chk(name_)) hash]);
  result = 31 * result + ((jint) [((OkioByteString *) nil_chk(value_)) hash]);
  return result;
}

- (NSString *)description {
  return Okhttp3InternalUtil_formatWithNSString_withNSObjectArray_(@"%s: %s", [IOSObjectArray arrayWithObjects:(id[]){ [((OkioByteString *) nil_chk(name_)) utf8], [((OkioByteString *) nil_chk(value_)) utf8] } count:2 type:NSObject_class_()]);
}

- (void)dealloc {
  RELEASE_(name_);
  RELEASE_(value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSString:);
  methods[1].selector = @selector(initWithOkioByteString:withNSString:);
  methods[2].selector = @selector(initWithOkioByteString:withOkioByteString:);
  methods[3].selector = @selector(isEqual:);
  methods[4].selector = @selector(hash);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PSEUDO_PREFIX", "LOkioByteString;", .constantValue.asLong = 0, 0x19, -1, 7, -1, -1 },
    { "RESPONSE_STATUS", "LOkioByteString;", .constantValue.asLong = 0, 0x19, -1, 8, -1, -1 },
    { "TARGET_METHOD", "LOkioByteString;", .constantValue.asLong = 0, 0x19, -1, 9, -1, -1 },
    { "TARGET_PATH", "LOkioByteString;", .constantValue.asLong = 0, 0x19, -1, 10, -1, -1 },
    { "TARGET_SCHEME", "LOkioByteString;", .constantValue.asLong = 0, 0x19, -1, 11, -1, -1 },
    { "TARGET_AUTHORITY", "LOkioByteString;", .constantValue.asLong = 0, 0x19, -1, 12, -1, -1 },
    { "name_", "LOkioByteString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "value_", "LOkioByteString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "hpackSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;", "LOkioByteString;LNSString;", "LOkioByteString;LOkioByteString;", "equals", "LNSObject;", "hashCode", "toString", &Okhttp3InternalHttp2Header_PSEUDO_PREFIX, &Okhttp3InternalHttp2Header_RESPONSE_STATUS, &Okhttp3InternalHttp2Header_TARGET_METHOD, &Okhttp3InternalHttp2Header_TARGET_PATH, &Okhttp3InternalHttp2Header_TARGET_SCHEME, &Okhttp3InternalHttp2Header_TARGET_AUTHORITY };
  static const J2ObjcClassInfo _Okhttp3InternalHttp2Header = { "Header", "okhttp3.internal.http2", ptrTable, methods, fields, 7, 0x11, 6, 9, -1, -1, -1, -1, -1 };
  return &_Okhttp3InternalHttp2Header;
}

+ (void)initialize {
  if (self == [Okhttp3InternalHttp2Header class]) {
    JreStrongAssign(&Okhttp3InternalHttp2Header_PSEUDO_PREFIX, OkioByteString_encodeUtf8WithNSString_(@":"));
    JreStrongAssign(&Okhttp3InternalHttp2Header_RESPONSE_STATUS, OkioByteString_encodeUtf8WithNSString_(@":status"));
    JreStrongAssign(&Okhttp3InternalHttp2Header_TARGET_METHOD, OkioByteString_encodeUtf8WithNSString_(@":method"));
    JreStrongAssign(&Okhttp3InternalHttp2Header_TARGET_PATH, OkioByteString_encodeUtf8WithNSString_(@":path"));
    JreStrongAssign(&Okhttp3InternalHttp2Header_TARGET_SCHEME, OkioByteString_encodeUtf8WithNSString_(@":scheme"));
    JreStrongAssign(&Okhttp3InternalHttp2Header_TARGET_AUTHORITY, OkioByteString_encodeUtf8WithNSString_(@":authority"));
    J2OBJC_SET_INITIALIZED(Okhttp3InternalHttp2Header)
  }
}

@end

void Okhttp3InternalHttp2Header_initWithNSString_withNSString_(Okhttp3InternalHttp2Header *self, NSString *name, NSString *value) {
  Okhttp3InternalHttp2Header_initWithOkioByteString_withOkioByteString_(self, OkioByteString_encodeUtf8WithNSString_(name), OkioByteString_encodeUtf8WithNSString_(value));
}

Okhttp3InternalHttp2Header *new_Okhttp3InternalHttp2Header_initWithNSString_withNSString_(NSString *name, NSString *value) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttp2Header, initWithNSString_withNSString_, name, value)
}

Okhttp3InternalHttp2Header *create_Okhttp3InternalHttp2Header_initWithNSString_withNSString_(NSString *name, NSString *value) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttp2Header, initWithNSString_withNSString_, name, value)
}

void Okhttp3InternalHttp2Header_initWithOkioByteString_withNSString_(Okhttp3InternalHttp2Header *self, OkioByteString *name, NSString *value) {
  Okhttp3InternalHttp2Header_initWithOkioByteString_withOkioByteString_(self, name, OkioByteString_encodeUtf8WithNSString_(value));
}

Okhttp3InternalHttp2Header *new_Okhttp3InternalHttp2Header_initWithOkioByteString_withNSString_(OkioByteString *name, NSString *value) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttp2Header, initWithOkioByteString_withNSString_, name, value)
}

Okhttp3InternalHttp2Header *create_Okhttp3InternalHttp2Header_initWithOkioByteString_withNSString_(OkioByteString *name, NSString *value) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttp2Header, initWithOkioByteString_withNSString_, name, value)
}

void Okhttp3InternalHttp2Header_initWithOkioByteString_withOkioByteString_(Okhttp3InternalHttp2Header *self, OkioByteString *name, OkioByteString *value) {
  NSObject_init(self);
  JreStrongAssign(&self->name_, name);
  JreStrongAssign(&self->value_, value);
  self->hpackSize_ = 32 + [((OkioByteString *) nil_chk(name)) size] + [((OkioByteString *) nil_chk(value)) size];
}

Okhttp3InternalHttp2Header *new_Okhttp3InternalHttp2Header_initWithOkioByteString_withOkioByteString_(OkioByteString *name, OkioByteString *value) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttp2Header, initWithOkioByteString_withOkioByteString_, name, value)
}

Okhttp3InternalHttp2Header *create_Okhttp3InternalHttp2Header_initWithOkioByteString_withOkioByteString_(OkioByteString *name, OkioByteString *value) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttp2Header, initWithOkioByteString_withOkioByteString_, name, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalHttp2Header)
