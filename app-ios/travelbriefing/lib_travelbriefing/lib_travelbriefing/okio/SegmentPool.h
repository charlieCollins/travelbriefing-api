//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okio/SegmentPool.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OkioSegmentPool")
#ifdef RESTRICT_OkioSegmentPool
#define INCLUDE_ALL_OkioSegmentPool 0
#else
#define INCLUDE_ALL_OkioSegmentPool 1
#endif
#undef RESTRICT_OkioSegmentPool

#if !defined (OkioSegmentPool_) && (INCLUDE_ALL_OkioSegmentPool || defined(INCLUDE_OkioSegmentPool))
#define OkioSegmentPool_

@class OkioSegment;

@interface OkioSegmentPool : NSObject

#pragma mark Package-Private

+ (void)recycleWithOkioSegment:(OkioSegment *)segment;

+ (OkioSegment *)take;

@end

J2OBJC_EMPTY_STATIC_INIT(OkioSegmentPool)

inline jlong OkioSegmentPool_get_MAX_SIZE();
#define OkioSegmentPool_MAX_SIZE 65536LL
J2OBJC_STATIC_FIELD_CONSTANT(OkioSegmentPool, MAX_SIZE, jlong)

inline OkioSegment *OkioSegmentPool_get_next();
inline OkioSegment *OkioSegmentPool_set_next(OkioSegment *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OkioSegment *OkioSegmentPool_next;
J2OBJC_STATIC_FIELD_OBJ(OkioSegmentPool, next, OkioSegment *)

inline jlong OkioSegmentPool_get_byteCount();
inline jlong OkioSegmentPool_set_byteCount(jlong value);
inline jlong *OkioSegmentPool_getRef_byteCount();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jlong OkioSegmentPool_byteCount;
J2OBJC_STATIC_FIELD_PRIMITIVE(OkioSegmentPool, byteCount, jlong)

FOUNDATION_EXPORT OkioSegment *OkioSegmentPool_take();

FOUNDATION_EXPORT void OkioSegmentPool_recycleWithOkioSegment_(OkioSegment *segment);

J2OBJC_TYPE_LITERAL_HEADER(OkioSegmentPool)

#endif

#pragma pop_macro("INCLUDE_ALL_OkioSegmentPool")
