//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okio/RealBufferedSource.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Byte.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/NumberFormatException.h"
#include "java/nio/charset/Charset.h"
#include "okio/Buffer.h"
#include "okio/ByteString.h"
#include "okio/Options.h"
#include "okio/RealBufferedSource.h"
#include "okio/Segment.h"
#include "okio/Sink.h"
#include "okio/Source.h"
#include "okio/Timeout.h"
#include "okio/Util.h"

@interface OkioRealBufferedSource_1 : JavaIoInputStream {
 @public
  OkioRealBufferedSource *this$0_;
}

- (instancetype)initWithOkioRealBufferedSource:(OkioRealBufferedSource *)outer$;

- (jint)read;

- (jint)readWithByteArray:(IOSByteArray *)data
                  withInt:(jint)offset
                  withInt:(jint)byteCount;

- (jint)available;

- (void)close;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OkioRealBufferedSource_1)

__attribute__((unused)) static void OkioRealBufferedSource_1_initWithOkioRealBufferedSource_(OkioRealBufferedSource_1 *self, OkioRealBufferedSource *outer$);

__attribute__((unused)) static OkioRealBufferedSource_1 *new_OkioRealBufferedSource_1_initWithOkioRealBufferedSource_(OkioRealBufferedSource *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static OkioRealBufferedSource_1 *create_OkioRealBufferedSource_1_initWithOkioRealBufferedSource_(OkioRealBufferedSource *outer$);

@implementation OkioRealBufferedSource

- (instancetype)initWithOkioSource:(id<OkioSource>)source {
  OkioRealBufferedSource_initWithOkioSource_(self, source);
  return self;
}

- (OkioBuffer *)buffer {
  return buffer_;
}

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount {
  if (sink == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"sink == null");
  if (byteCount < 0) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J", @"byteCount < 0: ", byteCount));
  if (closed_) @throw create_JavaLangIllegalStateException_initWithNSString_(@"closed");
  if (((OkioBuffer *) nil_chk(buffer_))->size_ == 0) {
    jlong read = [((id<OkioSource>) nil_chk(source_)) readWithOkioBuffer:buffer_ withLong:OkioSegment_SIZE];
    if (read == -1) return -1;
  }
  jlong toRead = JavaLangMath_minWithLong_withLong_(byteCount, buffer_->size_);
  return [buffer_ readWithOkioBuffer:sink withLong:toRead];
}

- (jboolean)exhausted {
  if (closed_) @throw create_JavaLangIllegalStateException_initWithNSString_(@"closed");
  return [((OkioBuffer *) nil_chk(buffer_)) exhausted] && [((id<OkioSource>) nil_chk(source_)) readWithOkioBuffer:buffer_ withLong:OkioSegment_SIZE] == -1;
}

- (void)requireWithLong:(jlong)byteCount {
  if (![self requestWithLong:byteCount]) @throw create_JavaIoEOFException_init();
}

- (jboolean)requestWithLong:(jlong)byteCount {
  if (byteCount < 0) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J", @"byteCount < 0: ", byteCount));
  if (closed_) @throw create_JavaLangIllegalStateException_initWithNSString_(@"closed");
  while (((OkioBuffer *) nil_chk(buffer_))->size_ < byteCount) {
    if ([((id<OkioSource>) nil_chk(source_)) readWithOkioBuffer:buffer_ withLong:OkioSegment_SIZE] == -1) return false;
  }
  return true;
}

- (jbyte)readByte {
  [self requireWithLong:1];
  return [((OkioBuffer *) nil_chk(buffer_)) readByte];
}

- (OkioByteString *)readByteString {
  [((OkioBuffer *) nil_chk(buffer_)) writeAllWithOkioSource:source_];
  return [buffer_ readByteString];
}

- (OkioByteString *)readByteStringWithLong:(jlong)byteCount {
  [self requireWithLong:byteCount];
  return [((OkioBuffer *) nil_chk(buffer_)) readByteStringWithLong:byteCount];
}

- (jint)selectWithOkioOptions:(OkioOptions *)options {
  if (closed_) @throw create_JavaLangIllegalStateException_initWithNSString_(@"closed");
  while (true) {
    jint index = [((OkioBuffer *) nil_chk(buffer_)) selectPrefixWithOkioOptions:options];
    if (index == -1) return -1;
    jint selectedSize = [((OkioByteString *) nil_chk(IOSObjectArray_Get(nil_chk(((OkioOptions *) nil_chk(options))->byteStrings_), index))) size];
    if (selectedSize <= buffer_->size_) {
      [buffer_ skipWithLong:selectedSize];
      return index;
    }
    if ([((id<OkioSource>) nil_chk(source_)) readWithOkioBuffer:buffer_ withLong:OkioSegment_SIZE] == -1) return -1;
  }
}

- (IOSByteArray *)readByteArray {
  [((OkioBuffer *) nil_chk(buffer_)) writeAllWithOkioSource:source_];
  return [buffer_ readByteArray];
}

- (IOSByteArray *)readByteArrayWithLong:(jlong)byteCount {
  [self requireWithLong:byteCount];
  return [((OkioBuffer *) nil_chk(buffer_)) readByteArrayWithLong:byteCount];
}

- (jint)readWithByteArray:(IOSByteArray *)sink {
  return [self readWithByteArray:sink withInt:0 withInt:((IOSByteArray *) nil_chk(sink))->size_];
}

- (void)readFullyWithByteArray:(IOSByteArray *)sink {
  @try {
    [self requireWithLong:((IOSByteArray *) nil_chk(sink))->size_];
  }
  @catch (JavaIoEOFException *e) {
    jint offset = 0;
    while (((OkioBuffer *) nil_chk(buffer_))->size_ > 0) {
      jint read = [buffer_ readWithByteArray:sink withInt:offset withInt:(jint) buffer_->size_];
      if (read == -1) @throw create_JavaLangAssertionError_init();
      offset += read;
    }
    @throw e;
  }
  [((OkioBuffer *) nil_chk(buffer_)) readFullyWithByteArray:sink];
}

- (jint)readWithByteArray:(IOSByteArray *)sink
                  withInt:(jint)offset
                  withInt:(jint)byteCount {
  OkioUtil_checkOffsetAndCountWithLong_withLong_withLong_(((IOSByteArray *) nil_chk(sink))->size_, offset, byteCount);
  if (((OkioBuffer *) nil_chk(buffer_))->size_ == 0) {
    jlong read = [((id<OkioSource>) nil_chk(source_)) readWithOkioBuffer:buffer_ withLong:OkioSegment_SIZE];
    if (read == -1) return -1;
  }
  jint toRead = (jint) JavaLangMath_minWithLong_withLong_(byteCount, buffer_->size_);
  return [buffer_ readWithByteArray:sink withInt:offset withInt:toRead];
}

- (void)readFullyWithOkioBuffer:(OkioBuffer *)sink
                       withLong:(jlong)byteCount {
  @try {
    [self requireWithLong:byteCount];
  }
  @catch (JavaIoEOFException *e) {
    [((OkioBuffer *) nil_chk(sink)) writeAllWithOkioSource:buffer_];
    @throw e;
  }
  [((OkioBuffer *) nil_chk(buffer_)) readFullyWithOkioBuffer:sink withLong:byteCount];
}

- (jlong)readAllWithOkioSink:(id<OkioSink>)sink {
  if (sink == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"sink == null");
  jlong totalBytesWritten = 0;
  while ([((id<OkioSource>) nil_chk(source_)) readWithOkioBuffer:buffer_ withLong:OkioSegment_SIZE] != -1) {
    jlong emitByteCount = [((OkioBuffer *) nil_chk(buffer_)) completeSegmentByteCount];
    if (emitByteCount > 0) {
      totalBytesWritten += emitByteCount;
      [sink writeWithOkioBuffer:buffer_ withLong:emitByteCount];
    }
  }
  if ([((OkioBuffer *) nil_chk(buffer_)) size] > 0) {
    totalBytesWritten += [buffer_ size];
    [sink writeWithOkioBuffer:buffer_ withLong:[buffer_ size]];
  }
  return totalBytesWritten;
}

- (NSString *)readUtf8 {
  [((OkioBuffer *) nil_chk(buffer_)) writeAllWithOkioSource:source_];
  return [buffer_ readUtf8];
}

- (NSString *)readUtf8WithLong:(jlong)byteCount {
  [self requireWithLong:byteCount];
  return [((OkioBuffer *) nil_chk(buffer_)) readUtf8WithLong:byteCount];
}

- (NSString *)readStringWithJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset {
  if (charset == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"charset == null");
  [((OkioBuffer *) nil_chk(buffer_)) writeAllWithOkioSource:source_];
  return [buffer_ readStringWithJavaNioCharsetCharset:charset];
}

- (NSString *)readStringWithLong:(jlong)byteCount
       withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset {
  [self requireWithLong:byteCount];
  if (charset == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"charset == null");
  return [((OkioBuffer *) nil_chk(buffer_)) readStringWithLong:byteCount withJavaNioCharsetCharset:charset];
}

- (NSString *)readUtf8Line {
  jlong newline = [self indexOfWithByte:(jbyte) 0x000a];
  if (newline == -1) {
    return ((OkioBuffer *) nil_chk(buffer_))->size_ != 0 ? [self readUtf8WithLong:buffer_->size_] : nil;
  }
  return [((OkioBuffer *) nil_chk(buffer_)) readUtf8LineWithLong:newline];
}

- (NSString *)readUtf8LineStrict {
  jlong newline = [self indexOfWithByte:(jbyte) 0x000a];
  if (newline == -1LL) {
    OkioBuffer *data = create_OkioBuffer_init();
    [((OkioBuffer *) nil_chk(buffer_)) copyToWithOkioBuffer:data withLong:0 withLong:JavaLangMath_minWithLong_withLong_(32, [buffer_ size])];
    @throw create_JavaIoEOFException_initWithNSString_(JreStrcat("$J$$C", @"\\n not found: size=", [buffer_ size], @" content=", [((OkioByteString *) nil_chk([data readByteString])) hex], 0x2026));
  }
  return [((OkioBuffer *) nil_chk(buffer_)) readUtf8LineWithLong:newline];
}

- (jint)readUtf8CodePoint {
  [self requireWithLong:1];
  jbyte b0 = [((OkioBuffer *) nil_chk(buffer_)) getByteWithLong:0];
  if ((b0 & (jint) 0xe0) == (jint) 0xc0) {
    [self requireWithLong:2];
  }
  else if ((b0 & (jint) 0xf0) == (jint) 0xe0) {
    [self requireWithLong:3];
  }
  else if ((b0 & (jint) 0xf8) == (jint) 0xf0) {
    [self requireWithLong:4];
  }
  return [buffer_ readUtf8CodePoint];
}

- (jshort)readShort {
  [self requireWithLong:2];
  return [((OkioBuffer *) nil_chk(buffer_)) readShort];
}

- (jshort)readShortLe {
  [self requireWithLong:2];
  return [((OkioBuffer *) nil_chk(buffer_)) readShortLe];
}

- (jint)readInt {
  [self requireWithLong:4];
  return [((OkioBuffer *) nil_chk(buffer_)) readInt];
}

- (jint)readIntLe {
  [self requireWithLong:4];
  return [((OkioBuffer *) nil_chk(buffer_)) readIntLe];
}

- (jlong)readLong {
  [self requireWithLong:8];
  return [((OkioBuffer *) nil_chk(buffer_)) readLong];
}

- (jlong)readLongLe {
  [self requireWithLong:8];
  return [((OkioBuffer *) nil_chk(buffer_)) readLongLe];
}

- (jlong)readDecimalLong {
  [self requireWithLong:1];
  for (jint pos = 0; [self requestWithLong:pos + 1]; pos++) {
    jbyte b = [((OkioBuffer *) nil_chk(buffer_)) getByteWithLong:pos];
    if ((b < '0' || b > '9') && (pos != 0 || b != '-')) {
      if (pos == 0) {
        @throw create_JavaLangNumberFormatException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Expected leading [0-9] or '-' character but was %#x", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangByte_valueOfWithByte_(b) } count:1 type:NSObject_class_()]));
      }
      break;
    }
  }
  return [((OkioBuffer *) nil_chk(buffer_)) readDecimalLong];
}

- (jlong)readHexadecimalUnsignedLong {
  [self requireWithLong:1];
  for (jint pos = 0; [self requestWithLong:pos + 1]; pos++) {
    jbyte b = [((OkioBuffer *) nil_chk(buffer_)) getByteWithLong:pos];
    if ((b < '0' || b > '9') && (b < 'a' || b > 'f') && (b < 'A' || b > 'F')) {
      if (pos == 0) {
        @throw create_JavaLangNumberFormatException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Expected leading [0-9a-fA-F] character but was %#x", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangByte_valueOfWithByte_(b) } count:1 type:NSObject_class_()]));
      }
      break;
    }
  }
  return [((OkioBuffer *) nil_chk(buffer_)) readHexadecimalUnsignedLong];
}

- (void)skipWithLong:(jlong)byteCount {
  if (closed_) @throw create_JavaLangIllegalStateException_initWithNSString_(@"closed");
  while (byteCount > 0) {
    if (((OkioBuffer *) nil_chk(buffer_))->size_ == 0 && [((id<OkioSource>) nil_chk(source_)) readWithOkioBuffer:buffer_ withLong:OkioSegment_SIZE] == -1) {
      @throw create_JavaIoEOFException_init();
    }
    jlong toSkip = JavaLangMath_minWithLong_withLong_(byteCount, [buffer_ size]);
    [buffer_ skipWithLong:toSkip];
    byteCount -= toSkip;
  }
}

- (jlong)indexOfWithByte:(jbyte)b {
  return [self indexOfWithByte:b withLong:0];
}

- (jlong)indexOfWithByte:(jbyte)b
                withLong:(jlong)fromIndex {
  if (closed_) @throw create_JavaLangIllegalStateException_initWithNSString_(@"closed");
  while (true) {
    jlong result = [((OkioBuffer *) nil_chk(buffer_)) indexOfWithByte:b withLong:fromIndex];
    if (result != -1) return result;
    jlong lastBufferSize = buffer_->size_;
    if ([((id<OkioSource>) nil_chk(source_)) readWithOkioBuffer:buffer_ withLong:OkioSegment_SIZE] == -1) return -1LL;
    fromIndex = JavaLangMath_maxWithLong_withLong_(fromIndex, lastBufferSize);
  }
}

- (jlong)indexOfWithOkioByteString:(OkioByteString *)bytes {
  return [self indexOfWithOkioByteString:bytes withLong:0];
}

- (jlong)indexOfWithOkioByteString:(OkioByteString *)bytes
                          withLong:(jlong)fromIndex {
  if (closed_) @throw create_JavaLangIllegalStateException_initWithNSString_(@"closed");
  while (true) {
    jlong result = [((OkioBuffer *) nil_chk(buffer_)) indexOfWithOkioByteString:bytes withLong:fromIndex];
    if (result != -1) return result;
    jlong lastBufferSize = buffer_->size_;
    if ([((id<OkioSource>) nil_chk(source_)) readWithOkioBuffer:buffer_ withLong:OkioSegment_SIZE] == -1) return -1LL;
    fromIndex = JavaLangMath_maxWithLong_withLong_(fromIndex, lastBufferSize - [((OkioByteString *) nil_chk(bytes)) size] + 1);
  }
}

- (jlong)indexOfElementWithOkioByteString:(OkioByteString *)targetBytes {
  return [self indexOfElementWithOkioByteString:targetBytes withLong:0];
}

- (jlong)indexOfElementWithOkioByteString:(OkioByteString *)targetBytes
                                 withLong:(jlong)fromIndex {
  if (closed_) @throw create_JavaLangIllegalStateException_initWithNSString_(@"closed");
  while (true) {
    jlong result = [((OkioBuffer *) nil_chk(buffer_)) indexOfElementWithOkioByteString:targetBytes withLong:fromIndex];
    if (result != -1) return result;
    jlong lastBufferSize = buffer_->size_;
    if ([((id<OkioSource>) nil_chk(source_)) readWithOkioBuffer:buffer_ withLong:OkioSegment_SIZE] == -1) return -1LL;
    fromIndex = JavaLangMath_maxWithLong_withLong_(fromIndex, lastBufferSize);
  }
}

- (jboolean)rangeEqualsWithLong:(jlong)offset
             withOkioByteString:(OkioByteString *)bytes {
  return [self rangeEqualsWithLong:offset withOkioByteString:bytes withInt:0 withInt:[((OkioByteString *) nil_chk(bytes)) size]];
}

- (jboolean)rangeEqualsWithLong:(jlong)offset
             withOkioByteString:(OkioByteString *)bytes
                        withInt:(jint)bytesOffset
                        withInt:(jint)byteCount {
  if (closed_) @throw create_JavaLangIllegalStateException_initWithNSString_(@"closed");
  if (offset < 0 || bytesOffset < 0 || byteCount < 0 || [((OkioByteString *) nil_chk(bytes)) size] - bytesOffset < byteCount) {
    return false;
  }
  for (jint i = 0; i < byteCount; i++) {
    jlong bufferOffset = offset + i;
    if (![self requestWithLong:bufferOffset + 1]) return false;
    if ([((OkioBuffer *) nil_chk(buffer_)) getByteWithLong:bufferOffset] != [((OkioByteString *) nil_chk(bytes)) getByteWithInt:bytesOffset + i]) return false;
  }
  return true;
}

- (JavaIoInputStream *)inputStream {
  return create_OkioRealBufferedSource_1_initWithOkioRealBufferedSource_(self);
}

- (void)close {
  if (closed_) return;
  closed_ = true;
  [((id<OkioSource>) nil_chk(source_)) close];
  [((OkioBuffer *) nil_chk(buffer_)) clear];
}

- (OkioTimeout *)timeout {
  return [((id<OkioSource>) nil_chk(source_)) timeout];
}

- (NSString *)description {
  return JreStrcat("$@C", @"buffer(", source_, ')');
}

- (void)dealloc {
  RELEASE_(buffer_);
  RELEASE_(source_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOkioBuffer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 3, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 5, 3, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LOkioByteString;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LOkioByteString;", 0x1, 7, 5, 3, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 9, 3, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "[B", 0x1, 10, 5, 3, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 11, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 11, 3, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 13, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 2, 3, -1, -1, -1 },
    { NULL, "J", 0x1, 14, 15, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 16, 5, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 17, 18, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 17, 19, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 5, 3, -1, -1, -1 },
    { NULL, "J", 0x1, 21, 22, 3, -1, -1, -1 },
    { NULL, "J", 0x1, 21, 23, 3, -1, -1, -1 },
    { NULL, "J", 0x1, 21, 24, 3, -1, -1, -1 },
    { NULL, "J", 0x1, 21, 25, 3, -1, -1, -1 },
    { NULL, "J", 0x1, 26, 24, 3, -1, -1, -1 },
    { NULL, "J", 0x1, 26, 25, 3, -1, -1, -1 },
    { NULL, "Z", 0x1, 27, 28, 3, -1, -1, -1 },
    { NULL, "Z", 0x1, 27, 29, 3, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LOkioTimeout;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 30, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkioSource:);
  methods[1].selector = @selector(buffer);
  methods[2].selector = @selector(readWithOkioBuffer:withLong:);
  methods[3].selector = @selector(exhausted);
  methods[4].selector = @selector(requireWithLong:);
  methods[5].selector = @selector(requestWithLong:);
  methods[6].selector = @selector(readByte);
  methods[7].selector = @selector(readByteString);
  methods[8].selector = @selector(readByteStringWithLong:);
  methods[9].selector = @selector(selectWithOkioOptions:);
  methods[10].selector = @selector(readByteArray);
  methods[11].selector = @selector(readByteArrayWithLong:);
  methods[12].selector = @selector(readWithByteArray:);
  methods[13].selector = @selector(readFullyWithByteArray:);
  methods[14].selector = @selector(readWithByteArray:withInt:withInt:);
  methods[15].selector = @selector(readFullyWithOkioBuffer:withLong:);
  methods[16].selector = @selector(readAllWithOkioSink:);
  methods[17].selector = @selector(readUtf8);
  methods[18].selector = @selector(readUtf8WithLong:);
  methods[19].selector = @selector(readStringWithJavaNioCharsetCharset:);
  methods[20].selector = @selector(readStringWithLong:withJavaNioCharsetCharset:);
  methods[21].selector = @selector(readUtf8Line);
  methods[22].selector = @selector(readUtf8LineStrict);
  methods[23].selector = @selector(readUtf8CodePoint);
  methods[24].selector = @selector(readShort);
  methods[25].selector = @selector(readShortLe);
  methods[26].selector = @selector(readInt);
  methods[27].selector = @selector(readIntLe);
  methods[28].selector = @selector(readLong);
  methods[29].selector = @selector(readLongLe);
  methods[30].selector = @selector(readDecimalLong);
  methods[31].selector = @selector(readHexadecimalUnsignedLong);
  methods[32].selector = @selector(skipWithLong:);
  methods[33].selector = @selector(indexOfWithByte:);
  methods[34].selector = @selector(indexOfWithByte:withLong:);
  methods[35].selector = @selector(indexOfWithOkioByteString:);
  methods[36].selector = @selector(indexOfWithOkioByteString:withLong:);
  methods[37].selector = @selector(indexOfElementWithOkioByteString:);
  methods[38].selector = @selector(indexOfElementWithOkioByteString:withLong:);
  methods[39].selector = @selector(rangeEqualsWithLong:withOkioByteString:);
  methods[40].selector = @selector(rangeEqualsWithLong:withOkioByteString:withInt:withInt:);
  methods[41].selector = @selector(inputStream);
  methods[42].selector = @selector(close);
  methods[43].selector = @selector(timeout);
  methods[44].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "buffer_", "LOkioBuffer;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "source_", "LOkioSource;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "closed_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkioSource;", "read", "LOkioBuffer;J", "LJavaIoIOException;", "require", "J", "request", "readByteString", "select", "LOkioOptions;", "readByteArray", "[B", "readFully", "[BII", "readAll", "LOkioSink;", "readUtf8", "readString", "LJavaNioCharsetCharset;", "JLJavaNioCharsetCharset;", "skip", "indexOf", "B", "BJ", "LOkioByteString;", "LOkioByteString;J", "indexOfElement", "rangeEquals", "JLOkioByteString;", "JLOkioByteString;II", "toString" };
  static const J2ObjcClassInfo _OkioRealBufferedSource = { "RealBufferedSource", "okio", ptrTable, methods, fields, 7, 0x10, 45, 3, -1, -1, -1, -1, -1 };
  return &_OkioRealBufferedSource;
}

@end

void OkioRealBufferedSource_initWithOkioSource_(OkioRealBufferedSource *self, id<OkioSource> source) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->buffer_, new_OkioBuffer_init());
  if (source == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"source == null");
  JreStrongAssign(&self->source_, source);
}

OkioRealBufferedSource *new_OkioRealBufferedSource_initWithOkioSource_(id<OkioSource> source) {
  J2OBJC_NEW_IMPL(OkioRealBufferedSource, initWithOkioSource_, source)
}

OkioRealBufferedSource *create_OkioRealBufferedSource_initWithOkioSource_(id<OkioSource> source) {
  J2OBJC_CREATE_IMPL(OkioRealBufferedSource, initWithOkioSource_, source)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OkioRealBufferedSource)

@implementation OkioRealBufferedSource_1

- (instancetype)initWithOkioRealBufferedSource:(OkioRealBufferedSource *)outer$ {
  OkioRealBufferedSource_1_initWithOkioRealBufferedSource_(self, outer$);
  return self;
}

- (jint)read {
  if (this$0_->closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
  if (((OkioBuffer *) nil_chk(this$0_->buffer_))->size_ == 0) {
    jlong count = [((id<OkioSource>) nil_chk(this$0_->source_)) readWithOkioBuffer:this$0_->buffer_ withLong:OkioSegment_SIZE];
    if (count == -1) return -1;
  }
  return [this$0_->buffer_ readByte] & (jint) 0xff;
}

- (jint)readWithByteArray:(IOSByteArray *)data
                  withInt:(jint)offset
                  withInt:(jint)byteCount {
  if (this$0_->closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
  OkioUtil_checkOffsetAndCountWithLong_withLong_withLong_(((IOSByteArray *) nil_chk(data))->size_, offset, byteCount);
  if (((OkioBuffer *) nil_chk(this$0_->buffer_))->size_ == 0) {
    jlong count = [((id<OkioSource>) nil_chk(this$0_->source_)) readWithOkioBuffer:this$0_->buffer_ withLong:OkioSegment_SIZE];
    if (count == -1) return -1;
  }
  return [this$0_->buffer_ readWithByteArray:data withInt:offset withInt:byteCount];
}

- (jint)available {
  if (this$0_->closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
  return (jint) JavaLangMath_minWithLong_withLong_(((OkioBuffer *) nil_chk(this$0_->buffer_))->size_, JavaLangInteger_MAX_VALUE);
}

- (void)close {
  [this$0_ close];
}

- (NSString *)description {
  return JreStrcat("@$", this$0_, @".inputStream()");
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, 0, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkioRealBufferedSource:);
  methods[1].selector = @selector(read);
  methods[2].selector = @selector(readWithByteArray:withInt:withInt:);
  methods[3].selector = @selector(available);
  methods[4].selector = @selector(close);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkioRealBufferedSource;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoIOException;", "read", "[BII", "toString", "LOkioRealBufferedSource;", "inputStream" };
  static const J2ObjcClassInfo _OkioRealBufferedSource_1 = { "", "okio", ptrTable, methods, fields, 7, 0x8018, 6, 1, 4, -1, 5, -1, -1 };
  return &_OkioRealBufferedSource_1;
}

@end

void OkioRealBufferedSource_1_initWithOkioRealBufferedSource_(OkioRealBufferedSource_1 *self, OkioRealBufferedSource *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  JavaIoInputStream_init(self);
}

OkioRealBufferedSource_1 *new_OkioRealBufferedSource_1_initWithOkioRealBufferedSource_(OkioRealBufferedSource *outer$) {
  J2OBJC_NEW_IMPL(OkioRealBufferedSource_1, initWithOkioRealBufferedSource_, outer$)
}

OkioRealBufferedSource_1 *create_OkioRealBufferedSource_1_initWithOkioRealBufferedSource_(OkioRealBufferedSource *outer$) {
  J2OBJC_CREATE_IMPL(OkioRealBufferedSource_1, initWithOkioRealBufferedSource_, outer$)
}
