//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okio/ByteString.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OkioByteString")
#ifdef RESTRICT_OkioByteString
#define INCLUDE_ALL_OkioByteString 0
#else
#define INCLUDE_ALL_OkioByteString 1
#endif
#undef RESTRICT_OkioByteString

#if !defined (OkioByteString_) && (INCLUDE_ALL_OkioByteString || defined(INCLUDE_OkioByteString))
#define OkioByteString_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

@class IOSByteArray;
@class IOSCharArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaNioByteBuffer;
@class JavaNioCharsetCharset;
@class OkioBuffer;

@interface OkioByteString : NSObject < JavaIoSerializable, JavaLangComparable > {
 @public
  IOSByteArray *data_;
  jint hashCode_;
  NSString *utf8_;
}

#pragma mark Public

- (JavaNioByteBuffer *)asByteBuffer;

- (NSString *)base64;

- (NSString *)base64Url;

- (jint)compareToWithId:(OkioByteString *)byteString;

+ (OkioByteString *)decodeBase64WithNSString:(NSString *)base64;

+ (OkioByteString *)decodeHexWithNSString:(NSString *)hex;

+ (OkioByteString *)encodeStringWithNSString:(NSString *)s
                   withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset;

+ (OkioByteString *)encodeUtf8WithNSString:(NSString *)s;

- (jboolean)endsWithWithByteArray:(IOSByteArray *)prefix;

- (jboolean)endsWithWithOkioByteString:(OkioByteString *)prefix;

- (jboolean)isEqual:(id)o;

- (jbyte)getByteWithInt:(jint)pos;

- (NSUInteger)hash;

- (NSString *)hex;

- (OkioByteString *)hmacSha1WithOkioByteString:(OkioByteString *)key;

- (OkioByteString *)hmacSha256WithOkioByteString:(OkioByteString *)key;

- (jint)indexOfWithByteArray:(IOSByteArray *)other;

- (jint)indexOfWithByteArray:(IOSByteArray *)other
                     withInt:(jint)fromIndex;

- (jint)indexOfWithOkioByteString:(OkioByteString *)other;

- (jint)indexOfWithOkioByteString:(OkioByteString *)other
                          withInt:(jint)fromIndex;

- (jint)lastIndexOfWithByteArray:(IOSByteArray *)other;

- (jint)lastIndexOfWithByteArray:(IOSByteArray *)other
                         withInt:(jint)fromIndex;

- (jint)lastIndexOfWithOkioByteString:(OkioByteString *)other;

- (jint)lastIndexOfWithOkioByteString:(OkioByteString *)other
                              withInt:(jint)fromIndex;

- (OkioByteString *)md5;

+ (OkioByteString *)ofWithByteArray:(IOSByteArray *)data;

+ (OkioByteString *)ofWithByteArray:(IOSByteArray *)data
                            withInt:(jint)offset
                            withInt:(jint)byteCount;

+ (OkioByteString *)ofWithJavaNioByteBuffer:(JavaNioByteBuffer *)data;

- (jboolean)rangeEqualsWithInt:(jint)offset
                 withByteArray:(IOSByteArray *)other
                       withInt:(jint)otherOffset
                       withInt:(jint)byteCount;

- (jboolean)rangeEqualsWithInt:(jint)offset
            withOkioByteString:(OkioByteString *)other
                       withInt:(jint)otherOffset
                       withInt:(jint)byteCount;

+ (OkioByteString *)readWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                      withInt:(jint)byteCount;

- (OkioByteString *)sha1;

- (OkioByteString *)sha256;

- (jint)size;

- (jboolean)startsWithWithByteArray:(IOSByteArray *)prefix;

- (jboolean)startsWithWithOkioByteString:(OkioByteString *)prefix;

- (NSString *)stringWithJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset;

- (OkioByteString *)substringWithInt:(jint)beginIndex;

- (OkioByteString *)substringWithInt:(jint)beginIndex
                             withInt:(jint)endIndex;

- (OkioByteString *)toAsciiLowercase;

- (OkioByteString *)toAsciiUppercase;

- (IOSByteArray *)toByteArray;

- (NSString *)description;

- (NSString *)utf8;

- (void)writeWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

#pragma mark Package-Private

- (instancetype)initWithByteArray:(IOSByteArray *)data;

+ (jint)codePointIndexToCharIndexWithNSString:(NSString *)s
                                      withInt:(jint)codePointCount;

- (IOSByteArray *)internalArray;

- (void)writeWithOkioBuffer:(OkioBuffer *)buffer;

@end

J2OBJC_STATIC_INIT(OkioByteString)

J2OBJC_FIELD_SETTER(OkioByteString, data_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OkioByteString, utf8_, NSString *)

inline IOSCharArray *OkioByteString_get_HEX_DIGITS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSCharArray *OkioByteString_HEX_DIGITS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OkioByteString, HEX_DIGITS, IOSCharArray *)

inline OkioByteString *OkioByteString_get_EMPTY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OkioByteString *OkioByteString_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OkioByteString, EMPTY, OkioByteString *)

FOUNDATION_EXPORT void OkioByteString_initWithByteArray_(OkioByteString *self, IOSByteArray *data);

FOUNDATION_EXPORT OkioByteString *new_OkioByteString_initWithByteArray_(IOSByteArray *data) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OkioByteString *create_OkioByteString_initWithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT OkioByteString *OkioByteString_ofWithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT OkioByteString *OkioByteString_ofWithByteArray_withInt_withInt_(IOSByteArray *data, jint offset, jint byteCount);

FOUNDATION_EXPORT OkioByteString *OkioByteString_ofWithJavaNioByteBuffer_(JavaNioByteBuffer *data);

FOUNDATION_EXPORT OkioByteString *OkioByteString_encodeUtf8WithNSString_(NSString *s);

FOUNDATION_EXPORT OkioByteString *OkioByteString_encodeStringWithNSString_withJavaNioCharsetCharset_(NSString *s, JavaNioCharsetCharset *charset);

FOUNDATION_EXPORT OkioByteString *OkioByteString_decodeBase64WithNSString_(NSString *base64);

FOUNDATION_EXPORT OkioByteString *OkioByteString_decodeHexWithNSString_(NSString *hex);

FOUNDATION_EXPORT OkioByteString *OkioByteString_readWithJavaIoInputStream_withInt_(JavaIoInputStream *inArg, jint byteCount);

FOUNDATION_EXPORT jint OkioByteString_codePointIndexToCharIndexWithNSString_withInt_(NSString *s, jint codePointCount);

J2OBJC_TYPE_LITERAL_HEADER(OkioByteString)

#endif

#pragma pop_macro("INCLUDE_ALL_OkioByteString")
