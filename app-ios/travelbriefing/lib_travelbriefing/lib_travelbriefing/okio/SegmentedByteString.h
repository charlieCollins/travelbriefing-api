//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okio/SegmentedByteString.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OkioSegmentedByteString")
#ifdef RESTRICT_OkioSegmentedByteString
#define INCLUDE_ALL_OkioSegmentedByteString 0
#else
#define INCLUDE_ALL_OkioSegmentedByteString 1
#endif
#undef RESTRICT_OkioSegmentedByteString

#if !defined (OkioSegmentedByteString_) && (INCLUDE_ALL_OkioSegmentedByteString || defined(INCLUDE_OkioSegmentedByteString))
#define OkioSegmentedByteString_

#define RESTRICT_OkioByteString 1
#define INCLUDE_OkioByteString 1
#include "okio/ByteString.h"

@class IOSByteArray;
@class IOSIntArray;
@class IOSObjectArray;
@class JavaIoOutputStream;
@class JavaNioByteBuffer;
@class JavaNioCharsetCharset;
@class OkioBuffer;

@interface OkioSegmentedByteString : OkioByteString {
 @public
  IOSObjectArray *segments_;
  IOSIntArray *directory_;
}

#pragma mark Public

- (JavaNioByteBuffer *)asByteBuffer;

- (NSString *)base64;

- (NSString *)base64Url;

- (jboolean)isEqual:(id)o;

- (jbyte)getByteWithInt:(jint)pos;

- (NSUInteger)hash;

- (NSString *)hex;

- (OkioByteString *)hmacSha1WithOkioByteString:(OkioByteString *)key;

- (OkioByteString *)hmacSha256WithOkioByteString:(OkioByteString *)key;

- (jint)indexOfWithByteArray:(IOSByteArray *)other
                     withInt:(jint)fromIndex;

- (jint)lastIndexOfWithByteArray:(IOSByteArray *)other
                         withInt:(jint)fromIndex;

- (OkioByteString *)md5;

- (jboolean)rangeEqualsWithInt:(jint)offset
                 withByteArray:(IOSByteArray *)other
                       withInt:(jint)otherOffset
                       withInt:(jint)byteCount;

- (jboolean)rangeEqualsWithInt:(jint)offset
            withOkioByteString:(OkioByteString *)other
                       withInt:(jint)otherOffset
                       withInt:(jint)byteCount;

- (OkioByteString *)sha1;

- (OkioByteString *)sha256;

- (jint)size;

- (NSString *)stringWithJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset;

- (OkioByteString *)substringWithInt:(jint)beginIndex;

- (OkioByteString *)substringWithInt:(jint)beginIndex
                             withInt:(jint)endIndex;

- (OkioByteString *)toAsciiLowercase;

- (OkioByteString *)toAsciiUppercase;

- (IOSByteArray *)toByteArray;

- (NSString *)description;

- (NSString *)utf8;

- (void)writeWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

#pragma mark Package-Private

- (instancetype)initWithOkioBuffer:(OkioBuffer *)buffer
                           withInt:(jint)byteCount;

- (IOSByteArray *)internalArray;

- (void)writeWithOkioBuffer:(OkioBuffer *)buffer;

@end

J2OBJC_EMPTY_STATIC_INIT(OkioSegmentedByteString)

J2OBJC_FIELD_SETTER(OkioSegmentedByteString, segments_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OkioSegmentedByteString, directory_, IOSIntArray *)

FOUNDATION_EXPORT void OkioSegmentedByteString_initWithOkioBuffer_withInt_(OkioSegmentedByteString *self, OkioBuffer *buffer, jint byteCount);

FOUNDATION_EXPORT OkioSegmentedByteString *new_OkioSegmentedByteString_initWithOkioBuffer_withInt_(OkioBuffer *buffer, jint byteCount) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OkioSegmentedByteString *create_OkioSegmentedByteString_initWithOkioBuffer_withInt_(OkioBuffer *buffer, jint byteCount);

J2OBJC_TYPE_LITERAL_HEADER(OkioSegmentedByteString)

#endif

#pragma pop_macro("INCLUDE_ALL_OkioSegmentedByteString")
