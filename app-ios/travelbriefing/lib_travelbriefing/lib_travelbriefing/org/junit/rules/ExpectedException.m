//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/rules/ExpectedException.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/annotation/Annotation.h"
#include "org/hamcrest/CoreMatchers.h"
#include "org/hamcrest/Matcher.h"
#include "org/hamcrest/StringDescription.h"
#include "org/junit/Assert.h"
#include "org/junit/internal/matchers/ThrowableCauseMatcher.h"
#include "org/junit/internal/matchers/ThrowableMessageMatcher.h"
#include "org/junit/rules/ExpectedException.h"
#include "org/junit/rules/ExpectedExceptionMatcherBuilder.h"
#include "org/junit/runner/Description.h"
#include "org/junit/runners/model/Statement.h"

@interface OrgJunitRulesExpectedException () {
 @public
  OrgJunitRulesExpectedExceptionMatcherBuilder *matcherBuilder_;
  NSString *missingExceptionMessage_;
}

- (instancetype)init;

- (void)handleExceptionWithNSException:(NSException *)e;

- (jboolean)isAnyExceptionExpected;

- (void)failDueToMissingException;

- (NSString *)missingExceptionMessage;

@end

J2OBJC_FIELD_SETTER(OrgJunitRulesExpectedException, matcherBuilder_, OrgJunitRulesExpectedExceptionMatcherBuilder *)
J2OBJC_FIELD_SETTER(OrgJunitRulesExpectedException, missingExceptionMessage_, NSString *)

__attribute__((unused)) static void OrgJunitRulesExpectedException_init(OrgJunitRulesExpectedException *self);

__attribute__((unused)) static OrgJunitRulesExpectedException *new_OrgJunitRulesExpectedException_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJunitRulesExpectedException *create_OrgJunitRulesExpectedException_init();

__attribute__((unused)) static void OrgJunitRulesExpectedException_handleExceptionWithNSException_(OrgJunitRulesExpectedException *self, NSException *e);

__attribute__((unused)) static jboolean OrgJunitRulesExpectedException_isAnyExceptionExpected(OrgJunitRulesExpectedException *self);

__attribute__((unused)) static void OrgJunitRulesExpectedException_failDueToMissingException(OrgJunitRulesExpectedException *self);

__attribute__((unused)) static NSString *OrgJunitRulesExpectedException_missingExceptionMessage(OrgJunitRulesExpectedException *self);

__attribute__((unused)) static IOSObjectArray *OrgJunitRulesExpectedException__Annotations$0();

__attribute__((unused)) static IOSObjectArray *OrgJunitRulesExpectedException__Annotations$1();

@interface OrgJunitRulesExpectedException_ExpectedExceptionStatement : OrgJunitRunnersModelStatement {
 @public
  OrgJunitRulesExpectedException *this$0_;
  OrgJunitRunnersModelStatement *next_;
}

- (instancetype)initWithOrgJunitRulesExpectedException:(OrgJunitRulesExpectedException *)outer$
                     withOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)base;

- (void)evaluate;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitRulesExpectedException_ExpectedExceptionStatement)

J2OBJC_FIELD_SETTER(OrgJunitRulesExpectedException_ExpectedExceptionStatement, next_, OrgJunitRunnersModelStatement *)

__attribute__((unused)) static void OrgJunitRulesExpectedException_ExpectedExceptionStatement_initWithOrgJunitRulesExpectedException_withOrgJunitRunnersModelStatement_(OrgJunitRulesExpectedException_ExpectedExceptionStatement *self, OrgJunitRulesExpectedException *outer$, OrgJunitRunnersModelStatement *base);

__attribute__((unused)) static OrgJunitRulesExpectedException_ExpectedExceptionStatement *new_OrgJunitRulesExpectedException_ExpectedExceptionStatement_initWithOrgJunitRulesExpectedException_withOrgJunitRunnersModelStatement_(OrgJunitRulesExpectedException *outer$, OrgJunitRunnersModelStatement *base) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJunitRulesExpectedException_ExpectedExceptionStatement *create_OrgJunitRulesExpectedException_ExpectedExceptionStatement_initWithOrgJunitRulesExpectedException_withOrgJunitRunnersModelStatement_(OrgJunitRulesExpectedException *outer$, OrgJunitRunnersModelStatement *base);

J2OBJC_TYPE_LITERAL_HEADER(OrgJunitRulesExpectedException_ExpectedExceptionStatement)

@implementation OrgJunitRulesExpectedException

+ (OrgJunitRulesExpectedException *)none {
  return OrgJunitRulesExpectedException_none();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJunitRulesExpectedException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgJunitRulesExpectedException *)handleAssertionErrors {
  return self;
}

- (OrgJunitRulesExpectedException *)handleAssumptionViolatedExceptions {
  return self;
}

- (OrgJunitRulesExpectedException *)reportMissingExceptionWithMessageWithNSString:(NSString *)message {
  JreStrongAssign(&missingExceptionMessage_, message);
  return self;
}

- (OrgJunitRunnersModelStatement *)applyWithOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)base
                                            withOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_ {
  return create_OrgJunitRulesExpectedException_ExpectedExceptionStatement_initWithOrgJunitRulesExpectedException_withOrgJunitRunnersModelStatement_(self, base);
}

- (void)expectWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher {
  [((OrgJunitRulesExpectedExceptionMatcherBuilder *) nil_chk(matcherBuilder_)) addWithOrgHamcrestMatcher:matcher];
}

- (void)expectWithIOSClass:(IOSClass *)type {
  [self expectWithOrgHamcrestMatcher:OrgHamcrestCoreMatchers_instanceOfWithIOSClass_(type)];
}

- (void)expectMessageWithNSString:(NSString *)substring {
  [self expectMessageWithOrgHamcrestMatcher:OrgHamcrestCoreMatchers_containsStringWithNSString_(substring)];
}

- (void)expectMessageWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher {
  [self expectWithOrgHamcrestMatcher:OrgJunitInternalMatchersThrowableMessageMatcher_hasMessageWithOrgHamcrestMatcher_(matcher)];
}

- (void)expectCauseWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)expectedCause {
  [self expectWithOrgHamcrestMatcher:OrgJunitInternalMatchersThrowableCauseMatcher_hasCauseWithOrgHamcrestMatcher_(expectedCause)];
}

- (void)handleExceptionWithNSException:(NSException *)e {
  OrgJunitRulesExpectedException_handleExceptionWithNSException_(self, e);
}

- (jboolean)isAnyExceptionExpected {
  return OrgJunitRulesExpectedException_isAnyExceptionExpected(self);
}

- (void)failDueToMissingException {
  OrgJunitRulesExpectedException_failDueToMissingException(self);
}

- (NSString *)missingExceptionMessage {
  return OrgJunitRulesExpectedException_missingExceptionMessage(self);
}

- (void)dealloc {
  RELEASE_(matcherBuilder_);
  RELEASE_(missingExceptionMessage_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgJunitRulesExpectedException;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJunitRulesExpectedException;", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "LOrgJunitRulesExpectedException;", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "LOrgJunitRulesExpectedException;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgJunitRunnersModelStatement;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x1, 6, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x1, 11, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 7, -1, 12, -1, -1 },
    { NULL, "V", 0x1, 13, 7, -1, 14, -1, -1 },
    { NULL, "V", 0x2, 15, 16, 16, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 17, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(none);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(handleAssertionErrors);
  methods[3].selector = @selector(handleAssumptionViolatedExceptions);
  methods[4].selector = @selector(reportMissingExceptionWithMessageWithNSString:);
  methods[5].selector = @selector(applyWithOrgJunitRunnersModelStatement:withOrgJunitRunnerDescription:);
  methods[6].selector = @selector(expectWithOrgHamcrestMatcher:);
  methods[7].selector = @selector(expectWithIOSClass:);
  methods[8].selector = @selector(expectMessageWithNSString:);
  methods[9].selector = @selector(expectMessageWithOrgHamcrestMatcher:);
  methods[10].selector = @selector(expectCauseWithOrgHamcrestMatcher:);
  methods[11].selector = @selector(handleExceptionWithNSException:);
  methods[12].selector = @selector(isAnyExceptionExpected);
  methods[13].selector = @selector(failDueToMissingException);
  methods[14].selector = @selector(missingExceptionMessage);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "matcherBuilder_", "LOrgJunitRulesExpectedExceptionMatcherBuilder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "missingExceptionMessage_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&OrgJunitRulesExpectedException__Annotations$0, (void *)&OrgJunitRulesExpectedException__Annotations$1, "reportMissingExceptionWithMessage", "LNSString;", "apply", "LOrgJunitRunnersModelStatement;LOrgJunitRunnerDescription;", "expect", "LOrgHamcrestMatcher;", "(Lorg/hamcrest/Matcher<*>;)V", "LIOSClass;", "(Ljava/lang/Class<+Ljava/lang/Throwable;>;)V", "expectMessage", "(Lorg/hamcrest/Matcher<Ljava/lang/String;>;)V", "expectCause", "(Lorg/hamcrest/Matcher<+Ljava/lang/Throwable;>;)V", "handleException", "LNSException;", "LJavaLangAssertionError;", "LOrgJunitRulesExpectedException_ExpectedExceptionStatement;" };
  static const J2ObjcClassInfo _OrgJunitRulesExpectedException = { "ExpectedException", "org.junit.rules", ptrTable, methods, fields, 7, 0x1, 15, 2, -1, 18, -1, -1, -1 };
  return &_OrgJunitRulesExpectedException;
}

@end

OrgJunitRulesExpectedException *OrgJunitRulesExpectedException_none() {
  OrgJunitRulesExpectedException_initialize();
  return create_OrgJunitRulesExpectedException_init();
}

void OrgJunitRulesExpectedException_init(OrgJunitRulesExpectedException *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->matcherBuilder_, new_OrgJunitRulesExpectedExceptionMatcherBuilder_init());
  JreStrongAssign(&self->missingExceptionMessage_, @"Expected test to throw %s");
}

OrgJunitRulesExpectedException *new_OrgJunitRulesExpectedException_init() {
  J2OBJC_NEW_IMPL(OrgJunitRulesExpectedException, init)
}

OrgJunitRulesExpectedException *create_OrgJunitRulesExpectedException_init() {
  J2OBJC_CREATE_IMPL(OrgJunitRulesExpectedException, init)
}

void OrgJunitRulesExpectedException_handleExceptionWithNSException_(OrgJunitRulesExpectedException *self, NSException *e) {
  if (OrgJunitRulesExpectedException_isAnyExceptionExpected(self)) {
    OrgJunitAssert_assertThatWithId_withOrgHamcrestMatcher_(e, [((OrgJunitRulesExpectedExceptionMatcherBuilder *) nil_chk(self->matcherBuilder_)) build]);
  }
  else {
    @throw e;
  }
}

jboolean OrgJunitRulesExpectedException_isAnyExceptionExpected(OrgJunitRulesExpectedException *self) {
  return [((OrgJunitRulesExpectedExceptionMatcherBuilder *) nil_chk(self->matcherBuilder_)) expectsThrowable];
}

void OrgJunitRulesExpectedException_failDueToMissingException(OrgJunitRulesExpectedException *self) {
  OrgJunitAssert_failWithNSString_(OrgJunitRulesExpectedException_missingExceptionMessage(self));
}

NSString *OrgJunitRulesExpectedException_missingExceptionMessage(OrgJunitRulesExpectedException *self) {
  NSString *expectation = OrgHamcrestStringDescription_toStringWithOrgHamcrestSelfDescribing_([((OrgJunitRulesExpectedExceptionMatcherBuilder *) nil_chk(self->matcherBuilder_)) build]);
  return NSString_java_formatWithNSString_withNSObjectArray_(self->missingExceptionMessage_, [IOSObjectArray arrayWithObjects:(id[]){ expectation } count:1 type:NSObject_class_()]);
}

IOSObjectArray *OrgJunitRulesExpectedException__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgJunitRulesExpectedException__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitRulesExpectedException)

@implementation OrgJunitRulesExpectedException_ExpectedExceptionStatement

- (instancetype)initWithOrgJunitRulesExpectedException:(OrgJunitRulesExpectedException *)outer$
                     withOrgJunitRunnersModelStatement:(OrgJunitRunnersModelStatement *)base {
  OrgJunitRulesExpectedException_ExpectedExceptionStatement_initWithOrgJunitRulesExpectedException_withOrgJunitRunnersModelStatement_(self, outer$, base);
  return self;
}

- (void)evaluate {
  @try {
    [((OrgJunitRunnersModelStatement *) nil_chk(next_)) evaluate];
  }
  @catch (NSException *e) {
    OrgJunitRulesExpectedException_handleExceptionWithNSException_(this$0_, e);
    return;
  }
  if (OrgJunitRulesExpectedException_isAnyExceptionExpected(this$0_)) {
    OrgJunitRulesExpectedException_failDueToMissingException(this$0_);
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(next_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJunitRulesExpectedException:withOrgJunitRunnersModelStatement:);
  methods[1].selector = @selector(evaluate);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgJunitRulesExpectedException;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "next_", "LOrgJunitRunnersModelStatement;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJunitRunnersModelStatement;", "LNSException;", "LOrgJunitRulesExpectedException;" };
  static const J2ObjcClassInfo _OrgJunitRulesExpectedException_ExpectedExceptionStatement = { "ExpectedExceptionStatement", "org.junit.rules", ptrTable, methods, fields, 7, 0x2, 2, 2, 2, -1, -1, -1, -1 };
  return &_OrgJunitRulesExpectedException_ExpectedExceptionStatement;
}

@end

void OrgJunitRulesExpectedException_ExpectedExceptionStatement_initWithOrgJunitRulesExpectedException_withOrgJunitRunnersModelStatement_(OrgJunitRulesExpectedException_ExpectedExceptionStatement *self, OrgJunitRulesExpectedException *outer$, OrgJunitRunnersModelStatement *base) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgJunitRunnersModelStatement_init(self);
  JreStrongAssign(&self->next_, base);
}

OrgJunitRulesExpectedException_ExpectedExceptionStatement *new_OrgJunitRulesExpectedException_ExpectedExceptionStatement_initWithOrgJunitRulesExpectedException_withOrgJunitRunnersModelStatement_(OrgJunitRulesExpectedException *outer$, OrgJunitRunnersModelStatement *base) {
  J2OBJC_NEW_IMPL(OrgJunitRulesExpectedException_ExpectedExceptionStatement, initWithOrgJunitRulesExpectedException_withOrgJunitRunnersModelStatement_, outer$, base)
}

OrgJunitRulesExpectedException_ExpectedExceptionStatement *create_OrgJunitRulesExpectedException_ExpectedExceptionStatement_initWithOrgJunitRulesExpectedException_withOrgJunitRunnersModelStatement_(OrgJunitRulesExpectedException *outer$, OrgJunitRunnersModelStatement *base) {
  J2OBJC_CREATE_IMPL(OrgJunitRulesExpectedException_ExpectedExceptionStatement, initWithOrgJunitRulesExpectedException_withOrgJunitRunnersModelStatement_, outer$, base)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitRulesExpectedException_ExpectedExceptionStatement)
