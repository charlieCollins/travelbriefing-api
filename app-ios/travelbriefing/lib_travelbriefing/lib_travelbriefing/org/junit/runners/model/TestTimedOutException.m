//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/runners/model/TestTimedOutException.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/Long.h"
#include "java/util/concurrent/TimeUnit.h"
#include "org/junit/runners/model/TestTimedOutException.h"

@interface OrgJunitRunnersModelTestTimedOutException () {
 @public
  JavaUtilConcurrentTimeUnit *timeUnit_;
  jlong timeout_;
}

@end

J2OBJC_FIELD_SETTER(OrgJunitRunnersModelTestTimedOutException, timeUnit_, JavaUtilConcurrentTimeUnit *)

inline jlong OrgJunitRunnersModelTestTimedOutException_get_serialVersionUID();
#define OrgJunitRunnersModelTestTimedOutException_serialVersionUID 31935685163547539LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJunitRunnersModelTestTimedOutException, serialVersionUID, jlong)

@implementation OrgJunitRunnersModelTestTimedOutException

- (instancetype)initWithLong:(jlong)timeout
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeUnit {
  OrgJunitRunnersModelTestTimedOutException_initWithLong_withJavaUtilConcurrentTimeUnit_(self, timeout, timeUnit);
  return self;
}

- (jlong)getTimeout {
  return timeout_;
}

- (JavaUtilConcurrentTimeUnit *)getTimeUnit {
  return timeUnit_;
}

- (void)dealloc {
  RELEASE_(timeUnit_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentTimeUnit;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[1].selector = @selector(getTimeout);
  methods[2].selector = @selector(getTimeUnit);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJunitRunnersModelTestTimedOutException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "timeUnit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "timeout_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "JLJavaUtilConcurrentTimeUnit;" };
  static const J2ObjcClassInfo _OrgJunitRunnersModelTestTimedOutException = { "TestTimedOutException", "org.junit.runners.model", ptrTable, methods, fields, 7, 0x1, 3, 3, -1, -1, -1, -1, -1 };
  return &_OrgJunitRunnersModelTestTimedOutException;
}

@end

void OrgJunitRunnersModelTestTimedOutException_initWithLong_withJavaUtilConcurrentTimeUnit_(OrgJunitRunnersModelTestTimedOutException *self, jlong timeout, JavaUtilConcurrentTimeUnit *timeUnit) {
  JavaLangException_initWithNSString_(self, NSString_java_formatWithNSString_withNSObjectArray_(@"test timed out after %d %s", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(timeout), [((NSString *) nil_chk([((JavaUtilConcurrentTimeUnit *) nil_chk(timeUnit)) name])) lowercaseString] } count:2 type:NSObject_class_()]));
  JreStrongAssign(&self->timeUnit_, timeUnit);
  self->timeout_ = timeout;
}

OrgJunitRunnersModelTestTimedOutException *new_OrgJunitRunnersModelTestTimedOutException_initWithLong_withJavaUtilConcurrentTimeUnit_(jlong timeout, JavaUtilConcurrentTimeUnit *timeUnit) {
  J2OBJC_NEW_IMPL(OrgJunitRunnersModelTestTimedOutException, initWithLong_withJavaUtilConcurrentTimeUnit_, timeout, timeUnit)
}

OrgJunitRunnersModelTestTimedOutException *create_OrgJunitRunnersModelTestTimedOutException_initWithLong_withJavaUtilConcurrentTimeUnit_(jlong timeout, JavaUtilConcurrentTimeUnit *timeUnit) {
  J2OBJC_CREATE_IMPL(OrgJunitRunnersModelTestTimedOutException, initWithLong_withJavaUtilConcurrentTimeUnit_, timeout, timeUnit)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitRunnersModelTestTimedOutException)
