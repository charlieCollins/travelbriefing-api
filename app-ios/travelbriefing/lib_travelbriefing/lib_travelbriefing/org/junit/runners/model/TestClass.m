//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/runners/model/TestClass.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Modifier.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"
#include "org/junit/Assert.h"
#include "org/junit/Before.h"
#include "org/junit/BeforeClass.h"
#include "org/junit/internal/MethodSorter.h"
#include "org/junit/runners/model/FrameworkField.h"
#include "org/junit/runners/model/FrameworkMember.h"
#include "org/junit/runners/model/FrameworkMethod.h"
#include "org/junit/runners/model/TestClass.h"

@class OrgJunitRunnersModelTestClass_FieldComparator;
@class OrgJunitRunnersModelTestClass_MethodComparator;

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgJunitRunnersModelTestClass () {
 @public
  IOSClass *clazz_;
  id<JavaUtilMap> methodsForAnnotations_;
  id<JavaUtilMap> fieldsForAnnotations_;
}

+ (IOSObjectArray *)getSortedDeclaredFieldsWithIOSClass:(IOSClass *)clazz;

+ (id<JavaUtilMap>)makeDeeplyUnmodifiableWithJavaUtilMap:(id<JavaUtilMap>)source;

- (id<JavaUtilList>)collectValuesWithJavaUtilMap:(id<JavaUtilMap>)map;

+ (id<JavaUtilList>)getAnnotatedMembersWithJavaUtilMap:(id<JavaUtilMap>)map
                                          withIOSClass:(IOSClass *)type
                                           withBoolean:(jboolean)fillIfAbsent;

+ (jboolean)runsTopToBottomWithIOSClass:(IOSClass *)annotation;

+ (id<JavaUtilList>)getSuperClassesWithIOSClass:(IOSClass *)testClass;

@end

J2OBJC_FIELD_SETTER(OrgJunitRunnersModelTestClass, clazz_, IOSClass *)
J2OBJC_FIELD_SETTER(OrgJunitRunnersModelTestClass, methodsForAnnotations_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgJunitRunnersModelTestClass, fieldsForAnnotations_, id<JavaUtilMap>)

inline OrgJunitRunnersModelTestClass_FieldComparator *OrgJunitRunnersModelTestClass_get_FIELD_COMPARATOR();
static OrgJunitRunnersModelTestClass_FieldComparator *OrgJunitRunnersModelTestClass_FIELD_COMPARATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJunitRunnersModelTestClass, FIELD_COMPARATOR, OrgJunitRunnersModelTestClass_FieldComparator *)

inline OrgJunitRunnersModelTestClass_MethodComparator *OrgJunitRunnersModelTestClass_get_METHOD_COMPARATOR();
static OrgJunitRunnersModelTestClass_MethodComparator *OrgJunitRunnersModelTestClass_METHOD_COMPARATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJunitRunnersModelTestClass, METHOD_COMPARATOR, OrgJunitRunnersModelTestClass_MethodComparator *)

__attribute__((unused)) static IOSObjectArray *OrgJunitRunnersModelTestClass_getSortedDeclaredFieldsWithIOSClass_(IOSClass *clazz);

__attribute__((unused)) static id<JavaUtilMap> OrgJunitRunnersModelTestClass_makeDeeplyUnmodifiableWithJavaUtilMap_(id<JavaUtilMap> source);

__attribute__((unused)) static id<JavaUtilList> OrgJunitRunnersModelTestClass_collectValuesWithJavaUtilMap_(OrgJunitRunnersModelTestClass *self, id<JavaUtilMap> map);

__attribute__((unused)) static id<JavaUtilList> OrgJunitRunnersModelTestClass_getAnnotatedMembersWithJavaUtilMap_withIOSClass_withBoolean_(id<JavaUtilMap> map, IOSClass *type, jboolean fillIfAbsent);

__attribute__((unused)) static jboolean OrgJunitRunnersModelTestClass_runsTopToBottomWithIOSClass_(IOSClass *annotation);

__attribute__((unused)) static id<JavaUtilList> OrgJunitRunnersModelTestClass_getSuperClassesWithIOSClass_(IOSClass *testClass);

@interface OrgJunitRunnersModelTestClass_FieldComparator : NSObject < JavaUtilComparator >

- (instancetype)init;

- (jint)compareWithId:(JavaLangReflectField *)left
               withId:(JavaLangReflectField *)right;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitRunnersModelTestClass_FieldComparator)

__attribute__((unused)) static void OrgJunitRunnersModelTestClass_FieldComparator_init(OrgJunitRunnersModelTestClass_FieldComparator *self);

__attribute__((unused)) static OrgJunitRunnersModelTestClass_FieldComparator *new_OrgJunitRunnersModelTestClass_FieldComparator_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJunitRunnersModelTestClass_FieldComparator *create_OrgJunitRunnersModelTestClass_FieldComparator_init();

J2OBJC_TYPE_LITERAL_HEADER(OrgJunitRunnersModelTestClass_FieldComparator)

@interface OrgJunitRunnersModelTestClass_MethodComparator : NSObject < JavaUtilComparator >

- (instancetype)init;

- (jint)compareWithId:(OrgJunitRunnersModelFrameworkMethod *)left
               withId:(OrgJunitRunnersModelFrameworkMethod *)right;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitRunnersModelTestClass_MethodComparator)

__attribute__((unused)) static void OrgJunitRunnersModelTestClass_MethodComparator_init(OrgJunitRunnersModelTestClass_MethodComparator *self);

__attribute__((unused)) static OrgJunitRunnersModelTestClass_MethodComparator *new_OrgJunitRunnersModelTestClass_MethodComparator_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJunitRunnersModelTestClass_MethodComparator *create_OrgJunitRunnersModelTestClass_MethodComparator_init();

J2OBJC_TYPE_LITERAL_HEADER(OrgJunitRunnersModelTestClass_MethodComparator)

J2OBJC_INITIALIZED_DEFN(OrgJunitRunnersModelTestClass)

@implementation OrgJunitRunnersModelTestClass

- (instancetype)initWithIOSClass:(IOSClass *)clazz {
  OrgJunitRunnersModelTestClass_initWithIOSClass_(self, clazz);
  return self;
}

- (void)scanAnnotatedMembersWithJavaUtilMap:(id<JavaUtilMap>)methodsForAnnotations
                            withJavaUtilMap:(id<JavaUtilMap>)fieldsForAnnotations {
  for (IOSClass * __strong eachClass in nil_chk(OrgJunitRunnersModelTestClass_getSuperClassesWithIOSClass_(clazz_))) {
    {
      IOSObjectArray *a__ = OrgJunitInternalMethodSorter_getDeclaredMethodsWithIOSClass_(eachClass);
      JavaLangReflectMethod * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      JavaLangReflectMethod * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaLangReflectMethod *eachMethod = *b__++;
        OrgJunitRunnersModelTestClass_addToAnnotationListsWithOrgJunitRunnersModelFrameworkMember_withJavaUtilMap_(create_OrgJunitRunnersModelFrameworkMethod_initWithJavaLangReflectMethod_(eachMethod), methodsForAnnotations);
      }
    }
    {
      IOSObjectArray *a__ = OrgJunitRunnersModelTestClass_getSortedDeclaredFieldsWithIOSClass_(eachClass);
      JavaLangReflectField * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      JavaLangReflectField * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaLangReflectField *eachField = *b__++;
        OrgJunitRunnersModelTestClass_addToAnnotationListsWithOrgJunitRunnersModelFrameworkMember_withJavaUtilMap_(create_OrgJunitRunnersModelFrameworkField_initWithJavaLangReflectField_(eachField), fieldsForAnnotations);
      }
    }
  }
}

+ (IOSObjectArray *)getSortedDeclaredFieldsWithIOSClass:(IOSClass *)clazz {
  return OrgJunitRunnersModelTestClass_getSortedDeclaredFieldsWithIOSClass_(clazz);
}

+ (void)addToAnnotationListsWithOrgJunitRunnersModelFrameworkMember:(OrgJunitRunnersModelFrameworkMember *)member
                                                    withJavaUtilMap:(id<JavaUtilMap>)map {
  OrgJunitRunnersModelTestClass_addToAnnotationListsWithOrgJunitRunnersModelFrameworkMember_withJavaUtilMap_(member, map);
}

+ (id<JavaUtilMap>)makeDeeplyUnmodifiableWithJavaUtilMap:(id<JavaUtilMap>)source {
  return OrgJunitRunnersModelTestClass_makeDeeplyUnmodifiableWithJavaUtilMap_(source);
}

- (id<JavaUtilList>)getAnnotatedMethods {
  id<JavaUtilList> methods = OrgJunitRunnersModelTestClass_collectValuesWithJavaUtilMap_(self, methodsForAnnotations_);
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(methods, OrgJunitRunnersModelTestClass_METHOD_COMPARATOR);
  return methods;
}

- (id<JavaUtilList>)getAnnotatedMethodsWithIOSClass:(IOSClass *)annotationClass {
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(OrgJunitRunnersModelTestClass_getAnnotatedMembersWithJavaUtilMap_withIOSClass_withBoolean_(methodsForAnnotations_, annotationClass, false));
}

- (id<JavaUtilList>)getAnnotatedFields {
  return OrgJunitRunnersModelTestClass_collectValuesWithJavaUtilMap_(self, fieldsForAnnotations_);
}

- (id<JavaUtilList>)getAnnotatedFieldsWithIOSClass:(IOSClass *)annotationClass {
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(OrgJunitRunnersModelTestClass_getAnnotatedMembersWithJavaUtilMap_withIOSClass_withBoolean_(fieldsForAnnotations_, annotationClass, false));
}

- (id<JavaUtilList>)collectValuesWithJavaUtilMap:(id<JavaUtilMap>)map {
  return OrgJunitRunnersModelTestClass_collectValuesWithJavaUtilMap_(self, map);
}

+ (id<JavaUtilList>)getAnnotatedMembersWithJavaUtilMap:(id<JavaUtilMap>)map
                                          withIOSClass:(IOSClass *)type
                                           withBoolean:(jboolean)fillIfAbsent {
  return OrgJunitRunnersModelTestClass_getAnnotatedMembersWithJavaUtilMap_withIOSClass_withBoolean_(map, type, fillIfAbsent);
}

+ (jboolean)runsTopToBottomWithIOSClass:(IOSClass *)annotation {
  return OrgJunitRunnersModelTestClass_runsTopToBottomWithIOSClass_(annotation);
}

+ (id<JavaUtilList>)getSuperClassesWithIOSClass:(IOSClass *)testClass {
  return OrgJunitRunnersModelTestClass_getSuperClassesWithIOSClass_(testClass);
}

- (IOSClass *)getJavaClass {
  return clazz_;
}

- (NSString *)getName {
  if (clazz_ == nil) {
    return @"null";
  }
  return [clazz_ getName];
}

- (JavaLangReflectConstructor *)getOnlyConstructor {
  IOSObjectArray *constructors = [((IOSClass *) nil_chk(clazz_)) getConstructors];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, ((IOSObjectArray *) nil_chk(constructors))->size_);
  return IOSObjectArray_Get(constructors, 0);
}

- (IOSObjectArray *)getAnnotations {
  if (clazz_ == nil) {
    return [IOSObjectArray arrayWithLength:0 type:JavaLangAnnotationAnnotation_class_()];
  }
  return [clazz_ getAnnotations];
}

- (id<JavaLangAnnotationAnnotation>)getAnnotationWithIOSClass:(IOSClass *)annotationType {
  if (clazz_ == nil) {
    return nil;
  }
  return [clazz_ getAnnotationWithIOSClass:annotationType];
}

- (id<JavaUtilList>)getAnnotatedFieldValuesWithId:(id)test
                                     withIOSClass:(IOSClass *)annotationClass
                                     withIOSClass:(IOSClass *)valueClass {
  id<JavaUtilList> results = create_JavaUtilArrayList_init();
  for (OrgJunitRunnersModelFrameworkField * __strong each in nil_chk([self getAnnotatedFieldsWithIOSClass:annotationClass])) {
    @try {
      id fieldValue = [((OrgJunitRunnersModelFrameworkField *) nil_chk(each)) getWithId:test];
      if ([((IOSClass *) nil_chk(valueClass)) isInstance:fieldValue]) {
        [results addWithId:[valueClass cast:fieldValue]];
      }
    }
    @catch (JavaLangIllegalAccessException *e) {
      @throw create_JavaLangRuntimeException_initWithNSString_withNSException_(@"How did getFields return a field we couldn't access?", e);
    }
  }
  return results;
}

- (id<JavaUtilList>)getAnnotatedMethodValuesWithId:(id)test
                                      withIOSClass:(IOSClass *)annotationClass
                                      withIOSClass:(IOSClass *)valueClass {
  id<JavaUtilList> results = create_JavaUtilArrayList_init();
  for (OrgJunitRunnersModelFrameworkMethod * __strong each in nil_chk([self getAnnotatedMethodsWithIOSClass:annotationClass])) {
    @try {
      if ([((IOSClass *) nil_chk(valueClass)) isAssignableFrom:[((OrgJunitRunnersModelFrameworkMethod *) nil_chk(each)) getReturnType]]) {
        id fieldValue = [each invokeExplosivelyWithId:test withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]];
        [results addWithId:[valueClass cast:fieldValue]];
      }
    }
    @catch (NSException *e) {
      @throw create_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$$", @"Exception in ", [each getName]), e);
    }
  }
  return results;
}

- (jboolean)isPublic {
  return JavaLangReflectModifier_isPublicWithInt_([((IOSClass *) nil_chk(clazz_)) getModifiers]);
}

- (jboolean)isANonStaticInnerClass {
  return [((IOSClass *) nil_chk(clazz_)) isMemberClass] && !JavaLangReflectModifier_isStaticWithInt_([clazz_ getModifiers]);
}

- (NSUInteger)hash {
  return (clazz_ == nil) ? 0 : ((jint) [((IOSClass *) nil_chk(clazz_)) hash]);
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  if (obj == nil) {
    return false;
  }
  if ([self java_getClass] != [obj java_getClass]) {
    return false;
  }
  OrgJunitRunnersModelTestClass *other = (OrgJunitRunnersModelTestClass *) cast_chk(obj, [OrgJunitRunnersModelTestClass class]);
  return clazz_ == other->clazz_;
}

- (void)dealloc {
  RELEASE_(clazz_);
  RELEASE_(methodsForAnnotations_);
  RELEASE_(fieldsForAnnotations_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
    { NULL, "[LJavaLangReflectField;", 0xa, 5, 0, -1, 6, -1, -1 },
    { NULL, "V", 0xc, 7, 8, -1, 9, -1, -1 },
    { NULL, "LJavaUtilMap;", 0xa, 10, 11, -1, 12, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 13, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 14, 0, -1, 15, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 16, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 17, 0, -1, 18, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 19, 11, -1, 20, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 21, 22, -1, 23, -1, -1 },
    { NULL, "Z", 0xa, 24, 0, -1, 25, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 26, 0, -1, 27, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, 28, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectConstructor;", 0x1, -1, -1, -1, 29, -1, -1 },
    { NULL, "[LJavaLangAnnotationAnnotation;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangAnnotationAnnotation;", 0x1, 30, 0, -1, 31, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 32, 33, -1, 34, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 35, 33, -1, 34, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 36, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 37, 38, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIOSClass:);
  methods[1].selector = @selector(scanAnnotatedMembersWithJavaUtilMap:withJavaUtilMap:);
  methods[2].selector = @selector(getSortedDeclaredFieldsWithIOSClass:);
  methods[3].selector = @selector(addToAnnotationListsWithOrgJunitRunnersModelFrameworkMember:withJavaUtilMap:);
  methods[4].selector = @selector(makeDeeplyUnmodifiableWithJavaUtilMap:);
  methods[5].selector = @selector(getAnnotatedMethods);
  methods[6].selector = @selector(getAnnotatedMethodsWithIOSClass:);
  methods[7].selector = @selector(getAnnotatedFields);
  methods[8].selector = @selector(getAnnotatedFieldsWithIOSClass:);
  methods[9].selector = @selector(collectValuesWithJavaUtilMap:);
  methods[10].selector = @selector(getAnnotatedMembersWithJavaUtilMap:withIOSClass:withBoolean:);
  methods[11].selector = @selector(runsTopToBottomWithIOSClass:);
  methods[12].selector = @selector(getSuperClassesWithIOSClass:);
  methods[13].selector = @selector(getJavaClass);
  methods[14].selector = @selector(getName);
  methods[15].selector = @selector(getOnlyConstructor);
  methods[16].selector = @selector(getAnnotations);
  methods[17].selector = @selector(getAnnotationWithIOSClass:);
  methods[18].selector = @selector(getAnnotatedFieldValuesWithId:withIOSClass:withIOSClass:);
  methods[19].selector = @selector(getAnnotatedMethodValuesWithId:withIOSClass:withIOSClass:);
  methods[20].selector = @selector(isPublic);
  methods[21].selector = @selector(isANonStaticInnerClass);
  methods[22].selector = @selector(hash);
  methods[23].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FIELD_COMPARATOR", "LOrgJunitRunnersModelTestClass_FieldComparator;", .constantValue.asLong = 0, 0x1a, -1, 39, -1, -1 },
    { "METHOD_COMPARATOR", "LOrgJunitRunnersModelTestClass_MethodComparator;", .constantValue.asLong = 0, 0x1a, -1, 40, -1, -1 },
    { "clazz_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, 41, -1 },
    { "methodsForAnnotations_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 42, -1 },
    { "fieldsForAnnotations_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 43, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;", "(Ljava/lang/Class<*>;)V", "scanAnnotatedMembers", "LJavaUtilMap;LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;Ljava/util/List<Lorg/junit/runners/model/FrameworkMethod;>;>;Ljava/util/Map<Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;Ljava/util/List<Lorg/junit/runners/model/FrameworkField;>;>;)V", "getSortedDeclaredFields", "(Ljava/lang/Class<*>;)[Ljava/lang/reflect/Field;", "addToAnnotationLists", "LOrgJunitRunnersModelFrameworkMember;LJavaUtilMap;", "<T:Lorg/junit/runners/model/FrameworkMember<TT;>;>(TT;Ljava/util/Map<Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;Ljava/util/List<TT;>;>;)V", "makeDeeplyUnmodifiable", "LJavaUtilMap;", "<T:Lorg/junit/runners/model/FrameworkMember<TT;>;>(Ljava/util/Map<Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;Ljava/util/List<TT;>;>;)Ljava/util/Map<Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;Ljava/util/List<TT;>;>;", "()Ljava/util/List<Lorg/junit/runners/model/FrameworkMethod;>;", "getAnnotatedMethods", "(Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;)Ljava/util/List<Lorg/junit/runners/model/FrameworkMethod;>;", "()Ljava/util/List<Lorg/junit/runners/model/FrameworkField;>;", "getAnnotatedFields", "(Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;)Ljava/util/List<Lorg/junit/runners/model/FrameworkField;>;", "collectValues", "<T:Ljava/lang/Object;>(Ljava/util/Map<*Ljava/util/List<TT;>;>;)Ljava/util/List<TT;>;", "getAnnotatedMembers", "LJavaUtilMap;LIOSClass;Z", "<T:Ljava/lang/Object;>(Ljava/util/Map<Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;Ljava/util/List<TT;>;>;Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;Z)Ljava/util/List<TT;>;", "runsTopToBottom", "(Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;)Z", "getSuperClasses", "(Ljava/lang/Class<*>;)Ljava/util/List<Ljava/lang/Class<*>;>;", "()Ljava/lang/Class<*>;", "()Ljava/lang/reflect/Constructor<*>;", "getAnnotation", "<T::Ljava/lang/annotation/Annotation;>(Ljava/lang/Class<TT;>;)TT;", "getAnnotatedFieldValues", "LNSObject;LIOSClass;LIOSClass;", "<T:Ljava/lang/Object;>(Ljava/lang/Object;Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;Ljava/lang/Class<TT;>;)Ljava/util/List<TT;>;", "getAnnotatedMethodValues", "hashCode", "equals", "LNSObject;", &OrgJunitRunnersModelTestClass_FIELD_COMPARATOR, &OrgJunitRunnersModelTestClass_METHOD_COMPARATOR, "Ljava/lang/Class<*>;", "Ljava/util/Map<Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;Ljava/util/List<Lorg/junit/runners/model/FrameworkMethod;>;>;", "Ljava/util/Map<Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;Ljava/util/List<Lorg/junit/runners/model/FrameworkField;>;>;", "LOrgJunitRunnersModelTestClass_FieldComparator;LOrgJunitRunnersModelTestClass_MethodComparator;" };
  static const J2ObjcClassInfo _OrgJunitRunnersModelTestClass = { "TestClass", "org.junit.runners.model", ptrTable, methods, fields, 7, 0x1, 24, 5, -1, 44, -1, -1, -1 };
  return &_OrgJunitRunnersModelTestClass;
}

+ (void)initialize {
  if (self == [OrgJunitRunnersModelTestClass class]) {
    JreStrongAssignAndConsume(&OrgJunitRunnersModelTestClass_FIELD_COMPARATOR, new_OrgJunitRunnersModelTestClass_FieldComparator_init());
    JreStrongAssignAndConsume(&OrgJunitRunnersModelTestClass_METHOD_COMPARATOR, new_OrgJunitRunnersModelTestClass_MethodComparator_init());
    J2OBJC_SET_INITIALIZED(OrgJunitRunnersModelTestClass)
  }
}

@end

void OrgJunitRunnersModelTestClass_initWithIOSClass_(OrgJunitRunnersModelTestClass *self, IOSClass *clazz) {
  NSObject_init(self);
  JreStrongAssign(&self->clazz_, clazz);
  if (clazz != nil && ((IOSObjectArray *) nil_chk([clazz getConstructors]))->size_ > 1) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Test class can only have one constructor");
  }
  id<JavaUtilMap> methodsForAnnotations = create_JavaUtilLinkedHashMap_init();
  id<JavaUtilMap> fieldsForAnnotations = create_JavaUtilLinkedHashMap_init();
  [self scanAnnotatedMembersWithJavaUtilMap:methodsForAnnotations withJavaUtilMap:fieldsForAnnotations];
  JreStrongAssign(&self->methodsForAnnotations_, OrgJunitRunnersModelTestClass_makeDeeplyUnmodifiableWithJavaUtilMap_(methodsForAnnotations));
  JreStrongAssign(&self->fieldsForAnnotations_, OrgJunitRunnersModelTestClass_makeDeeplyUnmodifiableWithJavaUtilMap_(fieldsForAnnotations));
}

OrgJunitRunnersModelTestClass *new_OrgJunitRunnersModelTestClass_initWithIOSClass_(IOSClass *clazz) {
  J2OBJC_NEW_IMPL(OrgJunitRunnersModelTestClass, initWithIOSClass_, clazz)
}

OrgJunitRunnersModelTestClass *create_OrgJunitRunnersModelTestClass_initWithIOSClass_(IOSClass *clazz) {
  J2OBJC_CREATE_IMPL(OrgJunitRunnersModelTestClass, initWithIOSClass_, clazz)
}

IOSObjectArray *OrgJunitRunnersModelTestClass_getSortedDeclaredFieldsWithIOSClass_(IOSClass *clazz) {
  OrgJunitRunnersModelTestClass_initialize();
  IOSObjectArray *declaredFields = [((IOSClass *) nil_chk(clazz)) getDeclaredFields];
  JavaUtilArrays_sortWithNSObjectArray_withJavaUtilComparator_(declaredFields, OrgJunitRunnersModelTestClass_FIELD_COMPARATOR);
  return declaredFields;
}

void OrgJunitRunnersModelTestClass_addToAnnotationListsWithOrgJunitRunnersModelFrameworkMember_withJavaUtilMap_(OrgJunitRunnersModelFrameworkMember *member, id<JavaUtilMap> map) {
  OrgJunitRunnersModelTestClass_initialize();
  {
    IOSObjectArray *a__ = [((OrgJunitRunnersModelFrameworkMember *) nil_chk(member)) getAnnotations];
    id<JavaLangAnnotationAnnotation> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<JavaLangAnnotationAnnotation> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaLangAnnotationAnnotation> each = *b__++;
      IOSClass *type = [((id<JavaLangAnnotationAnnotation>) nil_chk(each)) annotationType];
      id<JavaUtilList> members = OrgJunitRunnersModelTestClass_getAnnotatedMembersWithJavaUtilMap_withIOSClass_withBoolean_(map, type, true);
      if ([member isShadowedByWithJavaUtilList:members]) {
        return;
      }
      if (OrgJunitRunnersModelTestClass_runsTopToBottomWithIOSClass_(type)) {
        [((id<JavaUtilList>) nil_chk(members)) addWithInt:0 withId:member];
      }
      else {
        [((id<JavaUtilList>) nil_chk(members)) addWithId:member];
      }
    }
  }
}

id<JavaUtilMap> OrgJunitRunnersModelTestClass_makeDeeplyUnmodifiableWithJavaUtilMap_(id<JavaUtilMap> source) {
  OrgJunitRunnersModelTestClass_initialize();
  JavaUtilLinkedHashMap *copy_ = create_JavaUtilLinkedHashMap_init();
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(source)) entrySet])) {
    [copy_ putWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey] withId:JavaUtilCollections_unmodifiableListWithJavaUtilList_([entry_ getValue])];
  }
  return JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(copy_);
}

id<JavaUtilList> OrgJunitRunnersModelTestClass_collectValuesWithJavaUtilMap_(OrgJunitRunnersModelTestClass *self, id<JavaUtilMap> map) {
  id<JavaUtilSet> values = create_JavaUtilLinkedHashSet_init();
  for (id<JavaUtilList> __strong additionalValues in nil_chk([((id<JavaUtilMap>) nil_chk(map)) values])) {
    [values addAllWithJavaUtilCollection:additionalValues];
  }
  return create_JavaUtilArrayList_initWithJavaUtilCollection_(values);
}

id<JavaUtilList> OrgJunitRunnersModelTestClass_getAnnotatedMembersWithJavaUtilMap_withIOSClass_withBoolean_(id<JavaUtilMap> map, IOSClass *type, jboolean fillIfAbsent) {
  OrgJunitRunnersModelTestClass_initialize();
  if (![((id<JavaUtilMap>) nil_chk(map)) containsKeyWithId:type] && fillIfAbsent) {
    [map putWithId:type withId:create_JavaUtilArrayList_init()];
  }
  id<JavaUtilList> members = [map getWithId:type];
  return members == nil ? JavaUtilCollections_emptyList() : members;
}

jboolean OrgJunitRunnersModelTestClass_runsTopToBottomWithIOSClass_(IOSClass *annotation) {
  OrgJunitRunnersModelTestClass_initialize();
  return [((IOSClass *) nil_chk(annotation)) isEqual:OrgJunitBefore_class_()] || [annotation isEqual:OrgJunitBeforeClass_class_()];
}

id<JavaUtilList> OrgJunitRunnersModelTestClass_getSuperClassesWithIOSClass_(IOSClass *testClass) {
  OrgJunitRunnersModelTestClass_initialize();
  JavaUtilArrayList *results = create_JavaUtilArrayList_init();
  IOSClass *current = testClass;
  while (current != nil) {
    [results addWithId:current];
    current = [current getSuperclass];
  }
  return results;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitRunnersModelTestClass)

@implementation OrgJunitRunnersModelTestClass_FieldComparator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJunitRunnersModelTestClass_FieldComparator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithId:(JavaLangReflectField *)left
               withId:(JavaLangReflectField *)right {
  return [((NSString *) nil_chk([((JavaLangReflectField *) nil_chk(left)) getName])) compareToWithId:[((JavaLangReflectField *) nil_chk(right)) getName]];
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LJavaLangReflectField;LJavaLangReflectField;", "LOrgJunitRunnersModelTestClass;", "Ljava/lang/Object;Ljava/util/Comparator<Ljava/lang/reflect/Field;>;" };
  static const J2ObjcClassInfo _OrgJunitRunnersModelTestClass_FieldComparator = { "FieldComparator", "org.junit.runners.model", ptrTable, methods, NULL, 7, 0xa, 2, 0, 2, -1, -1, 3, -1 };
  return &_OrgJunitRunnersModelTestClass_FieldComparator;
}

@end

void OrgJunitRunnersModelTestClass_FieldComparator_init(OrgJunitRunnersModelTestClass_FieldComparator *self) {
  NSObject_init(self);
}

OrgJunitRunnersModelTestClass_FieldComparator *new_OrgJunitRunnersModelTestClass_FieldComparator_init() {
  J2OBJC_NEW_IMPL(OrgJunitRunnersModelTestClass_FieldComparator, init)
}

OrgJunitRunnersModelTestClass_FieldComparator *create_OrgJunitRunnersModelTestClass_FieldComparator_init() {
  J2OBJC_CREATE_IMPL(OrgJunitRunnersModelTestClass_FieldComparator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitRunnersModelTestClass_FieldComparator)

@implementation OrgJunitRunnersModelTestClass_MethodComparator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJunitRunnersModelTestClass_MethodComparator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithId:(OrgJunitRunnersModelFrameworkMethod *)left
               withId:(OrgJunitRunnersModelFrameworkMethod *)right {
  return [((id<JavaUtilComparator>) nil_chk(JreLoadStatic(OrgJunitInternalMethodSorter, NAME_ASCENDING))) compareWithId:[((OrgJunitRunnersModelFrameworkMethod *) nil_chk(left)) getMethod] withId:[((OrgJunitRunnersModelFrameworkMethod *) nil_chk(right)) getMethod]];
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LOrgJunitRunnersModelFrameworkMethod;LOrgJunitRunnersModelFrameworkMethod;", "LOrgJunitRunnersModelTestClass;", "Ljava/lang/Object;Ljava/util/Comparator<Lorg/junit/runners/model/FrameworkMethod;>;" };
  static const J2ObjcClassInfo _OrgJunitRunnersModelTestClass_MethodComparator = { "MethodComparator", "org.junit.runners.model", ptrTable, methods, NULL, 7, 0xa, 2, 0, 2, -1, -1, 3, -1 };
  return &_OrgJunitRunnersModelTestClass_MethodComparator;
}

@end

void OrgJunitRunnersModelTestClass_MethodComparator_init(OrgJunitRunnersModelTestClass_MethodComparator *self) {
  NSObject_init(self);
}

OrgJunitRunnersModelTestClass_MethodComparator *new_OrgJunitRunnersModelTestClass_MethodComparator_init() {
  J2OBJC_NEW_IMPL(OrgJunitRunnersModelTestClass_MethodComparator, init)
}

OrgJunitRunnersModelTestClass_MethodComparator *create_OrgJunitRunnersModelTestClass_MethodComparator_init() {
  J2OBJC_CREATE_IMPL(OrgJunitRunnersModelTestClass_MethodComparator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitRunnersModelTestClass_MethodComparator)
