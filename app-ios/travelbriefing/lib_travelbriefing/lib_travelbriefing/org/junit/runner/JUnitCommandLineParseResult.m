//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/runner/JUnitCommandLineParseResult.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "org/junit/internal/Classes.h"
#include "org/junit/runner/Computer.h"
#include "org/junit/runner/FilterFactories.h"
#include "org/junit/runner/FilterFactory.h"
#include "org/junit/runner/JUnitCommandLineParseResult.h"
#include "org/junit/runner/Request.h"
#include "org/junit/runner/manipulation/Filter.h"
#include "org/junit/runners/model/InitializationError.h"

@interface OrgJunitRunnerJUnitCommandLineParseResult () {
 @public
  id<JavaUtilList> filterSpecs_;
  id<JavaUtilList> classes_;
  id<JavaUtilList> parserErrors_;
}

- (void)parseArgsWithNSStringArray:(IOSObjectArray *)args;

- (IOSObjectArray *)copyArrayWithNSStringArray:(IOSObjectArray *)args
                                       withInt:(jint)from
                                       withInt:(jint)to OBJC_METHOD_FAMILY_NONE;

- (OrgJunitRunnerRequest *)errorReportWithNSException:(NSException *)cause;

- (OrgJunitRunnerRequest *)applyFilterSpecsWithOrgJunitRunnerRequest:(OrgJunitRunnerRequest *)request;

@end

J2OBJC_FIELD_SETTER(OrgJunitRunnerJUnitCommandLineParseResult, filterSpecs_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgJunitRunnerJUnitCommandLineParseResult, classes_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgJunitRunnerJUnitCommandLineParseResult, parserErrors_, id<JavaUtilList>)

__attribute__((unused)) static void OrgJunitRunnerJUnitCommandLineParseResult_parseArgsWithNSStringArray_(OrgJunitRunnerJUnitCommandLineParseResult *self, IOSObjectArray *args);

__attribute__((unused)) static IOSObjectArray *OrgJunitRunnerJUnitCommandLineParseResult_copyArrayWithNSStringArray_withInt_withInt_(OrgJunitRunnerJUnitCommandLineParseResult *self, IOSObjectArray *args, jint from, jint to);

__attribute__((unused)) static OrgJunitRunnerRequest *OrgJunitRunnerJUnitCommandLineParseResult_errorReportWithNSException_(OrgJunitRunnerJUnitCommandLineParseResult *self, NSException *cause);

__attribute__((unused)) static OrgJunitRunnerRequest *OrgJunitRunnerJUnitCommandLineParseResult_applyFilterSpecsWithOrgJunitRunnerRequest_(OrgJunitRunnerJUnitCommandLineParseResult *self, OrgJunitRunnerRequest *request);

inline jlong OrgJunitRunnerJUnitCommandLineParseResult_CommandLineParserError_get_serialVersionUID();
#define OrgJunitRunnerJUnitCommandLineParseResult_CommandLineParserError_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJunitRunnerJUnitCommandLineParseResult_CommandLineParserError, serialVersionUID, jlong)

@implementation OrgJunitRunnerJUnitCommandLineParseResult

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJunitRunnerJUnitCommandLineParseResult_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilList>)getFilterSpecs {
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(filterSpecs_);
}

- (id<JavaUtilList>)getClasses {
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(classes_);
}

+ (OrgJunitRunnerJUnitCommandLineParseResult *)parseWithNSStringArray:(IOSObjectArray *)args {
  return OrgJunitRunnerJUnitCommandLineParseResult_parseWithNSStringArray_(args);
}

- (void)parseArgsWithNSStringArray:(IOSObjectArray *)args {
  OrgJunitRunnerJUnitCommandLineParseResult_parseArgsWithNSStringArray_(self, args);
}

- (IOSObjectArray *)parseOptionsWithNSStringArray:(IOSObjectArray *)args {
  for (jint i = 0; i != ((IOSObjectArray *) nil_chk(args))->size_; ++i) {
    NSString *arg = IOSObjectArray_Get(args, i);
    if ([((NSString *) nil_chk(arg)) isEqual:@"--"]) {
      return OrgJunitRunnerJUnitCommandLineParseResult_copyArrayWithNSStringArray_withInt_withInt_(self, args, i + 1, args->size_);
    }
    else if ([arg hasPrefix:@"--"]) {
      if ([arg hasPrefix:@"--filter="] || [arg isEqual:@"--filter"]) {
        NSString *filterSpec;
        if ([arg isEqual:@"--filter"]) {
          ++i;
          if (i < args->size_) {
            filterSpec = IOSObjectArray_Get(args, i);
          }
          else {
            [((id<JavaUtilList>) nil_chk(parserErrors_)) addWithId:create_OrgJunitRunnerJUnitCommandLineParseResult_CommandLineParserError_initWithNSString_(JreStrcat("$$", arg, @" value not specified"))];
            break;
          }
        }
        else {
          filterSpec = [arg java_substring:[arg java_indexOf:'='] + 1];
        }
        [((id<JavaUtilList>) nil_chk(filterSpecs_)) addWithId:filterSpec];
      }
      else {
        [((id<JavaUtilList>) nil_chk(parserErrors_)) addWithId:create_OrgJunitRunnerJUnitCommandLineParseResult_CommandLineParserError_initWithNSString_(JreStrcat("$$$", @"JUnit knows nothing about the ", arg, @" option"))];
      }
    }
    else {
      return OrgJunitRunnerJUnitCommandLineParseResult_copyArrayWithNSStringArray_withInt_withInt_(self, args, i, args->size_);
    }
  }
  return [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:NSString_class_()];
}

- (IOSObjectArray *)copyArrayWithNSStringArray:(IOSObjectArray *)args
                                       withInt:(jint)from
                                       withInt:(jint)to {
  return OrgJunitRunnerJUnitCommandLineParseResult_copyArrayWithNSStringArray_withInt_withInt_(self, args, from, to);
}

- (void)parseParametersWithNSStringArray:(IOSObjectArray *)args {
  {
    IOSObjectArray *a__ = args;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *arg = *b__++;
      @try {
        [((id<JavaUtilList>) nil_chk(classes_)) addWithId:OrgJunitInternalClasses_getClassWithNSString_(arg)];
      }
      @catch (JavaLangClassNotFoundException *e) {
        [((id<JavaUtilList>) nil_chk(parserErrors_)) addWithId:create_JavaLangIllegalArgumentException_initWithNSString_withNSException_(JreStrcat("$$C", @"Could not find class [", arg, ']'), e)];
      }
    }
  }
}

- (OrgJunitRunnerRequest *)errorReportWithNSException:(NSException *)cause {
  return OrgJunitRunnerJUnitCommandLineParseResult_errorReportWithNSException_(self, cause);
}

- (OrgJunitRunnerRequest *)createRequestWithOrgJunitRunnerComputer:(OrgJunitRunnerComputer *)computer {
  if ([((id<JavaUtilList>) nil_chk(parserErrors_)) isEmpty]) {
    OrgJunitRunnerRequest *request = OrgJunitRunnerRequest_classesWithOrgJunitRunnerComputer_withIOSClassArray_(computer, [((id<JavaUtilList>) nil_chk(classes_)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[classes_ size] type:IOSClass_class_()]]);
    return OrgJunitRunnerJUnitCommandLineParseResult_applyFilterSpecsWithOrgJunitRunnerRequest_(self, request);
  }
  else {
    return OrgJunitRunnerJUnitCommandLineParseResult_errorReportWithNSException_(self, create_OrgJunitRunnersModelInitializationError_initWithJavaUtilList_(parserErrors_));
  }
}

- (OrgJunitRunnerRequest *)applyFilterSpecsWithOrgJunitRunnerRequest:(OrgJunitRunnerRequest *)request {
  return OrgJunitRunnerJUnitCommandLineParseResult_applyFilterSpecsWithOrgJunitRunnerRequest_(self, request);
}

- (void)dealloc {
  RELEASE_(filterSpecs_);
  RELEASE_(classes_);
  RELEASE_(parserErrors_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "LOrgJunitRunnerJUnitCommandLineParseResult;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 3, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x80, 5, 3, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 3, -1, -1, -1, -1 },
    { NULL, "LOrgJunitRunnerRequest;", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "LOrgJunitRunnerRequest;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LOrgJunitRunnerRequest;", 0x2, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getFilterSpecs);
  methods[2].selector = @selector(getClasses);
  methods[3].selector = @selector(parseWithNSStringArray:);
  methods[4].selector = @selector(parseArgsWithNSStringArray:);
  methods[5].selector = @selector(parseOptionsWithNSStringArray:);
  methods[6].selector = @selector(copyArrayWithNSStringArray:withInt:withInt:);
  methods[7].selector = @selector(parseParametersWithNSStringArray:);
  methods[8].selector = @selector(errorReportWithNSException:);
  methods[9].selector = @selector(createRequestWithOrgJunitRunnerComputer:);
  methods[10].selector = @selector(applyFilterSpecsWithOrgJunitRunnerRequest:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "filterSpecs_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 15, -1 },
    { "classes_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 16, -1 },
    { "parserErrors_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 17, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/List<Ljava/lang/String;>;", "()Ljava/util/List<Ljava/lang/Class<*>;>;", "parse", "[LNSString;", "parseArgs", "parseOptions", "copyArray", "[LNSString;II", "parseParameters", "errorReport", "LNSException;", "createRequest", "LOrgJunitRunnerComputer;", "applyFilterSpecs", "LOrgJunitRunnerRequest;", "Ljava/util/List<Ljava/lang/String;>;", "Ljava/util/List<Ljava/lang/Class<*>;>;", "Ljava/util/List<Ljava/lang/Throwable;>;", "LOrgJunitRunnerJUnitCommandLineParseResult_CommandLineParserError;" };
  static const J2ObjcClassInfo _OrgJunitRunnerJUnitCommandLineParseResult = { "JUnitCommandLineParseResult", "org.junit.runner", ptrTable, methods, fields, 7, 0x0, 11, 3, -1, 18, -1, -1, -1 };
  return &_OrgJunitRunnerJUnitCommandLineParseResult;
}

@end

void OrgJunitRunnerJUnitCommandLineParseResult_init(OrgJunitRunnerJUnitCommandLineParseResult *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->filterSpecs_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->classes_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->parserErrors_, new_JavaUtilArrayList_init());
}

OrgJunitRunnerJUnitCommandLineParseResult *new_OrgJunitRunnerJUnitCommandLineParseResult_init() {
  J2OBJC_NEW_IMPL(OrgJunitRunnerJUnitCommandLineParseResult, init)
}

OrgJunitRunnerJUnitCommandLineParseResult *create_OrgJunitRunnerJUnitCommandLineParseResult_init() {
  J2OBJC_CREATE_IMPL(OrgJunitRunnerJUnitCommandLineParseResult, init)
}

OrgJunitRunnerJUnitCommandLineParseResult *OrgJunitRunnerJUnitCommandLineParseResult_parseWithNSStringArray_(IOSObjectArray *args) {
  OrgJunitRunnerJUnitCommandLineParseResult_initialize();
  OrgJunitRunnerJUnitCommandLineParseResult *result = create_OrgJunitRunnerJUnitCommandLineParseResult_init();
  OrgJunitRunnerJUnitCommandLineParseResult_parseArgsWithNSStringArray_(result, args);
  return result;
}

void OrgJunitRunnerJUnitCommandLineParseResult_parseArgsWithNSStringArray_(OrgJunitRunnerJUnitCommandLineParseResult *self, IOSObjectArray *args) {
  [self parseParametersWithNSStringArray:[self parseOptionsWithNSStringArray:args]];
}

IOSObjectArray *OrgJunitRunnerJUnitCommandLineParseResult_copyArrayWithNSStringArray_withInt_withInt_(OrgJunitRunnerJUnitCommandLineParseResult *self, IOSObjectArray *args, jint from, jint to) {
  JavaUtilArrayList *result = create_JavaUtilArrayList_init();
  for (jint j = from; j != to; ++j) {
    [result addWithId:IOSObjectArray_Get(nil_chk(args), j)];
  }
  return [result toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[result size] type:NSString_class_()]];
}

OrgJunitRunnerRequest *OrgJunitRunnerJUnitCommandLineParseResult_errorReportWithNSException_(OrgJunitRunnerJUnitCommandLineParseResult *self, NSException *cause) {
  return OrgJunitRunnerRequest_errorReportWithIOSClass_withNSException_(OrgJunitRunnerJUnitCommandLineParseResult_class_(), cause);
}

OrgJunitRunnerRequest *OrgJunitRunnerJUnitCommandLineParseResult_applyFilterSpecsWithOrgJunitRunnerRequest_(OrgJunitRunnerJUnitCommandLineParseResult *self, OrgJunitRunnerRequest *request) {
  @try {
    for (NSString * __strong filterSpec in nil_chk(self->filterSpecs_)) {
      OrgJunitRunnerManipulationFilter *filter = OrgJunitRunnerFilterFactories_createFilterFromFilterSpecWithOrgJunitRunnerRequest_withNSString_(request, filterSpec);
      request = [((OrgJunitRunnerRequest *) nil_chk(request)) filterWithWithOrgJunitRunnerManipulationFilter:filter];
    }
    return request;
  }
  @catch (OrgJunitRunnerFilterFactory_FilterNotCreatedException *e) {
    return OrgJunitRunnerJUnitCommandLineParseResult_errorReportWithNSException_(self, e);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitRunnerJUnitCommandLineParseResult)

@implementation OrgJunitRunnerJUnitCommandLineParseResult_CommandLineParserError

- (instancetype)initWithNSString:(NSString *)message {
  OrgJunitRunnerJUnitCommandLineParseResult_CommandLineParserError_initWithNSString_(self, message);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJunitRunnerJUnitCommandLineParseResult_CommandLineParserError_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LOrgJunitRunnerJUnitCommandLineParseResult;" };
  static const J2ObjcClassInfo _OrgJunitRunnerJUnitCommandLineParseResult_CommandLineParserError = { "CommandLineParserError", "org.junit.runner", ptrTable, methods, fields, 7, 0x9, 1, 1, 1, -1, -1, -1, -1 };
  return &_OrgJunitRunnerJUnitCommandLineParseResult_CommandLineParserError;
}

@end

void OrgJunitRunnerJUnitCommandLineParseResult_CommandLineParserError_initWithNSString_(OrgJunitRunnerJUnitCommandLineParseResult_CommandLineParserError *self, NSString *message) {
  JavaLangException_initWithNSString_(self, message);
}

OrgJunitRunnerJUnitCommandLineParseResult_CommandLineParserError *new_OrgJunitRunnerJUnitCommandLineParseResult_CommandLineParserError_initWithNSString_(NSString *message) {
  J2OBJC_NEW_IMPL(OrgJunitRunnerJUnitCommandLineParseResult_CommandLineParserError, initWithNSString_, message)
}

OrgJunitRunnerJUnitCommandLineParseResult_CommandLineParserError *create_OrgJunitRunnerJUnitCommandLineParseResult_CommandLineParserError_initWithNSString_(NSString *message) {
  J2OBJC_CREATE_IMPL(OrgJunitRunnerJUnitCommandLineParseResult_CommandLineParserError, initWithNSString_, message)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitRunnerJUnitCommandLineParseResult_CommandLineParserError)
