//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/runner/notification/Failure.java
//

#include "J2ObjC_source.h"
#include "java/io/PrintWriter.h"
#include "java/io/StringWriter.h"
#include "org/junit/runner/Description.h"
#include "org/junit/runner/notification/Failure.h"

@interface OrgJunitRunnerNotificationFailure () {
 @public
  OrgJunitRunnerDescription *fDescription_;
  NSException *fThrownException_;
}

@end

J2OBJC_FIELD_SETTER(OrgJunitRunnerNotificationFailure, fDescription_, OrgJunitRunnerDescription *)
J2OBJC_FIELD_SETTER(OrgJunitRunnerNotificationFailure, fThrownException_, NSException *)

inline jlong OrgJunitRunnerNotificationFailure_get_serialVersionUID();
#define OrgJunitRunnerNotificationFailure_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJunitRunnerNotificationFailure, serialVersionUID, jlong)

@implementation OrgJunitRunnerNotificationFailure

- (instancetype)initWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_
                                  withNSException:(NSException *)thrownException {
  OrgJunitRunnerNotificationFailure_initWithOrgJunitRunnerDescription_withNSException_(self, description_, thrownException);
  return self;
}

- (NSString *)getTestHeader {
  return [((OrgJunitRunnerDescription *) nil_chk(fDescription_)) getDisplayName];
}

- (OrgJunitRunnerDescription *)getDescription {
  return fDescription_;
}

- (NSException *)getException {
  return fThrownException_;
}

- (NSString *)description {
  return JreStrcat("$$$", [self getTestHeader], @": ", [((NSException *) nil_chk(fThrownException_)) getMessage]);
}

- (NSString *)getTrace {
  JavaIoStringWriter *stringWriter = create_JavaIoStringWriter_init();
  JavaIoPrintWriter *writer = create_JavaIoPrintWriter_initWithJavaIoWriter_(stringWriter);
  [((NSException *) nil_chk([self getException])) printStackTraceWithJavaIoPrintWriter:writer];
  return [stringWriter description];
}

- (NSString *)getMessage {
  return [((NSException *) nil_chk([self getException])) getMessage];
}

- (void)dealloc {
  RELEASE_(fDescription_);
  RELEASE_(fThrownException_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJunitRunnerDescription;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSException;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJunitRunnerDescription:withNSException:);
  methods[1].selector = @selector(getTestHeader);
  methods[2].selector = @selector(getDescription);
  methods[3].selector = @selector(getException);
  methods[4].selector = @selector(description);
  methods[5].selector = @selector(getTrace);
  methods[6].selector = @selector(getMessage);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJunitRunnerNotificationFailure_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "fDescription_", "LOrgJunitRunnerDescription;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fThrownException_", "LNSException;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJunitRunnerDescription;LNSException;", "toString" };
  static const J2ObjcClassInfo _OrgJunitRunnerNotificationFailure = { "Failure", "org.junit.runner.notification", ptrTable, methods, fields, 7, 0x1, 7, 3, -1, -1, -1, -1, -1 };
  return &_OrgJunitRunnerNotificationFailure;
}

@end

void OrgJunitRunnerNotificationFailure_initWithOrgJunitRunnerDescription_withNSException_(OrgJunitRunnerNotificationFailure *self, OrgJunitRunnerDescription *description_, NSException *thrownException) {
  NSObject_init(self);
  JreStrongAssign(&self->fThrownException_, thrownException);
  JreStrongAssign(&self->fDescription_, description_);
}

OrgJunitRunnerNotificationFailure *new_OrgJunitRunnerNotificationFailure_initWithOrgJunitRunnerDescription_withNSException_(OrgJunitRunnerDescription *description_, NSException *thrownException) {
  J2OBJC_NEW_IMPL(OrgJunitRunnerNotificationFailure, initWithOrgJunitRunnerDescription_withNSException_, description_, thrownException)
}

OrgJunitRunnerNotificationFailure *create_OrgJunitRunnerNotificationFailure_initWithOrgJunitRunnerDescription_withNSException_(OrgJunitRunnerDescription *description_, NSException *thrownException) {
  J2OBJC_CREATE_IMPL(OrgJunitRunnerNotificationFailure, initWithOrgJunitRunnerDescription_withNSException_, description_, thrownException)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitRunnerNotificationFailure)
