//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/runner/notification/RunListener.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/annotation/Documented.h"
#include "java/lang/annotation/ElementType.h"
#include "java/lang/annotation/Retention.h"
#include "java/lang/annotation/RetentionPolicy.h"
#include "java/lang/annotation/Target.h"
#include "org/junit/runner/Description.h"
#include "org/junit/runner/Result.h"
#include "org/junit/runner/notification/Failure.h"
#include "org/junit/runner/notification/RunListener.h"

__attribute__((unused)) static IOSObjectArray *OrgJunitRunnerNotificationRunListener_ThreadSafe__Annotations$0();

@implementation OrgJunitRunnerNotificationRunListener

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJunitRunnerNotificationRunListener_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)testRunStartedWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_ {
}

- (void)testRunFinishedWithOrgJunitRunnerResult:(OrgJunitRunnerResult *)result {
}

- (void)testStartedWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_ {
}

- (void)testFinishedWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_ {
}

- (void)testFailureWithOrgJunitRunnerNotificationFailure:(OrgJunitRunnerNotificationFailure *)failure {
}

- (void)testAssumptionFailureWithOrgJunitRunnerNotificationFailure:(OrgJunitRunnerNotificationFailure *)failure {
}

- (void)testIgnoredWithOrgJunitRunnerDescription:(OrgJunitRunnerDescription *)description_ {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(testRunStartedWithOrgJunitRunnerDescription:);
  methods[2].selector = @selector(testRunFinishedWithOrgJunitRunnerResult:);
  methods[3].selector = @selector(testStartedWithOrgJunitRunnerDescription:);
  methods[4].selector = @selector(testFinishedWithOrgJunitRunnerDescription:);
  methods[5].selector = @selector(testFailureWithOrgJunitRunnerNotificationFailure:);
  methods[6].selector = @selector(testAssumptionFailureWithOrgJunitRunnerNotificationFailure:);
  methods[7].selector = @selector(testIgnoredWithOrgJunitRunnerDescription:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "testRunStarted", "LOrgJunitRunnerDescription;", "LJavaLangException;", "testRunFinished", "LOrgJunitRunnerResult;", "testStarted", "testFinished", "testFailure", "LOrgJunitRunnerNotificationFailure;", "testAssumptionFailure", "testIgnored", "LOrgJunitRunnerNotificationRunListener_ThreadSafe;" };
  static const J2ObjcClassInfo _OrgJunitRunnerNotificationRunListener = { "RunListener", "org.junit.runner.notification", ptrTable, methods, NULL, 7, 0x1, 8, 0, -1, 11, -1, -1, -1 };
  return &_OrgJunitRunnerNotificationRunListener;
}

@end

void OrgJunitRunnerNotificationRunListener_init(OrgJunitRunnerNotificationRunListener *self) {
  NSObject_init(self);
}

OrgJunitRunnerNotificationRunListener *new_OrgJunitRunnerNotificationRunListener_init() {
  J2OBJC_NEW_IMPL(OrgJunitRunnerNotificationRunListener, init)
}

OrgJunitRunnerNotificationRunListener *create_OrgJunitRunnerNotificationRunListener_init() {
  J2OBJC_CREATE_IMPL(OrgJunitRunnerNotificationRunListener, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitRunnerNotificationRunListener)

@implementation OrgJunitRunnerNotificationRunListener_ThreadSafe

- (IOSClass *)annotationType {
  return OrgJunitRunnerNotificationRunListener_ThreadSafe_class_();
}

- (NSString *)description {
  return @"@org.junit.runner.notification.RunListener$ThreadSafe()";
}

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { "LOrgJunitRunnerNotificationRunListener;", (void *)&OrgJunitRunnerNotificationRunListener_ThreadSafe__Annotations$0 };
  static const J2ObjcClassInfo _OrgJunitRunnerNotificationRunListener_ThreadSafe = { "ThreadSafe", "org.junit.runner.notification", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, 0, -1, -1, -1, 1 };
  return &_OrgJunitRunnerNotificationRunListener_ThreadSafe;
}

@end

id<OrgJunitRunnerNotificationRunListener_ThreadSafe> create_OrgJunitRunnerNotificationRunListener_ThreadSafe() {
  OrgJunitRunnerNotificationRunListener_ThreadSafe *self = AUTORELEASE([[OrgJunitRunnerNotificationRunListener_ThreadSafe alloc] init]);
  return self;
}

IOSObjectArray *OrgJunitRunnerNotificationRunListener_ThreadSafe__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, TYPE) } count:1 type:JavaLangAnnotationElementType_class_()]), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)) } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgJunitRunnerNotificationRunListener_ThreadSafe)
