//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/experimental/theories/suppliers/TestedOnSupplier.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "org/junit/experimental/theories/ParameterSignature.h"
#include "org/junit/experimental/theories/ParameterSupplier.h"
#include "org/junit/experimental/theories/PotentialAssignment.h"
#include "org/junit/experimental/theories/suppliers/TestedOn.h"
#include "org/junit/experimental/theories/suppliers/TestedOnSupplier.h"

@implementation OrgJunitExperimentalTheoriesSuppliersTestedOnSupplier

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJunitExperimentalTheoriesSuppliersTestedOnSupplier_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilList>)getValueSourcesWithOrgJunitExperimentalTheoriesParameterSignature:(OrgJunitExperimentalTheoriesParameterSignature *)sig {
  id<JavaUtilList> list = create_JavaUtilArrayList_init();
  id<OrgJunitExperimentalTheoriesSuppliersTestedOn> testedOn = ((id<OrgJunitExperimentalTheoriesSuppliersTestedOn>) [((OrgJunitExperimentalTheoriesParameterSignature *) nil_chk(sig)) getAnnotationWithIOSClass:OrgJunitExperimentalTheoriesSuppliersTestedOn_class_()]);
  IOSIntArray *ints = [((id<OrgJunitExperimentalTheoriesSuppliersTestedOn>) nil_chk(testedOn)) ints];
  {
    IOSIntArray *a__ = ints;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint i = *b__++;
      [list addWithId:OrgJunitExperimentalTheoriesPotentialAssignment_forValueWithNSString_withId_(@"ints", JavaLangInteger_valueOfWithInt_(i))];
    }
  }
  return list;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getValueSourcesWithOrgJunitExperimentalTheoriesParameterSignature:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getValueSources", "LOrgJunitExperimentalTheoriesParameterSignature;", "(Lorg/junit/experimental/theories/ParameterSignature;)Ljava/util/List<Lorg/junit/experimental/theories/PotentialAssignment;>;" };
  static const J2ObjcClassInfo _OrgJunitExperimentalTheoriesSuppliersTestedOnSupplier = { "TestedOnSupplier", "org.junit.experimental.theories.suppliers", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgJunitExperimentalTheoriesSuppliersTestedOnSupplier;
}

@end

void OrgJunitExperimentalTheoriesSuppliersTestedOnSupplier_init(OrgJunitExperimentalTheoriesSuppliersTestedOnSupplier *self) {
  OrgJunitExperimentalTheoriesParameterSupplier_init(self);
}

OrgJunitExperimentalTheoriesSuppliersTestedOnSupplier *new_OrgJunitExperimentalTheoriesSuppliersTestedOnSupplier_init() {
  J2OBJC_NEW_IMPL(OrgJunitExperimentalTheoriesSuppliersTestedOnSupplier, init)
}

OrgJunitExperimentalTheoriesSuppliersTestedOnSupplier *create_OrgJunitExperimentalTheoriesSuppliersTestedOnSupplier_init() {
  J2OBJC_CREATE_IMPL(OrgJunitExperimentalTheoriesSuppliersTestedOnSupplier, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitExperimentalTheoriesSuppliersTestedOnSupplier)
