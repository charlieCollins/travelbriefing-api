//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/Assume.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "org/hamcrest/CoreMatchers.h"
#include "org/hamcrest/Matcher.h"
#include "org/junit/Assume.h"
#include "org/junit/AssumptionViolatedException.h"

@implementation OrgJunitAssume

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJunitAssume_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)assumeTrueWithBoolean:(jboolean)b {
  OrgJunitAssume_assumeTrueWithBoolean_(b);
}

+ (void)assumeFalseWithBoolean:(jboolean)b {
  OrgJunitAssume_assumeFalseWithBoolean_(b);
}

+ (void)assumeTrueWithNSString:(NSString *)message
                   withBoolean:(jboolean)b {
  OrgJunitAssume_assumeTrueWithNSString_withBoolean_(message, b);
}

+ (void)assumeFalseWithNSString:(NSString *)message
                    withBoolean:(jboolean)b {
  OrgJunitAssume_assumeFalseWithNSString_withBoolean_(message, b);
}

+ (void)assumeNotNullWithNSObjectArray:(IOSObjectArray *)objects {
  OrgJunitAssume_assumeNotNullWithNSObjectArray_(objects);
}

+ (void)assumeThatWithId:(id)actual
  withOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher {
  OrgJunitAssume_assumeThatWithId_withOrgHamcrestMatcher_(actual, matcher);
}

+ (void)assumeThatWithNSString:(NSString *)message
                        withId:(id)actual
        withOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher {
  OrgJunitAssume_assumeThatWithNSString_withId_withOrgHamcrestMatcher_(message, actual, matcher);
}

+ (void)assumeNoExceptionWithNSException:(NSException *)e {
  OrgJunitAssume_assumeNoExceptionWithNSException_(e);
}

+ (void)assumeNoExceptionWithNSString:(NSString *)message
                      withNSException:(NSException *)e {
  OrgJunitAssume_assumeNoExceptionWithNSString_withNSException_(message, e);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x89, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x9, 6, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x9, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 11, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(assumeTrueWithBoolean:);
  methods[2].selector = @selector(assumeFalseWithBoolean:);
  methods[3].selector = @selector(assumeTrueWithNSString:withBoolean:);
  methods[4].selector = @selector(assumeFalseWithNSString:withBoolean:);
  methods[5].selector = @selector(assumeNotNullWithNSObjectArray:);
  methods[6].selector = @selector(assumeThatWithId:withOrgHamcrestMatcher:);
  methods[7].selector = @selector(assumeThatWithNSString:withId:withOrgHamcrestMatcher:);
  methods[8].selector = @selector(assumeNoExceptionWithNSException:);
  methods[9].selector = @selector(assumeNoExceptionWithNSString:withNSException:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "assumeTrue", "Z", "assumeFalse", "LNSString;Z", "assumeNotNull", "[LNSObject;", "assumeThat", "LNSObject;LOrgHamcrestMatcher;", "<T:Ljava/lang/Object;>(TT;Lorg/hamcrest/Matcher<TT;>;)V", "LNSString;LNSObject;LOrgHamcrestMatcher;", "<T:Ljava/lang/Object;>(Ljava/lang/String;TT;Lorg/hamcrest/Matcher<TT;>;)V", "assumeNoException", "LNSException;", "LNSString;LNSException;" };
  static const J2ObjcClassInfo _OrgJunitAssume = { "Assume", "org.junit", ptrTable, methods, NULL, 7, 0x1, 10, 0, -1, -1, -1, -1, -1 };
  return &_OrgJunitAssume;
}

@end

void OrgJunitAssume_init(OrgJunitAssume *self) {
  NSObject_init(self);
}

OrgJunitAssume *new_OrgJunitAssume_init() {
  J2OBJC_NEW_IMPL(OrgJunitAssume, init)
}

OrgJunitAssume *create_OrgJunitAssume_init() {
  J2OBJC_CREATE_IMPL(OrgJunitAssume, init)
}

void OrgJunitAssume_assumeTrueWithBoolean_(jboolean b) {
  OrgJunitAssume_initialize();
  OrgJunitAssume_assumeThatWithId_withOrgHamcrestMatcher_(JavaLangBoolean_valueOfWithBoolean_(b), OrgHamcrestCoreMatchers_isWithId_(JavaLangBoolean_valueOfWithBoolean_(true)));
}

void OrgJunitAssume_assumeFalseWithBoolean_(jboolean b) {
  OrgJunitAssume_initialize();
  OrgJunitAssume_assumeTrueWithBoolean_(!b);
}

void OrgJunitAssume_assumeTrueWithNSString_withBoolean_(NSString *message, jboolean b) {
  OrgJunitAssume_initialize();
  if (!b) @throw create_OrgJunitAssumptionViolatedException_initWithNSString_(message);
}

void OrgJunitAssume_assumeFalseWithNSString_withBoolean_(NSString *message, jboolean b) {
  OrgJunitAssume_initialize();
  OrgJunitAssume_assumeTrueWithNSString_withBoolean_(message, !b);
}

void OrgJunitAssume_assumeNotNullWithNSObjectArray_(IOSObjectArray *objects) {
  OrgJunitAssume_initialize();
  OrgJunitAssume_assumeThatWithId_withOrgHamcrestMatcher_(JavaUtilArrays_asListWithNSObjectArray_(objects), OrgHamcrestCoreMatchers_everyItemWithOrgHamcrestMatcher_(OrgHamcrestCoreMatchers_notNullValue()));
}

void OrgJunitAssume_assumeThatWithId_withOrgHamcrestMatcher_(id actual, id<OrgHamcrestMatcher> matcher) {
  OrgJunitAssume_initialize();
  if (![((id<OrgHamcrestMatcher>) nil_chk(matcher)) matchesWithId:actual]) {
    @throw create_OrgJunitAssumptionViolatedException_initWithId_withOrgHamcrestMatcher_(actual, matcher);
  }
}

void OrgJunitAssume_assumeThatWithNSString_withId_withOrgHamcrestMatcher_(NSString *message, id actual, id<OrgHamcrestMatcher> matcher) {
  OrgJunitAssume_initialize();
  if (![((id<OrgHamcrestMatcher>) nil_chk(matcher)) matchesWithId:actual]) {
    @throw create_OrgJunitAssumptionViolatedException_initWithNSString_withId_withOrgHamcrestMatcher_(message, actual, matcher);
  }
}

void OrgJunitAssume_assumeNoExceptionWithNSException_(NSException *e) {
  OrgJunitAssume_initialize();
  OrgJunitAssume_assumeThatWithId_withOrgHamcrestMatcher_(e, OrgHamcrestCoreMatchers_nullValue());
}

void OrgJunitAssume_assumeNoExceptionWithNSString_withNSException_(NSString *message, NSException *e) {
  OrgJunitAssume_initialize();
  OrgJunitAssume_assumeThatWithNSString_withId_withOrgHamcrestMatcher_(message, e, OrgHamcrestCoreMatchers_nullValue());
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitAssume)
