//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/hamcrest/core/ShortcutCombination.java
//

#include "J2ObjC_source.h"
#include "java/lang/Iterable.h"
#include "org/hamcrest/BaseMatcher.h"
#include "org/hamcrest/Description.h"
#include "org/hamcrest/Matcher.h"
#include "org/hamcrest/core/ShortcutCombination.h"

@interface OrgHamcrestCoreShortcutCombination () {
 @public
  id<JavaLangIterable> matchers_;
}

@end

J2OBJC_FIELD_SETTER(OrgHamcrestCoreShortcutCombination, matchers_, id<JavaLangIterable>)

@implementation OrgHamcrestCoreShortcutCombination

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)matchers {
  OrgHamcrestCoreShortcutCombination_initWithJavaLangIterable_(self, matchers);
  return self;
}

- (jboolean)matchesWithId:(id)o {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)describeToWithOrgHamcrestDescription:(id<OrgHamcrestDescription>)description_ {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)matchesWithId:(id)o
              withBoolean:(jboolean)shortcut {
  for (id<OrgHamcrestMatcher> __strong matcher in nil_chk(matchers_)) {
    if ([((id<OrgHamcrestMatcher>) nil_chk(matcher)) matchesWithId:o] == shortcut) {
      return shortcut;
    }
  }
  return !shortcut;
}

- (void)describeToWithOrgHamcrestDescription:(id<OrgHamcrestDescription>)description_
                                withNSString:(NSString *)operator_ {
  [((id<OrgHamcrestDescription>) nil_chk(description_)) appendListWithNSString:@"(" withNSString:JreStrcat("C$C", ' ', operator_, ' ') withNSString:@")" withJavaLangIterable:matchers_];
}

- (void)dealloc {
  RELEASE_(matchers_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x401, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 2, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangIterable:);
  methods[1].selector = @selector(matchesWithId:);
  methods[2].selector = @selector(describeToWithOrgHamcrestDescription:);
  methods[3].selector = @selector(matchesWithId:withBoolean:);
  methods[4].selector = @selector(describeToWithOrgHamcrestDescription:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "matchers_", "LJavaLangIterable;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangIterable;", "(Ljava/lang/Iterable<Lorg/hamcrest/Matcher<-TT;>;>;)V", "matches", "LNSObject;", "describeTo", "LOrgHamcrestDescription;", "LNSObject;Z", "LOrgHamcrestDescription;LNSString;", "Ljava/lang/Iterable<Lorg/hamcrest/Matcher<-TT;>;>;", "<T:Ljava/lang/Object;>Lorg/hamcrest/BaseMatcher<TT;>;" };
  static const J2ObjcClassInfo _OrgHamcrestCoreShortcutCombination = { "ShortcutCombination", "org.hamcrest.core", ptrTable, methods, fields, 7, 0x400, 5, 1, -1, -1, -1, 9, -1 };
  return &_OrgHamcrestCoreShortcutCombination;
}

@end

void OrgHamcrestCoreShortcutCombination_initWithJavaLangIterable_(OrgHamcrestCoreShortcutCombination *self, id<JavaLangIterable> matchers) {
  OrgHamcrestBaseMatcher_init(self);
  JreStrongAssign(&self->matchers_, matchers);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgHamcrestCoreShortcutCombination)
