//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/hamcrest/core/StringStartsWith.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/annotation/Annotation.h"
#include "org/hamcrest/Factory.h"
#include "org/hamcrest/Matcher.h"
#include "org/hamcrest/core/StringStartsWith.h"
#include "org/hamcrest/core/SubstringMatcher.h"

__attribute__((unused)) static IOSObjectArray *OrgHamcrestCoreStringStartsWith__Annotations$0();

@implementation OrgHamcrestCoreStringStartsWith

- (instancetype)initWithNSString:(NSString *)substring {
  OrgHamcrestCoreStringStartsWith_initWithNSString_(self, substring);
  return self;
}

- (jboolean)evalSubstringOfWithNSString:(NSString *)s {
  return [((NSString *) nil_chk(s)) hasPrefix:substring_];
}

- (NSString *)relationship {
  return @"starting with";
}

+ (id<OrgHamcrestMatcher>)startsWithWithNSString:(NSString *)prefix {
  return OrgHamcrestCoreStringStartsWith_startsWithWithNSString_(prefix);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgHamcrestMatcher;", 0x9, 2, 0, -1, 3, 4, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(evalSubstringOfWithNSString:);
  methods[2].selector = @selector(relationship);
  methods[3].selector = @selector(startsWithWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "evalSubstringOf", "startsWith", "(Ljava/lang/String;)Lorg/hamcrest/Matcher<Ljava/lang/String;>;", (void *)&OrgHamcrestCoreStringStartsWith__Annotations$0 };
  static const J2ObjcClassInfo _OrgHamcrestCoreStringStartsWith = { "StringStartsWith", "org.hamcrest.core", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_OrgHamcrestCoreStringStartsWith;
}

@end

void OrgHamcrestCoreStringStartsWith_initWithNSString_(OrgHamcrestCoreStringStartsWith *self, NSString *substring) {
  OrgHamcrestCoreSubstringMatcher_initWithNSString_(self, substring);
}

OrgHamcrestCoreStringStartsWith *new_OrgHamcrestCoreStringStartsWith_initWithNSString_(NSString *substring) {
  J2OBJC_NEW_IMPL(OrgHamcrestCoreStringStartsWith, initWithNSString_, substring)
}

OrgHamcrestCoreStringStartsWith *create_OrgHamcrestCoreStringStartsWith_initWithNSString_(NSString *substring) {
  J2OBJC_CREATE_IMPL(OrgHamcrestCoreStringStartsWith, initWithNSString_, substring)
}

id<OrgHamcrestMatcher> OrgHamcrestCoreStringStartsWith_startsWithWithNSString_(NSString *prefix) {
  OrgHamcrestCoreStringStartsWith_initialize();
  return create_OrgHamcrestCoreStringStartsWith_initWithNSString_(prefix);
}

IOSObjectArray *OrgHamcrestCoreStringStartsWith__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgHamcrestFactory() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgHamcrestCoreStringStartsWith)
