//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/hamcrest/internal/ArrayIterator.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/reflect/Array.h"
#include "java/util/Iterator.h"
#include "java/util/function/Consumer.h"
#include "org/hamcrest/internal/ArrayIterator.h"

@interface OrgHamcrestInternalArrayIterator () {
 @public
  id array_;
  jint currentIndex_;
}

@end

J2OBJC_FIELD_SETTER(OrgHamcrestInternalArrayIterator, array_, id)

@implementation OrgHamcrestInternalArrayIterator

- (instancetype)initWithId:(id)array {
  OrgHamcrestInternalArrayIterator_initWithId_(self, array);
  return self;
}

- (jboolean)hasNext {
  return currentIndex_ < JavaLangReflectArray_getLengthWithId_(array_);
}

- (id)next {
  return JavaLangReflectArray_getWithId_withInt_(array_, currentIndex_++);
}

- (void)remove {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"cannot remove items from an array");
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

- (void)dealloc {
  RELEASE_(array_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:);
  methods[1].selector = @selector(hasNext);
  methods[2].selector = @selector(next);
  methods[3].selector = @selector(remove);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "array_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "currentIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;", "Ljava/lang/Object;Ljava/util/Iterator<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _OrgHamcrestInternalArrayIterator = { "ArrayIterator", "org.hamcrest.internal", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, -1, -1, 1, -1 };
  return &_OrgHamcrestInternalArrayIterator;
}

@end

void OrgHamcrestInternalArrayIterator_initWithId_(OrgHamcrestInternalArrayIterator *self, id array) {
  NSObject_init(self);
  self->currentIndex_ = 0;
  if (![[nil_chk(array) java_getClass] isArray]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"not an array");
  }
  JreStrongAssign(&self->array_, array);
}

OrgHamcrestInternalArrayIterator *new_OrgHamcrestInternalArrayIterator_initWithId_(id array) {
  J2OBJC_NEW_IMPL(OrgHamcrestInternalArrayIterator, initWithId_, array)
}

OrgHamcrestInternalArrayIterator *create_OrgHamcrestInternalArrayIterator_initWithId_(id array) {
  J2OBJC_CREATE_IMPL(OrgHamcrestInternalArrayIterator, initWithId_, array)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgHamcrestInternalArrayIterator)
