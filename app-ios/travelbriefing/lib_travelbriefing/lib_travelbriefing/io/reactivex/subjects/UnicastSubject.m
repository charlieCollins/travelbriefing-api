//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/subjects/UnicastSubject.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "io/reactivex/Observable.h"
#include "io/reactivex/Observer.h"
#include "io/reactivex/annotations/CheckReturnValue.h"
#include "io/reactivex/disposables/Disposable.h"
#include "io/reactivex/internal/disposables/EmptyDisposable.h"
#include "io/reactivex/internal/functions/ObjectHelper.h"
#include "io/reactivex/internal/fuseable/QueueFuseable.h"
#include "io/reactivex/internal/fuseable/SimpleQueue.h"
#include "io/reactivex/internal/observers/BasicIntQueueDisposable.h"
#include "io/reactivex/internal/queue/SpscLinkedArrayQueue.h"
#include "io/reactivex/plugins/RxJavaPlugins.h"
#include "io/reactivex/subjects/Subject.h"
#include "io/reactivex/subjects/UnicastSubject.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Runnable.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

__attribute__((unused)) static IOSObjectArray *IoReactivexSubjectsUnicastSubject__Annotations$0();

__attribute__((unused)) static IOSObjectArray *IoReactivexSubjectsUnicastSubject__Annotations$1();

__attribute__((unused)) static IOSObjectArray *IoReactivexSubjectsUnicastSubject__Annotations$2();

@interface IoReactivexSubjectsUnicastSubject_UnicastQueueDisposable () {
 @public
  IoReactivexSubjectsUnicastSubject *this$0_;
}

@end

inline jlong IoReactivexSubjectsUnicastSubject_UnicastQueueDisposable_get_serialVersionUID();
#define IoReactivexSubjectsUnicastSubject_UnicastQueueDisposable_serialVersionUID 7926949470189395511LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexSubjectsUnicastSubject_UnicastQueueDisposable, serialVersionUID, jlong)

@implementation IoReactivexSubjectsUnicastSubject

+ (IoReactivexSubjectsUnicastSubject *)create {
  return IoReactivexSubjectsUnicastSubject_create();
}

+ (IoReactivexSubjectsUnicastSubject *)createWithInt:(jint)capacityHint {
  return IoReactivexSubjectsUnicastSubject_createWithInt_(capacityHint);
}

+ (IoReactivexSubjectsUnicastSubject *)createWithInt:(jint)capacityHint
                                withJavaLangRunnable:(id<JavaLangRunnable>)onCancelled {
  return IoReactivexSubjectsUnicastSubject_createWithInt_withJavaLangRunnable_(capacityHint, onCancelled);
}

- (instancetype)initWithInt:(jint)capacityHint {
  IoReactivexSubjectsUnicastSubject_initWithInt_(self, capacityHint);
  return self;
}

- (instancetype)initWithInt:(jint)capacityHint
       withJavaLangRunnable:(id<JavaLangRunnable>)onTerminate {
  IoReactivexSubjectsUnicastSubject_initWithInt_withJavaLangRunnable_(self, capacityHint, onTerminate);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)observer {
  if (![((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(once_)) get] && [once_ compareAndSetWithBoolean:false withBoolean:true]) {
    [((id<IoReactivexObserver>) nil_chk(observer)) onSubscribeWithIoReactivexDisposablesDisposable:wip_];
    [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(actual_)) lazySetWithId:observer];
    if (JreLoadVolatileBoolean(&disposed_)) {
      [actual_ lazySetWithId:nil];
      return;
    }
    [self drain];
  }
  else {
    IoReactivexInternalDisposablesEmptyDisposable_errorWithNSException_withIoReactivexObserver_(create_JavaLangIllegalStateException_initWithNSString_(@"Only a single observer allowed."), observer);
  }
}

- (void)doTerminate {
  id<JavaLangRunnable> r = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(onTerminate_)) get];
  if (r != nil && [onTerminate_ compareAndSetWithId:r withId:nil]) {
    [r run];
  }
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (JreLoadVolatileBoolean(&done_) || JreLoadVolatileBoolean(&disposed_)) {
    [((id<IoReactivexDisposablesDisposable>) nil_chk(s)) dispose];
  }
}

- (void)onNextWithId:(id)t {
  if (JreLoadVolatileBoolean(&done_) || JreLoadVolatileBoolean(&disposed_)) {
    return;
  }
  if (t == nil) {
    [self onErrorWithNSException:create_JavaLangNullPointerException_initWithNSString_(@"onNext called with null. Null values are generally not allowed in 2.x operators and sources.")];
    return;
  }
  [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(queue_)) offerWithId:t];
  [self drain];
}

- (void)onErrorWithNSException:(NSException *)t {
  if (JreLoadVolatileBoolean(&done_) || JreLoadVolatileBoolean(&disposed_)) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_(t);
    return;
  }
  if (t == nil) {
    t = create_JavaLangNullPointerException_initWithNSString_(@"onError called with null. Null values are generally not allowed in 2.x operators and sources.");
  }
  JreStrongAssign(&error_, t);
  JreAssignVolatileBoolean(&done_, true);
  [self doTerminate];
  [self drain];
}

- (void)onComplete {
  if (JreLoadVolatileBoolean(&done_) || JreLoadVolatileBoolean(&disposed_)) {
    return;
  }
  JreAssignVolatileBoolean(&done_, true);
  [self doTerminate];
  [self drain];
}

- (void)drainNormalWithIoReactivexObserver:(id<IoReactivexObserver>)a {
  jint missed = 1;
  id<IoReactivexInternalFuseableSimpleQueue> q = queue_;
  for (; ; ) {
    for (; ; ) {
      if (JreLoadVolatileBoolean(&disposed_)) {
        [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(actual_)) lazySetWithId:nil];
        [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) clear];
        return;
      }
      jboolean d = JreLoadVolatileBoolean(&done_);
      id v = [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(queue_)) poll];
      jboolean empty = v == nil;
      if (d && empty) {
        [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(actual_)) lazySetWithId:nil];
        NSException *ex = error_;
        if (ex != nil) {
          [((id<IoReactivexObserver>) nil_chk(a)) onErrorWithNSException:ex];
        }
        else {
          [((id<IoReactivexObserver>) nil_chk(a)) onComplete];
        }
        return;
      }
      if (empty) {
        break;
      }
      [((id<IoReactivexObserver>) nil_chk(a)) onNextWithId:v];
    }
    missed = [((IoReactivexInternalObserversBasicIntQueueDisposable *) nil_chk(wip_)) addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (void)drainFusedWithIoReactivexObserver:(id<IoReactivexObserver>)a {
  jint missed = 1;
  IoReactivexInternalQueueSpscLinkedArrayQueue *q = queue_;
  for (; ; ) {
    if (JreLoadVolatileBoolean(&disposed_)) {
      [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(actual_)) lazySetWithId:nil];
      [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) clear];
      return;
    }
    jboolean d = JreLoadVolatileBoolean(&done_);
    [((id<IoReactivexObserver>) nil_chk(a)) onNextWithId:nil];
    if (d) {
      [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(actual_)) lazySetWithId:nil];
      NSException *ex = error_;
      if (ex != nil) {
        [a onErrorWithNSException:ex];
      }
      else {
        [a onComplete];
      }
      return;
    }
    missed = [((IoReactivexInternalObserversBasicIntQueueDisposable *) nil_chk(wip_)) addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (void)drain {
  if ([((IoReactivexInternalObserversBasicIntQueueDisposable *) nil_chk(wip_)) getAndIncrement] != 0) {
    return;
  }
  id<IoReactivexObserver> a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(actual_)) get];
  jint missed = 1;
  for (; ; ) {
    if (a != nil) {
      if (enableOperatorFusion_) {
        [self drainFusedWithIoReactivexObserver:a];
      }
      else {
        [self drainNormalWithIoReactivexObserver:a];
      }
      return;
    }
    missed = [wip_ addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
    a = [actual_ get];
  }
}

- (jboolean)hasObservers {
  return [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(actual_)) get] != nil;
}

- (NSException *)getThrowable {
  if (JreLoadVolatileBoolean(&done_)) {
    return error_;
  }
  return nil;
}

- (jboolean)hasThrowable {
  return JreLoadVolatileBoolean(&done_) && error_ != nil;
}

- (jboolean)hasComplete {
  return JreLoadVolatileBoolean(&done_) && error_ == nil;
}

- (void)dealloc {
  RELEASE_(queue_);
  RELEASE_(actual_);
  RELEASE_(onTerminate_);
  RELEASE_(error_);
  RELEASE_(once_);
  RELEASE_(wip_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LIoReactivexSubjectsUnicastSubject;", 0x9, -1, -1, -1, 0, 1, -1 },
    { NULL, "LIoReactivexSubjectsUnicastSubject;", 0x9, 2, 3, -1, 4, 5, -1 },
    { NULL, "LIoReactivexSubjectsUnicastSubject;", 0x9, 2, 6, -1, 7, 8, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 9, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, 16, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 19, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x0, 20, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSException;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(create);
  methods[1].selector = @selector(createWithInt:);
  methods[2].selector = @selector(createWithInt:withJavaLangRunnable:);
  methods[3].selector = @selector(initWithInt:);
  methods[4].selector = @selector(initWithInt:withJavaLangRunnable:);
  methods[5].selector = @selector(subscribeActualWithIoReactivexObserver:);
  methods[6].selector = @selector(doTerminate);
  methods[7].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[8].selector = @selector(onNextWithId:);
  methods[9].selector = @selector(onErrorWithNSException:);
  methods[10].selector = @selector(onComplete);
  methods[11].selector = @selector(drainNormalWithIoReactivexObserver:);
  methods[12].selector = @selector(drainFusedWithIoReactivexObserver:);
  methods[13].selector = @selector(drain);
  methods[14].selector = @selector(hasObservers);
  methods[15].selector = @selector(getThrowable);
  methods[16].selector = @selector(hasThrowable);
  methods[17].selector = @selector(hasComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "queue_", "LIoReactivexInternalQueueSpscLinkedArrayQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 21, -1 },
    { "actual_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 22, -1 },
    { "onTerminate_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 23, -1 },
    { "disposed_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "error_", "LNSException;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "once_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "wip_", "LIoReactivexInternalObserversBasicIntQueueDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, 24, -1 },
    { "enableOperatorFusion_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "<T:Ljava/lang/Object;>()Lio/reactivex/subjects/UnicastSubject<TT;>;", (void *)&IoReactivexSubjectsUnicastSubject__Annotations$0, "create", "I", "<T:Ljava/lang/Object;>(I)Lio/reactivex/subjects/UnicastSubject<TT;>;", (void *)&IoReactivexSubjectsUnicastSubject__Annotations$1, "ILJavaLangRunnable;", "<T:Ljava/lang/Object;>(ILjava/lang/Runnable;)Lio/reactivex/subjects/UnicastSubject<TT;>;", (void *)&IoReactivexSubjectsUnicastSubject__Annotations$2, "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "drainNormal", "drainFused", "Lio/reactivex/internal/queue/SpscLinkedArrayQueue<TT;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/Observer<-TT;>;>;", "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Runnable;>;", "Lio/reactivex/internal/observers/BasicIntQueueDisposable<TT;>;", "LIoReactivexSubjectsUnicastSubject_UnicastQueueDisposable;", "<T:Ljava/lang/Object;>Lio/reactivex/subjects/Subject<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexSubjectsUnicastSubject = { "UnicastSubject", "io.reactivex.subjects", ptrTable, methods, fields, 7, 0x11, 18, 9, -1, 25, -1, 26, -1 };
  return &_IoReactivexSubjectsUnicastSubject;
}

@end

IoReactivexSubjectsUnicastSubject *IoReactivexSubjectsUnicastSubject_create() {
  IoReactivexSubjectsUnicastSubject_initialize();
  return create_IoReactivexSubjectsUnicastSubject_initWithInt_(IoReactivexObservable_bufferSize());
}

IoReactivexSubjectsUnicastSubject *IoReactivexSubjectsUnicastSubject_createWithInt_(jint capacityHint) {
  IoReactivexSubjectsUnicastSubject_initialize();
  return create_IoReactivexSubjectsUnicastSubject_initWithInt_(capacityHint);
}

IoReactivexSubjectsUnicastSubject *IoReactivexSubjectsUnicastSubject_createWithInt_withJavaLangRunnable_(jint capacityHint, id<JavaLangRunnable> onCancelled) {
  IoReactivexSubjectsUnicastSubject_initialize();
  return create_IoReactivexSubjectsUnicastSubject_initWithInt_withJavaLangRunnable_(capacityHint, onCancelled);
}

void IoReactivexSubjectsUnicastSubject_initWithInt_(IoReactivexSubjectsUnicastSubject *self, jint capacityHint) {
  IoReactivexSubjectsSubject_init(self);
  JreStrongAssignAndConsume(&self->queue_, new_IoReactivexInternalQueueSpscLinkedArrayQueue_initWithInt_(IoReactivexInternalFunctionsObjectHelper_verifyPositiveWithInt_withNSString_(capacityHint, @"capacityHint")));
  JreStrongAssignAndConsume(&self->onTerminate_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssignAndConsume(&self->actual_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssignAndConsume(&self->once_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
  JreStrongAssignAndConsume(&self->wip_, new_IoReactivexSubjectsUnicastSubject_UnicastQueueDisposable_initWithIoReactivexSubjectsUnicastSubject_(self));
}

IoReactivexSubjectsUnicastSubject *new_IoReactivexSubjectsUnicastSubject_initWithInt_(jint capacityHint) {
  J2OBJC_NEW_IMPL(IoReactivexSubjectsUnicastSubject, initWithInt_, capacityHint)
}

IoReactivexSubjectsUnicastSubject *create_IoReactivexSubjectsUnicastSubject_initWithInt_(jint capacityHint) {
  J2OBJC_CREATE_IMPL(IoReactivexSubjectsUnicastSubject, initWithInt_, capacityHint)
}

void IoReactivexSubjectsUnicastSubject_initWithInt_withJavaLangRunnable_(IoReactivexSubjectsUnicastSubject *self, jint capacityHint, id<JavaLangRunnable> onTerminate) {
  IoReactivexSubjectsSubject_init(self);
  JreStrongAssignAndConsume(&self->queue_, new_IoReactivexInternalQueueSpscLinkedArrayQueue_initWithInt_(IoReactivexInternalFunctionsObjectHelper_verifyPositiveWithInt_withNSString_(capacityHint, @"capacityHint")));
  JreStrongAssignAndConsume(&self->onTerminate_, new_JavaUtilConcurrentAtomicAtomicReference_initWithId_(IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(onTerminate, @"onTerminate")));
  JreStrongAssignAndConsume(&self->actual_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssignAndConsume(&self->once_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
  JreStrongAssignAndConsume(&self->wip_, new_IoReactivexSubjectsUnicastSubject_UnicastQueueDisposable_initWithIoReactivexSubjectsUnicastSubject_(self));
}

IoReactivexSubjectsUnicastSubject *new_IoReactivexSubjectsUnicastSubject_initWithInt_withJavaLangRunnable_(jint capacityHint, id<JavaLangRunnable> onTerminate) {
  J2OBJC_NEW_IMPL(IoReactivexSubjectsUnicastSubject, initWithInt_withJavaLangRunnable_, capacityHint, onTerminate)
}

IoReactivexSubjectsUnicastSubject *create_IoReactivexSubjectsUnicastSubject_initWithInt_withJavaLangRunnable_(jint capacityHint, id<JavaLangRunnable> onTerminate) {
  J2OBJC_CREATE_IMPL(IoReactivexSubjectsUnicastSubject, initWithInt_withJavaLangRunnable_, capacityHint, onTerminate)
}

IOSObjectArray *IoReactivexSubjectsUnicastSubject__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexSubjectsUnicastSubject__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *IoReactivexSubjectsUnicastSubject__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_IoReactivexAnnotationsCheckReturnValue() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexSubjectsUnicastSubject)

@implementation IoReactivexSubjectsUnicastSubject_UnicastQueueDisposable

- (instancetype)initWithIoReactivexSubjectsUnicastSubject:(IoReactivexSubjectsUnicastSubject *)outer$ {
  IoReactivexSubjectsUnicastSubject_UnicastQueueDisposable_initWithIoReactivexSubjectsUnicastSubject_(self, outer$);
  return self;
}

- (jint)requestFusionWithInt:(jint)mode {
  if ((mode & IoReactivexInternalFuseableQueueFuseable_ASYNC) != 0) {
    this$0_->enableOperatorFusion_ = true;
    return IoReactivexInternalFuseableQueueFuseable_ASYNC;
  }
  return IoReactivexInternalFuseableQueueFuseable_NONE;
}

- (id)poll {
  return [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(this$0_->queue_)) poll];
}

- (jboolean)isEmpty {
  return [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(this$0_->queue_)) isEmpty];
}

- (void)clear {
  [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(this$0_->queue_)) clear];
}

- (void)dispose {
  if (!JreLoadVolatileBoolean(&this$0_->disposed_)) {
    JreAssignVolatileBoolean(&this$0_->disposed_, true);
    [this$0_ doTerminate];
    [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(this$0_->actual_)) lazySetWithId:nil];
    if ([((IoReactivexInternalObserversBasicIntQueueDisposable *) nil_chk(this$0_->wip_)) getAndIncrement] == 0) {
      [this$0_->actual_ lazySetWithId:nil];
      [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(this$0_->queue_)) clear];
    }
  }
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&this$0_->disposed_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 2, 3, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSubjectsUnicastSubject:);
  methods[1].selector = @selector(requestFusionWithInt:);
  methods[2].selector = @selector(poll);
  methods[3].selector = @selector(isEmpty);
  methods[4].selector = @selector(clear);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexSubjectsUnicastSubject;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexSubjectsUnicastSubject_UnicastQueueDisposable_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "requestFusion", "I", "LJavaLangException;", "()TT;", "Lio/reactivex/subjects/UnicastSubject<TT;>;", "LIoReactivexSubjectsUnicastSubject;", "Lio/reactivex/internal/observers/BasicIntQueueDisposable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexSubjectsUnicastSubject_UnicastQueueDisposable = { "UnicastQueueDisposable", "io.reactivex.subjects", ptrTable, methods, fields, 7, 0x10, 7, 2, 5, -1, -1, 6, -1 };
  return &_IoReactivexSubjectsUnicastSubject_UnicastQueueDisposable;
}

@end

void IoReactivexSubjectsUnicastSubject_UnicastQueueDisposable_initWithIoReactivexSubjectsUnicastSubject_(IoReactivexSubjectsUnicastSubject_UnicastQueueDisposable *self, IoReactivexSubjectsUnicastSubject *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  IoReactivexInternalObserversBasicIntQueueDisposable_init(self);
}

IoReactivexSubjectsUnicastSubject_UnicastQueueDisposable *new_IoReactivexSubjectsUnicastSubject_UnicastQueueDisposable_initWithIoReactivexSubjectsUnicastSubject_(IoReactivexSubjectsUnicastSubject *outer$) {
  J2OBJC_NEW_IMPL(IoReactivexSubjectsUnicastSubject_UnicastQueueDisposable, initWithIoReactivexSubjectsUnicastSubject_, outer$)
}

IoReactivexSubjectsUnicastSubject_UnicastQueueDisposable *create_IoReactivexSubjectsUnicastSubject_UnicastQueueDisposable_initWithIoReactivexSubjectsUnicastSubject_(IoReactivexSubjectsUnicastSubject *outer$) {
  J2OBJC_CREATE_IMPL(IoReactivexSubjectsUnicastSubject_UnicastQueueDisposable, initWithIoReactivexSubjectsUnicastSubject_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexSubjectsUnicastSubject_UnicastQueueDisposable)
