//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/observers/DisposableLambdaObserver.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalObserversDisposableLambdaObserver")
#ifdef RESTRICT_IoReactivexInternalObserversDisposableLambdaObserver
#define INCLUDE_ALL_IoReactivexInternalObserversDisposableLambdaObserver 0
#else
#define INCLUDE_ALL_IoReactivexInternalObserversDisposableLambdaObserver 1
#endif
#undef RESTRICT_IoReactivexInternalObserversDisposableLambdaObserver

#if !defined (IoReactivexInternalObserversDisposableLambdaObserver_) && (INCLUDE_ALL_IoReactivexInternalObserversDisposableLambdaObserver || defined(INCLUDE_IoReactivexInternalObserversDisposableLambdaObserver))
#define IoReactivexInternalObserversDisposableLambdaObserver_

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "io/reactivex/Observer.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "io/reactivex/disposables/Disposable.h"

@protocol IoReactivexFunctionsAction;
@protocol IoReactivexFunctionsConsumer;

@interface IoReactivexInternalObserversDisposableLambdaObserver : NSObject < IoReactivexObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexObserver> actual_;
  id<IoReactivexFunctionsConsumer> onSubscribe_;
  id<IoReactivexFunctionsAction> onDispose_;
  id<IoReactivexDisposablesDisposable> s_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
           withIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)onSubscribe
             withIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onDispose;

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalObserversDisposableLambdaObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalObserversDisposableLambdaObserver, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalObserversDisposableLambdaObserver, onSubscribe_, id<IoReactivexFunctionsConsumer>)
J2OBJC_FIELD_SETTER(IoReactivexInternalObserversDisposableLambdaObserver, onDispose_, id<IoReactivexFunctionsAction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalObserversDisposableLambdaObserver, s_, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalObserversDisposableLambdaObserver_initWithIoReactivexObserver_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_(IoReactivexInternalObserversDisposableLambdaObserver *self, id<IoReactivexObserver> actual, id<IoReactivexFunctionsConsumer> onSubscribe, id<IoReactivexFunctionsAction> onDispose);

FOUNDATION_EXPORT IoReactivexInternalObserversDisposableLambdaObserver *new_IoReactivexInternalObserversDisposableLambdaObserver_initWithIoReactivexObserver_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsConsumer> onSubscribe, id<IoReactivexFunctionsAction> onDispose) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalObserversDisposableLambdaObserver *create_IoReactivexInternalObserversDisposableLambdaObserver_initWithIoReactivexObserver_withIoReactivexFunctionsConsumer_withIoReactivexFunctionsAction_(id<IoReactivexObserver> actual, id<IoReactivexFunctionsConsumer> onSubscribe, id<IoReactivexFunctionsAction> onDispose);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalObserversDisposableLambdaObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalObserversDisposableLambdaObserver")
