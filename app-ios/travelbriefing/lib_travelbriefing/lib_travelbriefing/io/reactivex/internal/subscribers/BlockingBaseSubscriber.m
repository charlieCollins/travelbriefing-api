//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/subscribers/BlockingBaseSubscriber.java
//

#include "J2ObjC_source.h"
#include "io/reactivex/internal/subscribers/BlockingBaseSubscriber.h"
#include "io/reactivex/internal/subscriptions/SubscriptionHelper.h"
#include "io/reactivex/internal/util/BlockingHelper.h"
#include "io/reactivex/internal/util/ExceptionHelper.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "org/reactivestreams/Subscription.h"

#pragma clang diagnostic ignored "-Wprotocol"

@implementation IoReactivexInternalSubscribersBlockingBaseSubscriber

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexInternalSubscribersBlockingBaseSubscriber_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    if (!JreLoadVolatileBoolean(&cancelled_)) {
      [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
      if (JreLoadVolatileBoolean(&cancelled_)) {
        JreStrongAssign(&self->s_, JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED));
        [s cancel];
      }
    }
  }
}

- (void)onComplete {
  [self countDown];
}

- (id)blockingGet {
  if ([self getCount] != 0) {
    @try {
      IoReactivexInternalUtilBlockingHelper_verifyNonBlocking();
      [self await];
    }
    @catch (JavaLangInterruptedException *ex) {
      id<OrgReactivestreamsSubscription> s = self->s_;
      JreStrongAssign(&self->s_, JreLoadEnum(IoReactivexInternalSubscriptionsSubscriptionHelper, CANCELLED));
      if (s != nil) {
        [s cancel];
      }
      @throw IoReactivexInternalUtilExceptionHelper_wrapOrThrowWithNSException_(ex);
    }
  }
  NSException *e = error_;
  if (e != nil) {
    @throw IoReactivexInternalUtilExceptionHelper_wrapOrThrowWithNSException_(e);
  }
  return value_;
}

- (void)dealloc {
  RELEASE_(value_);
  RELEASE_(error_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x11, -1, -1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onComplete);
  methods[3].selector = @selector(blockingGet);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, 3, -1 },
    { "error_", "LNSException;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LOrgReactivestreamsSubscription;", "()TT;", "TT;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/CountDownLatch;Lorg/reactivestreams/Subscriber<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalSubscribersBlockingBaseSubscriber = { "BlockingBaseSubscriber", "io.reactivex.internal.subscribers", ptrTable, methods, fields, 7, 0x401, 4, 4, -1, -1, -1, 4, -1 };
  return &_IoReactivexInternalSubscribersBlockingBaseSubscriber;
}

@end

void IoReactivexInternalSubscribersBlockingBaseSubscriber_init(IoReactivexInternalSubscribersBlockingBaseSubscriber *self) {
  JavaUtilConcurrentCountDownLatch_initWithInt_(self, 1);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalSubscribersBlockingBaseSubscriber)
