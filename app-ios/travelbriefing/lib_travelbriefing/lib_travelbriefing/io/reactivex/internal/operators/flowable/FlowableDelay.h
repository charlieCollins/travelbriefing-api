//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/flowable/FlowableDelay.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableDelay")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableDelay
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableDelay 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableDelay 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableDelay

#if !defined (IoReactivexInternalOperatorsFlowableFlowableDelay_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableDelay || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableDelay))
#define IoReactivexInternalOperatorsFlowableFlowableDelay_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "io/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream.h"

@class IoReactivexScheduler;
@class JavaUtilConcurrentTimeUnit;
@protocol OrgReactivestreamsPublisher;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableDelay : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  jlong delay_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler *scheduler_;
  jboolean delayError_;
}

#pragma mark Public

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                                           withLong:(jlong)delay
                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                           withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                        withBoolean:(jboolean)delayError;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)t;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableDelay)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableDelay, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableDelay, scheduler_, IoReactivexScheduler *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableDelay_initWithOrgReactivestreamsPublisher_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableDelay *self, id<OrgReactivestreamsPublisher> source, jlong delay, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jboolean delayError);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableDelay *new_IoReactivexInternalOperatorsFlowableFlowableDelay_initWithOrgReactivestreamsPublisher_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withBoolean_(id<OrgReactivestreamsPublisher> source, jlong delay, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jboolean delayError) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableDelay *create_IoReactivexInternalOperatorsFlowableFlowableDelay_initWithOrgReactivestreamsPublisher_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withBoolean_(id<OrgReactivestreamsPublisher> source, jlong delay, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jboolean delayError);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableDelay)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableDelay || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_

#define RESTRICT_OrgReactivestreamsSubscriber 1
#define INCLUDE_OrgReactivestreamsSubscriber 1
#include "org/reactivestreams/Subscriber.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "org/reactivestreams/Subscription.h"

@class IoReactivexScheduler_Worker;
@class JavaUtilConcurrentTimeUnit;

@interface IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber : NSObject < OrgReactivestreamsSubscriber, OrgReactivestreamsSubscription > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  jlong delay_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler_Worker *w_;
  jboolean delayError_;
  id<OrgReactivestreamsSubscription> s_;
}

#pragma mark Public

- (void)cancel;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                            withLong:(jlong)delay
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                     withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)w
                                         withBoolean:(jboolean)delayError;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber, w_, IoReactivexScheduler_Worker *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber, s_, id<OrgReactivestreamsSubscription>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber *self, id<OrgReactivestreamsSubscriber> actual, jlong delay, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *w, jboolean delayError);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber *new_IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withBoolean_(id<OrgReactivestreamsSubscriber> actual, jlong delay, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *w, jboolean delayError) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber *create_IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber_initWithOrgReactivestreamsSubscriber_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withBoolean_(id<OrgReactivestreamsSubscriber> actual, jlong delay, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *w, jboolean delayError);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableDelay_DelaySubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableDelay")
