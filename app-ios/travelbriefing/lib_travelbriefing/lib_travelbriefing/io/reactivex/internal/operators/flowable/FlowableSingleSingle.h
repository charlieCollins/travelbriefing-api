//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/flowable/FlowableSingleSingle.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSingleSingle")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableSingleSingle
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSingleSingle 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSingleSingle 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableSingleSingle

#if !defined (IoReactivexInternalOperatorsFlowableFlowableSingleSingle_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSingleSingle || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableSingleSingle))
#define IoReactivexInternalOperatorsFlowableFlowableSingleSingle_

#define RESTRICT_IoReactivexSingle 1
#define INCLUDE_IoReactivexSingle 1
#include "io/reactivex/Single.h"

#define RESTRICT_IoReactivexInternalFuseableFuseToFlowable 1
#define INCLUDE_IoReactivexInternalFuseableFuseToFlowable 1
#include "io/reactivex/internal/fuseable/FuseToFlowable.h"

@class IoReactivexFlowable;
@protocol IoReactivexSingleObserver;
@protocol OrgReactivestreamsPublisher;

@interface IoReactivexInternalOperatorsFlowableFlowableSingleSingle : IoReactivexSingle < IoReactivexInternalFuseableFuseToFlowable > {
 @public
  id<OrgReactivestreamsPublisher> source_;
  id defaultValue_;
}

#pragma mark Public

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                                             withId:(id)defaultValue;

- (IoReactivexFlowable *)fuseToFlowable;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableSingleSingle)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSingleSingle, source_, id<OrgReactivestreamsPublisher>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSingleSingle, defaultValue_, id)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableSingleSingle_initWithOrgReactivestreamsPublisher_withId_(IoReactivexInternalOperatorsFlowableFlowableSingleSingle *self, id<OrgReactivestreamsPublisher> source, id defaultValue);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSingleSingle *new_IoReactivexInternalOperatorsFlowableFlowableSingleSingle_initWithOrgReactivestreamsPublisher_withId_(id<OrgReactivestreamsPublisher> source, id defaultValue) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSingleSingle *create_IoReactivexInternalOperatorsFlowableFlowableSingleSingle_initWithOrgReactivestreamsPublisher_withId_(id<OrgReactivestreamsPublisher> source, id defaultValue);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableSingleSingle)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableSingleSingle_SingleElementSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSingleSingle || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableSingleSingle_SingleElementSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableSingleSingle_SingleElementSubscriber_

#define RESTRICT_OrgReactivestreamsSubscriber 1
#define INCLUDE_OrgReactivestreamsSubscriber 1
#include "org/reactivestreams/Subscriber.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "io/reactivex/disposables/Disposable.h"

@protocol IoReactivexSingleObserver;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsFlowableFlowableSingleSingle_SingleElementSubscriber : NSObject < OrgReactivestreamsSubscriber, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexSingleObserver> actual_;
  id defaultValue_;
  id<OrgReactivestreamsSubscription> s_;
  jboolean done_;
  id value_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual
                                           withId:(id)defaultValue;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableSingleSingle_SingleElementSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSingleSingle_SingleElementSubscriber, actual_, id<IoReactivexSingleObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSingleSingle_SingleElementSubscriber, defaultValue_, id)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSingleSingle_SingleElementSubscriber, s_, id<OrgReactivestreamsSubscription>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSingleSingle_SingleElementSubscriber, value_, id)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableSingleSingle_SingleElementSubscriber_initWithIoReactivexSingleObserver_withId_(IoReactivexInternalOperatorsFlowableFlowableSingleSingle_SingleElementSubscriber *self, id<IoReactivexSingleObserver> actual, id defaultValue);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSingleSingle_SingleElementSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableSingleSingle_SingleElementSubscriber_initWithIoReactivexSingleObserver_withId_(id<IoReactivexSingleObserver> actual, id defaultValue) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSingleSingle_SingleElementSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableSingleSingle_SingleElementSubscriber_initWithIoReactivexSingleObserver_withId_(id<IoReactivexSingleObserver> actual, id defaultValue);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableSingleSingle_SingleElementSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSingleSingle")
