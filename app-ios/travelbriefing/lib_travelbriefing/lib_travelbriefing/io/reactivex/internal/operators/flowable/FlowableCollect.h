//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/flowable/FlowableCollect.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableCollect")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableCollect
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableCollect 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableCollect 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableCollect

#if !defined (IoReactivexInternalOperatorsFlowableFlowableCollect_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableCollect || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableCollect))
#define IoReactivexInternalOperatorsFlowableFlowableCollect_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "io/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream.h"

@protocol IoReactivexFunctionsBiConsumer;
@protocol JavaUtilConcurrentCallable;
@protocol OrgReactivestreamsPublisher;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableCollect : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  id<JavaUtilConcurrentCallable> initialSupplier_;
  id<IoReactivexFunctionsBiConsumer> collector_;
}

#pragma mark Public

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                     withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)initialSupplier
                 withIoReactivexFunctionsBiConsumer:(id<IoReactivexFunctionsBiConsumer>)collector;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableCollect)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableCollect, initialSupplier_, id<JavaUtilConcurrentCallable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableCollect, collector_, id<IoReactivexFunctionsBiConsumer>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableCollect_initWithOrgReactivestreamsPublisher_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiConsumer_(IoReactivexInternalOperatorsFlowableFlowableCollect *self, id<OrgReactivestreamsPublisher> source, id<JavaUtilConcurrentCallable> initialSupplier, id<IoReactivexFunctionsBiConsumer> collector);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableCollect *new_IoReactivexInternalOperatorsFlowableFlowableCollect_initWithOrgReactivestreamsPublisher_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiConsumer_(id<OrgReactivestreamsPublisher> source, id<JavaUtilConcurrentCallable> initialSupplier, id<IoReactivexFunctionsBiConsumer> collector) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableCollect *create_IoReactivexInternalOperatorsFlowableFlowableCollect_initWithOrgReactivestreamsPublisher_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiConsumer_(id<OrgReactivestreamsPublisher> source, id<JavaUtilConcurrentCallable> initialSupplier, id<IoReactivexFunctionsBiConsumer> collector);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableCollect)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableCollect || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber_

#define RESTRICT_IoReactivexInternalSubscriptionsDeferredScalarSubscription 1
#define INCLUDE_IoReactivexInternalSubscriptionsDeferredScalarSubscription 1
#include "io/reactivex/internal/subscriptions/DeferredScalarSubscription.h"

#define RESTRICT_OrgReactivestreamsSubscriber 1
#define INCLUDE_OrgReactivestreamsSubscriber 1
#include "org/reactivestreams/Subscriber.h"

@protocol IoReactivexFunctionsBiConsumer;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber : IoReactivexInternalSubscriptionsDeferredScalarSubscription < OrgReactivestreamsSubscriber > {
 @public
  id<IoReactivexFunctionsBiConsumer> collector_;
  id u_;
  id<OrgReactivestreamsSubscription> s_;
  jboolean done_;
}

#pragma mark Public

- (void)cancel;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                              withId:(id)u
                  withIoReactivexFunctionsBiConsumer:(id<IoReactivexFunctionsBiConsumer>)collector;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber, collector_, id<IoReactivexFunctionsBiConsumer>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber, u_, id)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber, s_, id<OrgReactivestreamsSubscription>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber_initWithOrgReactivestreamsSubscriber_withId_withIoReactivexFunctionsBiConsumer_(IoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber *self, id<OrgReactivestreamsSubscriber> actual, id u, id<IoReactivexFunctionsBiConsumer> collector);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber_initWithOrgReactivestreamsSubscriber_withId_withIoReactivexFunctionsBiConsumer_(id<OrgReactivestreamsSubscriber> actual, id u, id<IoReactivexFunctionsBiConsumer> collector) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber_initWithOrgReactivestreamsSubscriber_withId_withIoReactivexFunctionsBiConsumer_(id<OrgReactivestreamsSubscriber> actual, id u, id<IoReactivexFunctionsBiConsumer> collector);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableCollect_CollectSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableCollect")
