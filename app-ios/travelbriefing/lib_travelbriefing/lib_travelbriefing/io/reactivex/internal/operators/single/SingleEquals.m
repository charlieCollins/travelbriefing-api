//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/single/SingleEquals.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "io/reactivex/Single.h"
#include "io/reactivex/SingleObserver.h"
#include "io/reactivex/SingleSource.h"
#include "io/reactivex/disposables/CompositeDisposable.h"
#include "io/reactivex/disposables/Disposable.h"
#include "io/reactivex/internal/functions/ObjectHelper.h"
#include "io/reactivex/internal/operators/single/SingleEquals.h"
#include "io/reactivex/plugins/RxJavaPlugins.h"
#include "java/lang/Boolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface IoReactivexInternalOperatorsSingleSingleEquals_1InnerObserver : NSObject < IoReactivexSingleObserver > {
 @public
  IoReactivexDisposablesCompositeDisposable *val$set_;
  IOSObjectArray *val$values_;
  JavaUtilConcurrentAtomicAtomicInteger *val$count_;
  id<IoReactivexSingleObserver> val$s_;
  jint index_;
}

- (instancetype)initWithIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)capture$0
                                                withNSObjectArray:(IOSObjectArray *)capture$1
                        withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$2
                                    withIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)capture$3
                                                          withInt:(jint)index;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

- (void)onErrorWithNSException:(NSException *)e;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleEquals_1InnerObserver)

__attribute__((unused)) static void IoReactivexInternalOperatorsSingleSingleEquals_1InnerObserver_initWithIoReactivexDisposablesCompositeDisposable_withNSObjectArray_withJavaUtilConcurrentAtomicAtomicInteger_withIoReactivexSingleObserver_withInt_(IoReactivexInternalOperatorsSingleSingleEquals_1InnerObserver *self, IoReactivexDisposablesCompositeDisposable *capture$0, IOSObjectArray *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, id<IoReactivexSingleObserver> capture$3, jint index);

__attribute__((unused)) static IoReactivexInternalOperatorsSingleSingleEquals_1InnerObserver *new_IoReactivexInternalOperatorsSingleSingleEquals_1InnerObserver_initWithIoReactivexDisposablesCompositeDisposable_withNSObjectArray_withJavaUtilConcurrentAtomicAtomicInteger_withIoReactivexSingleObserver_withInt_(IoReactivexDisposablesCompositeDisposable *capture$0, IOSObjectArray *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, id<IoReactivexSingleObserver> capture$3, jint index) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalOperatorsSingleSingleEquals_1InnerObserver *create_IoReactivexInternalOperatorsSingleSingleEquals_1InnerObserver_initWithIoReactivexDisposablesCompositeDisposable_withNSObjectArray_withJavaUtilConcurrentAtomicAtomicInteger_withIoReactivexSingleObserver_withInt_(IoReactivexDisposablesCompositeDisposable *capture$0, IOSObjectArray *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, id<IoReactivexSingleObserver> capture$3, jint index);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsSingleSingleEquals_1InnerObserver)

@implementation IoReactivexInternalOperatorsSingleSingleEquals

- (instancetype)initWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)first
                    withIoReactivexSingleSource:(id<IoReactivexSingleSource>)second {
  IoReactivexInternalOperatorsSingleSingleEquals_initWithIoReactivexSingleSource_withIoReactivexSingleSource_(self, first, second);
  return self;
}

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s {
  JavaUtilConcurrentAtomicAtomicInteger *count = create_JavaUtilConcurrentAtomicAtomicInteger_init();
  IOSObjectArray *values = [IOSObjectArray arrayWithObjects:(id[]){ nil, nil } count:2 type:NSObject_class_()];
  IoReactivexDisposablesCompositeDisposable *set = create_IoReactivexDisposablesCompositeDisposable_init();
  [((id<IoReactivexSingleObserver>) nil_chk(s)) onSubscribeWithIoReactivexDisposablesDisposable:set];
  [((id<IoReactivexSingleSource>) nil_chk(first_)) subscribeWithIoReactivexSingleObserver:create_IoReactivexInternalOperatorsSingleSingleEquals_1InnerObserver_initWithIoReactivexDisposablesCompositeDisposable_withNSObjectArray_withJavaUtilConcurrentAtomicAtomicInteger_withIoReactivexSingleObserver_withInt_(set, values, count, s, 0)];
  [((id<IoReactivexSingleSource>) nil_chk(second_)) subscribeWithIoReactivexSingleObserver:create_IoReactivexInternalOperatorsSingleSingleEquals_1InnerObserver_initWithIoReactivexDisposablesCompositeDisposable_withNSObjectArray_withJavaUtilConcurrentAtomicAtomicInteger_withIoReactivexSingleObserver_withInt_(set, values, count, s, 1)];
}

- (void)dealloc {
  RELEASE_(first_);
  RELEASE_(second_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSingleSource:withIoReactivexSingleSource:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexSingleObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "first_", "LIoReactivexSingleSource;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "second_", "LIoReactivexSingleSource;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSingleSource;LIoReactivexSingleSource;", "(Lio/reactivex/SingleSource<+TT;>;Lio/reactivex/SingleSource<+TT;>;)V", "subscribeActual", "LIoReactivexSingleObserver;", "(Lio/reactivex/SingleObserver<-Ljava/lang/Boolean;>;)V", "Lio/reactivex/SingleSource<+TT;>;", "<T:Ljava/lang/Object;>Lio/reactivex/Single<Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleEquals = { "SingleEquals", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, -1, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleEquals;
}

@end

void IoReactivexInternalOperatorsSingleSingleEquals_initWithIoReactivexSingleSource_withIoReactivexSingleSource_(IoReactivexInternalOperatorsSingleSingleEquals *self, id<IoReactivexSingleSource> first, id<IoReactivexSingleSource> second) {
  IoReactivexSingle_init(self);
  JreStrongAssign(&self->first_, first);
  JreStrongAssign(&self->second_, second);
}

IoReactivexInternalOperatorsSingleSingleEquals *new_IoReactivexInternalOperatorsSingleSingleEquals_initWithIoReactivexSingleSource_withIoReactivexSingleSource_(id<IoReactivexSingleSource> first, id<IoReactivexSingleSource> second) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleEquals, initWithIoReactivexSingleSource_withIoReactivexSingleSource_, first, second)
}

IoReactivexInternalOperatorsSingleSingleEquals *create_IoReactivexInternalOperatorsSingleSingleEquals_initWithIoReactivexSingleSource_withIoReactivexSingleSource_(id<IoReactivexSingleSource> first, id<IoReactivexSingleSource> second) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleEquals, initWithIoReactivexSingleSource_withIoReactivexSingleSource_, first, second)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleEquals)

@implementation IoReactivexInternalOperatorsSingleSingleEquals_1InnerObserver

- (instancetype)initWithIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)capture$0
                                                withNSObjectArray:(IOSObjectArray *)capture$1
                        withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$2
                                    withIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)capture$3
                                                          withInt:(jint)index {
  IoReactivexInternalOperatorsSingleSingleEquals_1InnerObserver_initWithIoReactivexDisposablesCompositeDisposable_withNSObjectArray_withJavaUtilConcurrentAtomicAtomicInteger_withIoReactivexSingleObserver_withInt_(self, capture$0, capture$1, capture$2, capture$3, index);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(val$set_)) addWithIoReactivexDisposablesDisposable:d];
}

- (void)onSuccessWithId:(id)value {
  IOSObjectArray_Set(nil_chk(val$values_), index_, value);
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) incrementAndGet] == 2) {
    [((id<IoReactivexSingleObserver>) nil_chk(val$s_)) onSuccessWithId:JavaLangBoolean_valueOfWithBoolean_(IoReactivexInternalFunctionsObjectHelper_equalsWithId_withId_(IOSObjectArray_Get(val$values_, 0), IOSObjectArray_Get(val$values_, 1)))];
  }
}

- (void)onErrorWithNSException:(NSException *)e {
  for (; ; ) {
    jint state = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$count_)) get];
    if (state >= 2) {
      IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_(e);
      return;
    }
    if ([val$count_ compareAndSetWithInt:state withInt:2]) {
      [((IoReactivexDisposablesCompositeDisposable *) nil_chk(val$set_)) dispose];
      [((id<IoReactivexSingleObserver>) nil_chk(val$s_)) onErrorWithNSException:e];
      return;
    }
  }
}

- (void)dealloc {
  RELEASE_(val$set_);
  RELEASE_(val$values_);
  RELEASE_(val$count_);
  RELEASE_(val$s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexDisposablesCompositeDisposable:withNSObjectArray:withJavaUtilConcurrentAtomicAtomicInteger:withIoReactivexSingleObserver:withInt:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onSuccessWithId:);
  methods[3].selector = @selector(onErrorWithNSException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$set_", "LIoReactivexDisposablesCompositeDisposable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$values_", "[LNSObject;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$count_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$s_", "LIoReactivexSingleObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, 8, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onSuccess", "LNSObject;", "(TT;)V", "onError", "LNSException;", "Lio/reactivex/SingleObserver<-Ljava/lang/Boolean;>;", "LIoReactivexInternalOperatorsSingleSingleEquals;", "subscribeActualWithIoReactivexSingleObserver:", "Ljava/lang/Object;Lio/reactivex/SingleObserver<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleEquals_1InnerObserver = { "InnerObserver", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x0, 4, 5, 9, -1, 10, 11, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleEquals_1InnerObserver;
}

@end

void IoReactivexInternalOperatorsSingleSingleEquals_1InnerObserver_initWithIoReactivexDisposablesCompositeDisposable_withNSObjectArray_withJavaUtilConcurrentAtomicAtomicInteger_withIoReactivexSingleObserver_withInt_(IoReactivexInternalOperatorsSingleSingleEquals_1InnerObserver *self, IoReactivexDisposablesCompositeDisposable *capture$0, IOSObjectArray *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, id<IoReactivexSingleObserver> capture$3, jint index) {
  JreStrongAssign(&self->val$set_, capture$0);
  JreStrongAssign(&self->val$values_, capture$1);
  JreStrongAssign(&self->val$count_, capture$2);
  JreStrongAssign(&self->val$s_, capture$3);
  NSObject_init(self);
  self->index_ = index;
}

IoReactivexInternalOperatorsSingleSingleEquals_1InnerObserver *new_IoReactivexInternalOperatorsSingleSingleEquals_1InnerObserver_initWithIoReactivexDisposablesCompositeDisposable_withNSObjectArray_withJavaUtilConcurrentAtomicAtomicInteger_withIoReactivexSingleObserver_withInt_(IoReactivexDisposablesCompositeDisposable *capture$0, IOSObjectArray *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, id<IoReactivexSingleObserver> capture$3, jint index) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleEquals_1InnerObserver, initWithIoReactivexDisposablesCompositeDisposable_withNSObjectArray_withJavaUtilConcurrentAtomicAtomicInteger_withIoReactivexSingleObserver_withInt_, capture$0, capture$1, capture$2, capture$3, index)
}

IoReactivexInternalOperatorsSingleSingleEquals_1InnerObserver *create_IoReactivexInternalOperatorsSingleSingleEquals_1InnerObserver_initWithIoReactivexDisposablesCompositeDisposable_withNSObjectArray_withJavaUtilConcurrentAtomicAtomicInteger_withIoReactivexSingleObserver_withInt_(IoReactivexDisposablesCompositeDisposable *capture$0, IOSObjectArray *capture$1, JavaUtilConcurrentAtomicAtomicInteger *capture$2, id<IoReactivexSingleObserver> capture$3, jint index) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleEquals_1InnerObserver, initWithIoReactivexDisposablesCompositeDisposable_withNSObjectArray_withJavaUtilConcurrentAtomicAtomicInteger_withIoReactivexSingleObserver_withInt_, capture$0, capture$1, capture$2, capture$3, index)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleEquals_1InnerObserver)
