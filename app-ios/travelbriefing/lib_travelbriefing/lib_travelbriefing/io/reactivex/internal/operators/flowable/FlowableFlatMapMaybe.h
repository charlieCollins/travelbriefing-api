//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/flowable/FlowableFlatMapMaybe.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe

#if !defined (IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe))
#define IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "io/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream.h"

@protocol IoReactivexFunctionsFunction;
@protocol OrgReactivestreamsPublisher;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  id<IoReactivexFunctionsFunction> mapper_;
  jboolean delayErrors_;
  jint maxConcurrency_;
}

#pragma mark Public

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                        withBoolean:(jboolean)delayError
                                            withInt:(jint)maxConcurrency;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe, mapper_, id<IoReactivexFunctionsFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withBoolean_withInt_(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe *self, id<OrgReactivestreamsPublisher> source, id<IoReactivexFunctionsFunction> mapper, jboolean delayError, jint maxConcurrency);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe *new_IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withBoolean_withInt_(id<OrgReactivestreamsPublisher> source, id<IoReactivexFunctionsFunction> mapper, jboolean delayError, jint maxConcurrency) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe *create_IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withBoolean_withInt_(id<OrgReactivestreamsPublisher> source, id<IoReactivexFunctionsFunction> mapper, jboolean delayError, jint maxConcurrency);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

#define RESTRICT_OrgReactivestreamsSubscriber 1
#define INCLUDE_OrgReactivestreamsSubscriber 1
#include "org/reactivestreams/Subscriber.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "org/reactivestreams/Subscription.h"

@class IoReactivexDisposablesCompositeDisposable;
@class IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver;
@class IoReactivexInternalQueueSpscLinkedArrayQueue;
@class IoReactivexInternalUtilAtomicThrowable;
@class JavaUtilConcurrentAtomicAtomicLong;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexFunctionsFunction;

@interface IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber : JavaUtilConcurrentAtomicAtomicInteger < OrgReactivestreamsSubscriber, OrgReactivestreamsSubscription > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  jboolean delayErrors_;
  jint maxConcurrency_;
  JavaUtilConcurrentAtomicAtomicLong *requested_;
  IoReactivexDisposablesCompositeDisposable *set_;
  JavaUtilConcurrentAtomicAtomicInteger *active_;
  IoReactivexInternalUtilAtomicThrowable *errors_;
  id<IoReactivexFunctionsFunction> mapper_;
  JavaUtilConcurrentAtomicAtomicReference *queue_;
  id<OrgReactivestreamsSubscription> s_;
  volatile_jboolean cancelled_;
}

#pragma mark Public

- (void)cancel;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                    withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                         withBoolean:(jboolean)delayErrors
                                             withInt:(jint)maxConcurrency;

- (void)clear;

- (void)drain;

- (void)drainLoop;

- (IoReactivexInternalQueueSpscLinkedArrayQueue *)getOrCreateQueue;

- (void)innerCompleteWithIoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver:(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver *)inner;

- (void)innerErrorWithIoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver:(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver *)inner
                                                                                                    withNSException:(NSException *)e;

- (void)innerSuccessWithIoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver:(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver *)inner
                                                                                                               withId:(id)value;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber, requested_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber, set_, IoReactivexDisposablesCompositeDisposable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber, active_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber, errors_, IoReactivexInternalUtilAtomicThrowable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber, mapper_, id<IoReactivexFunctionsFunction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber, queue_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber, s_, id<OrgReactivestreamsSubscription>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_withInt_(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_withInt_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_withInt_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver))
#define IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexMaybeObserver 1
#define INCLUDE_IoReactivexMaybeObserver 1
#include "io/reactivex/MaybeObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "io/reactivex/disposables/Disposable.h"

@class IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexMaybeObserver, IoReactivexDisposablesDisposable >

#pragma mark Public

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber:(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver_initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver *self, IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber *outer$);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver *new_IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver_initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver *create_IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver_initWithIoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber *outer$);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe_FlatMapMaybeSubscriber_InnerObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFlatMapMaybe")
