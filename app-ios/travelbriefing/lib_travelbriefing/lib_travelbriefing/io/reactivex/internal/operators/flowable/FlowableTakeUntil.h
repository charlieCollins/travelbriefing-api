//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/flowable/FlowableTakeUntil.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTakeUntil")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableTakeUntil
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTakeUntil 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTakeUntil 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableTakeUntil

#if !defined (IoReactivexInternalOperatorsFlowableFlowableTakeUntil_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTakeUntil || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableTakeUntil))
#define IoReactivexInternalOperatorsFlowableFlowableTakeUntil_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "io/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream.h"

@protocol OrgReactivestreamsPublisher;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableTakeUntil : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  id<OrgReactivestreamsPublisher> other_;
}

#pragma mark Public

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                    withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)child;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableTakeUntil)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTakeUntil, other_, id<OrgReactivestreamsPublisher>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableTakeUntil_initWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_(IoReactivexInternalOperatorsFlowableFlowableTakeUntil *self, id<OrgReactivestreamsPublisher> source, id<OrgReactivestreamsPublisher> other);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableTakeUntil *new_IoReactivexInternalOperatorsFlowableFlowableTakeUntil_initWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> source, id<OrgReactivestreamsPublisher> other) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableTakeUntil *create_IoReactivexInternalOperatorsFlowableFlowableTakeUntil_initWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_(id<OrgReactivestreamsPublisher> source, id<OrgReactivestreamsPublisher> other);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableTakeUntil)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTakeUntil || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

#define RESTRICT_OrgReactivestreamsSubscriber 1
#define INCLUDE_OrgReactivestreamsSubscriber 1
#include "org/reactivestreams/Subscriber.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "org/reactivestreams/Subscription.h"

@class IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber;
@class IoReactivexInternalUtilAtomicThrowable;
@class JavaUtilConcurrentAtomicAtomicLong;
@class JavaUtilConcurrentAtomicAtomicReference;

@interface IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber : JavaUtilConcurrentAtomicAtomicInteger < OrgReactivestreamsSubscriber, OrgReactivestreamsSubscription > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  JavaUtilConcurrentAtomicAtomicLong *requested_;
  JavaUtilConcurrentAtomicAtomicReference *s_;
  IoReactivexInternalUtilAtomicThrowable *error_;
  IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber *other_;
}

#pragma mark Public

- (void)cancel;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber, requested_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber, s_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber, error_, IoReactivexInternalUtilAtomicThrowable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber, other_, IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_initWithOrgReactivestreamsSubscriber_(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber *self, id<OrgReactivestreamsSubscriber> actual);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_initWithOrgReactivestreamsSubscriber_(id<OrgReactivestreamsSubscriber> actual) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_initWithOrgReactivestreamsSubscriber_(id<OrgReactivestreamsSubscriber> actual);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTakeUntil || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_OrgReactivestreamsSubscriber 1
#define INCLUDE_OrgReactivestreamsSubscriber 1
#include "org/reactivestreams/Subscriber.h"

@class IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber : JavaUtilConcurrentAtomicAtomicReference < OrgReactivestreamsSubscriber >

#pragma mark Public

- (id<OrgReactivestreamsSubscription>)get;

- (id<OrgReactivestreamsSubscription>)getAndSetWithId:(id<OrgReactivestreamsSubscription>)arg0;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber:(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber *self, IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber *outer$);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber *outer$);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableTakeUntil_TakeUntilMainSubscriber_OtherSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTakeUntil")
