//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/maybe/MaybeFlatMapCompletable.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable")
#ifdef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable

#if !defined (IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable))
#define IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_

#define RESTRICT_IoReactivexCompletable 1
#define INCLUDE_IoReactivexCompletable 1
#include "io/reactivex/Completable.h"

@protocol IoReactivexCompletableObserver;
@protocol IoReactivexFunctionsFunction;
@protocol IoReactivexMaybeSource;

@interface IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable : IoReactivexCompletable {
 @public
  id<IoReactivexMaybeSource> source_;
  id<IoReactivexFunctionsFunction> mapper_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source
              withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable, source_, id<IoReactivexMaybeSource>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable, mapper_, id<IoReactivexFunctionsFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_initWithIoReactivexMaybeSource_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable *self, id<IoReactivexMaybeSource> source, id<IoReactivexFunctionsFunction> mapper);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable *new_IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_initWithIoReactivexMaybeSource_withIoReactivexFunctionsFunction_(id<IoReactivexMaybeSource> source, id<IoReactivexFunctionsFunction> mapper) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable *create_IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_initWithIoReactivexMaybeSource_withIoReactivexFunctionsFunction_(id<IoReactivexMaybeSource> source, id<IoReactivexFunctionsFunction> mapper);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable)

#endif

#if !defined (IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver))
#define IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexMaybeObserver 1
#define INCLUDE_IoReactivexMaybeObserver 1
#include "io/reactivex/MaybeObserver.h"

#define RESTRICT_IoReactivexCompletableObserver 1
#define INCLUDE_IoReactivexCompletableObserver 1
#include "io/reactivex/CompletableObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "io/reactivex/disposables/Disposable.h"

@protocol IoReactivexFunctionsFunction;

@interface IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexMaybeObserver, IoReactivexCompletableObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexCompletableObserver> actual_;
  id<IoReactivexFunctionsFunction> mapper_;
}

#pragma mark Public

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)actual
                      withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver, actual_, id<IoReactivexCompletableObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver, mapper_, id<IoReactivexFunctionsFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver_initWithIoReactivexCompletableObserver_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver *self, id<IoReactivexCompletableObserver> actual, id<IoReactivexFunctionsFunction> mapper);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver *new_IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver_initWithIoReactivexCompletableObserver_withIoReactivexFunctionsFunction_(id<IoReactivexCompletableObserver> actual, id<IoReactivexFunctionsFunction> mapper) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver *create_IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver_initWithIoReactivexCompletableObserver_withIoReactivexFunctionsFunction_(id<IoReactivexCompletableObserver> actual, id<IoReactivexFunctionsFunction> mapper);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable_FlatMapCompletableObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeFlatMapCompletable")
