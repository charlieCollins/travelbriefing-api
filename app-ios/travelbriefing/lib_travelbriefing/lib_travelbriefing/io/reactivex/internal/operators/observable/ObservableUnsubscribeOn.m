//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/observable/ObservableUnsubscribeOn.java
//

#include "J2ObjC_source.h"
#include "io/reactivex/ObservableSource.h"
#include "io/reactivex/Observer.h"
#include "io/reactivex/Scheduler.h"
#include "io/reactivex/disposables/Disposable.h"
#include "io/reactivex/internal/disposables/DisposableHelper.h"
#include "io/reactivex/internal/operators/observable/AbstractObservableWithUpstream.h"
#include "io/reactivex/internal/operators/observable/ObservableUnsubscribeOn.h"
#include "io/reactivex/plugins/RxJavaPlugins.h"
#include "java/lang/Runnable.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"

inline jlong IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_serialVersionUID 1015244841293359600LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver, serialVersionUID, jlong)

@interface IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_1 : NSObject < JavaLangRunnable > {
 @public
  IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver *this$0_;
}

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver:(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_1)

__attribute__((unused)) static void IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_1_initWithIoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_1 *self, IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver *outer$);

__attribute__((unused)) static IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_1 *new_IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_1_initWithIoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_1 *create_IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_1_initWithIoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver *outer$);

@implementation IoReactivexInternalOperatorsObservableObservableUnsubscribeOn

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                           withIoReactivexScheduler:(IoReactivexScheduler *)scheduler {
  IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_initWithIoReactivexObservableSource_withIoReactivexScheduler_(self, source, scheduler);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t {
  [((id<IoReactivexObservableSource>) nil_chk(source_)) subscribeWithIoReactivexObserver:create_IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_initWithIoReactivexObserver_withIoReactivexScheduler_(t, scheduler_)];
}

- (void)dealloc {
  RELEASE_(scheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withIoReactivexScheduler:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;LIoReactivexScheduler;", "(Lio/reactivex/ObservableSource<TT;>;Lio/reactivex/Scheduler;)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "LIoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableUnsubscribeOn = { "ObservableUnsubscribeOn", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 5, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableUnsubscribeOn;
}

@end

void IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_initWithIoReactivexObservableSource_withIoReactivexScheduler_(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn *self, id<IoReactivexObservableSource> source, IoReactivexScheduler *scheduler) {
  IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream_initWithIoReactivexObservableSource_(self, source);
  JreStrongAssign(&self->scheduler_, scheduler);
}

IoReactivexInternalOperatorsObservableObservableUnsubscribeOn *new_IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_initWithIoReactivexObservableSource_withIoReactivexScheduler_(id<IoReactivexObservableSource> source, IoReactivexScheduler *scheduler) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn, initWithIoReactivexObservableSource_withIoReactivexScheduler_, source, scheduler)
}

IoReactivexInternalOperatorsObservableObservableUnsubscribeOn *create_IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_initWithIoReactivexObservableSource_withIoReactivexScheduler_(id<IoReactivexObservableSource> source, IoReactivexScheduler *scheduler) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn, initWithIoReactivexObservableSource_withIoReactivexScheduler_, source, scheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn)

@implementation IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                   withIoReactivexScheduler:(IoReactivexScheduler *)scheduler {
  IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_initWithIoReactivexObserver_withIoReactivexScheduler_(self, actual, scheduler);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  if (IoReactivexInternalDisposablesDisposableHelper_validateWithIoReactivexDisposablesDisposable_withIoReactivexDisposablesDisposable_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    [((id<IoReactivexObserver>) nil_chk(actual_)) onSubscribeWithIoReactivexDisposablesDisposable:self];
  }
}

- (void)onNextWithId:(id)t {
  if (![self get]) {
    [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:t];
  }
}

- (void)onErrorWithNSException:(NSException *)t {
  if ([self get]) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_(t);
    return;
  }
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithNSException:t];
}

- (void)onComplete {
  if (![self get]) {
    [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
  }
}

- (void)dispose {
  if ([self compareAndSetWithBoolean:false withBoolean:true]) {
    [((IoReactivexScheduler *) nil_chk(scheduler_)) scheduleDirectWithJavaLangRunnable:create_IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_1_initWithIoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_(self)];
  }
}

- (jboolean)isDisposed {
  return [self get];
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(scheduler_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:withIoReactivexScheduler:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithNSException:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;LIoReactivexScheduler;", "(Lio/reactivex/Observer<-TT;>;Lio/reactivex/Scheduler;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "Lio/reactivex/Observer<-TT;>;", "LIoReactivexInternalOperatorsObservableObservableUnsubscribeOn;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicBoolean;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver = { "UnsubscribeObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 7, 4, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_initWithIoReactivexObserver_withIoReactivexScheduler_(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver *self, id<IoReactivexObserver> actual, IoReactivexScheduler *scheduler) {
  JavaUtilConcurrentAtomicAtomicBoolean_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssign(&self->scheduler_, scheduler);
}

IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver *new_IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_initWithIoReactivexObserver_withIoReactivexScheduler_(id<IoReactivexObserver> actual, IoReactivexScheduler *scheduler) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver, initWithIoReactivexObserver_withIoReactivexScheduler_, actual, scheduler)
}

IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver *create_IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_initWithIoReactivexObserver_withIoReactivexScheduler_(id<IoReactivexObserver> actual, IoReactivexScheduler *scheduler) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver, initWithIoReactivexObserver_withIoReactivexScheduler_, actual, scheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver)

@implementation IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_1

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver:(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver *)outer$ {
  IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_1_initWithIoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_(self, outer$);
  return self;
}

- (void)run {
  [((id<IoReactivexDisposablesDisposable>) nil_chk(this$0_->s_)) dispose];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, 0, -1 },
  };
  static const void *ptrTable[] = { "Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$UnsubscribeObserver<TT;>;", "LIoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver;", "dispose" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_1 = { "", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x8018, 2, 1, 1, -1, 2, -1, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_1;
}

@end

void IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_1_initWithIoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_1 *self, IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_1 *new_IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_1_initWithIoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver *outer$) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_1, initWithIoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_, outer$)
}

IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_1 *create_IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_1_initWithIoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver *outer$) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_1, initWithIoReactivexInternalOperatorsObservableObservableUnsubscribeOn_UnsubscribeObserver_, outer$)
}
