//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/completable/CompletableOnErrorComplete.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "io/reactivex/Completable.h"
#include "io/reactivex/CompletableObserver.h"
#include "io/reactivex/CompletableSource.h"
#include "io/reactivex/disposables/Disposable.h"
#include "io/reactivex/exceptions/CompositeException.h"
#include "io/reactivex/exceptions/Exceptions.h"
#include "io/reactivex/functions/Predicate.h"
#include "io/reactivex/internal/operators/completable/CompletableOnErrorComplete.h"

@interface IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_1 : NSObject < IoReactivexCompletableObserver > {
 @public
  IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete *this$0_;
  id<IoReactivexCompletableObserver> val$s_;
}

- (instancetype)initWithIoReactivexInternalOperatorsCompletableCompletableOnErrorComplete:(IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete *)outer$
                                                       withIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)capture$0;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_1)

__attribute__((unused)) static void IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_1_initWithIoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_withIoReactivexCompletableObserver_(IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_1 *self, IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete *outer$, id<IoReactivexCompletableObserver> capture$0);

__attribute__((unused)) static IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_1 *new_IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_1_initWithIoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_withIoReactivexCompletableObserver_(IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete *outer$, id<IoReactivexCompletableObserver> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_1 *create_IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_1_initWithIoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_withIoReactivexCompletableObserver_(IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete *outer$, id<IoReactivexCompletableObserver> capture$0);

@implementation IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete

- (instancetype)initWithIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)source
                   withIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)predicate {
  IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_initWithIoReactivexCompletableSource_withIoReactivexFunctionsPredicate_(self, source, predicate);
  return self;
}

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s {
  [((id<IoReactivexCompletableSource>) nil_chk(source_)) subscribeWithIoReactivexCompletableObserver:create_IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_1_initWithIoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_withIoReactivexCompletableObserver_(self, s)];
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(predicate_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexCompletableSource:withIoReactivexFunctionsPredicate:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexCompletableObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexCompletableSource;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "predicate_", "LIoReactivexFunctionsPredicate;", .constantValue.asLong = 0, 0x10, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexCompletableSource;LIoReactivexFunctionsPredicate;", "(Lio/reactivex/CompletableSource;Lio/reactivex/functions/Predicate<-Ljava/lang/Throwable;>;)V", "subscribeActual", "LIoReactivexCompletableObserver;", "Lio/reactivex/functions/Predicate<-Ljava/lang/Throwable;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete = { "CompletableOnErrorComplete", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_initWithIoReactivexCompletableSource_withIoReactivexFunctionsPredicate_(IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete *self, id<IoReactivexCompletableSource> source, id<IoReactivexFunctionsPredicate> predicate) {
  IoReactivexCompletable_init(self);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->predicate_, predicate);
}

IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete *new_IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_initWithIoReactivexCompletableSource_withIoReactivexFunctionsPredicate_(id<IoReactivexCompletableSource> source, id<IoReactivexFunctionsPredicate> predicate) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete, initWithIoReactivexCompletableSource_withIoReactivexFunctionsPredicate_, source, predicate)
}

IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete *create_IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_initWithIoReactivexCompletableSource_withIoReactivexFunctionsPredicate_(id<IoReactivexCompletableSource> source, id<IoReactivexFunctionsPredicate> predicate) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete, initWithIoReactivexCompletableSource_withIoReactivexFunctionsPredicate_, source, predicate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete)

@implementation IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_1

- (instancetype)initWithIoReactivexInternalOperatorsCompletableCompletableOnErrorComplete:(IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete *)outer$
                                                       withIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)capture$0 {
  IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_1_initWithIoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_withIoReactivexCompletableObserver_(self, outer$, capture$0);
  return self;
}

- (void)onComplete {
  [((id<IoReactivexCompletableObserver>) nil_chk(val$s_)) onComplete];
}

- (void)onErrorWithNSException:(NSException *)e {
  jboolean b;
  @try {
    b = [((id<IoReactivexFunctionsPredicate>) nil_chk(this$0_->predicate_)) testWithId:e];
  }
  @catch (NSException *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(ex);
    [((id<IoReactivexCompletableObserver>) nil_chk(val$s_)) onErrorWithNSException:create_IoReactivexExceptionsCompositeException_initWithNSExceptionArray_([IOSObjectArray arrayWithObjects:(id[]){ e, ex } count:2 type:NSException_class_()])];
    return;
  }
  if (b) {
    [((id<IoReactivexCompletableObserver>) nil_chk(val$s_)) onComplete];
  }
  else {
    [((id<IoReactivexCompletableObserver>) nil_chk(val$s_)) onErrorWithNSException:e];
  }
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  [((id<IoReactivexCompletableObserver>) nil_chk(val$s_)) onSubscribeWithIoReactivexDisposablesDisposable:d];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsCompletableCompletableOnErrorComplete:withIoReactivexCompletableObserver:);
  methods[1].selector = @selector(onComplete);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsCompletableCompletableOnErrorComplete;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$s_", "LIoReactivexCompletableObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onSubscribe", "LIoReactivexDisposablesDisposable;", "LIoReactivexInternalOperatorsCompletableCompletableOnErrorComplete;", "subscribeActualWithIoReactivexCompletableObserver:" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_1 = { "", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x8018, 4, 2, 4, -1, 5, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_1;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_1_initWithIoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_withIoReactivexCompletableObserver_(IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_1 *self, IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete *outer$, id<IoReactivexCompletableObserver> capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$s_, capture$0);
  NSObject_init(self);
}

IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_1 *new_IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_1_initWithIoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_withIoReactivexCompletableObserver_(IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete *outer$, id<IoReactivexCompletableObserver> capture$0) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_1, initWithIoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_withIoReactivexCompletableObserver_, outer$, capture$0)
}

IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_1 *create_IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_1_initWithIoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_withIoReactivexCompletableObserver_(IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete *outer$, id<IoReactivexCompletableObserver> capture$0) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_1, initWithIoReactivexInternalOperatorsCompletableCompletableOnErrorComplete_withIoReactivexCompletableObserver_, outer$, capture$0)
}
