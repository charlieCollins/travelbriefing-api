//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer))
#define IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "io/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream.h"

@protocol IoReactivexFunctionsAction;
@protocol OrgReactivestreamsPublisher;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  jint bufferSize_;
  jboolean unbounded_;
  jboolean delayError_;
  id<IoReactivexFunctionsAction> onOverflow_;
}

#pragma mark Public

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                                            withInt:(jint)bufferSize
                                        withBoolean:(jboolean)unbounded
                                        withBoolean:(jboolean)delayError
                     withIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onOverflow;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer, onOverflow_, id<IoReactivexFunctionsAction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_initWithOrgReactivestreamsPublisher_withInt_withBoolean_withBoolean_withIoReactivexFunctionsAction_(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer *self, id<OrgReactivestreamsPublisher> source, jint bufferSize, jboolean unbounded, jboolean delayError, id<IoReactivexFunctionsAction> onOverflow);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer *new_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_initWithOrgReactivestreamsPublisher_withInt_withBoolean_withBoolean_withIoReactivexFunctionsAction_(id<OrgReactivestreamsPublisher> source, jint bufferSize, jboolean unbounded, jboolean delayError, id<IoReactivexFunctionsAction> onOverflow) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer *create_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_initWithOrgReactivestreamsPublisher_withInt_withBoolean_withBoolean_withIoReactivexFunctionsAction_(id<OrgReactivestreamsPublisher> source, jint bufferSize, jboolean unbounded, jboolean delayError, id<IoReactivexFunctionsAction> onOverflow);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber_

#define RESTRICT_IoReactivexInternalSubscriptionsBasicIntQueueSubscription 1
#define INCLUDE_IoReactivexInternalSubscriptionsBasicIntQueueSubscription 1
#include "io/reactivex/internal/subscriptions/BasicIntQueueSubscription.h"

#define RESTRICT_OrgReactivestreamsSubscriber 1
#define INCLUDE_OrgReactivestreamsSubscriber 1
#include "org/reactivestreams/Subscriber.h"

@class JavaUtilConcurrentAtomicAtomicLong;
@protocol IoReactivexFunctionsAction;
@protocol IoReactivexInternalFuseableSimplePlainQueue;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber : IoReactivexInternalSubscriptionsBasicIntQueueSubscription < OrgReactivestreamsSubscriber > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  id<IoReactivexInternalFuseableSimplePlainQueue> queue_;
  jboolean delayError_;
  id<IoReactivexFunctionsAction> onOverflow_;
  id<OrgReactivestreamsSubscription> s_;
  volatile_jboolean cancelled_;
  volatile_jboolean done_;
  NSException *error_;
  JavaUtilConcurrentAtomicAtomicLong *requested_;
  jboolean outputFused_;
}

#pragma mark Public

- (void)cancel;

- (void)clear;

- (jboolean)isEmpty;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (id)poll;

- (void)requestWithLong:(jlong)n;

- (jint)requestFusionWithInt:(jint)mode;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                             withInt:(jint)bufferSize
                                         withBoolean:(jboolean)unbounded
                                         withBoolean:(jboolean)delayError
                      withIoReactivexFunctionsAction:(id<IoReactivexFunctionsAction>)onOverflow;

- (jboolean)checkTerminatedWithBoolean:(jboolean)d
                           withBoolean:(jboolean)empty
      withOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)a;

- (void)drain;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber, queue_, id<IoReactivexInternalFuseableSimplePlainQueue>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber, onOverflow_, id<IoReactivexFunctionsAction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber, s_, id<OrgReactivestreamsSubscription>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber, error_, NSException *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber, requested_, JavaUtilConcurrentAtomicAtomicLong *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber_initWithOrgReactivestreamsSubscriber_withInt_withBoolean_withBoolean_withIoReactivexFunctionsAction_(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber *self, id<OrgReactivestreamsSubscriber> actual, jint bufferSize, jboolean unbounded, jboolean delayError, id<IoReactivexFunctionsAction> onOverflow);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber_initWithOrgReactivestreamsSubscriber_withInt_withBoolean_withBoolean_withIoReactivexFunctionsAction_(id<OrgReactivestreamsSubscriber> actual, jint bufferSize, jboolean unbounded, jboolean delayError, id<IoReactivexFunctionsAction> onOverflow) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber_initWithOrgReactivestreamsSubscriber_withInt_withBoolean_withBoolean_withIoReactivexFunctionsAction_(id<OrgReactivestreamsSubscriber> actual, jint bufferSize, jboolean unbounded, jboolean delayError, id<IoReactivexFunctionsAction> onOverflow);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer_BackpressureBufferSubscriber)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableOnBackpressureBuffer")
