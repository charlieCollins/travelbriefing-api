//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier

#if !defined (IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier))
#define IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "io/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream.h"

@protocol JavaUtilCollection;
@protocol JavaUtilConcurrentCallable;
@protocol OrgReactivestreamsPublisher;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  id<JavaUtilConcurrentCallable> boundarySupplier_;
  id<JavaUtilConcurrentCallable> bufferSupplier_;
}

#pragma mark Public

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                     withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)boundarySupplier
                     withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier;

- (id<JavaUtilCollection>)blockingFirst;

- (id<JavaUtilCollection>)blockingFirstWithId:(id<JavaUtilCollection>)arg0;

- (id<JavaUtilCollection>)blockingLast;

- (id<JavaUtilCollection>)blockingLastWithId:(id<JavaUtilCollection>)arg0;

- (id<JavaUtilCollection>)blockingSingle;

- (id<JavaUtilCollection>)blockingSingleWithId:(id<JavaUtilCollection>)arg0;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier, boundarySupplier_, id<JavaUtilConcurrentCallable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier, bufferSupplier_, id<JavaUtilConcurrentCallable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_initWithOrgReactivestreamsPublisher_withJavaUtilConcurrentCallable_withJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier *self, id<OrgReactivestreamsPublisher> source, id<JavaUtilConcurrentCallable> boundarySupplier, id<JavaUtilConcurrentCallable> bufferSupplier);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier *new_IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_initWithOrgReactivestreamsPublisher_withJavaUtilConcurrentCallable_withJavaUtilConcurrentCallable_(id<OrgReactivestreamsPublisher> source, id<JavaUtilConcurrentCallable> boundarySupplier, id<JavaUtilConcurrentCallable> bufferSupplier) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier *create_IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_initWithOrgReactivestreamsPublisher_withJavaUtilConcurrentCallable_withJavaUtilConcurrentCallable_(id<OrgReactivestreamsPublisher> source, id<JavaUtilConcurrentCallable> boundarySupplier, id<JavaUtilConcurrentCallable> bufferSupplier);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySupplierSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySupplierSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySupplierSubscriber_

#define RESTRICT_IoReactivexInternalSubscribersQueueDrainSubscriber 1
#define INCLUDE_IoReactivexInternalSubscribersQueueDrainSubscriber 1
#include "io/reactivex/internal/subscribers/QueueDrainSubscriber.h"

#define RESTRICT_OrgReactivestreamsSubscriber 1
#define INCLUDE_OrgReactivestreamsSubscriber 1
#include "org/reactivestreams/Subscriber.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "org/reactivestreams/Subscription.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "io/reactivex/disposables/Disposable.h"

@class JavaUtilConcurrentAtomicAtomicReference;
@protocol JavaUtilCollection;
@protocol JavaUtilConcurrentCallable;

@interface IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySupplierSubscriber : IoReactivexInternalSubscribersQueueDrainSubscriber < OrgReactivestreamsSubscriber, OrgReactivestreamsSubscription, IoReactivexDisposablesDisposable > {
 @public
  id<JavaUtilConcurrentCallable> bufferSupplier_;
  id<JavaUtilConcurrentCallable> boundarySupplier_;
  id<OrgReactivestreamsSubscription> s_;
  JavaUtilConcurrentAtomicAtomicReference *other_;
  id<JavaUtilCollection> buffer_;
}

#pragma mark Public

- (jboolean)acceptWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)a
                                            withId:(id<JavaUtilCollection>)v;

- (void)cancel;

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                      withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier
                      withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)boundarySupplier;

- (void)disposeOther;

- (void)next;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySupplierSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySupplierSubscriber, bufferSupplier_, id<JavaUtilConcurrentCallable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySupplierSubscriber, boundarySupplier_, id<JavaUtilConcurrentCallable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySupplierSubscriber, s_, id<OrgReactivestreamsSubscription>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySupplierSubscriber, other_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySupplierSubscriber, buffer_, id<JavaUtilCollection>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySupplierSubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySupplierSubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<JavaUtilConcurrentCallable> bufferSupplier, id<JavaUtilConcurrentCallable> boundarySupplier);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySupplierSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySupplierSubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withJavaUtilConcurrentCallable_(id<OrgReactivestreamsSubscriber> actual, id<JavaUtilConcurrentCallable> bufferSupplier, id<JavaUtilConcurrentCallable> boundarySupplier) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySupplierSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySupplierSubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withJavaUtilConcurrentCallable_(id<OrgReactivestreamsSubscriber> actual, id<JavaUtilConcurrentCallable> bufferSupplier, id<JavaUtilConcurrentCallable> boundarySupplier);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySupplierSubscriber)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySubscriber_

#define RESTRICT_IoReactivexSubscribersDisposableSubscriber 1
#define INCLUDE_IoReactivexSubscribersDisposableSubscriber 1
#include "io/reactivex/subscribers/DisposableSubscriber.h"

@class IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySupplierSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySubscriber : IoReactivexSubscribersDisposableSubscriber {
 @public
  IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySupplierSubscriber *parent_;
  jboolean once_;
}

#pragma mark Public

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySupplierSubscriber:(IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySupplierSubscriber *)parent;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySubscriber, parent_, IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySupplierSubscriber *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySupplierSubscriber_(IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySubscriber *self, IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySupplierSubscriber *parent);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySubscriber *new_IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySupplierSubscriber_(IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySupplierSubscriber *parent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySubscriber *create_IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySupplierSubscriber_(IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySupplierSubscriber *parent);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier_BufferBoundarySubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableBufferBoundarySupplier")
