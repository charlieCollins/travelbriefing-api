//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/flowable/FlowableMap.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableMap")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableMap
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableMap 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableMap 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableMap

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableMap_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableMap || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableMap))
#define IoReactivexInternalOperatorsFlowableFlowableMap_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "io/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream.h"

@protocol IoReactivexFunctionsFunction;
@protocol OrgReactivestreamsPublisher;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableMap : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  id<IoReactivexFunctionsFunction> mapper_;
}

#pragma mark Public

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableMap)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableMap, mapper_, id<IoReactivexFunctionsFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableMap_initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsFlowableFlowableMap *self, id<OrgReactivestreamsPublisher> source, id<IoReactivexFunctionsFunction> mapper);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableMap *new_IoReactivexInternalOperatorsFlowableFlowableMap_initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_(id<OrgReactivestreamsPublisher> source, id<IoReactivexFunctionsFunction> mapper) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableMap *create_IoReactivexInternalOperatorsFlowableFlowableMap_initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_(id<OrgReactivestreamsPublisher> source, id<IoReactivexFunctionsFunction> mapper);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableMap)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableMap_MapSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableMap || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableMap_MapSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableMap_MapSubscriber_

#define RESTRICT_IoReactivexInternalSubscribersBasicFuseableSubscriber 1
#define INCLUDE_IoReactivexInternalSubscribersBasicFuseableSubscriber 1
#include "io/reactivex/internal/subscribers/BasicFuseableSubscriber.h"

@protocol IoReactivexFunctionsFunction;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableMap_MapSubscriber : IoReactivexInternalSubscribersBasicFuseableSubscriber {
 @public
  id<IoReactivexFunctionsFunction> mapper_;
}

#pragma mark Public

- (void)onNextWithId:(id)t;

- (id)poll;

- (jint)requestFusionWithInt:(jint)mode;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                    withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableMap_MapSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableMap_MapSubscriber, mapper_, id<IoReactivexFunctionsFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableMap_MapSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsFlowableFlowableMap_MapSubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableMap_MapSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableMap_MapSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableMap_MapSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableMap_MapSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableMap_MapSubscriber)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableMap_MapConditionalSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableMap || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableMap_MapConditionalSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableMap_MapConditionalSubscriber_

#define RESTRICT_IoReactivexInternalSubscribersBasicFuseableConditionalSubscriber 1
#define INCLUDE_IoReactivexInternalSubscribersBasicFuseableConditionalSubscriber 1
#include "io/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber.h"

@protocol IoReactivexFunctionsFunction;
@protocol IoReactivexInternalFuseableConditionalSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableMap_MapConditionalSubscriber : IoReactivexInternalSubscribersBasicFuseableConditionalSubscriber {
 @public
  id<IoReactivexFunctionsFunction> mapper_;
}

#pragma mark Public

- (void)onNextWithId:(id)t;

- (id)poll;

- (jint)requestFusionWithInt:(jint)mode;

- (jboolean)tryOnNextWithId:(id)t;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalFuseableConditionalSubscriber:(id<IoReactivexInternalFuseableConditionalSubscriber>)actual
                                        withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)function;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableMap_MapConditionalSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableMap_MapConditionalSubscriber, mapper_, id<IoReactivexFunctionsFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableMap_MapConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsFlowableFlowableMap_MapConditionalSubscriber *self, id<IoReactivexInternalFuseableConditionalSubscriber> actual, id<IoReactivexFunctionsFunction> function);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableMap_MapConditionalSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableMap_MapConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsFunction_(id<IoReactivexInternalFuseableConditionalSubscriber> actual, id<IoReactivexFunctionsFunction> function) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableMap_MapConditionalSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableMap_MapConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexFunctionsFunction_(id<IoReactivexInternalFuseableConditionalSubscriber> actual, id<IoReactivexFunctionsFunction> function);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableMap_MapConditionalSubscriber)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableMap")
