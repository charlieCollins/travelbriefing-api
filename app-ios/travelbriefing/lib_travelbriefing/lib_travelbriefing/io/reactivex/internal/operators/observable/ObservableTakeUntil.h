//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/observable/ObservableTakeUntil.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableTakeUntil")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableTakeUntil
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableTakeUntil 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableTakeUntil 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableTakeUntil

#if !defined (IoReactivexInternalOperatorsObservableObservableTakeUntil_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableTakeUntil || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableTakeUntil))
#define IoReactivexInternalOperatorsObservableObservableTakeUntil_

#define RESTRICT_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#include "io/reactivex/internal/operators/observable/AbstractObservableWithUpstream.h"

@protocol IoReactivexObservableSource;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservableTakeUntil : IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream {
 @public
  id<IoReactivexObservableSource> other_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                    withIoReactivexObservableSource:(id<IoReactivexObservableSource>)other;

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)child;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableTakeUntil)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableTakeUntil, other_, id<IoReactivexObservableSource>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableTakeUntil_initWithIoReactivexObservableSource_withIoReactivexObservableSource_(IoReactivexInternalOperatorsObservableObservableTakeUntil *self, id<IoReactivexObservableSource> source, id<IoReactivexObservableSource> other);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableTakeUntil *new_IoReactivexInternalOperatorsObservableObservableTakeUntil_initWithIoReactivexObservableSource_withIoReactivexObservableSource_(id<IoReactivexObservableSource> source, id<IoReactivexObservableSource> other) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableTakeUntil *create_IoReactivexInternalOperatorsObservableObservableTakeUntil_initWithIoReactivexObservableSource_withIoReactivexObservableSource_(id<IoReactivexObservableSource> source, id<IoReactivexObservableSource> other);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableTakeUntil)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableTakeUntil_TakeUntilObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableTakeUntil || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableTakeUntil_TakeUntilObserver))
#define IoReactivexInternalOperatorsObservableObservableTakeUntil_TakeUntilObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicBoolean 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicBoolean 1
#include "java/util/concurrent/atomic/AtomicBoolean.h"

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "io/reactivex/Observer.h"

@class IoReactivexInternalDisposablesArrayCompositeDisposable;
@protocol IoReactivexDisposablesDisposable;

@interface IoReactivexInternalOperatorsObservableObservableTakeUntil_TakeUntilObserver : JavaUtilConcurrentAtomicAtomicBoolean < IoReactivexObserver > {
 @public
  id<IoReactivexObserver> actual_;
  IoReactivexInternalDisposablesArrayCompositeDisposable *frc_;
  id<IoReactivexDisposablesDisposable> s_;
}

#pragma mark Public

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
withIoReactivexInternalDisposablesArrayCompositeDisposable:(IoReactivexInternalDisposablesArrayCompositeDisposable *)frc;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableTakeUntil_TakeUntilObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableTakeUntil_TakeUntilObserver, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableTakeUntil_TakeUntilObserver, frc_, IoReactivexInternalDisposablesArrayCompositeDisposable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableTakeUntil_TakeUntilObserver, s_, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableTakeUntil_TakeUntilObserver_initWithIoReactivexObserver_withIoReactivexInternalDisposablesArrayCompositeDisposable_(IoReactivexInternalOperatorsObservableObservableTakeUntil_TakeUntilObserver *self, id<IoReactivexObserver> actual, IoReactivexInternalDisposablesArrayCompositeDisposable *frc);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableTakeUntil_TakeUntilObserver *new_IoReactivexInternalOperatorsObservableObservableTakeUntil_TakeUntilObserver_initWithIoReactivexObserver_withIoReactivexInternalDisposablesArrayCompositeDisposable_(id<IoReactivexObserver> actual, IoReactivexInternalDisposablesArrayCompositeDisposable *frc) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableTakeUntil_TakeUntilObserver *create_IoReactivexInternalOperatorsObservableObservableTakeUntil_TakeUntilObserver_initWithIoReactivexObserver_withIoReactivexInternalDisposablesArrayCompositeDisposable_(id<IoReactivexObserver> actual, IoReactivexInternalDisposablesArrayCompositeDisposable *frc);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableTakeUntil_TakeUntilObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableTakeUntil")
