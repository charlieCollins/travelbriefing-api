//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/flowable/FlowableRetryWhen.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableRetryWhen")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableRetryWhen
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableRetryWhen 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableRetryWhen 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableRetryWhen

#if !defined (IoReactivexInternalOperatorsFlowableFlowableRetryWhen_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableRetryWhen || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableRetryWhen))
#define IoReactivexInternalOperatorsFlowableFlowableRetryWhen_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "io/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream.h"

@protocol IoReactivexFunctionsFunction;
@protocol OrgReactivestreamsPublisher;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableRetryWhen : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  id<IoReactivexFunctionsFunction> handler_;
}

#pragma mark Public

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)handler;

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableRetryWhen)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableRetryWhen, handler_, id<IoReactivexFunctionsFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableRetryWhen_initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsFlowableFlowableRetryWhen *self, id<OrgReactivestreamsPublisher> source, id<IoReactivexFunctionsFunction> handler);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableRetryWhen *new_IoReactivexInternalOperatorsFlowableFlowableRetryWhen_initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_(id<OrgReactivestreamsPublisher> source, id<IoReactivexFunctionsFunction> handler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableRetryWhen *create_IoReactivexInternalOperatorsFlowableFlowableRetryWhen_initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_(id<OrgReactivestreamsPublisher> source, id<IoReactivexFunctionsFunction> handler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableRetryWhen)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableRetryWhen_RetryWhenSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableRetryWhen || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableRetryWhen_RetryWhenSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableRetryWhen_RetryWhenSubscriber_

#define RESTRICT_IoReactivexInternalOperatorsFlowableFlowableRepeatWhen 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenSourceSubscriber 1
#include "io/reactivex/internal/operators/flowable/FlowableRepeatWhen.h"

@class IoReactivexProcessorsFlowableProcessor;
@protocol OrgReactivestreamsSubscriber;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsFlowableFlowableRetryWhen_RetryWhenSubscriber : IoReactivexInternalOperatorsFlowableFlowableRepeatWhen_WhenSourceSubscriber

#pragma mark Public

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
          withIoReactivexProcessorsFlowableProcessor:(IoReactivexProcessorsFlowableProcessor *)processor
                  withOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)receiver;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableRetryWhen_RetryWhenSubscriber)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableRetryWhen_RetryWhenSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexProcessorsFlowableProcessor_withOrgReactivestreamsSubscription_(IoReactivexInternalOperatorsFlowableFlowableRetryWhen_RetryWhenSubscriber *self, id<OrgReactivestreamsSubscriber> actual, IoReactivexProcessorsFlowableProcessor *processor, id<OrgReactivestreamsSubscription> receiver);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableRetryWhen_RetryWhenSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableRetryWhen_RetryWhenSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexProcessorsFlowableProcessor_withOrgReactivestreamsSubscription_(id<OrgReactivestreamsSubscriber> actual, IoReactivexProcessorsFlowableProcessor *processor, id<OrgReactivestreamsSubscription> receiver) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableRetryWhen_RetryWhenSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableRetryWhen_RetryWhenSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexProcessorsFlowableProcessor_withOrgReactivestreamsSubscription_(id<OrgReactivestreamsSubscriber> actual, IoReactivexProcessorsFlowableProcessor *processor, id<OrgReactivestreamsSubscription> receiver);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableRetryWhen_RetryWhenSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableRetryWhen")
