//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/completable/CompletableDelay.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableDelay")
#ifdef RESTRICT_IoReactivexInternalOperatorsCompletableCompletableDelay
#define INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableDelay 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableDelay 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsCompletableCompletableDelay

#if !defined (IoReactivexInternalOperatorsCompletableCompletableDelay_) && (INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableDelay || defined(INCLUDE_IoReactivexInternalOperatorsCompletableCompletableDelay))
#define IoReactivexInternalOperatorsCompletableCompletableDelay_

#define RESTRICT_IoReactivexCompletable 1
#define INCLUDE_IoReactivexCompletable 1
#include "io/reactivex/Completable.h"

@class IoReactivexScheduler;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexCompletableObserver;
@protocol IoReactivexCompletableSource;

@interface IoReactivexInternalOperatorsCompletableCompletableDelay : IoReactivexCompletable {
 @public
  id<IoReactivexCompletableSource> source_;
  jlong delay_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler *scheduler_;
  jboolean delayError_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)source
                                            withLong:(jlong)delay
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                            withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                         withBoolean:(jboolean)delayError;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsCompletableCompletableDelay)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableDelay, source_, id<IoReactivexCompletableSource>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableDelay, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableDelay, scheduler_, IoReactivexScheduler *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsCompletableCompletableDelay_initWithIoReactivexCompletableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withBoolean_(IoReactivexInternalOperatorsCompletableCompletableDelay *self, id<IoReactivexCompletableSource> source, jlong delay, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jboolean delayError);

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableDelay *new_IoReactivexInternalOperatorsCompletableCompletableDelay_initWithIoReactivexCompletableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withBoolean_(id<IoReactivexCompletableSource> source, jlong delay, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jboolean delayError) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableDelay *create_IoReactivexInternalOperatorsCompletableCompletableDelay_initWithIoReactivexCompletableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withBoolean_(id<IoReactivexCompletableSource> source, jlong delay, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, jboolean delayError);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsCompletableCompletableDelay)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableDelay")
