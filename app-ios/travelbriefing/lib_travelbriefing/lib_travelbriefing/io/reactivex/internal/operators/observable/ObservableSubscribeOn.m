//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/observable/ObservableSubscribeOn.java
//

#include "J2ObjC_source.h"
#include "io/reactivex/ObservableSource.h"
#include "io/reactivex/Observer.h"
#include "io/reactivex/Scheduler.h"
#include "io/reactivex/disposables/Disposable.h"
#include "io/reactivex/internal/disposables/DisposableHelper.h"
#include "io/reactivex/internal/operators/observable/AbstractObservableWithUpstream.h"
#include "io/reactivex/internal/operators/observable/ObservableSubscribeOn.h"
#include "java/lang/Runnable.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface IoReactivexInternalOperatorsObservableObservableSubscribeOn_1 : NSObject < JavaLangRunnable > {
 @public
  IoReactivexInternalOperatorsObservableObservableSubscribeOn *this$0_;
  IoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver *val$parent_;
}

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableSubscribeOn:(IoReactivexInternalOperatorsObservableObservableSubscribeOn *)outer$
withIoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver:(IoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver *)capture$0;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableSubscribeOn_1)

__attribute__((unused)) static void IoReactivexInternalOperatorsObservableObservableSubscribeOn_1_initWithIoReactivexInternalOperatorsObservableObservableSubscribeOn_withIoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver_(IoReactivexInternalOperatorsObservableObservableSubscribeOn_1 *self, IoReactivexInternalOperatorsObservableObservableSubscribeOn *outer$, IoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver *capture$0);

__attribute__((unused)) static IoReactivexInternalOperatorsObservableObservableSubscribeOn_1 *new_IoReactivexInternalOperatorsObservableObservableSubscribeOn_1_initWithIoReactivexInternalOperatorsObservableObservableSubscribeOn_withIoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver_(IoReactivexInternalOperatorsObservableObservableSubscribeOn *outer$, IoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalOperatorsObservableObservableSubscribeOn_1 *create_IoReactivexInternalOperatorsObservableObservableSubscribeOn_1_initWithIoReactivexInternalOperatorsObservableObservableSubscribeOn_withIoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver_(IoReactivexInternalOperatorsObservableObservableSubscribeOn *outer$, IoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver *capture$0);

inline jlong IoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver_serialVersionUID 8094547886072529208LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsObservableObservableSubscribeOn

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                           withIoReactivexScheduler:(IoReactivexScheduler *)scheduler {
  IoReactivexInternalOperatorsObservableObservableSubscribeOn_initWithIoReactivexObservableSource_withIoReactivexScheduler_(self, source, scheduler);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)s {
  IoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver *parent = create_IoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver_initWithIoReactivexObserver_(s);
  [((id<IoReactivexObserver>) nil_chk(s)) onSubscribeWithIoReactivexDisposablesDisposable:parent];
  [parent setDisposableWithIoReactivexDisposablesDisposable:[((IoReactivexScheduler *) nil_chk(scheduler_)) scheduleDirectWithJavaLangRunnable:create_IoReactivexInternalOperatorsObservableObservableSubscribeOn_1_initWithIoReactivexInternalOperatorsObservableObservableSubscribeOn_withIoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver_(self, parent)]];
}

- (void)dealloc {
  RELEASE_(scheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableSource:withIoReactivexScheduler:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableSource;LIoReactivexScheduler;", "(Lio/reactivex/ObservableSource<TT;>;Lio/reactivex/Scheduler;)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "LIoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver;", "<T:Ljava/lang/Object;>Lio/reactivex/internal/operators/observable/AbstractObservableWithUpstream<TT;TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableSubscribeOn = { "ObservableSubscribeOn", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 5, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableSubscribeOn;
}

@end

void IoReactivexInternalOperatorsObservableObservableSubscribeOn_initWithIoReactivexObservableSource_withIoReactivexScheduler_(IoReactivexInternalOperatorsObservableObservableSubscribeOn *self, id<IoReactivexObservableSource> source, IoReactivexScheduler *scheduler) {
  IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream_initWithIoReactivexObservableSource_(self, source);
  JreStrongAssign(&self->scheduler_, scheduler);
}

IoReactivexInternalOperatorsObservableObservableSubscribeOn *new_IoReactivexInternalOperatorsObservableObservableSubscribeOn_initWithIoReactivexObservableSource_withIoReactivexScheduler_(id<IoReactivexObservableSource> source, IoReactivexScheduler *scheduler) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableSubscribeOn, initWithIoReactivexObservableSource_withIoReactivexScheduler_, source, scheduler)
}

IoReactivexInternalOperatorsObservableObservableSubscribeOn *create_IoReactivexInternalOperatorsObservableObservableSubscribeOn_initWithIoReactivexObservableSource_withIoReactivexScheduler_(id<IoReactivexObservableSource> source, IoReactivexScheduler *scheduler) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableSubscribeOn, initWithIoReactivexObservableSource_withIoReactivexScheduler_, source, scheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableSubscribeOn)

@implementation IoReactivexInternalOperatorsObservableObservableSubscribeOn_1

- (instancetype)initWithIoReactivexInternalOperatorsObservableObservableSubscribeOn:(IoReactivexInternalOperatorsObservableObservableSubscribeOn *)outer$
withIoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver:(IoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver *)capture$0 {
  IoReactivexInternalOperatorsObservableObservableSubscribeOn_1_initWithIoReactivexInternalOperatorsObservableObservableSubscribeOn_withIoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver_(self, outer$, capture$0);
  return self;
}

- (void)run {
  [((id<IoReactivexObservableSource>) nil_chk(this$0_->source_)) subscribeWithIoReactivexObserver:val$parent_];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsObservableObservableSubscribeOn:withIoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsObservableObservableSubscribeOn;", .constantValue.asLong = 0, 0x1012, -1, -1, 0, -1 },
    { "val$parent_", "LIoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "Lio/reactivex/internal/operators/observable/ObservableSubscribeOn<TT;>;", "Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$SubscribeOnObserver<TT;>;", "LIoReactivexInternalOperatorsObservableObservableSubscribeOn;", "subscribeActualWithIoReactivexObserver:" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableSubscribeOn_1 = { "", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x8018, 2, 2, 2, -1, 3, -1, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableSubscribeOn_1;
}

@end

void IoReactivexInternalOperatorsObservableObservableSubscribeOn_1_initWithIoReactivexInternalOperatorsObservableObservableSubscribeOn_withIoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver_(IoReactivexInternalOperatorsObservableObservableSubscribeOn_1 *self, IoReactivexInternalOperatorsObservableObservableSubscribeOn *outer$, IoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$parent_, capture$0);
  NSObject_init(self);
}

IoReactivexInternalOperatorsObservableObservableSubscribeOn_1 *new_IoReactivexInternalOperatorsObservableObservableSubscribeOn_1_initWithIoReactivexInternalOperatorsObservableObservableSubscribeOn_withIoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver_(IoReactivexInternalOperatorsObservableObservableSubscribeOn *outer$, IoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver *capture$0) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableSubscribeOn_1, initWithIoReactivexInternalOperatorsObservableObservableSubscribeOn_withIoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver_, outer$, capture$0)
}

IoReactivexInternalOperatorsObservableObservableSubscribeOn_1 *create_IoReactivexInternalOperatorsObservableObservableSubscribeOn_1_initWithIoReactivexInternalOperatorsObservableObservableSubscribeOn_withIoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver_(IoReactivexInternalOperatorsObservableObservableSubscribeOn *outer$, IoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver *capture$0) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableSubscribeOn_1, initWithIoReactivexInternalOperatorsObservableObservableSubscribeOn_withIoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver_, outer$, capture$0)
}

@implementation IoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual {
  IoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver_initWithIoReactivexObserver_(self, actual);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self->s_, s);
}

- (void)onNextWithId:(id)t {
  [((id<IoReactivexObserver>) nil_chk(actual_)) onNextWithId:t];
}

- (void)onErrorWithNSException:(NSException *)t {
  [((id<IoReactivexObserver>) nil_chk(actual_)) onErrorWithNSException:t];
}

- (void)onComplete {
  [((id<IoReactivexObserver>) nil_chk(actual_)) onComplete];
}

- (void)dispose {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(s_);
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (jboolean)isDisposed {
  return IoReactivexInternalDisposablesDisposableHelper_isDisposedWithIoReactivexDisposablesDisposable_([self get]);
}

- (void)setDisposableWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, d);
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithNSException:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(dispose);
  methods[6].selector = @selector(isDisposed);
  methods[7].selector = @selector(setDisposableWithIoReactivexDisposablesDisposable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "s_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "setDisposable", "Lio/reactivex/Observer<-TT;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;", "LIoReactivexInternalOperatorsObservableObservableSubscribeOn;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/Observer<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver = { "SubscribeOnObserver", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 8, 3, 12, -1, -1, 13, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver;
}

@end

void IoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver_initWithIoReactivexObserver_(IoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver *self, id<IoReactivexObserver> actual) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssignAndConsume(&self->s_, new_JavaUtilConcurrentAtomicAtomicReference_init());
}

IoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver *new_IoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver_initWithIoReactivexObserver_(id<IoReactivexObserver> actual) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver, initWithIoReactivexObserver_, actual)
}

IoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver *create_IoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver_initWithIoReactivexObserver_(id<IoReactivexObserver> actual) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver, initWithIoReactivexObserver_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableSubscribeOn_SubscribeOnObserver)
