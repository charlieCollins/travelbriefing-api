//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/flowable/FlowablePublish.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "io/reactivex/Flowable.h"
#include "io/reactivex/exceptions/Exceptions.h"
#include "io/reactivex/exceptions/MissingBackpressureException.h"
#include "io/reactivex/flowables/ConnectableFlowable.h"
#include "io/reactivex/functions/Consumer.h"
#include "io/reactivex/internal/fuseable/QueueFuseable.h"
#include "io/reactivex/internal/fuseable/QueueSubscription.h"
#include "io/reactivex/internal/fuseable/SimpleQueue.h"
#include "io/reactivex/internal/operators/flowable/FlowablePublish.h"
#include "io/reactivex/internal/queue/SpscArrayQueue.h"
#include "io/reactivex/internal/subscriptions/SubscriptionHelper.h"
#include "io/reactivex/internal/util/BackpressureHelper.h"
#include "io/reactivex/internal/util/ExceptionHelper.h"
#include "io/reactivex/internal/util/NotificationLite.h"
#include "io/reactivex/plugins/RxJavaPlugins.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/reactivestreams/Publisher.h"
#include "org/reactivestreams/Subscriber.h"
#include "org/reactivestreams/Subscription.h"

@interface IoReactivexInternalOperatorsFlowableFlowablePublish ()

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)onSubscribe
                    withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
        withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)current
                                            withInt:(jint)bufferSize;

@end

__attribute__((unused)) static void IoReactivexInternalOperatorsFlowableFlowablePublish_initWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withJavaUtilConcurrentAtomicAtomicReference_withInt_(IoReactivexInternalOperatorsFlowableFlowablePublish *self, id<OrgReactivestreamsPublisher> onSubscribe, id<OrgReactivestreamsPublisher> source, JavaUtilConcurrentAtomicAtomicReference *current, jint bufferSize);

__attribute__((unused)) static IoReactivexInternalOperatorsFlowableFlowablePublish *new_IoReactivexInternalOperatorsFlowableFlowablePublish_initWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withJavaUtilConcurrentAtomicAtomicReference_withInt_(id<OrgReactivestreamsPublisher> onSubscribe, id<OrgReactivestreamsPublisher> source, JavaUtilConcurrentAtomicAtomicReference *current, jint bufferSize) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalOperatorsFlowableFlowablePublish *create_IoReactivexInternalOperatorsFlowableFlowablePublish_initWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withJavaUtilConcurrentAtomicAtomicReference_withInt_(id<OrgReactivestreamsPublisher> onSubscribe, id<OrgReactivestreamsPublisher> source, JavaUtilConcurrentAtomicAtomicReference *current, jint bufferSize);

@interface IoReactivexInternalOperatorsFlowableFlowablePublish_1 : NSObject < OrgReactivestreamsPublisher > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *val$curr_;
  jint val$bufferSize_;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                                                        withInt:(jint)capture$1;

- (void)subscribeWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)child;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowablePublish_1)

__attribute__((unused)) static void IoReactivexInternalOperatorsFlowableFlowablePublish_1_initWithJavaUtilConcurrentAtomicAtomicReference_withInt_(IoReactivexInternalOperatorsFlowableFlowablePublish_1 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, jint capture$1);

__attribute__((unused)) static IoReactivexInternalOperatorsFlowableFlowablePublish_1 *new_IoReactivexInternalOperatorsFlowableFlowablePublish_1_initWithJavaUtilConcurrentAtomicAtomicReference_withInt_(JavaUtilConcurrentAtomicAtomicReference *capture$0, jint capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalOperatorsFlowableFlowablePublish_1 *create_IoReactivexInternalOperatorsFlowableFlowablePublish_1_initWithJavaUtilConcurrentAtomicAtomicReference_withInt_(JavaUtilConcurrentAtomicAtomicReference *capture$0, jint capture$1);

inline jlong IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_serialVersionUID -202316842419149694LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber_get_serialVersionUID();
#define IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber_serialVersionUID -4453897557930727610LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsFlowableFlowablePublish

+ (IoReactivexFlowablesConnectableFlowable *)createWithIoReactivexFlowable:(IoReactivexFlowable *)source
                                                                   withInt:(jint)bufferSize {
  return IoReactivexInternalOperatorsFlowableFlowablePublish_createWithIoReactivexFlowable_withInt_(source, bufferSize);
}

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)onSubscribe
                    withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
        withJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)current
                                            withInt:(jint)bufferSize {
  IoReactivexInternalOperatorsFlowableFlowablePublish_initWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withJavaUtilConcurrentAtomicAtomicReference_withInt_(self, onSubscribe, source, current, bufferSize);
  return self;
}

- (id<OrgReactivestreamsPublisher>)source {
  return source_;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  [((id<OrgReactivestreamsPublisher>) nil_chk(onSubscribe_)) subscribeWithOrgReactivestreamsSubscriber:s];
}

- (void)connectWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)connection {
  jboolean doConnect;
  IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber *ps;
  for (; ; ) {
    ps = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(current_)) get];
    if (ps == nil || [ps isDisposed]) {
      IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber *u = create_IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_initWithJavaUtilConcurrentAtomicAtomicReference_withInt_(current_, bufferSize_);
      if (![current_ compareAndSetWithId:ps withId:u]) {
        continue;
      }
      ps = u;
    }
    doConnect = (![((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(ps->shouldConnect_)) get] && [ps->shouldConnect_ compareAndSetWithBoolean:false withBoolean:true]);
    break;
  }
  @try {
    [((id<IoReactivexFunctionsConsumer>) nil_chk(connection)) acceptWithId:ps];
  }
  @catch (NSException *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(ex);
    @throw IoReactivexInternalUtilExceptionHelper_wrapOrThrowWithNSException_(ex);
  }
  if (doConnect) {
    [((id<OrgReactivestreamsPublisher>) nil_chk(source_)) subscribeWithOrgReactivestreamsSubscriber:ps];
  }
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(current_);
  RELEASE_(onSubscribe_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LIoReactivexFlowablesConnectableFlowable;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x2, -1, 3, -1, 4, -1, -1 },
    { NULL, "LOrgReactivestreamsPublisher;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(createWithIoReactivexFlowable:withInt:);
  methods[1].selector = @selector(initWithOrgReactivestreamsPublisher:withOrgReactivestreamsPublisher:withJavaUtilConcurrentAtomicAtomicReference:withInt:);
  methods[2].selector = @selector(source);
  methods[3].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  methods[4].selector = @selector(connectWithIoReactivexFunctionsConsumer:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CANCELLED", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowablePublish_CANCELLED, 0x18, -1, -1, -1, -1 },
    { "source_", "LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "current_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 13, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "onSubscribe_", "LOrgReactivestreamsPublisher;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
  };
  static const void *ptrTable[] = { "create", "LIoReactivexFlowable;I", "<T:Ljava/lang/Object;>(Lio/reactivex/Flowable<TT;>;I)Lio/reactivex/flowables/ConnectableFlowable<TT;>;", "LOrgReactivestreamsPublisher;LOrgReactivestreamsPublisher;LJavaUtilConcurrentAtomicAtomicReference;I", "(Lorg/reactivestreams/Publisher<TT;>;Lorg/reactivestreams/Publisher<TT;>;Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber<TT;>;>;I)V", "()Lorg/reactivestreams/Publisher<TT;>;", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "connect", "LIoReactivexFunctionsConsumer;", "(Lio/reactivex/functions/Consumer<-Lio/reactivex/disposables/Disposable;>;)V", "Lorg/reactivestreams/Publisher<TT;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber<TT;>;>;", "LIoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber;LIoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber;", "<T:Ljava/lang/Object;>Lio/reactivex/flowables/ConnectableFlowable<TT;>;Lio/reactivex/internal/fuseable/HasUpstreamPublisher<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowablePublish = { "FlowablePublish", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 5, 5, -1, 14, -1, 15, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowablePublish;
}

@end

IoReactivexFlowablesConnectableFlowable *IoReactivexInternalOperatorsFlowableFlowablePublish_createWithIoReactivexFlowable_withInt_(IoReactivexFlowable *source, jint bufferSize) {
  IoReactivexInternalOperatorsFlowableFlowablePublish_initialize();
  JavaUtilConcurrentAtomicAtomicReference *curr = create_JavaUtilConcurrentAtomicAtomicReference_init();
  id<OrgReactivestreamsPublisher> onSubscribe = create_IoReactivexInternalOperatorsFlowableFlowablePublish_1_initWithJavaUtilConcurrentAtomicAtomicReference_withInt_(curr, bufferSize);
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexFlowablesConnectableFlowable_(create_IoReactivexInternalOperatorsFlowableFlowablePublish_initWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withJavaUtilConcurrentAtomicAtomicReference_withInt_(onSubscribe, source, curr, bufferSize));
}

void IoReactivexInternalOperatorsFlowableFlowablePublish_initWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withJavaUtilConcurrentAtomicAtomicReference_withInt_(IoReactivexInternalOperatorsFlowableFlowablePublish *self, id<OrgReactivestreamsPublisher> onSubscribe, id<OrgReactivestreamsPublisher> source, JavaUtilConcurrentAtomicAtomicReference *current, jint bufferSize) {
  IoReactivexFlowablesConnectableFlowable_init(self);
  JreStrongAssign(&self->onSubscribe_, onSubscribe);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->current_, current);
  self->bufferSize_ = bufferSize;
}

IoReactivexInternalOperatorsFlowableFlowablePublish *new_IoReactivexInternalOperatorsFlowableFlowablePublish_initWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withJavaUtilConcurrentAtomicAtomicReference_withInt_(id<OrgReactivestreamsPublisher> onSubscribe, id<OrgReactivestreamsPublisher> source, JavaUtilConcurrentAtomicAtomicReference *current, jint bufferSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowablePublish, initWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withJavaUtilConcurrentAtomicAtomicReference_withInt_, onSubscribe, source, current, bufferSize)
}

IoReactivexInternalOperatorsFlowableFlowablePublish *create_IoReactivexInternalOperatorsFlowableFlowablePublish_initWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withJavaUtilConcurrentAtomicAtomicReference_withInt_(id<OrgReactivestreamsPublisher> onSubscribe, id<OrgReactivestreamsPublisher> source, JavaUtilConcurrentAtomicAtomicReference *current, jint bufferSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowablePublish, initWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withJavaUtilConcurrentAtomicAtomicReference_withInt_, onSubscribe, source, current, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowablePublish)

@implementation IoReactivexInternalOperatorsFlowableFlowablePublish_1

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)capture$0
                                                        withInt:(jint)capture$1 {
  IoReactivexInternalOperatorsFlowableFlowablePublish_1_initWithJavaUtilConcurrentAtomicAtomicReference_withInt_(self, capture$0, capture$1);
  return self;
}

- (void)subscribeWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)child {
  IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber *inner = create_IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber_initWithOrgReactivestreamsSubscriber_(child);
  [((id<OrgReactivestreamsSubscriber>) nil_chk(child)) onSubscribeWithOrgReactivestreamsSubscription:inner];
  for (; ; ) {
    IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber *r = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(val$curr_)) get];
    if (r == nil || [r isDisposed]) {
      IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber *u = create_IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_initWithJavaUtilConcurrentAtomicAtomicReference_withInt_(val$curr_, val$bufferSize_);
      if (![val$curr_ compareAndSetWithId:r withId:u]) {
        continue;
      }
      r = u;
    }
    if ([r addWithIoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber:inner]) {
      if ([inner get] == IoReactivexInternalOperatorsFlowableFlowablePublish_CANCELLED) {
        [r removeWithIoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber:inner];
      }
      else {
        JreVolatileStrongAssign(&inner->parent_, r);
      }
      [r dispatch];
      break;
    }
  }
}

- (void)dealloc {
  RELEASE_(val$curr_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:withInt:);
  methods[1].selector = @selector(subscribeWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$curr_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
    { "val$bufferSize_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "subscribe", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber<TT;>;>;", "LIoReactivexInternalOperatorsFlowableFlowablePublish;", "createWithIoReactivexFlowable:withInt:", "Ljava/lang/Object;Lorg/reactivestreams/Publisher<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowablePublish_1 = { "", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x8018, 2, 2, 4, -1, 5, 6, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowablePublish_1;
}

@end

void IoReactivexInternalOperatorsFlowableFlowablePublish_1_initWithJavaUtilConcurrentAtomicAtomicReference_withInt_(IoReactivexInternalOperatorsFlowableFlowablePublish_1 *self, JavaUtilConcurrentAtomicAtomicReference *capture$0, jint capture$1) {
  JreStrongAssign(&self->val$curr_, capture$0);
  self->val$bufferSize_ = capture$1;
  NSObject_init(self);
}

IoReactivexInternalOperatorsFlowableFlowablePublish_1 *new_IoReactivexInternalOperatorsFlowableFlowablePublish_1_initWithJavaUtilConcurrentAtomicAtomicReference_withInt_(JavaUtilConcurrentAtomicAtomicReference *capture$0, jint capture$1) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowablePublish_1, initWithJavaUtilConcurrentAtomicAtomicReference_withInt_, capture$0, capture$1)
}

IoReactivexInternalOperatorsFlowableFlowablePublish_1 *create_IoReactivexInternalOperatorsFlowableFlowablePublish_1_initWithJavaUtilConcurrentAtomicAtomicReference_withInt_(JavaUtilConcurrentAtomicAtomicReference *capture$0, jint capture$1) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowablePublish_1, initWithJavaUtilConcurrentAtomicAtomicReference_withInt_, capture$0, capture$1)
}

J2OBJC_INITIALIZED_DEFN(IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber)

IOSObjectArray *IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_EMPTY;
IOSObjectArray *IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_TERMINATED;

@implementation IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)current
                                                        withInt:(jint)bufferSize {
  IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_initWithJavaUtilConcurrentAtomicAtomicReference_withInt_(self, current, bufferSize);
  return self;
}

- (void)dispose {
  if ([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get] != IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_TERMINATED) {
    IOSObjectArray *ps = [subscribers_ getAndSetWithId:IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_TERMINATED];
    if (ps != IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_TERMINATED) {
      [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(current_)) compareAndSetWithId:self withId:nil];
      IoReactivexInternalSubscriptionsSubscriptionHelper_cancelWithJavaUtilConcurrentAtomicAtomicReference_(s_);
    }
  }
}

- (jboolean)isDisposed {
  return [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get] == IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_TERMINATED;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withOrgReactivestreamsSubscription_(self->s_, s)) {
    if ([IoReactivexInternalFuseableQueueSubscription_class_() isInstance:s]) {
      id<IoReactivexInternalFuseableQueueSubscription> qs = (id<IoReactivexInternalFuseableQueueSubscription>) cast_check(s, IoReactivexInternalFuseableQueueSubscription_class_());
      jint m = [((id<IoReactivexInternalFuseableQueueSubscription>) nil_chk(qs)) requestFusionWithInt:IoReactivexInternalFuseableQueueFuseable_ANY];
      if (m == IoReactivexInternalFuseableQueueFuseable_SYNC) {
        sourceMode_ = m;
        JreVolatileStrongAssign(&queue_, qs);
        JreVolatileStrongAssign(&terminalEvent_, IoReactivexInternalUtilNotificationLite_complete());
        [self dispatch];
        return;
      }
      if (m == IoReactivexInternalFuseableQueueFuseable_ASYNC) {
        sourceMode_ = m;
        JreVolatileStrongAssign(&queue_, qs);
        [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:bufferSize_];
        return;
      }
    }
    JreVolatileStrongAssign(&queue_, create_IoReactivexInternalQueueSpscArrayQueue_initWithInt_(bufferSize_));
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:bufferSize_];
  }
}

- (void)onNextWithId:(id)t {
  if (sourceMode_ == IoReactivexInternalFuseableQueueFuseable_NONE && ![((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(JreLoadVolatileId(&queue_))) offerWithId:t]) {
    [self onErrorWithNSException:create_IoReactivexExceptionsMissingBackpressureException_initWithNSString_(@"Prefetch queue is full?!")];
    return;
  }
  [self dispatch];
}

- (void)onErrorWithNSException:(NSException *)e {
  if (JreLoadVolatileId(&terminalEvent_) == nil) {
    JreVolatileStrongAssign(&terminalEvent_, IoReactivexInternalUtilNotificationLite_errorWithNSException_(e));
    [self dispatch];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_(e);
  }
}

- (void)onComplete {
  if (JreLoadVolatileId(&terminalEvent_) == nil) {
    JreVolatileStrongAssign(&terminalEvent_, IoReactivexInternalUtilNotificationLite_complete());
    [self dispatch];
  }
}

- (jboolean)addWithIoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber:(IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber *)producer {
  for (; ; ) {
    IOSObjectArray *c = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get];
    if (c == IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_TERMINATED) {
      return false;
    }
    jint len = ((IOSObjectArray *) nil_chk(c))->size_;
    IOSObjectArray *u = [IOSObjectArray arrayWithLength:len + 1 type:IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(c, 0, u, 0, len);
    IOSObjectArray_Set(u, len, producer);
    if ([subscribers_ compareAndSetWithId:c withId:u]) {
      return true;
    }
  }
}

- (void)removeWithIoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber:(IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber *)producer {
  for (; ; ) {
    IOSObjectArray *c = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get];
    jint len = ((IOSObjectArray *) nil_chk(c))->size_;
    if (len == 0) {
      break;
    }
    jint j = -1;
    for (jint i = 0; i < len; i++) {
      if ([((IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber *) nil_chk(IOSObjectArray_Get(c, i))) isEqual:producer]) {
        j = i;
        break;
      }
    }
    if (j < 0) {
      return;
    }
    IOSObjectArray *u;
    if (len == 1) {
      u = IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_EMPTY;
    }
    else {
      u = [IOSObjectArray arrayWithLength:len - 1 type:IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber_class_()];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(c, 0, u, 0, j);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(c, j + 1, u, j, len - j - 1);
    }
    if ([subscribers_ compareAndSetWithId:c withId:u]) {
      break;
    }
  }
}

- (jboolean)checkTerminatedWithId:(id)term
                      withBoolean:(jboolean)empty {
  if (term != nil) {
    if (IoReactivexInternalUtilNotificationLite_isCompleteWithId_(term)) {
      if (empty) {
        [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(current_)) compareAndSetWithId:self withId:nil];
        {
          IOSObjectArray *a__ = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) getAndSetWithId:IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_TERMINATED];
          IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber *ip = *b__++;
            [((id<OrgReactivestreamsSubscriber>) nil_chk(((IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber *) nil_chk(ip))->child_)) onComplete];
          }
        }
        return true;
      }
    }
    else {
      NSException *t = IoReactivexInternalUtilNotificationLite_getErrorWithId_(term);
      [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(current_)) compareAndSetWithId:self withId:nil];
      IOSObjectArray *a = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) getAndSetWithId:IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_TERMINATED];
      if (((IOSObjectArray *) nil_chk(a))->size_ != 0) {
        {
          IOSObjectArray *a__ = a;
          IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber * const *b__ = a__->buffer_;
          IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber *ip = *b__++;
            [((id<OrgReactivestreamsSubscriber>) nil_chk(((IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber *) nil_chk(ip))->child_)) onErrorWithNSException:t];
          }
        }
      }
      else {
        IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_(t);
      }
      return true;
    }
  }
  return false;
}

- (void)dispatch {
  if ([self getAndIncrement] != 0) {
    return;
  }
  jint missed = 1;
  for (; ; ) {
    id term = JreLoadVolatileId(&terminalEvent_);
    id<IoReactivexInternalFuseableSimpleQueue> q = JreLoadVolatileId(&queue_);
    jboolean empty = q == nil || [q isEmpty];
    if ([self checkTerminatedWithId:term withBoolean:empty]) {
      return;
    }
    if (!empty) {
      IOSObjectArray *ps = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(subscribers_)) get];
      jint len = ((IOSObjectArray *) nil_chk(ps))->size_;
      jlong maxRequested = JavaLangLong_MAX_VALUE;
      jint cancelled = 0;
      {
        IOSObjectArray *a__ = ps;
        IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber * const *b__ = a__->buffer_;
        IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber *ip = *b__++;
          jlong r = [((IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber *) nil_chk(ip)) get];
          if (r >= 0LL) {
            maxRequested = JavaLangMath_minWithLong_withLong_(maxRequested, r);
          }
          else if (r == IoReactivexInternalOperatorsFlowableFlowablePublish_CANCELLED) {
            cancelled++;
          }
        }
      }
      if (len == cancelled) {
        term = JreLoadVolatileId(&terminalEvent_);
        id v;
        @try {
          v = [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) poll];
        }
        @catch (NSException *ex) {
          IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(ex);
          [((id<OrgReactivestreamsSubscription>) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(s_)) get])) cancel];
          term = IoReactivexInternalUtilNotificationLite_errorWithNSException_(ex);
          JreVolatileStrongAssign(&terminalEvent_, term);
          v = nil;
        }
        if ([self checkTerminatedWithId:term withBoolean:v == nil]) {
          return;
        }
        if (sourceMode_ != IoReactivexInternalFuseableQueueFuseable_SYNC) {
          [((id<OrgReactivestreamsSubscription>) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(s_)) get])) requestWithLong:1];
        }
        continue;
      }
      jint d = 0;
      while (d < maxRequested) {
        term = JreLoadVolatileId(&terminalEvent_);
        id v;
        @try {
          v = [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) poll];
        }
        @catch (NSException *ex) {
          IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(ex);
          [((id<OrgReactivestreamsSubscription>) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(s_)) get])) cancel];
          term = IoReactivexInternalUtilNotificationLite_errorWithNSException_(ex);
          JreVolatileStrongAssign(&terminalEvent_, term);
          v = nil;
        }
        empty = (v == nil);
        if ([self checkTerminatedWithId:term withBoolean:empty]) {
          return;
        }
        if (empty) {
          break;
        }
        id value = IoReactivexInternalUtilNotificationLite_getValueWithId_(v);
        {
          IOSObjectArray *a__ = ps;
          IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber * const *b__ = a__->buffer_;
          IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber *ip = *b__++;
            if ([((IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber *) nil_chk(ip)) get] > 0LL) {
              [((id<OrgReactivestreamsSubscriber>) nil_chk(ip->child_)) onNextWithId:value];
              [ip producedWithLong:1];
            }
          }
        }
        d++;
      }
      if (d > 0) {
        if (sourceMode_ != IoReactivexInternalFuseableQueueFuseable_SYNC) {
          [((id<OrgReactivestreamsSubscription>) nil_chk([((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(s_)) get])) requestWithLong:d];
        }
      }
      if (maxRequested != 0LL && !empty) {
        continue;
      }
    }
    missed = [self addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (void)__javaClone:(IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&terminalEvent_, &original->terminalEvent_);
  JreCloneVolatileStrong(&queue_, &original->queue_);
}

- (void)dealloc {
  RELEASE_(current_);
  RELEASE_(subscribers_);
  RELEASE_(shouldConnect_);
  RELEASE_(s_);
  JreReleaseVolatile(&terminalEvent_);
  JreReleaseVolatile(&queue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 9, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x0, 12, 10, -1, 13, -1, -1 },
    { NULL, "Z", 0x0, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicReference:withInt:);
  methods[1].selector = @selector(dispose);
  methods[2].selector = @selector(isDisposed);
  methods[3].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[4].selector = @selector(onNextWithId:);
  methods[5].selector = @selector(onErrorWithNSException:);
  methods[6].selector = @selector(onComplete);
  methods[7].selector = @selector(addWithIoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber:);
  methods[8].selector = @selector(removeWithIoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber:);
  methods[9].selector = @selector(checkTerminatedWithId:withBoolean:);
  methods[10].selector = @selector(dispatch);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "EMPTY", "[LIoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber;", .constantValue.asLong = 0, 0x18, -1, 16, -1, -1 },
    { "TERMINATED", "[LIoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber;", .constantValue.asLong = 0, 0x18, -1, 17, -1, -1 },
    { "current_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 18, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "subscribers_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 19, -1 },
    { "shouldConnect_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 20, -1 },
    { "terminalEvent_", "LNSObject;", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "sourceMode_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "queue_", "LIoReactivexInternalFuseableSimpleQueue;", .constantValue.asLong = 0, 0x40, -1, -1, 21, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentAtomicAtomicReference;I", "(Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber<TT;>;>;I)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "add", "LIoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber;", "(Lio/reactivex/internal/operators/flowable/FlowablePublish$InnerSubscriber<TT;>;)Z", "remove", "(Lio/reactivex/internal/operators/flowable/FlowablePublish$InnerSubscriber<TT;>;)V", "checkTerminated", "LNSObject;Z", &IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_EMPTY, &IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_TERMINATED, "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber<TT;>;>;", "Ljava/util/concurrent/atomic/AtomicReference<[Lio/reactivex/internal/operators/flowable/FlowablePublish$InnerSubscriber;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lorg/reactivestreams/Subscription;>;", "Lio/reactivex/internal/fuseable/SimpleQueue<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowablePublish;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lorg/reactivestreams/Subscriber<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber = { "PublishSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 11, 11, 22, -1, -1, 23, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber;
}

+ (void)initialize {
  if (self == [IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber class]) {
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_EMPTY, [IOSObjectArray newArrayWithLength:0 type:IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber_class_()]);
    JreStrongAssignAndConsume(&IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_TERMINATED, [IOSObjectArray newArrayWithLength:0 type:IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber_class_()]);
    J2OBJC_SET_INITIALIZED(IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber)
  }
}

@end

void IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_initWithJavaUtilConcurrentAtomicAtomicReference_withInt_(IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber *self, JavaUtilConcurrentAtomicAtomicReference *current, jint bufferSize) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssignAndConsume(&self->s_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssignAndConsume(&self->subscribers_, new_JavaUtilConcurrentAtomicAtomicReference_initWithId_(IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_EMPTY));
  JreStrongAssign(&self->current_, current);
  JreStrongAssignAndConsume(&self->shouldConnect_, new_JavaUtilConcurrentAtomicAtomicBoolean_init());
  self->bufferSize_ = bufferSize;
}

IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber *new_IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_initWithJavaUtilConcurrentAtomicAtomicReference_withInt_(JavaUtilConcurrentAtomicAtomicReference *current, jint bufferSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber, initWithJavaUtilConcurrentAtomicAtomicReference_withInt_, current, bufferSize)
}

IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber *create_IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_initWithJavaUtilConcurrentAtomicAtomicReference_withInt_(JavaUtilConcurrentAtomicAtomicReference *current, jint bufferSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber, initWithJavaUtilConcurrentAtomicAtomicReference_withInt_, current, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)child {
  IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber_initWithOrgReactivestreamsSubscriber_(self, child);
  return self;
}

- (void)requestWithLong:(jlong)n {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithLong_(n)) {
    IoReactivexInternalUtilBackpressureHelper_addCancelWithJavaUtilConcurrentAtomicAtomicLong_withLong_(self, n);
    IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber *p = JreLoadVolatileId(&parent_);
    if (p != nil) {
      [p dispatch];
    }
  }
}

- (jlong)producedWithLong:(jlong)n {
  return IoReactivexInternalUtilBackpressureHelper_producedCancelWithJavaUtilConcurrentAtomicAtomicLong_withLong_(self, n);
}

- (void)cancel {
  jlong r = [self get];
  if (r != IoReactivexInternalOperatorsFlowableFlowablePublish_CANCELLED) {
    r = [self getAndSetWithLong:IoReactivexInternalOperatorsFlowableFlowablePublish_CANCELLED];
    if (r != IoReactivexInternalOperatorsFlowableFlowablePublish_CANCELLED) {
      IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber *p = JreLoadVolatileId(&parent_);
      if (p != nil) {
        [p removeWithIoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber:self];
        [p dispatch];
      }
    }
  }
}

- (void)__javaClone:(IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&parent_, &original->parent_);
}

- (void)dealloc {
  RELEASE_(child_);
  JreReleaseVolatile(&parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:);
  methods[1].selector = @selector(requestWithLong:);
  methods[2].selector = @selector(producedWithLong:);
  methods[3].selector = @selector(cancel);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "child_", "LOrgReactivestreamsSubscriber;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "parent_", "LIoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber;", .constantValue.asLong = 0, 0x40, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TT;>;)V", "request", "J", "produced", "Lorg/reactivestreams/Subscriber<-TT;>;", "Lio/reactivex/internal/operators/flowable/FlowablePublish$PublishSubscriber<TT;>;", "LIoReactivexInternalOperatorsFlowableFlowablePublish;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber = { "InnerSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 4, 3, 7, -1, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber_initWithOrgReactivestreamsSubscriber_(IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber *self, id<OrgReactivestreamsSubscriber> child) {
  JavaUtilConcurrentAtomicAtomicLong_init(self);
  JreStrongAssign(&self->child_, child);
}

IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber *new_IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber_initWithOrgReactivestreamsSubscriber_(id<OrgReactivestreamsSubscriber> child) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber, initWithOrgReactivestreamsSubscriber_, child)
}

IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber *create_IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber_initWithOrgReactivestreamsSubscriber_(id<OrgReactivestreamsSubscriber> child) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber, initWithOrgReactivestreamsSubscriber_, child)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber)
