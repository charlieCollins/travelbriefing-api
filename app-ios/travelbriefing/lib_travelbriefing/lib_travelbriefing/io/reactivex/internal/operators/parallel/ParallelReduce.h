//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/parallel/ParallelReduce.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelReduce")
#ifdef RESTRICT_IoReactivexInternalOperatorsParallelParallelReduce
#define INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelReduce 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelReduce 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsParallelParallelReduce

#if !defined (IoReactivexInternalOperatorsParallelParallelReduce_) && (INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelReduce || defined(INCLUDE_IoReactivexInternalOperatorsParallelParallelReduce))
#define IoReactivexInternalOperatorsParallelParallelReduce_

#define RESTRICT_IoReactivexParallelParallelFlowable 1
#define INCLUDE_IoReactivexParallelParallelFlowable 1
#include "io/reactivex/parallel/ParallelFlowable.h"

@class IOSObjectArray;
@protocol IoReactivexFunctionsBiFunction;
@protocol JavaUtilConcurrentCallable;

@interface IoReactivexInternalOperatorsParallelParallelReduce : IoReactivexParallelParallelFlowable {
 @public
  IoReactivexParallelParallelFlowable *source_;
  id<JavaUtilConcurrentCallable> initialSupplier_;
  id<IoReactivexFunctionsBiFunction> reducer_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexParallelParallelFlowable:(IoReactivexParallelParallelFlowable *)source
                             withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)initialSupplier
                         withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)reducer;

- (jint)parallelism;

- (void)subscribeWithOrgReactivestreamsSubscriberArray:(IOSObjectArray *)subscribers;

#pragma mark Package-Private

- (void)reportErrorWithOrgReactivestreamsSubscriberArray:(IOSObjectArray *)subscribers
                                         withNSException:(NSException *)ex;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsParallelParallelReduce)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelReduce, source_, IoReactivexParallelParallelFlowable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelReduce, initialSupplier_, id<JavaUtilConcurrentCallable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelReduce, reducer_, id<IoReactivexFunctionsBiFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsParallelParallelReduce_initWithIoReactivexParallelParallelFlowable_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiFunction_(IoReactivexInternalOperatorsParallelParallelReduce *self, IoReactivexParallelParallelFlowable *source, id<JavaUtilConcurrentCallable> initialSupplier, id<IoReactivexFunctionsBiFunction> reducer);

FOUNDATION_EXPORT IoReactivexInternalOperatorsParallelParallelReduce *new_IoReactivexInternalOperatorsParallelParallelReduce_initWithIoReactivexParallelParallelFlowable_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiFunction_(IoReactivexParallelParallelFlowable *source, id<JavaUtilConcurrentCallable> initialSupplier, id<IoReactivexFunctionsBiFunction> reducer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsParallelParallelReduce *create_IoReactivexInternalOperatorsParallelParallelReduce_initWithIoReactivexParallelParallelFlowable_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiFunction_(IoReactivexParallelParallelFlowable *source, id<JavaUtilConcurrentCallable> initialSupplier, id<IoReactivexFunctionsBiFunction> reducer);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsParallelParallelReduce)

#endif

#if !defined (IoReactivexInternalOperatorsParallelParallelReduce_ParallelReduceSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelReduce || defined(INCLUDE_IoReactivexInternalOperatorsParallelParallelReduce_ParallelReduceSubscriber))
#define IoReactivexInternalOperatorsParallelParallelReduce_ParallelReduceSubscriber_

#define RESTRICT_IoReactivexInternalSubscribersDeferredScalarSubscriber 1
#define INCLUDE_IoReactivexInternalSubscribersDeferredScalarSubscriber 1
#include "io/reactivex/internal/subscribers/DeferredScalarSubscriber.h"

@protocol IoReactivexFunctionsBiFunction;
@protocol OrgReactivestreamsSubscriber;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsParallelParallelReduce_ParallelReduceSubscriber : IoReactivexInternalSubscribersDeferredScalarSubscriber {
 @public
  id<IoReactivexFunctionsBiFunction> reducer_;
  id accumulator_;
  jboolean done_;
}

#pragma mark Public

- (void)cancel;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)subscriber
                                              withId:(id)initialValue
                  withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)reducer;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsParallelParallelReduce_ParallelReduceSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelReduce_ParallelReduceSubscriber, reducer_, id<IoReactivexFunctionsBiFunction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsParallelParallelReduce_ParallelReduceSubscriber, accumulator_, id)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsParallelParallelReduce_ParallelReduceSubscriber_initWithOrgReactivestreamsSubscriber_withId_withIoReactivexFunctionsBiFunction_(IoReactivexInternalOperatorsParallelParallelReduce_ParallelReduceSubscriber *self, id<OrgReactivestreamsSubscriber> subscriber, id initialValue, id<IoReactivexFunctionsBiFunction> reducer);

FOUNDATION_EXPORT IoReactivexInternalOperatorsParallelParallelReduce_ParallelReduceSubscriber *new_IoReactivexInternalOperatorsParallelParallelReduce_ParallelReduceSubscriber_initWithOrgReactivestreamsSubscriber_withId_withIoReactivexFunctionsBiFunction_(id<OrgReactivestreamsSubscriber> subscriber, id initialValue, id<IoReactivexFunctionsBiFunction> reducer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsParallelParallelReduce_ParallelReduceSubscriber *create_IoReactivexInternalOperatorsParallelParallelReduce_ParallelReduceSubscriber_initWithOrgReactivestreamsSubscriber_withId_withIoReactivexFunctionsBiFunction_(id<OrgReactivestreamsSubscriber> subscriber, id initialValue, id<IoReactivexFunctionsBiFunction> reducer);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsParallelParallelReduce_ParallelReduceSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsParallelParallelReduce")
