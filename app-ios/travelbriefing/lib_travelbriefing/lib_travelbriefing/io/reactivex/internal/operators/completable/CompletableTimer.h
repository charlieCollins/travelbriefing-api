//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/completable/CompletableTimer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableTimer")
#ifdef RESTRICT_IoReactivexInternalOperatorsCompletableCompletableTimer
#define INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableTimer 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableTimer 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsCompletableCompletableTimer

#if !defined (IoReactivexInternalOperatorsCompletableCompletableTimer_) && (INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableTimer || defined(INCLUDE_IoReactivexInternalOperatorsCompletableCompletableTimer))
#define IoReactivexInternalOperatorsCompletableCompletableTimer_

#define RESTRICT_IoReactivexCompletable 1
#define INCLUDE_IoReactivexCompletable 1
#include "io/reactivex/Completable.h"

@class IoReactivexScheduler;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexCompletableObserver;

@interface IoReactivexInternalOperatorsCompletableCompletableTimer : IoReactivexCompletable {
 @public
  jlong delay_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler *scheduler_;
}

#pragma mark Public

- (instancetype)initWithLong:(jlong)delay
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
    withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsCompletableCompletableTimer)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableTimer, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableTimer, scheduler_, IoReactivexScheduler *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsCompletableCompletableTimer_initWithLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(IoReactivexInternalOperatorsCompletableCompletableTimer *self, jlong delay, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableTimer *new_IoReactivexInternalOperatorsCompletableCompletableTimer_initWithLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jlong delay, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableTimer *create_IoReactivexInternalOperatorsCompletableCompletableTimer_initWithLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jlong delay, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsCompletableCompletableTimer)

#endif

#if !defined (IoReactivexInternalOperatorsCompletableCompletableTimer_TimerDisposable_) && (INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableTimer || defined(INCLUDE_IoReactivexInternalOperatorsCompletableCompletableTimer_TimerDisposable))
#define IoReactivexInternalOperatorsCompletableCompletableTimer_TimerDisposable_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "io/reactivex/disposables/Disposable.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@protocol IoReactivexCompletableObserver;

@interface IoReactivexInternalOperatorsCompletableCompletableTimer_TimerDisposable : JavaUtilConcurrentAtomicAtomicReference < IoReactivexDisposablesDisposable, JavaLangRunnable > {
 @public
  id<IoReactivexCompletableObserver> actual_;
}

#pragma mark Public

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (jboolean)isDisposed;

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)actual;

- (void)setFutureWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsCompletableCompletableTimer_TimerDisposable)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableTimer_TimerDisposable, actual_, id<IoReactivexCompletableObserver>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsCompletableCompletableTimer_TimerDisposable_initWithIoReactivexCompletableObserver_(IoReactivexInternalOperatorsCompletableCompletableTimer_TimerDisposable *self, id<IoReactivexCompletableObserver> actual);

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableTimer_TimerDisposable *new_IoReactivexInternalOperatorsCompletableCompletableTimer_TimerDisposable_initWithIoReactivexCompletableObserver_(id<IoReactivexCompletableObserver> actual) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableTimer_TimerDisposable *create_IoReactivexInternalOperatorsCompletableCompletableTimer_TimerDisposable_initWithIoReactivexCompletableObserver_(id<IoReactivexCompletableObserver> actual);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsCompletableCompletableTimer_TimerDisposable)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableTimer")
