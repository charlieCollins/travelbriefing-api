//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/observable/ObservableCreate.java
//

#include "J2ObjC_source.h"
#include "io/reactivex/Observable.h"
#include "io/reactivex/ObservableEmitter.h"
#include "io/reactivex/ObservableOnSubscribe.h"
#include "io/reactivex/Observer.h"
#include "io/reactivex/disposables/Disposable.h"
#include "io/reactivex/exceptions/Exceptions.h"
#include "io/reactivex/functions/Cancellable.h"
#include "io/reactivex/internal/disposables/CancellableDisposable.h"
#include "io/reactivex/internal/disposables/DisposableHelper.h"
#include "io/reactivex/internal/fuseable/SimpleQueue.h"
#include "io/reactivex/internal/operators/observable/ObservableCreate.h"
#include "io/reactivex/internal/queue/SpscLinkedArrayQueue.h"
#include "io/reactivex/internal/util/AtomicThrowable.h"
#include "io/reactivex/plugins/RxJavaPlugins.h"
#include "java/lang/NullPointerException.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong IoReactivexInternalOperatorsObservableObservableCreate_CreateEmitter_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableCreate_CreateEmitter_serialVersionUID -3434801548987643227LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableCreate_CreateEmitter, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsObservableObservableCreate_SerializedEmitter_get_serialVersionUID();
#define IoReactivexInternalOperatorsObservableObservableCreate_SerializedEmitter_serialVersionUID 4883307006032401862LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsObservableObservableCreate_SerializedEmitter, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsObservableObservableCreate

- (instancetype)initWithIoReactivexObservableOnSubscribe:(id<IoReactivexObservableOnSubscribe>)source {
  IoReactivexInternalOperatorsObservableObservableCreate_initWithIoReactivexObservableOnSubscribe_(self, source);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)observer {
  IoReactivexInternalOperatorsObservableObservableCreate_CreateEmitter *parent = create_IoReactivexInternalOperatorsObservableObservableCreate_CreateEmitter_initWithIoReactivexObserver_(observer);
  [((id<IoReactivexObserver>) nil_chk(observer)) onSubscribeWithIoReactivexDisposablesDisposable:parent];
  @try {
    [((id<IoReactivexObservableOnSubscribe>) nil_chk(source_)) subscribeWithIoReactivexObservableEmitter:parent];
  }
  @catch (NSException *ex) {
    IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(ex);
    [parent onErrorWithNSException:ex];
  }
}

- (void)dealloc {
  RELEASE_(source_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableOnSubscribe:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexObservableOnSubscribe;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableOnSubscribe;", "(Lio/reactivex/ObservableOnSubscribe<TT;>;)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "Lio/reactivex/ObservableOnSubscribe<TT;>;", "LIoReactivexInternalOperatorsObservableObservableCreate_CreateEmitter;LIoReactivexInternalOperatorsObservableObservableCreate_SerializedEmitter;", "<T:Ljava/lang/Object;>Lio/reactivex/Observable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableCreate = { "ObservableCreate", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableCreate;
}

@end

void IoReactivexInternalOperatorsObservableObservableCreate_initWithIoReactivexObservableOnSubscribe_(IoReactivexInternalOperatorsObservableObservableCreate *self, id<IoReactivexObservableOnSubscribe> source) {
  IoReactivexObservable_init(self);
  JreStrongAssign(&self->source_, source);
}

IoReactivexInternalOperatorsObservableObservableCreate *new_IoReactivexInternalOperatorsObservableObservableCreate_initWithIoReactivexObservableOnSubscribe_(id<IoReactivexObservableOnSubscribe> source) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableCreate, initWithIoReactivexObservableOnSubscribe_, source)
}

IoReactivexInternalOperatorsObservableObservableCreate *create_IoReactivexInternalOperatorsObservableObservableCreate_initWithIoReactivexObservableOnSubscribe_(id<IoReactivexObservableOnSubscribe> source) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableCreate, initWithIoReactivexObservableOnSubscribe_, source)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableCreate)

@implementation IoReactivexInternalOperatorsObservableObservableCreate_CreateEmitter

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)observer {
  IoReactivexInternalOperatorsObservableObservableCreate_CreateEmitter_initWithIoReactivexObserver_(self, observer);
  return self;
}

- (void)onNextWithId:(id)t {
  if (t == nil) {
    [self onErrorWithNSException:create_JavaLangNullPointerException_initWithNSString_(@"onNext called with null. Null values are generally not allowed in 2.x operators and sources.")];
    return;
  }
  if (![self isDisposed]) {
    [((id<IoReactivexObserver>) nil_chk(observer_)) onNextWithId:t];
  }
}

- (void)onErrorWithNSException:(NSException *)t {
  if (t == nil) {
    t = create_JavaLangNullPointerException_initWithNSString_(@"onError called with null. Null values are generally not allowed in 2.x operators and sources.");
  }
  if (![self isDisposed]) {
    @try {
      [((id<IoReactivexObserver>) nil_chk(observer_)) onErrorWithNSException:t];
    }
    @finally {
      [self dispose];
    }
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_(t);
  }
}

- (void)onComplete {
  if (![self isDisposed]) {
    @try {
      [((id<IoReactivexObserver>) nil_chk(observer_)) onComplete];
    }
    @finally {
      [self dispose];
    }
  }
}

- (void)setDisposableWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  IoReactivexInternalDisposablesDisposableHelper_setWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, d);
}

- (void)setCancellableWithIoReactivexFunctionsCancellable:(id<IoReactivexFunctionsCancellable>)c {
  [self setDisposableWithIoReactivexDisposablesDisposable:create_IoReactivexInternalDisposablesCancellableDisposable_initWithIoReactivexFunctionsCancellable_(c)];
}

- (id<IoReactivexObservableEmitter>)serialize {
  return create_IoReactivexInternalOperatorsObservableObservableCreate_SerializedEmitter_initWithIoReactivexObservableEmitter_(self);
}

- (void)dispose {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (jboolean)isDisposed {
  return IoReactivexInternalDisposablesDisposableHelper_isDisposedWithIoReactivexDisposablesDisposable_([self get]);
}

- (void)dealloc {
  RELEASE_(observer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LIoReactivexObservableEmitter;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObserver:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onComplete);
  methods[4].selector = @selector(setDisposableWithIoReactivexDisposablesDisposable:);
  methods[5].selector = @selector(setCancellableWithIoReactivexFunctionsCancellable:);
  methods[6].selector = @selector(serialize);
  methods[7].selector = @selector(dispose);
  methods[8].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableCreate_CreateEmitter_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "observer_", "LIoReactivexObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "setDisposable", "LIoReactivexDisposablesDisposable;", "setCancellable", "LIoReactivexFunctionsCancellable;", "()Lio/reactivex/ObservableEmitter<TT;>;", "Lio/reactivex/Observer<-TT;>;", "LIoReactivexInternalOperatorsObservableObservableCreate;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/ObservableEmitter<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableCreate_CreateEmitter = { "CreateEmitter", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 9, 2, 13, -1, -1, 14, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableCreate_CreateEmitter;
}

@end

void IoReactivexInternalOperatorsObservableObservableCreate_CreateEmitter_initWithIoReactivexObserver_(IoReactivexInternalOperatorsObservableObservableCreate_CreateEmitter *self, id<IoReactivexObserver> observer) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->observer_, observer);
}

IoReactivexInternalOperatorsObservableObservableCreate_CreateEmitter *new_IoReactivexInternalOperatorsObservableObservableCreate_CreateEmitter_initWithIoReactivexObserver_(id<IoReactivexObserver> observer) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableCreate_CreateEmitter, initWithIoReactivexObserver_, observer)
}

IoReactivexInternalOperatorsObservableObservableCreate_CreateEmitter *create_IoReactivexInternalOperatorsObservableObservableCreate_CreateEmitter_initWithIoReactivexObserver_(id<IoReactivexObserver> observer) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableCreate_CreateEmitter, initWithIoReactivexObserver_, observer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableCreate_CreateEmitter)

@implementation IoReactivexInternalOperatorsObservableObservableCreate_SerializedEmitter

- (instancetype)initWithIoReactivexObservableEmitter:(id<IoReactivexObservableEmitter>)emitter {
  IoReactivexInternalOperatorsObservableObservableCreate_SerializedEmitter_initWithIoReactivexObservableEmitter_(self, emitter);
  return self;
}

- (void)onNextWithId:(id)t {
  if ([((id<IoReactivexObservableEmitter>) nil_chk(emitter_)) isDisposed] || JreLoadVolatileBoolean(&done_)) {
    return;
  }
  if (t == nil) {
    [self onErrorWithNSException:create_JavaLangNullPointerException_initWithNSString_(@"onNext called with null. Null values are generally not allowed in 2.x operators and sources.")];
    return;
  }
  if ([self get] == 0 && [self compareAndSetWithInt:0 withInt:1]) {
    [emitter_ onNextWithId:t];
    if ([self decrementAndGet] == 0) {
      return;
    }
  }
  else {
    id<IoReactivexInternalFuseableSimpleQueue> q = queue_;
    @synchronized(q) {
      [((id<IoReactivexInternalFuseableSimpleQueue>) nil_chk(q)) offerWithId:t];
    }
    if ([self getAndIncrement] != 0) {
      return;
    }
  }
  [self drainLoop];
}

- (void)onErrorWithNSException:(NSException *)t {
  if ([((id<IoReactivexObservableEmitter>) nil_chk(emitter_)) isDisposed] || JreLoadVolatileBoolean(&done_)) {
    IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_(t);
    return;
  }
  if (t == nil) {
    t = create_JavaLangNullPointerException_initWithNSString_(@"onError called with null. Null values are generally not allowed in 2.x operators and sources.");
  }
  if ([((IoReactivexInternalUtilAtomicThrowable *) nil_chk(error_)) addThrowableWithNSException:t]) {
    JreAssignVolatileBoolean(&done_, true);
    [self drain];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_(t);
  }
}

- (void)onComplete {
  if ([((id<IoReactivexObservableEmitter>) nil_chk(emitter_)) isDisposed] || JreLoadVolatileBoolean(&done_)) {
    return;
  }
  JreAssignVolatileBoolean(&done_, true);
  [self drain];
}

- (void)drain {
  if ([self getAndIncrement] == 0) {
    [self drainLoop];
  }
}

- (void)drainLoop {
  id<IoReactivexObservableEmitter> e = emitter_;
  IoReactivexInternalQueueSpscLinkedArrayQueue *q = queue_;
  IoReactivexInternalUtilAtomicThrowable *error = self->error_;
  jint missed = 1;
  for (; ; ) {
    for (; ; ) {
      if ([((id<IoReactivexObservableEmitter>) nil_chk(e)) isDisposed]) {
        [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) clear];
        return;
      }
      if ([((IoReactivexInternalUtilAtomicThrowable *) nil_chk(error)) get] != nil) {
        [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) clear];
        [e onErrorWithNSException:[error terminate]];
        return;
      }
      jboolean d = JreLoadVolatileBoolean(&done_);
      id v = [((IoReactivexInternalQueueSpscLinkedArrayQueue *) nil_chk(q)) poll];
      jboolean empty = v == nil;
      if (d && empty) {
        [e onComplete];
        return;
      }
      if (empty) {
        break;
      }
      [e onNextWithId:v];
    }
    missed = [self addAndGetWithInt:-missed];
    if (missed == 0) {
      break;
    }
  }
}

- (void)setDisposableWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s {
  [((id<IoReactivexObservableEmitter>) nil_chk(emitter_)) setDisposableWithIoReactivexDisposablesDisposable:s];
}

- (void)setCancellableWithIoReactivexFunctionsCancellable:(id<IoReactivexFunctionsCancellable>)c {
  [((id<IoReactivexObservableEmitter>) nil_chk(emitter_)) setCancellableWithIoReactivexFunctionsCancellable:c];
}

- (jboolean)isDisposed {
  return [((id<IoReactivexObservableEmitter>) nil_chk(emitter_)) isDisposed];
}

- (id<IoReactivexObservableEmitter>)serialize {
  return self;
}

- (void)dealloc {
  RELEASE_(emitter_);
  RELEASE_(error_);
  RELEASE_(queue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIoReactivexObservableEmitter;", 0x1, -1, -1, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexObservableEmitter:);
  methods[1].selector = @selector(onNextWithId:);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onComplete);
  methods[4].selector = @selector(drain);
  methods[5].selector = @selector(drainLoop);
  methods[6].selector = @selector(setDisposableWithIoReactivexDisposablesDisposable:);
  methods[7].selector = @selector(setCancellableWithIoReactivexFunctionsCancellable:);
  methods[8].selector = @selector(isDisposed);
  methods[9].selector = @selector(serialize);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsObservableObservableCreate_SerializedEmitter_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "emitter_", "LIoReactivexObservableEmitter;", .constantValue.asLong = 0, 0x10, -1, -1, 12, -1 },
    { "error_", "LIoReactivexInternalUtilAtomicThrowable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "queue_", "LIoReactivexInternalQueueSpscLinkedArrayQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 13, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexObservableEmitter;", "(Lio/reactivex/ObservableEmitter<TT;>;)V", "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "setDisposable", "LIoReactivexDisposablesDisposable;", "setCancellable", "LIoReactivexFunctionsCancellable;", "()Lio/reactivex/ObservableEmitter<TT;>;", "Lio/reactivex/ObservableEmitter<TT;>;", "Lio/reactivex/internal/queue/SpscLinkedArrayQueue<TT;>;", "LIoReactivexInternalOperatorsObservableObservableCreate;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/ObservableEmitter<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableCreate_SerializedEmitter = { "SerializedEmitter", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x18, 10, 5, 14, -1, -1, 15, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableCreate_SerializedEmitter;
}

@end

void IoReactivexInternalOperatorsObservableObservableCreate_SerializedEmitter_initWithIoReactivexObservableEmitter_(IoReactivexInternalOperatorsObservableObservableCreate_SerializedEmitter *self, id<IoReactivexObservableEmitter> emitter) {
  JavaUtilConcurrentAtomicAtomicInteger_init(self);
  JreStrongAssign(&self->emitter_, emitter);
  JreStrongAssignAndConsume(&self->error_, new_IoReactivexInternalUtilAtomicThrowable_init());
  JreStrongAssignAndConsume(&self->queue_, new_IoReactivexInternalQueueSpscLinkedArrayQueue_initWithInt_(16));
}

IoReactivexInternalOperatorsObservableObservableCreate_SerializedEmitter *new_IoReactivexInternalOperatorsObservableObservableCreate_SerializedEmitter_initWithIoReactivexObservableEmitter_(id<IoReactivexObservableEmitter> emitter) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableCreate_SerializedEmitter, initWithIoReactivexObservableEmitter_, emitter)
}

IoReactivexInternalOperatorsObservableObservableCreate_SerializedEmitter *create_IoReactivexInternalOperatorsObservableObservableCreate_SerializedEmitter_initWithIoReactivexObservableEmitter_(id<IoReactivexObservableEmitter> emitter) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableCreate_SerializedEmitter, initWithIoReactivexObservableEmitter_, emitter)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableCreate_SerializedEmitter)
