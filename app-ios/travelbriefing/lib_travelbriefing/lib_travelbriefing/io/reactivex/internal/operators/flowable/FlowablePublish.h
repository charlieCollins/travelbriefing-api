//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/flowable/FlowablePublish.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowablePublish")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowablePublish
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowablePublish 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowablePublish 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowablePublish

#if !defined (IoReactivexInternalOperatorsFlowableFlowablePublish_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowablePublish || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowablePublish))
#define IoReactivexInternalOperatorsFlowableFlowablePublish_

#define RESTRICT_IoReactivexFlowablesConnectableFlowable 1
#define INCLUDE_IoReactivexFlowablesConnectableFlowable 1
#include "io/reactivex/flowables/ConnectableFlowable.h"

#define RESTRICT_IoReactivexInternalFuseableHasUpstreamPublisher 1
#define INCLUDE_IoReactivexInternalFuseableHasUpstreamPublisher 1
#include "io/reactivex/internal/fuseable/HasUpstreamPublisher.h"

@class IoReactivexFlowable;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexFunctionsConsumer;
@protocol OrgReactivestreamsPublisher;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowablePublish : IoReactivexFlowablesConnectableFlowable < IoReactivexInternalFuseableHasUpstreamPublisher > {
 @public
  id<OrgReactivestreamsPublisher> source_;
  JavaUtilConcurrentAtomicAtomicReference *current_;
  jint bufferSize_;
  id<OrgReactivestreamsPublisher> onSubscribe_;
}

#pragma mark Public

- (void)connectWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)connection;

+ (IoReactivexFlowablesConnectableFlowable *)createWithIoReactivexFlowable:(IoReactivexFlowable *)source
                                                                   withInt:(jint)bufferSize;

- (id<OrgReactivestreamsPublisher>)source;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowablePublish)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowablePublish, source_, id<OrgReactivestreamsPublisher>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowablePublish, current_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowablePublish, onSubscribe_, id<OrgReactivestreamsPublisher>)

inline jlong IoReactivexInternalOperatorsFlowableFlowablePublish_get_CANCELLED();
#define IoReactivexInternalOperatorsFlowableFlowablePublish_CANCELLED ((jlong) 0x8000000000000000LL)
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsFlowableFlowablePublish, CANCELLED, jlong)

FOUNDATION_EXPORT IoReactivexFlowablesConnectableFlowable *IoReactivexInternalOperatorsFlowableFlowablePublish_createWithIoReactivexFlowable_withInt_(IoReactivexFlowable *source, jint bufferSize);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowablePublish)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowablePublish || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

#define RESTRICT_OrgReactivestreamsSubscriber 1
#define INCLUDE_OrgReactivestreamsSubscriber 1
#include "org/reactivestreams/Subscriber.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "io/reactivex/disposables/Disposable.h"

@class IOSObjectArray;
@class IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber;
@class JavaUtilConcurrentAtomicAtomicBoolean;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexInternalFuseableSimpleQueue;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber : JavaUtilConcurrentAtomicAtomicInteger < OrgReactivestreamsSubscriber, IoReactivexDisposablesDisposable > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *current_;
  jint bufferSize_;
  JavaUtilConcurrentAtomicAtomicReference *subscribers_;
  JavaUtilConcurrentAtomicAtomicBoolean *shouldConnect_;
  JavaUtilConcurrentAtomicAtomicReference *s_;
  volatile_id terminalEvent_;
  jint sourceMode_;
  volatile_id queue_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicReference:(JavaUtilConcurrentAtomicAtomicReference *)current
                                                        withInt:(jint)bufferSize;

- (jboolean)addWithIoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber:(IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber *)producer;

- (jboolean)checkTerminatedWithId:(id)term
                      withBoolean:(jboolean)empty;

- (void)dispatch;

- (void)removeWithIoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber:(IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber *)producer;

@end

J2OBJC_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber, current_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber, subscribers_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber, shouldConnect_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber, s_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_VOLATILE_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber, terminalEvent_, id)
J2OBJC_VOLATILE_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber, queue_, id<IoReactivexInternalFuseableSimpleQueue>)

inline IOSObjectArray *IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_get_EMPTY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber, EMPTY, IOSObjectArray *)

inline IOSObjectArray *IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_get_TERMINATED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_TERMINATED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber, TERMINATED, IOSObjectArray *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_initWithJavaUtilConcurrentAtomicAtomicReference_withInt_(IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber *self, JavaUtilConcurrentAtomicAtomicReference *current, jint bufferSize);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber *new_IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_initWithJavaUtilConcurrentAtomicAtomicReference_withInt_(JavaUtilConcurrentAtomicAtomicReference *current, jint bufferSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber *create_IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber_initWithJavaUtilConcurrentAtomicAtomicReference_withInt_(JavaUtilConcurrentAtomicAtomicReference *current, jint bufferSize);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowablePublish || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicLong 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicLong 1
#include "java/util/concurrent/atomic/AtomicLong.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "org/reactivestreams/Subscription.h"

@class IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber : JavaUtilConcurrentAtomicAtomicLong < OrgReactivestreamsSubscription > {
 @public
  id<OrgReactivestreamsSubscriber> child_;
  volatile_id parent_;
}

#pragma mark Public

- (void)cancel;

- (jlong)producedWithLong:(jlong)n;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)child;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber, child_, id<OrgReactivestreamsSubscriber>)
J2OBJC_VOLATILE_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber, parent_, IoReactivexInternalOperatorsFlowableFlowablePublish_PublishSubscriber *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber_initWithOrgReactivestreamsSubscriber_(IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber *self, id<OrgReactivestreamsSubscriber> child);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber *new_IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber_initWithOrgReactivestreamsSubscriber_(id<OrgReactivestreamsSubscriber> child) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber *create_IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber_initWithOrgReactivestreamsSubscriber_(id<OrgReactivestreamsSubscriber> child);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowablePublish_InnerSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowablePublish")
