//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/flowable/FlowableCollectSingle.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableCollectSingle")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableCollectSingle
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableCollectSingle 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableCollectSingle 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableCollectSingle

#if !defined (IoReactivexInternalOperatorsFlowableFlowableCollectSingle_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableCollectSingle || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableCollectSingle))
#define IoReactivexInternalOperatorsFlowableFlowableCollectSingle_

#define RESTRICT_IoReactivexSingle 1
#define INCLUDE_IoReactivexSingle 1
#include "io/reactivex/Single.h"

#define RESTRICT_IoReactivexInternalFuseableFuseToFlowable 1
#define INCLUDE_IoReactivexInternalFuseableFuseToFlowable 1
#include "io/reactivex/internal/fuseable/FuseToFlowable.h"

@class IoReactivexFlowable;
@protocol IoReactivexFunctionsBiConsumer;
@protocol IoReactivexSingleObserver;
@protocol JavaUtilConcurrentCallable;
@protocol OrgReactivestreamsPublisher;

@interface IoReactivexInternalOperatorsFlowableFlowableCollectSingle : IoReactivexSingle < IoReactivexInternalFuseableFuseToFlowable > {
 @public
  id<OrgReactivestreamsPublisher> source_;
  id<JavaUtilConcurrentCallable> initialSupplier_;
  id<IoReactivexFunctionsBiConsumer> collector_;
}

#pragma mark Public

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                     withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)initialSupplier
                 withIoReactivexFunctionsBiConsumer:(id<IoReactivexFunctionsBiConsumer>)collector;

- (IoReactivexFlowable *)fuseToFlowable;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableCollectSingle)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableCollectSingle, source_, id<OrgReactivestreamsPublisher>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableCollectSingle, initialSupplier_, id<JavaUtilConcurrentCallable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableCollectSingle, collector_, id<IoReactivexFunctionsBiConsumer>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableCollectSingle_initWithOrgReactivestreamsPublisher_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiConsumer_(IoReactivexInternalOperatorsFlowableFlowableCollectSingle *self, id<OrgReactivestreamsPublisher> source, id<JavaUtilConcurrentCallable> initialSupplier, id<IoReactivexFunctionsBiConsumer> collector);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableCollectSingle *new_IoReactivexInternalOperatorsFlowableFlowableCollectSingle_initWithOrgReactivestreamsPublisher_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiConsumer_(id<OrgReactivestreamsPublisher> source, id<JavaUtilConcurrentCallable> initialSupplier, id<IoReactivexFunctionsBiConsumer> collector) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableCollectSingle *create_IoReactivexInternalOperatorsFlowableFlowableCollectSingle_initWithOrgReactivestreamsPublisher_withJavaUtilConcurrentCallable_withIoReactivexFunctionsBiConsumer_(id<OrgReactivestreamsPublisher> source, id<JavaUtilConcurrentCallable> initialSupplier, id<IoReactivexFunctionsBiConsumer> collector);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableCollectSingle)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableCollectSingle_CollectSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableCollectSingle || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableCollectSingle_CollectSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableCollectSingle_CollectSubscriber_

#define RESTRICT_OrgReactivestreamsSubscriber 1
#define INCLUDE_OrgReactivestreamsSubscriber 1
#include "org/reactivestreams/Subscriber.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "io/reactivex/disposables/Disposable.h"

@protocol IoReactivexFunctionsBiConsumer;
@protocol IoReactivexSingleObserver;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsFlowableFlowableCollectSingle_CollectSubscriber : NSObject < OrgReactivestreamsSubscriber, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexSingleObserver> actual_;
  id<IoReactivexFunctionsBiConsumer> collector_;
  id u_;
  id<OrgReactivestreamsSubscription> s_;
  jboolean done_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual
                                           withId:(id)u
               withIoReactivexFunctionsBiConsumer:(id<IoReactivexFunctionsBiConsumer>)collector;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableCollectSingle_CollectSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableCollectSingle_CollectSubscriber, actual_, id<IoReactivexSingleObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableCollectSingle_CollectSubscriber, collector_, id<IoReactivexFunctionsBiConsumer>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableCollectSingle_CollectSubscriber, u_, id)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableCollectSingle_CollectSubscriber, s_, id<OrgReactivestreamsSubscription>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableCollectSingle_CollectSubscriber_initWithIoReactivexSingleObserver_withId_withIoReactivexFunctionsBiConsumer_(IoReactivexInternalOperatorsFlowableFlowableCollectSingle_CollectSubscriber *self, id<IoReactivexSingleObserver> actual, id u, id<IoReactivexFunctionsBiConsumer> collector);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableCollectSingle_CollectSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableCollectSingle_CollectSubscriber_initWithIoReactivexSingleObserver_withId_withIoReactivexFunctionsBiConsumer_(id<IoReactivexSingleObserver> actual, id u, id<IoReactivexFunctionsBiConsumer> collector) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableCollectSingle_CollectSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableCollectSingle_CollectSubscriber_initWithIoReactivexSingleObserver_withId_withIoReactivexFunctionsBiConsumer_(id<IoReactivexSingleObserver> actual, id u, id<IoReactivexFunctionsBiConsumer> collector);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableCollectSingle_CollectSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableCollectSingle")
