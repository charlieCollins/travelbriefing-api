//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/completable/CompletableTimeout.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableTimeout")
#ifdef RESTRICT_IoReactivexInternalOperatorsCompletableCompletableTimeout
#define INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableTimeout 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableTimeout 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsCompletableCompletableTimeout

#if !defined (IoReactivexInternalOperatorsCompletableCompletableTimeout_) && (INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableTimeout || defined(INCLUDE_IoReactivexInternalOperatorsCompletableCompletableTimeout))
#define IoReactivexInternalOperatorsCompletableCompletableTimeout_

#define RESTRICT_IoReactivexCompletable 1
#define INCLUDE_IoReactivexCompletable 1
#include "io/reactivex/Completable.h"

@class IoReactivexScheduler;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexCompletableObserver;
@protocol IoReactivexCompletableSource;

@interface IoReactivexInternalOperatorsCompletableCompletableTimeout : IoReactivexCompletable {
 @public
  id<IoReactivexCompletableSource> source_;
  jlong timeout_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler *scheduler_;
  id<IoReactivexCompletableSource> other_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)source
                                            withLong:(jlong)timeout
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                            withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                    withIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)other;

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsCompletableCompletableTimeout)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableTimeout, source_, id<IoReactivexCompletableSource>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableTimeout, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableTimeout, scheduler_, IoReactivexScheduler *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableTimeout, other_, id<IoReactivexCompletableSource>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsCompletableCompletableTimeout_initWithIoReactivexCompletableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexCompletableSource_(IoReactivexInternalOperatorsCompletableCompletableTimeout *self, id<IoReactivexCompletableSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<IoReactivexCompletableSource> other);

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableTimeout *new_IoReactivexInternalOperatorsCompletableCompletableTimeout_initWithIoReactivexCompletableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexCompletableSource_(id<IoReactivexCompletableSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<IoReactivexCompletableSource> other) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableTimeout *create_IoReactivexInternalOperatorsCompletableCompletableTimeout_initWithIoReactivexCompletableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexCompletableSource_(id<IoReactivexCompletableSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<IoReactivexCompletableSource> other);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsCompletableCompletableTimeout)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableTimeout")
