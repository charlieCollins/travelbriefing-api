//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/flowable/FlowableSwitchMap.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSwitchMap")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableSwitchMap
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSwitchMap 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSwitchMap 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableSwitchMap

#if !defined (IoReactivexInternalOperatorsFlowableFlowableSwitchMap_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSwitchMap || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableSwitchMap))
#define IoReactivexInternalOperatorsFlowableFlowableSwitchMap_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "io/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream.h"

@protocol IoReactivexFunctionsFunction;
@protocol OrgReactivestreamsPublisher;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableSwitchMap : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  id<IoReactivexFunctionsFunction> mapper_;
  jint bufferSize_;
  jboolean delayErrors_;
}

#pragma mark Public

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                            withInt:(jint)bufferSize
                                        withBoolean:(jboolean)delayErrors;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableSwitchMap)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSwitchMap, mapper_, id<IoReactivexFunctionsFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableSwitchMap_initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withInt_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableSwitchMap *self, id<OrgReactivestreamsPublisher> source, id<IoReactivexFunctionsFunction> mapper, jint bufferSize, jboolean delayErrors);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSwitchMap *new_IoReactivexInternalOperatorsFlowableFlowableSwitchMap_initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withInt_withBoolean_(id<OrgReactivestreamsPublisher> source, id<IoReactivexFunctionsFunction> mapper, jint bufferSize, jboolean delayErrors) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSwitchMap *create_IoReactivexInternalOperatorsFlowableFlowableSwitchMap_initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withInt_withBoolean_(id<OrgReactivestreamsPublisher> source, id<IoReactivexFunctionsFunction> mapper, jint bufferSize, jboolean delayErrors);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableSwitchMap)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSwitchMap || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

#define RESTRICT_OrgReactivestreamsSubscriber 1
#define INCLUDE_OrgReactivestreamsSubscriber 1
#include "org/reactivestreams/Subscriber.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "org/reactivestreams/Subscription.h"

@class IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber;
@class IoReactivexInternalUtilAtomicThrowable;
@class JavaUtilConcurrentAtomicAtomicLong;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexFunctionsFunction;

@interface IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber : JavaUtilConcurrentAtomicAtomicInteger < OrgReactivestreamsSubscriber, OrgReactivestreamsSubscription > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  id<IoReactivexFunctionsFunction> mapper_;
  jint bufferSize_;
  jboolean delayErrors_;
  volatile_jboolean done_;
  IoReactivexInternalUtilAtomicThrowable *error_;
  volatile_jboolean cancelled_;
  id<OrgReactivestreamsSubscription> s_;
  JavaUtilConcurrentAtomicAtomicReference *active_;
  JavaUtilConcurrentAtomicAtomicLong *requested_;
  volatile_jlong unique_;
}

#pragma mark Public

- (void)cancel;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                    withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                             withInt:(jint)bufferSize
                                         withBoolean:(jboolean)delayErrors;

- (void)disposeInner;

- (void)drain;

@end

J2OBJC_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber, mapper_, id<IoReactivexFunctionsFunction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber, error_, IoReactivexInternalUtilAtomicThrowable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber, s_, id<OrgReactivestreamsSubscription>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber, active_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber, requested_, JavaUtilConcurrentAtomicAtomicLong *)

inline IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber *IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_get_CANCELLED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber *IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_CANCELLED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber, CANCELLED, IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper, jint bufferSize, jboolean delayErrors);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withBoolean_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper, jint bufferSize, jboolean delayErrors) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withInt_withBoolean_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper, jint bufferSize, jboolean delayErrors);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSwitchMap || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_OrgReactivestreamsSubscriber 1
#define INCLUDE_OrgReactivestreamsSubscriber 1
#include "org/reactivestreams/Subscriber.h"

@class IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber;
@protocol IoReactivexInternalFuseableSimpleQueue;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber : JavaUtilConcurrentAtomicAtomicReference < OrgReactivestreamsSubscriber > {
 @public
  IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber *parent_;
  jlong index_;
  jint bufferSize_;
  volatile_id queue_;
  volatile_jboolean done_;
  jint fusionMode_;
}

#pragma mark Public

- (void)cancel;

- (id<OrgReactivestreamsSubscription>)get;

- (id<OrgReactivestreamsSubscription>)getAndSetWithId:(id<OrgReactivestreamsSubscription>)arg0;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber:(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber *)parent
                                                                                         withLong:(jlong)index
                                                                                          withInt:(jint)bufferSize;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber, parent_, IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber *)
J2OBJC_VOLATILE_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber, queue_, id<IoReactivexInternalFuseableSimpleQueue>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_withLong_withInt_(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber *self, IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber *parent, jlong index, jint bufferSize);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_withLong_withInt_(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber *parent, jlong index, jint bufferSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber_withLong_withInt_(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapSubscriber *parent, jlong index, jint bufferSize);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableSwitchMap_SwitchMapInnerSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSwitchMap")
