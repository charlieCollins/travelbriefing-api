//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/observers/BaseTestConsumer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "io/reactivex/Notification.h"
#include "io/reactivex/exceptions/CompositeException.h"
#include "io/reactivex/functions/Predicate.h"
#include "io/reactivex/internal/functions/Functions.h"
#include "io/reactivex/internal/functions/ObjectHelper.h"
#include "io/reactivex/internal/util/ExceptionHelper.h"
#include "io/reactivex/observers/BaseTestConsumer.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Exception.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Iterable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Thread.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/concurrent/CountDownLatch.h"
#include "java/util/concurrent/TimeUnit.h"

#pragma clang diagnostic ignored "-Wprotocol"

__attribute__((unused)) static id<JavaUtilList> IoReactivexObserversBaseTestConsumer_values(IoReactivexObserversBaseTestConsumer *self);

__attribute__((unused)) static id<JavaUtilList> IoReactivexObserversBaseTestConsumer_errors(IoReactivexObserversBaseTestConsumer *self);

__attribute__((unused)) static JavaLangAssertionError *IoReactivexObserversBaseTestConsumer_failWithNSString_(IoReactivexObserversBaseTestConsumer *self, NSString *message);

__attribute__((unused)) static IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_await(IoReactivexObserversBaseTestConsumer *self);

__attribute__((unused)) static jboolean IoReactivexObserversBaseTestConsumer_awaitWithLong_withJavaUtilConcurrentTimeUnit_(IoReactivexObserversBaseTestConsumer *self, jlong time, JavaUtilConcurrentTimeUnit *unit);

__attribute__((unused)) static IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertComplete(IoReactivexObserversBaseTestConsumer *self);

__attribute__((unused)) static IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertNotComplete(IoReactivexObserversBaseTestConsumer *self);

__attribute__((unused)) static IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertNoErrors(IoReactivexObserversBaseTestConsumer *self);

__attribute__((unused)) static IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertErrorWithIOSClass_(IoReactivexObserversBaseTestConsumer *self, IOSClass *errorClass);

__attribute__((unused)) static IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertErrorWithIoReactivexFunctionsPredicate_(IoReactivexObserversBaseTestConsumer *self, id<IoReactivexFunctionsPredicate> errorPredicate);

__attribute__((unused)) static IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertValueAtWithInt_withIoReactivexFunctionsPredicate_(IoReactivexObserversBaseTestConsumer *self, jint index, id<IoReactivexFunctionsPredicate> valuePredicate);

__attribute__((unused)) static IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertValueCountWithInt_(IoReactivexObserversBaseTestConsumer *self, jint count);

__attribute__((unused)) static IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertNoValues(IoReactivexObserversBaseTestConsumer *self);

__attribute__((unused)) static IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertValuesWithNSObjectArray_(IoReactivexObserversBaseTestConsumer *self, IOSObjectArray *values);

__attribute__((unused)) static IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertErrorMessageWithNSString_(IoReactivexObserversBaseTestConsumer *self, NSString *message);

@implementation IoReactivexObserversBaseTestConsumer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexObserversBaseTestConsumer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaLangThread *)lastThread {
  return lastThread_;
}

- (id<JavaUtilList>)values {
  return IoReactivexObserversBaseTestConsumer_values(self);
}

- (id<JavaUtilList>)errors {
  return IoReactivexObserversBaseTestConsumer_errors(self);
}

- (jlong)completions {
  return completions_;
}

- (jboolean)isTerminated {
  return [((JavaUtilConcurrentCountDownLatch *) nil_chk(done_)) getCount] == 0;
}

- (jint)valueCount {
  return [((id<JavaUtilList>) nil_chk(values_)) size];
}

- (jint)errorCount {
  return [((id<JavaUtilList>) nil_chk(errors_)) size];
}

- (JavaLangAssertionError *)failWithNSString:(NSString *)message {
  return IoReactivexObserversBaseTestConsumer_failWithNSString_(self, message);
}

- (IoReactivexObserversBaseTestConsumer *)await {
  return IoReactivexObserversBaseTestConsumer_await(self);
}

- (jboolean)awaitWithLong:(jlong)time
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return IoReactivexObserversBaseTestConsumer_awaitWithLong_withJavaUtilConcurrentTimeUnit_(self, time, unit);
}

- (IoReactivexObserversBaseTestConsumer *)assertComplete {
  return IoReactivexObserversBaseTestConsumer_assertComplete(self);
}

- (IoReactivexObserversBaseTestConsumer *)assertNotComplete {
  return IoReactivexObserversBaseTestConsumer_assertNotComplete(self);
}

- (IoReactivexObserversBaseTestConsumer *)assertNoErrors {
  return IoReactivexObserversBaseTestConsumer_assertNoErrors(self);
}

- (IoReactivexObserversBaseTestConsumer *)assertErrorWithNSException:(NSException *)error {
  return IoReactivexObserversBaseTestConsumer_assertErrorWithIoReactivexFunctionsPredicate_(self, IoReactivexInternalFunctionsFunctions_equalsWithWithId_(error));
}

- (IoReactivexObserversBaseTestConsumer *)assertErrorWithIOSClass:(IOSClass *)errorClass {
  return IoReactivexObserversBaseTestConsumer_assertErrorWithIOSClass_(self, errorClass);
}

- (IoReactivexObserversBaseTestConsumer *)assertErrorWithIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)errorPredicate {
  return IoReactivexObserversBaseTestConsumer_assertErrorWithIoReactivexFunctionsPredicate_(self, errorPredicate);
}

- (IoReactivexObserversBaseTestConsumer *)assertValueWithId:(id)value {
  jint s = [((id<JavaUtilList>) nil_chk(values_)) size];
  if (s != 1) {
    @throw IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$$$@", @"Expected: ", IoReactivexObserversBaseTestConsumer_valueAndClassWithId_(value), @", Actual: ", values_));
  }
  id v = [values_ getWithInt:0];
  if (!IoReactivexInternalFunctionsObjectHelper_equalsWithId_withId_(value, v)) {
    @throw IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$$$$", @"Expected: ", IoReactivexObserversBaseTestConsumer_valueAndClassWithId_(value), @", Actual: ", IoReactivexObserversBaseTestConsumer_valueAndClassWithId_(v)));
  }
  return self;
}

- (IoReactivexObserversBaseTestConsumer *)assertNeverWithId:(id)value {
  jint s = [((id<JavaUtilList>) nil_chk(values_)) size];
  for (jint i = 0; i < s; i++) {
    id v = [self->values_ getWithInt:i];
    if (IoReactivexInternalFunctionsObjectHelper_equalsWithId_withId_(v, value)) {
      @throw IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$I$$$", @"Value at position ", i, @" is equal to ", IoReactivexObserversBaseTestConsumer_valueAndClassWithId_(value), @"; Expected them to be different"));
    }
  }
  return self;
}

- (IoReactivexObserversBaseTestConsumer *)assertValueWithIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)valuePredicate {
  IoReactivexObserversBaseTestConsumer_assertValueAtWithInt_withIoReactivexFunctionsPredicate_(self, 0, valuePredicate);
  if ([((id<JavaUtilList>) nil_chk(values_)) size] > 1) {
    @throw IoReactivexObserversBaseTestConsumer_failWithNSString_(self, @"Value present but other values as well");
  }
  return self;
}

- (IoReactivexObserversBaseTestConsumer *)assertNeverWithIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)valuePredicate {
  jint s = [((id<JavaUtilList>) nil_chk(values_)) size];
  for (jint i = 0; i < s; i++) {
    id v = [self->values_ getWithInt:i];
    @try {
      if ([((id<IoReactivexFunctionsPredicate>) nil_chk(valuePredicate)) testWithId:v]) {
        @throw IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$I$$$", @"Value at position ", i, @" matches predicate ", [valuePredicate description], @", which was not expected."));
      }
    }
    @catch (JavaLangException *ex) {
      @throw IoReactivexInternalUtilExceptionHelper_wrapOrThrowWithNSException_(ex);
    }
  }
  return self;
}

- (IoReactivexObserversBaseTestConsumer *)assertValueAtWithInt:(jint)index
                             withIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)valuePredicate {
  return IoReactivexObserversBaseTestConsumer_assertValueAtWithInt_withIoReactivexFunctionsPredicate_(self, index, valuePredicate);
}

+ (NSString *)valueAndClassWithId:(id)o {
  return IoReactivexObserversBaseTestConsumer_valueAndClassWithId_(o);
}

- (IoReactivexObserversBaseTestConsumer *)assertValueCountWithInt:(jint)count {
  return IoReactivexObserversBaseTestConsumer_assertValueCountWithInt_(self, count);
}

- (IoReactivexObserversBaseTestConsumer *)assertNoValues {
  return IoReactivexObserversBaseTestConsumer_assertNoValues(self);
}

- (IoReactivexObserversBaseTestConsumer *)assertValuesWithNSObjectArray:(IOSObjectArray *)values {
  return IoReactivexObserversBaseTestConsumer_assertValuesWithNSObjectArray_(self, values);
}

- (IoReactivexObserversBaseTestConsumer *)assertValueSetWithJavaUtilCollection:(id<JavaUtilCollection>)expected {
  if ([((id<JavaUtilCollection>) nil_chk(expected)) isEmpty]) {
    IoReactivexObserversBaseTestConsumer_assertNoValues(self);
    return self;
  }
  for (id __strong v in nil_chk(self->values_)) {
    if (![expected containsWithId:v]) {
      @throw IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$$", @"Value not in the expected collection: ", IoReactivexObserversBaseTestConsumer_valueAndClassWithId_(v)));
    }
  }
  return self;
}

- (IoReactivexObserversBaseTestConsumer *)assertValueSequenceWithJavaLangIterable:(id<JavaLangIterable>)sequence {
  jint i = 0;
  id<JavaUtilIterator> vit = [((id<JavaUtilList>) nil_chk(values_)) iterator];
  id<JavaUtilIterator> it = [((id<JavaLangIterable>) nil_chk(sequence)) iterator];
  jboolean actualNext;
  jboolean expectedNext;
  for (; ; ) {
    actualNext = [((id<JavaUtilIterator>) nil_chk(it)) hasNext];
    expectedNext = [((id<JavaUtilIterator>) nil_chk(vit)) hasNext];
    if (!actualNext || !expectedNext) {
      break;
    }
    id v = [it next];
    id u = [vit next];
    if (!IoReactivexInternalFunctionsObjectHelper_equalsWithId_withId_(u, v)) {
      @throw IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$I$$$$", @"Values at position ", i, @" differ; Expected: ", IoReactivexObserversBaseTestConsumer_valueAndClassWithId_(u), @", Actual: ", IoReactivexObserversBaseTestConsumer_valueAndClassWithId_(v)));
    }
    i++;
  }
  if (actualNext) {
    @throw IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$IC", @"More values received than expected (", i, ')'));
  }
  if (expectedNext) {
    @throw IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$IC", @"Fever values received than expected (", i, ')'));
  }
  return self;
}

- (IoReactivexObserversBaseTestConsumer *)assertTerminated {
  if ([((JavaUtilConcurrentCountDownLatch *) nil_chk(done_)) getCount] != 0) {
    @throw IoReactivexObserversBaseTestConsumer_failWithNSString_(self, @"Subscriber still running!");
  }
  jlong c = completions_;
  if (c > 1) {
    @throw IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$J", @"Terminated with multiple completions: ", c));
  }
  jint s = [((id<JavaUtilList>) nil_chk(errors_)) size];
  if (s > 1) {
    @throw IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$I", @"Terminated with multiple errors: ", s));
  }
  if (c != 0 && s != 0) {
    @throw IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$J", @"Terminated with multiple completions and errors: ", c));
  }
  return self;
}

- (IoReactivexObserversBaseTestConsumer *)assertNotTerminated {
  if ([((JavaUtilConcurrentCountDownLatch *) nil_chk(done_)) getCount] == 0) {
    @throw IoReactivexObserversBaseTestConsumer_failWithNSString_(self, @"Subscriber terminated!");
  }
  return self;
}

- (jboolean)awaitTerminalEvent {
  @try {
    IoReactivexObserversBaseTestConsumer_await(self);
    return true;
  }
  @catch (JavaLangInterruptedException *ex) {
    [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) interrupt];
    return false;
  }
}

- (jboolean)awaitTerminalEventWithLong:(jlong)duration
        withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  @try {
    return IoReactivexObserversBaseTestConsumer_awaitWithLong_withJavaUtilConcurrentTimeUnit_(self, duration, unit);
  }
  @catch (JavaLangInterruptedException *ex) {
    [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) interrupt];
    return false;
  }
}

- (IoReactivexObserversBaseTestConsumer *)assertErrorMessageWithNSString:(NSString *)message {
  return IoReactivexObserversBaseTestConsumer_assertErrorMessageWithNSString_(self, message);
}

- (id<JavaUtilList>)getEvents {
  id<JavaUtilList> result = create_JavaUtilArrayList_init();
  [result addWithId:IoReactivexObserversBaseTestConsumer_values(self)];
  [result addWithId:IoReactivexObserversBaseTestConsumer_errors(self)];
  id<JavaUtilList> completeList = create_JavaUtilArrayList_init();
  for (jlong i = 0; i < completions_; i++) {
    [completeList addWithId:IoReactivexNotification_createOnComplete()];
  }
  [result addWithId:completeList];
  return result;
}

- (IoReactivexObserversBaseTestConsumer *)assertSubscribed {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IoReactivexObserversBaseTestConsumer *)assertNotSubscribed {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IoReactivexObserversBaseTestConsumer *)assertResultWithNSObjectArray:(IOSObjectArray *)values {
  return IoReactivexObserversBaseTestConsumer_assertComplete(nil_chk(IoReactivexObserversBaseTestConsumer_assertNoErrors(nil_chk(IoReactivexObserversBaseTestConsumer_assertValuesWithNSObjectArray_(nil_chk([self assertSubscribed]), values)))));
}

- (IoReactivexObserversBaseTestConsumer *)assertFailureWithIOSClass:(IOSClass *)error
                                                  withNSObjectArray:(IOSObjectArray *)values {
  return IoReactivexObserversBaseTestConsumer_assertNotComplete(nil_chk(IoReactivexObserversBaseTestConsumer_assertErrorWithIOSClass_(nil_chk(IoReactivexObserversBaseTestConsumer_assertValuesWithNSObjectArray_(nil_chk([self assertSubscribed]), values)), error)));
}

- (IoReactivexObserversBaseTestConsumer *)assertFailureWithIoReactivexFunctionsPredicate:(id<IoReactivexFunctionsPredicate>)errorPredicate
                                                                       withNSObjectArray:(IOSObjectArray *)values {
  return IoReactivexObserversBaseTestConsumer_assertNotComplete(nil_chk(IoReactivexObserversBaseTestConsumer_assertErrorWithIoReactivexFunctionsPredicate_(nil_chk(IoReactivexObserversBaseTestConsumer_assertValuesWithNSObjectArray_(nil_chk([self assertSubscribed]), values)), errorPredicate)));
}

- (IoReactivexObserversBaseTestConsumer *)assertFailureAndMessageWithIOSClass:(IOSClass *)error
                                                                 withNSString:(NSString *)message
                                                            withNSObjectArray:(IOSObjectArray *)values {
  return IoReactivexObserversBaseTestConsumer_assertNotComplete(nil_chk(IoReactivexObserversBaseTestConsumer_assertErrorMessageWithNSString_(nil_chk(IoReactivexObserversBaseTestConsumer_assertErrorWithIOSClass_(nil_chk(IoReactivexObserversBaseTestConsumer_assertValuesWithNSObjectArray_(nil_chk([self assertSubscribed]), values)), error)), message)));
}

- (IoReactivexObserversBaseTestConsumer *)awaitDoneWithLong:(jlong)time
                             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  @try {
    if (![((JavaUtilConcurrentCountDownLatch *) nil_chk(done_)) awaitWithLong:time withJavaUtilConcurrentTimeUnit:unit]) {
      [self dispose];
    }
  }
  @catch (JavaLangInterruptedException *ex) {
    [self dispose];
    @throw IoReactivexInternalUtilExceptionHelper_wrapOrThrowWithNSException_(ex);
  }
  return self;
}

- (IoReactivexObserversBaseTestConsumer *)assertEmpty {
  return IoReactivexObserversBaseTestConsumer_assertNotComplete(nil_chk(IoReactivexObserversBaseTestConsumer_assertNoErrors(nil_chk(IoReactivexObserversBaseTestConsumer_assertNoValues(nil_chk([self assertSubscribed]))))));
}

- (void)dealloc {
  RELEASE_(done_);
  RELEASE_(values_);
  RELEASE_(errors_);
  RELEASE_(lastThread_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThread;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x11, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaUtilList;", 0x11, -1, -1, -1, 1, -1, -1 },
    { NULL, "J", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangAssertionError;", 0x14, 2, 3, -1, -1, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, -1, -1, 4, 5, -1, -1 },
    { NULL, "Z", 0x11, 6, 7, 4, -1, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, -1, -1, -1, 5, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, -1, -1, -1, 5, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, -1, -1, -1, 5, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, 8, 9, -1, 10, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, 8, 11, -1, 12, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, 8, 13, -1, 14, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, 15, 16, -1, 17, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, 18, 16, -1, 17, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, 15, 13, -1, 19, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, 18, 13, -1, 20, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, 21, 22, -1, 23, -1, -1 },
    { NULL, "LNSString;", 0x9, 24, 16, -1, -1, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, 25, 26, -1, 27, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, -1, -1, -1, 5, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x91, 28, 29, -1, 30, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, 31, 32, -1, 33, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, 34, 35, -1, 36, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, -1, -1, -1, 5, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, -1, -1, -1, 5, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 37, 7, -1, -1, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, 38, 3, -1, 39, -1, -1 },
    { NULL, "LJavaUtilList;", 0x11, -1, -1, -1, 40, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x401, -1, -1, -1, 5, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x401, -1, -1, -1, 5, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x91, 41, 29, -1, 30, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x91, 42, 43, -1, 44, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x91, 42, 45, -1, 46, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x91, 47, 48, -1, 49, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, 50, 7, -1, 51, -1, -1 },
    { NULL, "LIoReactivexObserversBaseTestConsumer;", 0x11, -1, -1, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(lastThread);
  methods[2].selector = @selector(values);
  methods[3].selector = @selector(errors);
  methods[4].selector = @selector(completions);
  methods[5].selector = @selector(isTerminated);
  methods[6].selector = @selector(valueCount);
  methods[7].selector = @selector(errorCount);
  methods[8].selector = @selector(failWithNSString:);
  methods[9].selector = @selector(await);
  methods[10].selector = @selector(awaitWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[11].selector = @selector(assertComplete);
  methods[12].selector = @selector(assertNotComplete);
  methods[13].selector = @selector(assertNoErrors);
  methods[14].selector = @selector(assertErrorWithNSException:);
  methods[15].selector = @selector(assertErrorWithIOSClass:);
  methods[16].selector = @selector(assertErrorWithIoReactivexFunctionsPredicate:);
  methods[17].selector = @selector(assertValueWithId:);
  methods[18].selector = @selector(assertNeverWithId:);
  methods[19].selector = @selector(assertValueWithIoReactivexFunctionsPredicate:);
  methods[20].selector = @selector(assertNeverWithIoReactivexFunctionsPredicate:);
  methods[21].selector = @selector(assertValueAtWithInt:withIoReactivexFunctionsPredicate:);
  methods[22].selector = @selector(valueAndClassWithId:);
  methods[23].selector = @selector(assertValueCountWithInt:);
  methods[24].selector = @selector(assertNoValues);
  methods[25].selector = @selector(assertValuesWithNSObjectArray:);
  methods[26].selector = @selector(assertValueSetWithJavaUtilCollection:);
  methods[27].selector = @selector(assertValueSequenceWithJavaLangIterable:);
  methods[28].selector = @selector(assertTerminated);
  methods[29].selector = @selector(assertNotTerminated);
  methods[30].selector = @selector(awaitTerminalEvent);
  methods[31].selector = @selector(awaitTerminalEventWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[32].selector = @selector(assertErrorMessageWithNSString:);
  methods[33].selector = @selector(getEvents);
  methods[34].selector = @selector(assertSubscribed);
  methods[35].selector = @selector(assertNotSubscribed);
  methods[36].selector = @selector(assertResultWithNSObjectArray:);
  methods[37].selector = @selector(assertFailureWithIOSClass:withNSObjectArray:);
  methods[38].selector = @selector(assertFailureWithIoReactivexFunctionsPredicate:withNSObjectArray:);
  methods[39].selector = @selector(assertFailureAndMessageWithIOSClass:withNSString:withNSObjectArray:);
  methods[40].selector = @selector(awaitDoneWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[41].selector = @selector(assertEmpty);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "done_", "LJavaUtilConcurrentCountDownLatch;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "values_", "LJavaUtilList;", .constantValue.asLong = 0, 0x14, -1, -1, 52, -1 },
    { "errors_", "LJavaUtilList;", .constantValue.asLong = 0, 0x14, -1, -1, 53, -1 },
    { "completions_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "lastThread_", "LJavaLangThread;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "checkSubscriptionOnce_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "initialFusionMode_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "establishedFusionMode_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/List<TT;>;", "()Ljava/util/List<Ljava/lang/Throwable;>;", "fail", "LNSString;", "LJavaLangInterruptedException;", "()TU;", "await", "JLJavaUtilConcurrentTimeUnit;", "assertError", "LNSException;", "(Ljava/lang/Throwable;)TU;", "LIOSClass;", "(Ljava/lang/Class<+Ljava/lang/Throwable;>;)TU;", "LIoReactivexFunctionsPredicate;", "(Lio/reactivex/functions/Predicate<Ljava/lang/Throwable;>;)TU;", "assertValue", "LNSObject;", "(TT;)TU;", "assertNever", "(Lio/reactivex/functions/Predicate<TT;>;)TU;", "(Lio/reactivex/functions/Predicate<-TT;>;)TU;", "assertValueAt", "ILIoReactivexFunctionsPredicate;", "(ILio/reactivex/functions/Predicate<TT;>;)TU;", "valueAndClass", "assertValueCount", "I", "(I)TU;", "assertValues", "[LNSObject;", "([TT;)TU;", "assertValueSet", "LJavaUtilCollection;", "(Ljava/util/Collection<+TT;>;)TU;", "assertValueSequence", "LJavaLangIterable;", "(Ljava/lang/Iterable<+TT;>;)TU;", "awaitTerminalEvent", "assertErrorMessage", "(Ljava/lang/String;)TU;", "()Ljava/util/List<Ljava/util/List<Ljava/lang/Object;>;>;", "assertResult", "assertFailure", "LIOSClass;[LNSObject;", "(Ljava/lang/Class<+Ljava/lang/Throwable;>;[TT;)TU;", "LIoReactivexFunctionsPredicate;[LNSObject;", "(Lio/reactivex/functions/Predicate<Ljava/lang/Throwable;>;[TT;)TU;", "assertFailureAndMessage", "LIOSClass;LNSString;[LNSObject;", "(Ljava/lang/Class<+Ljava/lang/Throwable;>;Ljava/lang/String;[TT;)TU;", "awaitDone", "(JLjava/util/concurrent/TimeUnit;)TU;", "Ljava/util/List<TT;>;", "Ljava/util/List<Ljava/lang/Throwable;>;", "<T:Ljava/lang/Object;U:Lio/reactivex/observers/BaseTestConsumer<TT;TU;>;>Ljava/lang/Object;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexObserversBaseTestConsumer = { "BaseTestConsumer", "io.reactivex.observers", ptrTable, methods, fields, 7, 0x401, 42, 8, -1, -1, -1, 54, -1 };
  return &_IoReactivexObserversBaseTestConsumer;
}

@end

void IoReactivexObserversBaseTestConsumer_init(IoReactivexObserversBaseTestConsumer *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->values_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->errors_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->done_, new_JavaUtilConcurrentCountDownLatch_initWithInt_(1));
}

id<JavaUtilList> IoReactivexObserversBaseTestConsumer_values(IoReactivexObserversBaseTestConsumer *self) {
  return self->values_;
}

id<JavaUtilList> IoReactivexObserversBaseTestConsumer_errors(IoReactivexObserversBaseTestConsumer *self) {
  return self->errors_;
}

JavaLangAssertionError *IoReactivexObserversBaseTestConsumer_failWithNSString_(IoReactivexObserversBaseTestConsumer *self, NSString *message) {
  JavaLangStringBuilder *b = create_JavaLangStringBuilder_initWithInt_(64 + ((jint) [((NSString *) nil_chk(message)) length]));
  [b appendWithNSString:message];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([b appendWithNSString:@" ("])) appendWithNSString:@"latch = "])) appendWithLong:[((JavaUtilConcurrentCountDownLatch *) nil_chk(self->done_)) getCount]])) appendWithNSString:@", "])) appendWithNSString:@"values = "])) appendWithInt:[((id<JavaUtilList>) nil_chk(self->values_)) size]])) appendWithNSString:@", "])) appendWithNSString:@"errors = "])) appendWithInt:[((id<JavaUtilList>) nil_chk(self->errors_)) size]])) appendWithNSString:@", "])) appendWithNSString:@"completions = "])) appendWithLong:self->completions_])) appendWithChar:')'];
  JavaLangAssertionError *ae = create_JavaLangAssertionError_initWithId_([b description]);
  if (![self->errors_ isEmpty]) {
    if ([self->errors_ size] == 1) {
      [ae initCauseWithNSException:[self->errors_ getWithInt:0]];
    }
    else {
      IoReactivexExceptionsCompositeException *ce = create_IoReactivexExceptionsCompositeException_initWithJavaLangIterable_(self->errors_);
      [ae initCauseWithNSException:ce];
    }
  }
  return ae;
}

IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_await(IoReactivexObserversBaseTestConsumer *self) {
  if ([((JavaUtilConcurrentCountDownLatch *) nil_chk(self->done_)) getCount] == 0) {
    return self;
  }
  [self->done_ await];
  return self;
}

jboolean IoReactivexObserversBaseTestConsumer_awaitWithLong_withJavaUtilConcurrentTimeUnit_(IoReactivexObserversBaseTestConsumer *self, jlong time, JavaUtilConcurrentTimeUnit *unit) {
  return [((JavaUtilConcurrentCountDownLatch *) nil_chk(self->done_)) getCount] == 0 || [self->done_ awaitWithLong:time withJavaUtilConcurrentTimeUnit:unit];
}

IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertComplete(IoReactivexObserversBaseTestConsumer *self) {
  jlong c = self->completions_;
  if (c == 0) {
    @throw IoReactivexObserversBaseTestConsumer_failWithNSString_(self, @"Not completed");
  }
  else if (c > 1) {
    @throw IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$J", @"Multiple completions: ", c));
  }
  return self;
}

IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertNotComplete(IoReactivexObserversBaseTestConsumer *self) {
  jlong c = self->completions_;
  if (c == 1) {
    @throw IoReactivexObserversBaseTestConsumer_failWithNSString_(self, @"Completed!");
  }
  else if (c > 1) {
    @throw IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$J", @"Multiple completions: ", c));
  }
  return self;
}

IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertNoErrors(IoReactivexObserversBaseTestConsumer *self) {
  jint s = [((id<JavaUtilList>) nil_chk(self->errors_)) size];
  if (s != 0) {
    @throw IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$@", @"Error(s) present: ", self->errors_));
  }
  return self;
}

IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertErrorWithIOSClass_(IoReactivexObserversBaseTestConsumer *self, IOSClass *errorClass) {
  return IoReactivexObserversBaseTestConsumer_assertErrorWithIoReactivexFunctionsPredicate_(self, IoReactivexInternalFunctionsFunctions_isInstanceOfWithIOSClass_(errorClass));
}

IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertErrorWithIoReactivexFunctionsPredicate_(IoReactivexObserversBaseTestConsumer *self, id<IoReactivexFunctionsPredicate> errorPredicate) {
  jint s = [((id<JavaUtilList>) nil_chk(self->errors_)) size];
  if (s == 0) {
    @throw IoReactivexObserversBaseTestConsumer_failWithNSString_(self, @"No errors");
  }
  jboolean found = false;
  for (NSException * __strong e in self->errors_) {
    @try {
      if ([((id<IoReactivexFunctionsPredicate>) nil_chk(errorPredicate)) testWithId:e]) {
        found = true;
        break;
      }
    }
    @catch (JavaLangException *ex) {
      @throw IoReactivexInternalUtilExceptionHelper_wrapOrThrowWithNSException_(ex);
    }
  }
  if (found) {
    if (s != 1) {
      @throw IoReactivexObserversBaseTestConsumer_failWithNSString_(self, @"Error present but other errors as well");
    }
  }
  else {
    @throw IoReactivexObserversBaseTestConsumer_failWithNSString_(self, @"Error not present");
  }
  return self;
}

IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertValueAtWithInt_withIoReactivexFunctionsPredicate_(IoReactivexObserversBaseTestConsumer *self, jint index, id<IoReactivexFunctionsPredicate> valuePredicate) {
  jint s = [((id<JavaUtilList>) nil_chk(self->values_)) size];
  if (s == 0) {
    @throw IoReactivexObserversBaseTestConsumer_failWithNSString_(self, @"No values");
  }
  if (index >= [self->values_ size]) {
    @throw IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$I", @"Invalid index: ", index));
  }
  jboolean found = false;
  @try {
    if ([((id<IoReactivexFunctionsPredicate>) nil_chk(valuePredicate)) testWithId:[self->values_ getWithInt:index]]) {
      found = true;
    }
  }
  @catch (JavaLangException *ex) {
    @throw IoReactivexInternalUtilExceptionHelper_wrapOrThrowWithNSException_(ex);
  }
  if (!found) {
    @throw IoReactivexObserversBaseTestConsumer_failWithNSString_(self, @"Value not present");
  }
  return self;
}

NSString *IoReactivexObserversBaseTestConsumer_valueAndClassWithId_(id o) {
  IoReactivexObserversBaseTestConsumer_initialize();
  if (o != nil) {
    return JreStrcat("@$$C", o, @" (class: ", [[o java_getClass] getSimpleName], ')');
  }
  return @"null";
}

IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertValueCountWithInt_(IoReactivexObserversBaseTestConsumer *self, jint count) {
  jint s = [((id<JavaUtilList>) nil_chk(self->values_)) size];
  if (s != count) {
    @throw IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$I$I", @"Value counts differ; Expected: ", count, @", Actual: ", s));
  }
  return self;
}

IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertNoValues(IoReactivexObserversBaseTestConsumer *self) {
  return IoReactivexObserversBaseTestConsumer_assertValueCountWithInt_(self, 0);
}

IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertValuesWithNSObjectArray_(IoReactivexObserversBaseTestConsumer *self, IOSObjectArray *values) {
  jint s = [((id<JavaUtilList>) nil_chk(self->values_)) size];
  if (s != ((IOSObjectArray *) nil_chk(values))->size_) {
    @throw IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$IC$$IC@", @"Value count differs; Expected: ", values->size_, ' ', JavaUtilArrays_toStringWithNSObjectArray_(values), @", Actual: ", s, ' ', self->values_));
  }
  for (jint i = 0; i < s; i++) {
    id v = [self->values_ getWithInt:i];
    id u = IOSObjectArray_Get(values, i);
    if (!IoReactivexInternalFunctionsObjectHelper_equalsWithId_withId_(u, v)) {
      @throw IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$I$$$$", @"Values at position ", i, @" differ; Expected: ", IoReactivexObserversBaseTestConsumer_valueAndClassWithId_(u), @", Actual: ", IoReactivexObserversBaseTestConsumer_valueAndClassWithId_(v)));
    }
  }
  return self;
}

IoReactivexObserversBaseTestConsumer *IoReactivexObserversBaseTestConsumer_assertErrorMessageWithNSString_(IoReactivexObserversBaseTestConsumer *self, NSString *message) {
  jint s = [((id<JavaUtilList>) nil_chk(self->errors_)) size];
  if (s == 0) {
    @throw IoReactivexObserversBaseTestConsumer_failWithNSString_(self, @"No errors");
  }
  else if (s == 1) {
    NSException *e = [self->errors_ getWithInt:0];
    NSString *errorMessage = [((NSException *) nil_chk(e)) getMessage];
    if (!IoReactivexInternalFunctionsObjectHelper_equalsWithId_withId_(message, errorMessage)) {
      @throw IoReactivexObserversBaseTestConsumer_failWithNSString_(self, JreStrcat("$$$$", @"Error message differs; Expected: ", message, @", Actual: ", errorMessage));
    }
  }
  else {
    @throw IoReactivexObserversBaseTestConsumer_failWithNSString_(self, @"Multiple errors");
  }
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexObserversBaseTestConsumer)
