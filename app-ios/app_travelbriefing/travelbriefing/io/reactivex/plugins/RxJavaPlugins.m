//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/plugins/RxJavaPlugins.java
//

#include "J2ObjC_source.h"
#include "io/reactivex/Completable.h"
#include "io/reactivex/CompletableObserver.h"
#include "io/reactivex/Flowable.h"
#include "io/reactivex/Maybe.h"
#include "io/reactivex/MaybeObserver.h"
#include "io/reactivex/Observable.h"
#include "io/reactivex/Observer.h"
#include "io/reactivex/Scheduler.h"
#include "io/reactivex/Single.h"
#include "io/reactivex/SingleObserver.h"
#include "io/reactivex/exceptions/CompositeException.h"
#include "io/reactivex/exceptions/MissingBackpressureException.h"
#include "io/reactivex/exceptions/OnErrorNotImplementedException.h"
#include "io/reactivex/exceptions/UndeliverableException.h"
#include "io/reactivex/flowables/ConnectableFlowable.h"
#include "io/reactivex/functions/BiFunction.h"
#include "io/reactivex/functions/BooleanSupplier.h"
#include "io/reactivex/functions/Consumer.h"
#include "io/reactivex/functions/Function.h"
#include "io/reactivex/internal/functions/ObjectHelper.h"
#include "io/reactivex/internal/schedulers/ComputationScheduler.h"
#include "io/reactivex/internal/schedulers/IoScheduler.h"
#include "io/reactivex/internal/schedulers/NewThreadScheduler.h"
#include "io/reactivex/internal/schedulers/SingleScheduler.h"
#include "io/reactivex/internal/util/ExceptionHelper.h"
#include "io/reactivex/observables/ConnectableObservable.h"
#include "io/reactivex/parallel/ParallelFlowable.h"
#include "io/reactivex/plugins/RxJavaPlugins.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Thread.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "org/reactivestreams/Subscriber.h"

@interface IoReactivexPluginsRxJavaPlugins ()

- (instancetype)init;

@end

__attribute__((unused)) static void IoReactivexPluginsRxJavaPlugins_init(IoReactivexPluginsRxJavaPlugins *self);

__attribute__((unused)) static IoReactivexPluginsRxJavaPlugins *new_IoReactivexPluginsRxJavaPlugins_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexPluginsRxJavaPlugins *create_IoReactivexPluginsRxJavaPlugins_init();

volatile_id IoReactivexPluginsRxJavaPlugins_errorHandler;
volatile_id IoReactivexPluginsRxJavaPlugins_onScheduleHandler;
volatile_id IoReactivexPluginsRxJavaPlugins_onInitComputationHandler;
volatile_id IoReactivexPluginsRxJavaPlugins_onInitSingleHandler;
volatile_id IoReactivexPluginsRxJavaPlugins_onInitIoHandler;
volatile_id IoReactivexPluginsRxJavaPlugins_onInitNewThreadHandler;
volatile_id IoReactivexPluginsRxJavaPlugins_onComputationHandler;
volatile_id IoReactivexPluginsRxJavaPlugins_onSingleHandler;
volatile_id IoReactivexPluginsRxJavaPlugins_onIoHandler;
volatile_id IoReactivexPluginsRxJavaPlugins_onNewThreadHandler;
volatile_id IoReactivexPluginsRxJavaPlugins_onFlowableAssembly;
volatile_id IoReactivexPluginsRxJavaPlugins_onConnectableFlowableAssembly;
volatile_id IoReactivexPluginsRxJavaPlugins_onObservableAssembly;
volatile_id IoReactivexPluginsRxJavaPlugins_onConnectableObservableAssembly;
volatile_id IoReactivexPluginsRxJavaPlugins_onMaybeAssembly;
volatile_id IoReactivexPluginsRxJavaPlugins_onSingleAssembly;
volatile_id IoReactivexPluginsRxJavaPlugins_onCompletableAssembly;
volatile_id IoReactivexPluginsRxJavaPlugins_onParallelAssembly;
volatile_id IoReactivexPluginsRxJavaPlugins_onFlowableSubscribe;
volatile_id IoReactivexPluginsRxJavaPlugins_onMaybeSubscribe;
volatile_id IoReactivexPluginsRxJavaPlugins_onObservableSubscribe;
volatile_id IoReactivexPluginsRxJavaPlugins_onSingleSubscribe;
volatile_id IoReactivexPluginsRxJavaPlugins_onCompletableSubscribe;
volatile_id IoReactivexPluginsRxJavaPlugins_onBeforeBlocking_;
volatile_jboolean IoReactivexPluginsRxJavaPlugins_lockdown_;
volatile_jboolean IoReactivexPluginsRxJavaPlugins_failNonBlockingScheduler;

@implementation IoReactivexPluginsRxJavaPlugins

+ (void)lockdown {
  IoReactivexPluginsRxJavaPlugins_lockdown();
}

+ (jboolean)isLockdown {
  return IoReactivexPluginsRxJavaPlugins_isLockdown();
}

+ (void)setFailOnNonBlockingSchedulerWithBoolean:(jboolean)enable {
  IoReactivexPluginsRxJavaPlugins_setFailOnNonBlockingSchedulerWithBoolean_(enable);
}

+ (jboolean)isFailOnNonBlockingScheduler {
  return IoReactivexPluginsRxJavaPlugins_isFailOnNonBlockingScheduler();
}

+ (id<IoReactivexFunctionsFunction>)getComputationSchedulerHandler {
  return IoReactivexPluginsRxJavaPlugins_getComputationSchedulerHandler();
}

+ (id<IoReactivexFunctionsConsumer>)getErrorHandler {
  return IoReactivexPluginsRxJavaPlugins_getErrorHandler();
}

+ (id<IoReactivexFunctionsFunction>)getInitComputationSchedulerHandler {
  return IoReactivexPluginsRxJavaPlugins_getInitComputationSchedulerHandler();
}

+ (id<IoReactivexFunctionsFunction>)getInitIoSchedulerHandler {
  return IoReactivexPluginsRxJavaPlugins_getInitIoSchedulerHandler();
}

+ (id<IoReactivexFunctionsFunction>)getInitNewThreadSchedulerHandler {
  return IoReactivexPluginsRxJavaPlugins_getInitNewThreadSchedulerHandler();
}

+ (id<IoReactivexFunctionsFunction>)getInitSingleSchedulerHandler {
  return IoReactivexPluginsRxJavaPlugins_getInitSingleSchedulerHandler();
}

+ (id<IoReactivexFunctionsFunction>)getIoSchedulerHandler {
  return IoReactivexPluginsRxJavaPlugins_getIoSchedulerHandler();
}

+ (id<IoReactivexFunctionsFunction>)getNewThreadSchedulerHandler {
  return IoReactivexPluginsRxJavaPlugins_getNewThreadSchedulerHandler();
}

+ (id<IoReactivexFunctionsFunction>)getScheduleHandler {
  return IoReactivexPluginsRxJavaPlugins_getScheduleHandler();
}

+ (id<IoReactivexFunctionsFunction>)getSingleSchedulerHandler {
  return IoReactivexPluginsRxJavaPlugins_getSingleSchedulerHandler();
}

+ (IoReactivexScheduler *)initComputationSchedulerWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)defaultScheduler {
  return IoReactivexPluginsRxJavaPlugins_initComputationSchedulerWithJavaUtilConcurrentCallable_(defaultScheduler);
}

+ (IoReactivexScheduler *)initIoSchedulerWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)defaultScheduler {
  return IoReactivexPluginsRxJavaPlugins_initIoSchedulerWithJavaUtilConcurrentCallable_(defaultScheduler);
}

+ (IoReactivexScheduler *)initNewThreadSchedulerWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)defaultScheduler {
  return IoReactivexPluginsRxJavaPlugins_initNewThreadSchedulerWithJavaUtilConcurrentCallable_(defaultScheduler);
}

+ (IoReactivexScheduler *)initSingleSchedulerWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)defaultScheduler {
  return IoReactivexPluginsRxJavaPlugins_initSingleSchedulerWithJavaUtilConcurrentCallable_(defaultScheduler);
}

+ (IoReactivexScheduler *)onComputationSchedulerWithIoReactivexScheduler:(IoReactivexScheduler *)defaultScheduler {
  return IoReactivexPluginsRxJavaPlugins_onComputationSchedulerWithIoReactivexScheduler_(defaultScheduler);
}

+ (void)onErrorWithNSException:(NSException *)error {
  IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_(error);
}

+ (jboolean)isBugWithNSException:(NSException *)error {
  return IoReactivexPluginsRxJavaPlugins_isBugWithNSException_(error);
}

+ (void)uncaughtWithNSException:(NSException *)error {
  IoReactivexPluginsRxJavaPlugins_uncaughtWithNSException_(error);
}

+ (IoReactivexScheduler *)onIoSchedulerWithIoReactivexScheduler:(IoReactivexScheduler *)defaultScheduler {
  return IoReactivexPluginsRxJavaPlugins_onIoSchedulerWithIoReactivexScheduler_(defaultScheduler);
}

+ (IoReactivexScheduler *)onNewThreadSchedulerWithIoReactivexScheduler:(IoReactivexScheduler *)defaultScheduler {
  return IoReactivexPluginsRxJavaPlugins_onNewThreadSchedulerWithIoReactivexScheduler_(defaultScheduler);
}

+ (id<JavaLangRunnable>)onScheduleWithJavaLangRunnable:(id<JavaLangRunnable>)run {
  return IoReactivexPluginsRxJavaPlugins_onScheduleWithJavaLangRunnable_(run);
}

+ (IoReactivexScheduler *)onSingleSchedulerWithIoReactivexScheduler:(IoReactivexScheduler *)defaultScheduler {
  return IoReactivexPluginsRxJavaPlugins_onSingleSchedulerWithIoReactivexScheduler_(defaultScheduler);
}

+ (void)reset {
  IoReactivexPluginsRxJavaPlugins_reset();
}

+ (void)setComputationSchedulerHandlerWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)handler {
  IoReactivexPluginsRxJavaPlugins_setComputationSchedulerHandlerWithIoReactivexFunctionsFunction_(handler);
}

+ (void)setErrorHandlerWithIoReactivexFunctionsConsumer:(id<IoReactivexFunctionsConsumer>)handler {
  IoReactivexPluginsRxJavaPlugins_setErrorHandlerWithIoReactivexFunctionsConsumer_(handler);
}

+ (void)setInitComputationSchedulerHandlerWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)handler {
  IoReactivexPluginsRxJavaPlugins_setInitComputationSchedulerHandlerWithIoReactivexFunctionsFunction_(handler);
}

+ (void)setInitIoSchedulerHandlerWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)handler {
  IoReactivexPluginsRxJavaPlugins_setInitIoSchedulerHandlerWithIoReactivexFunctionsFunction_(handler);
}

+ (void)setInitNewThreadSchedulerHandlerWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)handler {
  IoReactivexPluginsRxJavaPlugins_setInitNewThreadSchedulerHandlerWithIoReactivexFunctionsFunction_(handler);
}

+ (void)setInitSingleSchedulerHandlerWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)handler {
  IoReactivexPluginsRxJavaPlugins_setInitSingleSchedulerHandlerWithIoReactivexFunctionsFunction_(handler);
}

+ (void)setIoSchedulerHandlerWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)handler {
  IoReactivexPluginsRxJavaPlugins_setIoSchedulerHandlerWithIoReactivexFunctionsFunction_(handler);
}

+ (void)setNewThreadSchedulerHandlerWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)handler {
  IoReactivexPluginsRxJavaPlugins_setNewThreadSchedulerHandlerWithIoReactivexFunctionsFunction_(handler);
}

+ (void)setScheduleHandlerWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)handler {
  IoReactivexPluginsRxJavaPlugins_setScheduleHandlerWithIoReactivexFunctionsFunction_(handler);
}

+ (void)setSingleSchedulerHandlerWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)handler {
  IoReactivexPluginsRxJavaPlugins_setSingleSchedulerHandlerWithIoReactivexFunctionsFunction_(handler);
}

+ (void)unlock {
  IoReactivexPluginsRxJavaPlugins_unlock();
}

+ (id<IoReactivexFunctionsFunction>)getOnCompletableAssembly {
  return IoReactivexPluginsRxJavaPlugins_getOnCompletableAssembly();
}

+ (id<IoReactivexFunctionsBiFunction>)getOnCompletableSubscribe {
  return IoReactivexPluginsRxJavaPlugins_getOnCompletableSubscribe();
}

+ (id<IoReactivexFunctionsFunction>)getOnFlowableAssembly {
  return IoReactivexPluginsRxJavaPlugins_getOnFlowableAssembly();
}

+ (id<IoReactivexFunctionsFunction>)getOnConnectableFlowableAssembly {
  return IoReactivexPluginsRxJavaPlugins_getOnConnectableFlowableAssembly();
}

+ (id<IoReactivexFunctionsBiFunction>)getOnFlowableSubscribe {
  return IoReactivexPluginsRxJavaPlugins_getOnFlowableSubscribe();
}

+ (id<IoReactivexFunctionsBiFunction>)getOnMaybeSubscribe {
  return IoReactivexPluginsRxJavaPlugins_getOnMaybeSubscribe();
}

+ (id<IoReactivexFunctionsFunction>)getOnMaybeAssembly {
  return IoReactivexPluginsRxJavaPlugins_getOnMaybeAssembly();
}

+ (id<IoReactivexFunctionsFunction>)getOnSingleAssembly {
  return IoReactivexPluginsRxJavaPlugins_getOnSingleAssembly();
}

+ (id<IoReactivexFunctionsBiFunction>)getOnSingleSubscribe {
  return IoReactivexPluginsRxJavaPlugins_getOnSingleSubscribe();
}

+ (id<IoReactivexFunctionsFunction>)getOnObservableAssembly {
  return IoReactivexPluginsRxJavaPlugins_getOnObservableAssembly();
}

+ (id<IoReactivexFunctionsFunction>)getOnConnectableObservableAssembly {
  return IoReactivexPluginsRxJavaPlugins_getOnConnectableObservableAssembly();
}

+ (id<IoReactivexFunctionsBiFunction>)getOnObservableSubscribe {
  return IoReactivexPluginsRxJavaPlugins_getOnObservableSubscribe();
}

+ (void)setOnCompletableAssemblyWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)onCompletableAssembly {
  IoReactivexPluginsRxJavaPlugins_setOnCompletableAssemblyWithIoReactivexFunctionsFunction_(onCompletableAssembly);
}

+ (void)setOnCompletableSubscribeWithIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)onCompletableSubscribe {
  IoReactivexPluginsRxJavaPlugins_setOnCompletableSubscribeWithIoReactivexFunctionsBiFunction_(onCompletableSubscribe);
}

+ (void)setOnFlowableAssemblyWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)onFlowableAssembly {
  IoReactivexPluginsRxJavaPlugins_setOnFlowableAssemblyWithIoReactivexFunctionsFunction_(onFlowableAssembly);
}

+ (void)setOnMaybeAssemblyWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)onMaybeAssembly {
  IoReactivexPluginsRxJavaPlugins_setOnMaybeAssemblyWithIoReactivexFunctionsFunction_(onMaybeAssembly);
}

+ (void)setOnConnectableFlowableAssemblyWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)onConnectableFlowableAssembly {
  IoReactivexPluginsRxJavaPlugins_setOnConnectableFlowableAssemblyWithIoReactivexFunctionsFunction_(onConnectableFlowableAssembly);
}

+ (void)setOnFlowableSubscribeWithIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)onFlowableSubscribe {
  IoReactivexPluginsRxJavaPlugins_setOnFlowableSubscribeWithIoReactivexFunctionsBiFunction_(onFlowableSubscribe);
}

+ (void)setOnMaybeSubscribeWithIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)onMaybeSubscribe {
  IoReactivexPluginsRxJavaPlugins_setOnMaybeSubscribeWithIoReactivexFunctionsBiFunction_(onMaybeSubscribe);
}

+ (void)setOnObservableAssemblyWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)onObservableAssembly {
  IoReactivexPluginsRxJavaPlugins_setOnObservableAssemblyWithIoReactivexFunctionsFunction_(onObservableAssembly);
}

+ (void)setOnConnectableObservableAssemblyWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)onConnectableObservableAssembly {
  IoReactivexPluginsRxJavaPlugins_setOnConnectableObservableAssemblyWithIoReactivexFunctionsFunction_(onConnectableObservableAssembly);
}

+ (void)setOnObservableSubscribeWithIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)onObservableSubscribe {
  IoReactivexPluginsRxJavaPlugins_setOnObservableSubscribeWithIoReactivexFunctionsBiFunction_(onObservableSubscribe);
}

+ (void)setOnSingleAssemblyWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)onSingleAssembly {
  IoReactivexPluginsRxJavaPlugins_setOnSingleAssemblyWithIoReactivexFunctionsFunction_(onSingleAssembly);
}

+ (void)setOnSingleSubscribeWithIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)onSingleSubscribe {
  IoReactivexPluginsRxJavaPlugins_setOnSingleSubscribeWithIoReactivexFunctionsBiFunction_(onSingleSubscribe);
}

+ (id<OrgReactivestreamsSubscriber>)onSubscribeWithIoReactivexFlowable:(IoReactivexFlowable *)source
                                      withOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)subscriber {
  return IoReactivexPluginsRxJavaPlugins_onSubscribeWithIoReactivexFlowable_withOrgReactivestreamsSubscriber_(source, subscriber);
}

+ (id<IoReactivexObserver>)onSubscribeWithIoReactivexObservable:(IoReactivexObservable *)source
                                        withIoReactivexObserver:(id<IoReactivexObserver>)observer {
  return IoReactivexPluginsRxJavaPlugins_onSubscribeWithIoReactivexObservable_withIoReactivexObserver_(source, observer);
}

+ (id<IoReactivexSingleObserver>)onSubscribeWithIoReactivexSingle:(IoReactivexSingle *)source
                                    withIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)observer {
  return IoReactivexPluginsRxJavaPlugins_onSubscribeWithIoReactivexSingle_withIoReactivexSingleObserver_(source, observer);
}

+ (id<IoReactivexCompletableObserver>)onSubscribeWithIoReactivexCompletable:(IoReactivexCompletable *)source
                                         withIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)observer {
  return IoReactivexPluginsRxJavaPlugins_onSubscribeWithIoReactivexCompletable_withIoReactivexCompletableObserver_(source, observer);
}

+ (id<IoReactivexMaybeObserver>)onSubscribeWithIoReactivexMaybe:(IoReactivexMaybe *)source
                                   withIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)subscriber {
  return IoReactivexPluginsRxJavaPlugins_onSubscribeWithIoReactivexMaybe_withIoReactivexMaybeObserver_(source, subscriber);
}

+ (IoReactivexMaybe *)onAssemblyWithIoReactivexMaybe:(IoReactivexMaybe *)source {
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexMaybe_(source);
}

+ (IoReactivexFlowable *)onAssemblyWithIoReactivexFlowable:(IoReactivexFlowable *)source {
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexFlowable_(source);
}

+ (IoReactivexFlowablesConnectableFlowable *)onAssemblyWithIoReactivexFlowablesConnectableFlowable:(IoReactivexFlowablesConnectableFlowable *)source {
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexFlowablesConnectableFlowable_(source);
}

+ (IoReactivexObservable *)onAssemblyWithIoReactivexObservable:(IoReactivexObservable *)source {
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexObservable_(source);
}

+ (IoReactivexObservablesConnectableObservable *)onAssemblyWithIoReactivexObservablesConnectableObservable:(IoReactivexObservablesConnectableObservable *)source {
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexObservablesConnectableObservable_(source);
}

+ (IoReactivexSingle *)onAssemblyWithIoReactivexSingle:(IoReactivexSingle *)source {
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexSingle_(source);
}

+ (IoReactivexCompletable *)onAssemblyWithIoReactivexCompletable:(IoReactivexCompletable *)source {
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexCompletable_(source);
}

+ (void)setOnParallelAssemblyWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)handler {
  IoReactivexPluginsRxJavaPlugins_setOnParallelAssemblyWithIoReactivexFunctionsFunction_(handler);
}

+ (id<IoReactivexFunctionsFunction>)getOnParallelAssembly {
  return IoReactivexPluginsRxJavaPlugins_getOnParallelAssembly();
}

+ (IoReactivexParallelParallelFlowable *)onAssemblyWithIoReactivexParallelParallelFlowable:(IoReactivexParallelParallelFlowable *)source {
  return IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexParallelParallelFlowable_(source);
}

+ (jboolean)onBeforeBlocking {
  return IoReactivexPluginsRxJavaPlugins_onBeforeBlocking();
}

+ (void)setOnBeforeBlockingWithIoReactivexFunctionsBooleanSupplier:(id<IoReactivexFunctionsBooleanSupplier>)handler {
  IoReactivexPluginsRxJavaPlugins_setOnBeforeBlockingWithIoReactivexFunctionsBooleanSupplier_(handler);
}

+ (id<IoReactivexFunctionsBooleanSupplier>)getOnBeforeBlocking {
  return IoReactivexPluginsRxJavaPlugins_getOnBeforeBlocking();
}

+ (IoReactivexScheduler *)createComputationSchedulerWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory {
  return IoReactivexPluginsRxJavaPlugins_createComputationSchedulerWithJavaUtilConcurrentThreadFactory_(threadFactory);
}

+ (IoReactivexScheduler *)createIoSchedulerWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory {
  return IoReactivexPluginsRxJavaPlugins_createIoSchedulerWithJavaUtilConcurrentThreadFactory_(threadFactory);
}

+ (IoReactivexScheduler *)createNewThreadSchedulerWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory {
  return IoReactivexPluginsRxJavaPlugins_createNewThreadSchedulerWithJavaUtilConcurrentThreadFactory_(threadFactory);
}

+ (IoReactivexScheduler *)createSingleSchedulerWithJavaUtilConcurrentThreadFactory:(id<JavaUtilConcurrentThreadFactory>)threadFactory {
  return IoReactivexPluginsRxJavaPlugins_createSingleSchedulerWithJavaUtilConcurrentThreadFactory_(threadFactory);
}

+ (id)applyWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)f
                                     withId:(id)t {
  return IoReactivexPluginsRxJavaPlugins_applyWithIoReactivexFunctionsFunction_withId_(f, t);
}

+ (id)applyWithIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)f
                                       withId:(id)t
                                       withId:(id)u {
  return IoReactivexPluginsRxJavaPlugins_applyWithIoReactivexFunctionsBiFunction_withId_withId_(f, t, u);
}

+ (IoReactivexScheduler *)callRequireNonNullWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)s {
  return IoReactivexPluginsRxJavaPlugins_callRequireNonNullWithJavaUtilConcurrentCallable_(s);
}

+ (IoReactivexScheduler *)applyRequireNonNullWithIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)f
                                               withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)s {
  return IoReactivexPluginsRxJavaPlugins_applyRequireNonNullWithIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(f, s);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexPluginsRxJavaPlugins_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIoReactivexFunctionsFunction;", 0x9, -1, -1, -1, 2, -1, -1 },
    { NULL, "LIoReactivexFunctionsConsumer;", 0x9, -1, -1, -1, 3, -1, -1 },
    { NULL, "LIoReactivexFunctionsFunction;", 0x9, -1, -1, -1, 4, -1, -1 },
    { NULL, "LIoReactivexFunctionsFunction;", 0x9, -1, -1, -1, 4, -1, -1 },
    { NULL, "LIoReactivexFunctionsFunction;", 0x9, -1, -1, -1, 4, -1, -1 },
    { NULL, "LIoReactivexFunctionsFunction;", 0x9, -1, -1, -1, 4, -1, -1 },
    { NULL, "LIoReactivexFunctionsFunction;", 0x9, -1, -1, -1, 2, -1, -1 },
    { NULL, "LIoReactivexFunctionsFunction;", 0x9, -1, -1, -1, 2, -1, -1 },
    { NULL, "LIoReactivexFunctionsFunction;", 0x9, -1, -1, -1, 5, -1, -1 },
    { NULL, "LIoReactivexFunctionsFunction;", 0x9, -1, -1, -1, 2, -1, -1 },
    { NULL, "LIoReactivexScheduler;", 0x9, 6, 7, -1, 8, -1, -1 },
    { NULL, "LIoReactivexScheduler;", 0x9, 9, 7, -1, 8, -1, -1 },
    { NULL, "LIoReactivexScheduler;", 0x9, 10, 7, -1, 8, -1, -1 },
    { NULL, "LIoReactivexScheduler;", 0x9, 11, 7, -1, 8, -1, -1 },
    { NULL, "LIoReactivexScheduler;", 0x9, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 14, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 16, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 17, 15, -1, -1, -1, -1 },
    { NULL, "LIoReactivexScheduler;", 0x9, 18, 13, -1, -1, -1, -1 },
    { NULL, "LIoReactivexScheduler;", 0x9, 19, 13, -1, -1, -1, -1 },
    { NULL, "LJavaLangRunnable;", 0x9, 20, 21, -1, -1, -1, -1 },
    { NULL, "LIoReactivexScheduler;", 0x9, 22, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 23, 24, -1, 25, -1, -1 },
    { NULL, "V", 0x9, 26, 27, -1, 28, -1, -1 },
    { NULL, "V", 0x9, 29, 24, -1, 30, -1, -1 },
    { NULL, "V", 0x9, 31, 24, -1, 30, -1, -1 },
    { NULL, "V", 0x9, 32, 24, -1, 30, -1, -1 },
    { NULL, "V", 0x9, 33, 24, -1, 30, -1, -1 },
    { NULL, "V", 0x9, 34, 24, -1, 25, -1, -1 },
    { NULL, "V", 0x9, 35, 24, -1, 25, -1, -1 },
    { NULL, "V", 0x9, 36, 24, -1, 37, -1, -1 },
    { NULL, "V", 0x9, 38, 24, -1, 25, -1, -1 },
    { NULL, "V", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIoReactivexFunctionsFunction;", 0x9, -1, -1, -1, 39, -1, -1 },
    { NULL, "LIoReactivexFunctionsBiFunction;", 0x9, -1, -1, -1, 40, -1, -1 },
    { NULL, "LIoReactivexFunctionsFunction;", 0x9, -1, -1, -1, 41, -1, -1 },
    { NULL, "LIoReactivexFunctionsFunction;", 0x9, -1, -1, -1, 42, -1, -1 },
    { NULL, "LIoReactivexFunctionsBiFunction;", 0x9, -1, -1, -1, 43, -1, -1 },
    { NULL, "LIoReactivexFunctionsBiFunction;", 0x9, -1, -1, -1, 44, -1, -1 },
    { NULL, "LIoReactivexFunctionsFunction;", 0x9, -1, -1, -1, 45, -1, -1 },
    { NULL, "LIoReactivexFunctionsFunction;", 0x9, -1, -1, -1, 46, -1, -1 },
    { NULL, "LIoReactivexFunctionsBiFunction;", 0x9, -1, -1, -1, 47, -1, -1 },
    { NULL, "LIoReactivexFunctionsFunction;", 0x9, -1, -1, -1, 48, -1, -1 },
    { NULL, "LIoReactivexFunctionsFunction;", 0x9, -1, -1, -1, 49, -1, -1 },
    { NULL, "LIoReactivexFunctionsBiFunction;", 0x9, -1, -1, -1, 50, -1, -1 },
    { NULL, "V", 0x9, 51, 24, -1, 52, -1, -1 },
    { NULL, "V", 0x9, 53, 54, -1, 55, -1, -1 },
    { NULL, "V", 0x9, 56, 24, -1, 57, -1, -1 },
    { NULL, "V", 0x9, 58, 24, -1, 59, -1, -1 },
    { NULL, "V", 0x9, 60, 24, -1, 61, -1, -1 },
    { NULL, "V", 0x9, 62, 54, -1, 63, -1, -1 },
    { NULL, "V", 0x9, 64, 54, -1, 65, -1, -1 },
    { NULL, "V", 0x9, 66, 24, -1, 67, -1, -1 },
    { NULL, "V", 0x9, 68, 24, -1, 69, -1, -1 },
    { NULL, "V", 0x9, 70, 54, -1, 71, -1, -1 },
    { NULL, "V", 0x9, 72, 24, -1, 73, -1, -1 },
    { NULL, "V", 0x9, 74, 54, -1, 75, -1, -1 },
    { NULL, "LOrgReactivestreamsSubscriber;", 0x9, 76, 77, -1, 78, -1, -1 },
    { NULL, "LIoReactivexObserver;", 0x9, 76, 79, -1, 80, -1, -1 },
    { NULL, "LIoReactivexSingleObserver;", 0x9, 76, 81, -1, 82, -1, -1 },
    { NULL, "LIoReactivexCompletableObserver;", 0x9, 76, 83, -1, -1, -1, -1 },
    { NULL, "LIoReactivexMaybeObserver;", 0x9, 76, 84, -1, 85, -1, -1 },
    { NULL, "LIoReactivexMaybe;", 0x9, 86, 87, -1, 88, -1, -1 },
    { NULL, "LIoReactivexFlowable;", 0x9, 86, 89, -1, 90, -1, -1 },
    { NULL, "LIoReactivexFlowablesConnectableFlowable;", 0x9, 86, 91, -1, 92, -1, -1 },
    { NULL, "LIoReactivexObservable;", 0x9, 86, 93, -1, 94, -1, -1 },
    { NULL, "LIoReactivexObservablesConnectableObservable;", 0x9, 86, 95, -1, 96, -1, -1 },
    { NULL, "LIoReactivexSingle;", 0x9, 86, 97, -1, 98, -1, -1 },
    { NULL, "LIoReactivexCompletable;", 0x9, 86, 99, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 100, 24, -1, 101, -1, -1 },
    { NULL, "LIoReactivexFunctionsFunction;", 0x9, -1, -1, -1, 102, -1, -1 },
    { NULL, "LIoReactivexParallelParallelFlowable;", 0x9, 86, 103, -1, 104, -1, -1 },
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 105, 106, -1, -1, -1, -1 },
    { NULL, "LIoReactivexFunctionsBooleanSupplier;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIoReactivexScheduler;", 0x9, 107, 108, -1, -1, -1, -1 },
    { NULL, "LIoReactivexScheduler;", 0x9, 109, 108, -1, -1, -1, -1 },
    { NULL, "LIoReactivexScheduler;", 0x9, 110, 108, -1, -1, -1, -1 },
    { NULL, "LIoReactivexScheduler;", 0x9, 111, 108, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x8, 112, 113, -1, 114, -1, -1 },
    { NULL, "LNSObject;", 0x8, 112, 115, -1, 116, -1, -1 },
    { NULL, "LIoReactivexScheduler;", 0x8, 117, 7, -1, 8, -1, -1 },
    { NULL, "LIoReactivexScheduler;", 0x8, 118, 119, -1, 120, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(lockdown);
  methods[1].selector = @selector(isLockdown);
  methods[2].selector = @selector(setFailOnNonBlockingSchedulerWithBoolean:);
  methods[3].selector = @selector(isFailOnNonBlockingScheduler);
  methods[4].selector = @selector(getComputationSchedulerHandler);
  methods[5].selector = @selector(getErrorHandler);
  methods[6].selector = @selector(getInitComputationSchedulerHandler);
  methods[7].selector = @selector(getInitIoSchedulerHandler);
  methods[8].selector = @selector(getInitNewThreadSchedulerHandler);
  methods[9].selector = @selector(getInitSingleSchedulerHandler);
  methods[10].selector = @selector(getIoSchedulerHandler);
  methods[11].selector = @selector(getNewThreadSchedulerHandler);
  methods[12].selector = @selector(getScheduleHandler);
  methods[13].selector = @selector(getSingleSchedulerHandler);
  methods[14].selector = @selector(initComputationSchedulerWithJavaUtilConcurrentCallable:);
  methods[15].selector = @selector(initIoSchedulerWithJavaUtilConcurrentCallable:);
  methods[16].selector = @selector(initNewThreadSchedulerWithJavaUtilConcurrentCallable:);
  methods[17].selector = @selector(initSingleSchedulerWithJavaUtilConcurrentCallable:);
  methods[18].selector = @selector(onComputationSchedulerWithIoReactivexScheduler:);
  methods[19].selector = @selector(onErrorWithNSException:);
  methods[20].selector = @selector(isBugWithNSException:);
  methods[21].selector = @selector(uncaughtWithNSException:);
  methods[22].selector = @selector(onIoSchedulerWithIoReactivexScheduler:);
  methods[23].selector = @selector(onNewThreadSchedulerWithIoReactivexScheduler:);
  methods[24].selector = @selector(onScheduleWithJavaLangRunnable:);
  methods[25].selector = @selector(onSingleSchedulerWithIoReactivexScheduler:);
  methods[26].selector = @selector(reset);
  methods[27].selector = @selector(setComputationSchedulerHandlerWithIoReactivexFunctionsFunction:);
  methods[28].selector = @selector(setErrorHandlerWithIoReactivexFunctionsConsumer:);
  methods[29].selector = @selector(setInitComputationSchedulerHandlerWithIoReactivexFunctionsFunction:);
  methods[30].selector = @selector(setInitIoSchedulerHandlerWithIoReactivexFunctionsFunction:);
  methods[31].selector = @selector(setInitNewThreadSchedulerHandlerWithIoReactivexFunctionsFunction:);
  methods[32].selector = @selector(setInitSingleSchedulerHandlerWithIoReactivexFunctionsFunction:);
  methods[33].selector = @selector(setIoSchedulerHandlerWithIoReactivexFunctionsFunction:);
  methods[34].selector = @selector(setNewThreadSchedulerHandlerWithIoReactivexFunctionsFunction:);
  methods[35].selector = @selector(setScheduleHandlerWithIoReactivexFunctionsFunction:);
  methods[36].selector = @selector(setSingleSchedulerHandlerWithIoReactivexFunctionsFunction:);
  methods[37].selector = @selector(unlock);
  methods[38].selector = @selector(getOnCompletableAssembly);
  methods[39].selector = @selector(getOnCompletableSubscribe);
  methods[40].selector = @selector(getOnFlowableAssembly);
  methods[41].selector = @selector(getOnConnectableFlowableAssembly);
  methods[42].selector = @selector(getOnFlowableSubscribe);
  methods[43].selector = @selector(getOnMaybeSubscribe);
  methods[44].selector = @selector(getOnMaybeAssembly);
  methods[45].selector = @selector(getOnSingleAssembly);
  methods[46].selector = @selector(getOnSingleSubscribe);
  methods[47].selector = @selector(getOnObservableAssembly);
  methods[48].selector = @selector(getOnConnectableObservableAssembly);
  methods[49].selector = @selector(getOnObservableSubscribe);
  methods[50].selector = @selector(setOnCompletableAssemblyWithIoReactivexFunctionsFunction:);
  methods[51].selector = @selector(setOnCompletableSubscribeWithIoReactivexFunctionsBiFunction:);
  methods[52].selector = @selector(setOnFlowableAssemblyWithIoReactivexFunctionsFunction:);
  methods[53].selector = @selector(setOnMaybeAssemblyWithIoReactivexFunctionsFunction:);
  methods[54].selector = @selector(setOnConnectableFlowableAssemblyWithIoReactivexFunctionsFunction:);
  methods[55].selector = @selector(setOnFlowableSubscribeWithIoReactivexFunctionsBiFunction:);
  methods[56].selector = @selector(setOnMaybeSubscribeWithIoReactivexFunctionsBiFunction:);
  methods[57].selector = @selector(setOnObservableAssemblyWithIoReactivexFunctionsFunction:);
  methods[58].selector = @selector(setOnConnectableObservableAssemblyWithIoReactivexFunctionsFunction:);
  methods[59].selector = @selector(setOnObservableSubscribeWithIoReactivexFunctionsBiFunction:);
  methods[60].selector = @selector(setOnSingleAssemblyWithIoReactivexFunctionsFunction:);
  methods[61].selector = @selector(setOnSingleSubscribeWithIoReactivexFunctionsBiFunction:);
  methods[62].selector = @selector(onSubscribeWithIoReactivexFlowable:withOrgReactivestreamsSubscriber:);
  methods[63].selector = @selector(onSubscribeWithIoReactivexObservable:withIoReactivexObserver:);
  methods[64].selector = @selector(onSubscribeWithIoReactivexSingle:withIoReactivexSingleObserver:);
  methods[65].selector = @selector(onSubscribeWithIoReactivexCompletable:withIoReactivexCompletableObserver:);
  methods[66].selector = @selector(onSubscribeWithIoReactivexMaybe:withIoReactivexMaybeObserver:);
  methods[67].selector = @selector(onAssemblyWithIoReactivexMaybe:);
  methods[68].selector = @selector(onAssemblyWithIoReactivexFlowable:);
  methods[69].selector = @selector(onAssemblyWithIoReactivexFlowablesConnectableFlowable:);
  methods[70].selector = @selector(onAssemblyWithIoReactivexObservable:);
  methods[71].selector = @selector(onAssemblyWithIoReactivexObservablesConnectableObservable:);
  methods[72].selector = @selector(onAssemblyWithIoReactivexSingle:);
  methods[73].selector = @selector(onAssemblyWithIoReactivexCompletable:);
  methods[74].selector = @selector(setOnParallelAssemblyWithIoReactivexFunctionsFunction:);
  methods[75].selector = @selector(getOnParallelAssembly);
  methods[76].selector = @selector(onAssemblyWithIoReactivexParallelParallelFlowable:);
  methods[77].selector = @selector(onBeforeBlocking);
  methods[78].selector = @selector(setOnBeforeBlockingWithIoReactivexFunctionsBooleanSupplier:);
  methods[79].selector = @selector(getOnBeforeBlocking);
  methods[80].selector = @selector(createComputationSchedulerWithJavaUtilConcurrentThreadFactory:);
  methods[81].selector = @selector(createIoSchedulerWithJavaUtilConcurrentThreadFactory:);
  methods[82].selector = @selector(createNewThreadSchedulerWithJavaUtilConcurrentThreadFactory:);
  methods[83].selector = @selector(createSingleSchedulerWithJavaUtilConcurrentThreadFactory:);
  methods[84].selector = @selector(applyWithIoReactivexFunctionsFunction:withId:);
  methods[85].selector = @selector(applyWithIoReactivexFunctionsBiFunction:withId:withId:);
  methods[86].selector = @selector(callRequireNonNullWithJavaUtilConcurrentCallable:);
  methods[87].selector = @selector(applyRequireNonNullWithIoReactivexFunctionsFunction:withJavaUtilConcurrentCallable:);
  methods[88].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "errorHandler", "LIoReactivexFunctionsConsumer;", .constantValue.asLong = 0, 0x48, -1, 121, 122, -1 },
    { "onScheduleHandler", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x48, -1, 123, 124, -1 },
    { "onInitComputationHandler", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x48, -1, 125, 126, -1 },
    { "onInitSingleHandler", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x48, -1, 127, 126, -1 },
    { "onInitIoHandler", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x48, -1, 128, 126, -1 },
    { "onInitNewThreadHandler", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x48, -1, 129, 126, -1 },
    { "onComputationHandler", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x48, -1, 130, 131, -1 },
    { "onSingleHandler", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x48, -1, 132, 131, -1 },
    { "onIoHandler", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x48, -1, 133, 131, -1 },
    { "onNewThreadHandler", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x48, -1, 134, 131, -1 },
    { "onFlowableAssembly", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x48, -1, 135, 136, -1 },
    { "onConnectableFlowableAssembly", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x48, -1, 137, 138, -1 },
    { "onObservableAssembly", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x48, -1, 139, 140, -1 },
    { "onConnectableObservableAssembly", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x48, -1, 141, 142, -1 },
    { "onMaybeAssembly", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x48, -1, 143, 144, -1 },
    { "onSingleAssembly", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x48, -1, 145, 146, -1 },
    { "onCompletableAssembly", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x48, -1, 147, 148, -1 },
    { "onParallelAssembly", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x48, -1, 149, 150, -1 },
    { "onFlowableSubscribe", "LIoReactivexFunctionsBiFunction;", .constantValue.asLong = 0, 0x48, -1, 151, 152, -1 },
    { "onMaybeSubscribe", "LIoReactivexFunctionsBiFunction;", .constantValue.asLong = 0, 0x48, -1, 153, 154, -1 },
    { "onObservableSubscribe", "LIoReactivexFunctionsBiFunction;", .constantValue.asLong = 0, 0x48, -1, 155, 156, -1 },
    { "onSingleSubscribe", "LIoReactivexFunctionsBiFunction;", .constantValue.asLong = 0, 0x48, -1, 157, 158, -1 },
    { "onCompletableSubscribe", "LIoReactivexFunctionsBiFunction;", .constantValue.asLong = 0, 0x48, -1, 159, 160, -1 },
    { "onBeforeBlocking_", "LIoReactivexFunctionsBooleanSupplier;", .constantValue.asLong = 0, 0x48, 161, 162, -1, -1 },
    { "lockdown_", "Z", .constantValue.asLong = 0, 0x48, 163, 164, -1, -1 },
    { "failNonBlockingScheduler", "Z", .constantValue.asLong = 0, 0x48, -1, 165, -1, -1 },
  };
  static const void *ptrTable[] = { "setFailOnNonBlockingScheduler", "Z", "()Lio/reactivex/functions/Function<-Lio/reactivex/Scheduler;+Lio/reactivex/Scheduler;>;", "()Lio/reactivex/functions/Consumer<-Ljava/lang/Throwable;>;", "()Lio/reactivex/functions/Function<-Ljava/util/concurrent/Callable<Lio/reactivex/Scheduler;>;+Lio/reactivex/Scheduler;>;", "()Lio/reactivex/functions/Function<-Ljava/lang/Runnable;+Ljava/lang/Runnable;>;", "initComputationScheduler", "LJavaUtilConcurrentCallable;", "(Ljava/util/concurrent/Callable<Lio/reactivex/Scheduler;>;)Lio/reactivex/Scheduler;", "initIoScheduler", "initNewThreadScheduler", "initSingleScheduler", "onComputationScheduler", "LIoReactivexScheduler;", "onError", "LNSException;", "isBug", "uncaught", "onIoScheduler", "onNewThreadScheduler", "onSchedule", "LJavaLangRunnable;", "onSingleScheduler", "setComputationSchedulerHandler", "LIoReactivexFunctionsFunction;", "(Lio/reactivex/functions/Function<-Lio/reactivex/Scheduler;+Lio/reactivex/Scheduler;>;)V", "setErrorHandler", "LIoReactivexFunctionsConsumer;", "(Lio/reactivex/functions/Consumer<-Ljava/lang/Throwable;>;)V", "setInitComputationSchedulerHandler", "(Lio/reactivex/functions/Function<-Ljava/util/concurrent/Callable<Lio/reactivex/Scheduler;>;+Lio/reactivex/Scheduler;>;)V", "setInitIoSchedulerHandler", "setInitNewThreadSchedulerHandler", "setInitSingleSchedulerHandler", "setIoSchedulerHandler", "setNewThreadSchedulerHandler", "setScheduleHandler", "(Lio/reactivex/functions/Function<-Ljava/lang/Runnable;+Ljava/lang/Runnable;>;)V", "setSingleSchedulerHandler", "()Lio/reactivex/functions/Function<-Lio/reactivex/Completable;+Lio/reactivex/Completable;>;", "()Lio/reactivex/functions/BiFunction<-Lio/reactivex/Completable;-Lio/reactivex/CompletableObserver;+Lio/reactivex/CompletableObserver;>;", "()Lio/reactivex/functions/Function<-Lio/reactivex/Flowable;+Lio/reactivex/Flowable;>;", "()Lio/reactivex/functions/Function<-Lio/reactivex/flowables/ConnectableFlowable;+Lio/reactivex/flowables/ConnectableFlowable;>;", "()Lio/reactivex/functions/BiFunction<-Lio/reactivex/Flowable;-Lorg/reactivestreams/Subscriber;+Lorg/reactivestreams/Subscriber;>;", "()Lio/reactivex/functions/BiFunction<-Lio/reactivex/Maybe;-Lio/reactivex/MaybeObserver;+Lio/reactivex/MaybeObserver;>;", "()Lio/reactivex/functions/Function<-Lio/reactivex/Maybe;+Lio/reactivex/Maybe;>;", "()Lio/reactivex/functions/Function<-Lio/reactivex/Single;+Lio/reactivex/Single;>;", "()Lio/reactivex/functions/BiFunction<-Lio/reactivex/Single;-Lio/reactivex/SingleObserver;+Lio/reactivex/SingleObserver;>;", "()Lio/reactivex/functions/Function<-Lio/reactivex/Observable;+Lio/reactivex/Observable;>;", "()Lio/reactivex/functions/Function<-Lio/reactivex/observables/ConnectableObservable;+Lio/reactivex/observables/ConnectableObservable;>;", "()Lio/reactivex/functions/BiFunction<-Lio/reactivex/Observable;-Lio/reactivex/Observer;+Lio/reactivex/Observer;>;", "setOnCompletableAssembly", "(Lio/reactivex/functions/Function<-Lio/reactivex/Completable;+Lio/reactivex/Completable;>;)V", "setOnCompletableSubscribe", "LIoReactivexFunctionsBiFunction;", "(Lio/reactivex/functions/BiFunction<-Lio/reactivex/Completable;-Lio/reactivex/CompletableObserver;+Lio/reactivex/CompletableObserver;>;)V", "setOnFlowableAssembly", "(Lio/reactivex/functions/Function<-Lio/reactivex/Flowable;+Lio/reactivex/Flowable;>;)V", "setOnMaybeAssembly", "(Lio/reactivex/functions/Function<-Lio/reactivex/Maybe;+Lio/reactivex/Maybe;>;)V", "setOnConnectableFlowableAssembly", "(Lio/reactivex/functions/Function<-Lio/reactivex/flowables/ConnectableFlowable;+Lio/reactivex/flowables/ConnectableFlowable;>;)V", "setOnFlowableSubscribe", "(Lio/reactivex/functions/BiFunction<-Lio/reactivex/Flowable;-Lorg/reactivestreams/Subscriber;+Lorg/reactivestreams/Subscriber;>;)V", "setOnMaybeSubscribe", "(Lio/reactivex/functions/BiFunction<-Lio/reactivex/Maybe;Lio/reactivex/MaybeObserver;+Lio/reactivex/MaybeObserver;>;)V", "setOnObservableAssembly", "(Lio/reactivex/functions/Function<-Lio/reactivex/Observable;+Lio/reactivex/Observable;>;)V", "setOnConnectableObservableAssembly", "(Lio/reactivex/functions/Function<-Lio/reactivex/observables/ConnectableObservable;+Lio/reactivex/observables/ConnectableObservable;>;)V", "setOnObservableSubscribe", "(Lio/reactivex/functions/BiFunction<-Lio/reactivex/Observable;-Lio/reactivex/Observer;+Lio/reactivex/Observer;>;)V", "setOnSingleAssembly", "(Lio/reactivex/functions/Function<-Lio/reactivex/Single;+Lio/reactivex/Single;>;)V", "setOnSingleSubscribe", "(Lio/reactivex/functions/BiFunction<-Lio/reactivex/Single;-Lio/reactivex/SingleObserver;+Lio/reactivex/SingleObserver;>;)V", "onSubscribe", "LIoReactivexFlowable;LOrgReactivestreamsSubscriber;", "<T:Ljava/lang/Object;>(Lio/reactivex/Flowable<TT;>;Lorg/reactivestreams/Subscriber<-TT;>;)Lorg/reactivestreams/Subscriber<-TT;>;", "LIoReactivexObservable;LIoReactivexObserver;", "<T:Ljava/lang/Object;>(Lio/reactivex/Observable<TT;>;Lio/reactivex/Observer<-TT;>;)Lio/reactivex/Observer<-TT;>;", "LIoReactivexSingle;LIoReactivexSingleObserver;", "<T:Ljava/lang/Object;>(Lio/reactivex/Single<TT;>;Lio/reactivex/SingleObserver<-TT;>;)Lio/reactivex/SingleObserver<-TT;>;", "LIoReactivexCompletable;LIoReactivexCompletableObserver;", "LIoReactivexMaybe;LIoReactivexMaybeObserver;", "<T:Ljava/lang/Object;>(Lio/reactivex/Maybe<TT;>;Lio/reactivex/MaybeObserver<-TT;>;)Lio/reactivex/MaybeObserver<-TT;>;", "onAssembly", "LIoReactivexMaybe;", "<T:Ljava/lang/Object;>(Lio/reactivex/Maybe<TT;>;)Lio/reactivex/Maybe<TT;>;", "LIoReactivexFlowable;", "<T:Ljava/lang/Object;>(Lio/reactivex/Flowable<TT;>;)Lio/reactivex/Flowable<TT;>;", "LIoReactivexFlowablesConnectableFlowable;", "<T:Ljava/lang/Object;>(Lio/reactivex/flowables/ConnectableFlowable<TT;>;)Lio/reactivex/flowables/ConnectableFlowable<TT;>;", "LIoReactivexObservable;", "<T:Ljava/lang/Object;>(Lio/reactivex/Observable<TT;>;)Lio/reactivex/Observable<TT;>;", "LIoReactivexObservablesConnectableObservable;", "<T:Ljava/lang/Object;>(Lio/reactivex/observables/ConnectableObservable<TT;>;)Lio/reactivex/observables/ConnectableObservable<TT;>;", "LIoReactivexSingle;", "<T:Ljava/lang/Object;>(Lio/reactivex/Single<TT;>;)Lio/reactivex/Single<TT;>;", "LIoReactivexCompletable;", "setOnParallelAssembly", "(Lio/reactivex/functions/Function<-Lio/reactivex/parallel/ParallelFlowable;+Lio/reactivex/parallel/ParallelFlowable;>;)V", "()Lio/reactivex/functions/Function<-Lio/reactivex/parallel/ParallelFlowable;+Lio/reactivex/parallel/ParallelFlowable;>;", "LIoReactivexParallelParallelFlowable;", "<T:Ljava/lang/Object;>(Lio/reactivex/parallel/ParallelFlowable<TT;>;)Lio/reactivex/parallel/ParallelFlowable<TT;>;", "setOnBeforeBlocking", "LIoReactivexFunctionsBooleanSupplier;", "createComputationScheduler", "LJavaUtilConcurrentThreadFactory;", "createIoScheduler", "createNewThreadScheduler", "createSingleScheduler", "apply", "LIoReactivexFunctionsFunction;LNSObject;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>(Lio/reactivex/functions/Function<TT;TR;>;TT;)TR;", "LIoReactivexFunctionsBiFunction;LNSObject;LNSObject;", "<T:Ljava/lang/Object;U:Ljava/lang/Object;R:Ljava/lang/Object;>(Lio/reactivex/functions/BiFunction<TT;TU;TR;>;TT;TU;)TR;", "callRequireNonNull", "applyRequireNonNull", "LIoReactivexFunctionsFunction;LJavaUtilConcurrentCallable;", "(Lio/reactivex/functions/Function<-Ljava/util/concurrent/Callable<Lio/reactivex/Scheduler;>;+Lio/reactivex/Scheduler;>;Ljava/util/concurrent/Callable<Lio/reactivex/Scheduler;>;)Lio/reactivex/Scheduler;", &IoReactivexPluginsRxJavaPlugins_errorHandler, "Lio/reactivex/functions/Consumer<-Ljava/lang/Throwable;>;", &IoReactivexPluginsRxJavaPlugins_onScheduleHandler, "Lio/reactivex/functions/Function<-Ljava/lang/Runnable;+Ljava/lang/Runnable;>;", &IoReactivexPluginsRxJavaPlugins_onInitComputationHandler, "Lio/reactivex/functions/Function<-Ljava/util/concurrent/Callable<Lio/reactivex/Scheduler;>;+Lio/reactivex/Scheduler;>;", &IoReactivexPluginsRxJavaPlugins_onInitSingleHandler, &IoReactivexPluginsRxJavaPlugins_onInitIoHandler, &IoReactivexPluginsRxJavaPlugins_onInitNewThreadHandler, &IoReactivexPluginsRxJavaPlugins_onComputationHandler, "Lio/reactivex/functions/Function<-Lio/reactivex/Scheduler;+Lio/reactivex/Scheduler;>;", &IoReactivexPluginsRxJavaPlugins_onSingleHandler, &IoReactivexPluginsRxJavaPlugins_onIoHandler, &IoReactivexPluginsRxJavaPlugins_onNewThreadHandler, &IoReactivexPluginsRxJavaPlugins_onFlowableAssembly, "Lio/reactivex/functions/Function<-Lio/reactivex/Flowable;+Lio/reactivex/Flowable;>;", &IoReactivexPluginsRxJavaPlugins_onConnectableFlowableAssembly, "Lio/reactivex/functions/Function<-Lio/reactivex/flowables/ConnectableFlowable;+Lio/reactivex/flowables/ConnectableFlowable;>;", &IoReactivexPluginsRxJavaPlugins_onObservableAssembly, "Lio/reactivex/functions/Function<-Lio/reactivex/Observable;+Lio/reactivex/Observable;>;", &IoReactivexPluginsRxJavaPlugins_onConnectableObservableAssembly, "Lio/reactivex/functions/Function<-Lio/reactivex/observables/ConnectableObservable;+Lio/reactivex/observables/ConnectableObservable;>;", &IoReactivexPluginsRxJavaPlugins_onMaybeAssembly, "Lio/reactivex/functions/Function<-Lio/reactivex/Maybe;+Lio/reactivex/Maybe;>;", &IoReactivexPluginsRxJavaPlugins_onSingleAssembly, "Lio/reactivex/functions/Function<-Lio/reactivex/Single;+Lio/reactivex/Single;>;", &IoReactivexPluginsRxJavaPlugins_onCompletableAssembly, "Lio/reactivex/functions/Function<-Lio/reactivex/Completable;+Lio/reactivex/Completable;>;", &IoReactivexPluginsRxJavaPlugins_onParallelAssembly, "Lio/reactivex/functions/Function<-Lio/reactivex/parallel/ParallelFlowable;+Lio/reactivex/parallel/ParallelFlowable;>;", &IoReactivexPluginsRxJavaPlugins_onFlowableSubscribe, "Lio/reactivex/functions/BiFunction<-Lio/reactivex/Flowable;-Lorg/reactivestreams/Subscriber;+Lorg/reactivestreams/Subscriber;>;", &IoReactivexPluginsRxJavaPlugins_onMaybeSubscribe, "Lio/reactivex/functions/BiFunction<-Lio/reactivex/Maybe;-Lio/reactivex/MaybeObserver;+Lio/reactivex/MaybeObserver;>;", &IoReactivexPluginsRxJavaPlugins_onObservableSubscribe, "Lio/reactivex/functions/BiFunction<-Lio/reactivex/Observable;-Lio/reactivex/Observer;+Lio/reactivex/Observer;>;", &IoReactivexPluginsRxJavaPlugins_onSingleSubscribe, "Lio/reactivex/functions/BiFunction<-Lio/reactivex/Single;-Lio/reactivex/SingleObserver;+Lio/reactivex/SingleObserver;>;", &IoReactivexPluginsRxJavaPlugins_onCompletableSubscribe, "Lio/reactivex/functions/BiFunction<-Lio/reactivex/Completable;-Lio/reactivex/CompletableObserver;+Lio/reactivex/CompletableObserver;>;", "onBeforeBlocking", &IoReactivexPluginsRxJavaPlugins_onBeforeBlocking_, "lockdown", &IoReactivexPluginsRxJavaPlugins_lockdown_, &IoReactivexPluginsRxJavaPlugins_failNonBlockingScheduler };
  static const J2ObjcClassInfo _IoReactivexPluginsRxJavaPlugins = { "RxJavaPlugins", "io.reactivex.plugins", ptrTable, methods, fields, 7, 0x11, 89, 26, -1, -1, -1, -1, -1 };
  return &_IoReactivexPluginsRxJavaPlugins;
}

@end

void IoReactivexPluginsRxJavaPlugins_lockdown() {
  IoReactivexPluginsRxJavaPlugins_initialize();
  JreAssignVolatileBoolean(&IoReactivexPluginsRxJavaPlugins_lockdown_, true);
}

jboolean IoReactivexPluginsRxJavaPlugins_isLockdown() {
  IoReactivexPluginsRxJavaPlugins_initialize();
  return JreLoadVolatileBoolean(&IoReactivexPluginsRxJavaPlugins_lockdown_);
}

void IoReactivexPluginsRxJavaPlugins_setFailOnNonBlockingSchedulerWithBoolean_(jboolean enable) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  if (JreLoadVolatileBoolean(&IoReactivexPluginsRxJavaPlugins_lockdown_)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Plugins can't be changed anymore");
  }
  JreAssignVolatileBoolean(&IoReactivexPluginsRxJavaPlugins_failNonBlockingScheduler, enable);
}

jboolean IoReactivexPluginsRxJavaPlugins_isFailOnNonBlockingScheduler() {
  IoReactivexPluginsRxJavaPlugins_initialize();
  return JreLoadVolatileBoolean(&IoReactivexPluginsRxJavaPlugins_failNonBlockingScheduler);
}

id<IoReactivexFunctionsFunction> IoReactivexPluginsRxJavaPlugins_getComputationSchedulerHandler() {
  IoReactivexPluginsRxJavaPlugins_initialize();
  return JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onComputationHandler);
}

id<IoReactivexFunctionsConsumer> IoReactivexPluginsRxJavaPlugins_getErrorHandler() {
  IoReactivexPluginsRxJavaPlugins_initialize();
  return JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_errorHandler);
}

id<IoReactivexFunctionsFunction> IoReactivexPluginsRxJavaPlugins_getInitComputationSchedulerHandler() {
  IoReactivexPluginsRxJavaPlugins_initialize();
  return JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onInitComputationHandler);
}

id<IoReactivexFunctionsFunction> IoReactivexPluginsRxJavaPlugins_getInitIoSchedulerHandler() {
  IoReactivexPluginsRxJavaPlugins_initialize();
  return JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onInitIoHandler);
}

id<IoReactivexFunctionsFunction> IoReactivexPluginsRxJavaPlugins_getInitNewThreadSchedulerHandler() {
  IoReactivexPluginsRxJavaPlugins_initialize();
  return JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onInitNewThreadHandler);
}

id<IoReactivexFunctionsFunction> IoReactivexPluginsRxJavaPlugins_getInitSingleSchedulerHandler() {
  IoReactivexPluginsRxJavaPlugins_initialize();
  return JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onInitSingleHandler);
}

id<IoReactivexFunctionsFunction> IoReactivexPluginsRxJavaPlugins_getIoSchedulerHandler() {
  IoReactivexPluginsRxJavaPlugins_initialize();
  return JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onIoHandler);
}

id<IoReactivexFunctionsFunction> IoReactivexPluginsRxJavaPlugins_getNewThreadSchedulerHandler() {
  IoReactivexPluginsRxJavaPlugins_initialize();
  return JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onNewThreadHandler);
}

id<IoReactivexFunctionsFunction> IoReactivexPluginsRxJavaPlugins_getScheduleHandler() {
  IoReactivexPluginsRxJavaPlugins_initialize();
  return JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onScheduleHandler);
}

id<IoReactivexFunctionsFunction> IoReactivexPluginsRxJavaPlugins_getSingleSchedulerHandler() {
  IoReactivexPluginsRxJavaPlugins_initialize();
  return JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onSingleHandler);
}

IoReactivexScheduler *IoReactivexPluginsRxJavaPlugins_initComputationSchedulerWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> defaultScheduler) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(defaultScheduler, @"Scheduler Callable can't be null");
  id<IoReactivexFunctionsFunction> f = JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onInitComputationHandler);
  if (f == nil) {
    return IoReactivexPluginsRxJavaPlugins_callRequireNonNullWithJavaUtilConcurrentCallable_(defaultScheduler);
  }
  return IoReactivexPluginsRxJavaPlugins_applyRequireNonNullWithIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(f, defaultScheduler);
}

IoReactivexScheduler *IoReactivexPluginsRxJavaPlugins_initIoSchedulerWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> defaultScheduler) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(defaultScheduler, @"Scheduler Callable can't be null");
  id<IoReactivexFunctionsFunction> f = JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onInitIoHandler);
  if (f == nil) {
    return IoReactivexPluginsRxJavaPlugins_callRequireNonNullWithJavaUtilConcurrentCallable_(defaultScheduler);
  }
  return IoReactivexPluginsRxJavaPlugins_applyRequireNonNullWithIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(f, defaultScheduler);
}

IoReactivexScheduler *IoReactivexPluginsRxJavaPlugins_initNewThreadSchedulerWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> defaultScheduler) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(defaultScheduler, @"Scheduler Callable can't be null");
  id<IoReactivexFunctionsFunction> f = JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onInitNewThreadHandler);
  if (f == nil) {
    return IoReactivexPluginsRxJavaPlugins_callRequireNonNullWithJavaUtilConcurrentCallable_(defaultScheduler);
  }
  return IoReactivexPluginsRxJavaPlugins_applyRequireNonNullWithIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(f, defaultScheduler);
}

IoReactivexScheduler *IoReactivexPluginsRxJavaPlugins_initSingleSchedulerWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> defaultScheduler) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(defaultScheduler, @"Scheduler Callable can't be null");
  id<IoReactivexFunctionsFunction> f = JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onInitSingleHandler);
  if (f == nil) {
    return IoReactivexPluginsRxJavaPlugins_callRequireNonNullWithJavaUtilConcurrentCallable_(defaultScheduler);
  }
  return IoReactivexPluginsRxJavaPlugins_applyRequireNonNullWithIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(f, defaultScheduler);
}

IoReactivexScheduler *IoReactivexPluginsRxJavaPlugins_onComputationSchedulerWithIoReactivexScheduler_(IoReactivexScheduler *defaultScheduler) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  id<IoReactivexFunctionsFunction> f = JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onComputationHandler);
  if (f == nil) {
    return defaultScheduler;
  }
  return IoReactivexPluginsRxJavaPlugins_applyWithIoReactivexFunctionsFunction_withId_(f, defaultScheduler);
}

void IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_(NSException *error) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  id<IoReactivexFunctionsConsumer> f = JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_errorHandler);
  if (error == nil) {
    error = create_JavaLangNullPointerException_initWithNSString_(@"onError called with null. Null values are generally not allowed in 2.x operators and sources.");
  }
  else {
    if (!IoReactivexPluginsRxJavaPlugins_isBugWithNSException_(error)) {
      error = create_IoReactivexExceptionsUndeliverableException_initWithNSException_(error);
    }
  }
  if (f != nil) {
    @try {
      [f acceptWithId:error];
      return;
    }
    @catch (NSException *e) {
      [((NSException *) nil_chk(e)) printStackTrace];
      IoReactivexPluginsRxJavaPlugins_uncaughtWithNSException_(e);
    }
  }
  [error printStackTrace];
  IoReactivexPluginsRxJavaPlugins_uncaughtWithNSException_(error);
}

jboolean IoReactivexPluginsRxJavaPlugins_isBugWithNSException_(NSException *error) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  if ([error isKindOfClass:[IoReactivexExceptionsOnErrorNotImplementedException class]]) {
    return true;
  }
  if ([error isKindOfClass:[IoReactivexExceptionsMissingBackpressureException class]]) {
    return true;
  }
  if ([error isKindOfClass:[JavaLangIllegalStateException class]]) {
    return true;
  }
  if ([error isKindOfClass:[JavaLangNullPointerException class]]) {
    return true;
  }
  if ([error isKindOfClass:[JavaLangIllegalArgumentException class]]) {
    return true;
  }
  if ([error isKindOfClass:[IoReactivexExceptionsCompositeException class]]) {
    return true;
  }
  return false;
}

void IoReactivexPluginsRxJavaPlugins_uncaughtWithNSException_(NSException *error) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  JavaLangThread *currentThread = JavaLangThread_currentThread();
  id<JavaLangThread_UncaughtExceptionHandler> handler = [((JavaLangThread *) nil_chk(currentThread)) getUncaughtExceptionHandler];
  [((id<JavaLangThread_UncaughtExceptionHandler>) nil_chk(handler)) uncaughtExceptionWithJavaLangThread:currentThread withNSException:error];
}

IoReactivexScheduler *IoReactivexPluginsRxJavaPlugins_onIoSchedulerWithIoReactivexScheduler_(IoReactivexScheduler *defaultScheduler) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  id<IoReactivexFunctionsFunction> f = JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onIoHandler);
  if (f == nil) {
    return defaultScheduler;
  }
  return IoReactivexPluginsRxJavaPlugins_applyWithIoReactivexFunctionsFunction_withId_(f, defaultScheduler);
}

IoReactivexScheduler *IoReactivexPluginsRxJavaPlugins_onNewThreadSchedulerWithIoReactivexScheduler_(IoReactivexScheduler *defaultScheduler) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  id<IoReactivexFunctionsFunction> f = JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onNewThreadHandler);
  if (f == nil) {
    return defaultScheduler;
  }
  return IoReactivexPluginsRxJavaPlugins_applyWithIoReactivexFunctionsFunction_withId_(f, defaultScheduler);
}

id<JavaLangRunnable> IoReactivexPluginsRxJavaPlugins_onScheduleWithJavaLangRunnable_(id<JavaLangRunnable> run) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  id<IoReactivexFunctionsFunction> f = JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onScheduleHandler);
  if (f == nil) {
    return run;
  }
  return IoReactivexPluginsRxJavaPlugins_applyWithIoReactivexFunctionsFunction_withId_(f, run);
}

IoReactivexScheduler *IoReactivexPluginsRxJavaPlugins_onSingleSchedulerWithIoReactivexScheduler_(IoReactivexScheduler *defaultScheduler) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  id<IoReactivexFunctionsFunction> f = JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onSingleHandler);
  if (f == nil) {
    return defaultScheduler;
  }
  return IoReactivexPluginsRxJavaPlugins_applyWithIoReactivexFunctionsFunction_withId_(f, defaultScheduler);
}

void IoReactivexPluginsRxJavaPlugins_reset() {
  IoReactivexPluginsRxJavaPlugins_initialize();
  IoReactivexPluginsRxJavaPlugins_setErrorHandlerWithIoReactivexFunctionsConsumer_(nil);
  IoReactivexPluginsRxJavaPlugins_setScheduleHandlerWithIoReactivexFunctionsFunction_(nil);
  IoReactivexPluginsRxJavaPlugins_setComputationSchedulerHandlerWithIoReactivexFunctionsFunction_(nil);
  IoReactivexPluginsRxJavaPlugins_setInitComputationSchedulerHandlerWithIoReactivexFunctionsFunction_(nil);
  IoReactivexPluginsRxJavaPlugins_setIoSchedulerHandlerWithIoReactivexFunctionsFunction_(nil);
  IoReactivexPluginsRxJavaPlugins_setInitIoSchedulerHandlerWithIoReactivexFunctionsFunction_(nil);
  IoReactivexPluginsRxJavaPlugins_setSingleSchedulerHandlerWithIoReactivexFunctionsFunction_(nil);
  IoReactivexPluginsRxJavaPlugins_setInitSingleSchedulerHandlerWithIoReactivexFunctionsFunction_(nil);
  IoReactivexPluginsRxJavaPlugins_setNewThreadSchedulerHandlerWithIoReactivexFunctionsFunction_(nil);
  IoReactivexPluginsRxJavaPlugins_setInitNewThreadSchedulerHandlerWithIoReactivexFunctionsFunction_(nil);
  IoReactivexPluginsRxJavaPlugins_setOnFlowableAssemblyWithIoReactivexFunctionsFunction_(nil);
  IoReactivexPluginsRxJavaPlugins_setOnFlowableSubscribeWithIoReactivexFunctionsBiFunction_(nil);
  IoReactivexPluginsRxJavaPlugins_setOnObservableAssemblyWithIoReactivexFunctionsFunction_(nil);
  IoReactivexPluginsRxJavaPlugins_setOnObservableSubscribeWithIoReactivexFunctionsBiFunction_(nil);
  IoReactivexPluginsRxJavaPlugins_setOnSingleAssemblyWithIoReactivexFunctionsFunction_(nil);
  IoReactivexPluginsRxJavaPlugins_setOnSingleSubscribeWithIoReactivexFunctionsBiFunction_(nil);
  IoReactivexPluginsRxJavaPlugins_setOnCompletableAssemblyWithIoReactivexFunctionsFunction_(nil);
  IoReactivexPluginsRxJavaPlugins_setOnCompletableSubscribeWithIoReactivexFunctionsBiFunction_(nil);
  IoReactivexPluginsRxJavaPlugins_setOnConnectableFlowableAssemblyWithIoReactivexFunctionsFunction_(nil);
  IoReactivexPluginsRxJavaPlugins_setOnConnectableObservableAssemblyWithIoReactivexFunctionsFunction_(nil);
  IoReactivexPluginsRxJavaPlugins_setOnMaybeAssemblyWithIoReactivexFunctionsFunction_(nil);
  IoReactivexPluginsRxJavaPlugins_setOnMaybeSubscribeWithIoReactivexFunctionsBiFunction_(nil);
  IoReactivexPluginsRxJavaPlugins_setOnParallelAssemblyWithIoReactivexFunctionsFunction_(nil);
  IoReactivexPluginsRxJavaPlugins_setFailOnNonBlockingSchedulerWithBoolean_(false);
  IoReactivexPluginsRxJavaPlugins_setOnBeforeBlockingWithIoReactivexFunctionsBooleanSupplier_(nil);
}

void IoReactivexPluginsRxJavaPlugins_setComputationSchedulerHandlerWithIoReactivexFunctionsFunction_(id<IoReactivexFunctionsFunction> handler) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  if (JreLoadVolatileBoolean(&IoReactivexPluginsRxJavaPlugins_lockdown_)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Plugins can't be changed anymore");
  }
  JreVolatileStrongAssign(&IoReactivexPluginsRxJavaPlugins_onComputationHandler, handler);
}

void IoReactivexPluginsRxJavaPlugins_setErrorHandlerWithIoReactivexFunctionsConsumer_(id<IoReactivexFunctionsConsumer> handler) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  if (JreLoadVolatileBoolean(&IoReactivexPluginsRxJavaPlugins_lockdown_)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Plugins can't be changed anymore");
  }
  JreVolatileStrongAssign(&IoReactivexPluginsRxJavaPlugins_errorHandler, handler);
}

void IoReactivexPluginsRxJavaPlugins_setInitComputationSchedulerHandlerWithIoReactivexFunctionsFunction_(id<IoReactivexFunctionsFunction> handler) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  if (JreLoadVolatileBoolean(&IoReactivexPluginsRxJavaPlugins_lockdown_)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Plugins can't be changed anymore");
  }
  JreVolatileStrongAssign(&IoReactivexPluginsRxJavaPlugins_onInitComputationHandler, handler);
}

void IoReactivexPluginsRxJavaPlugins_setInitIoSchedulerHandlerWithIoReactivexFunctionsFunction_(id<IoReactivexFunctionsFunction> handler) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  if (JreLoadVolatileBoolean(&IoReactivexPluginsRxJavaPlugins_lockdown_)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Plugins can't be changed anymore");
  }
  JreVolatileStrongAssign(&IoReactivexPluginsRxJavaPlugins_onInitIoHandler, handler);
}

void IoReactivexPluginsRxJavaPlugins_setInitNewThreadSchedulerHandlerWithIoReactivexFunctionsFunction_(id<IoReactivexFunctionsFunction> handler) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  if (JreLoadVolatileBoolean(&IoReactivexPluginsRxJavaPlugins_lockdown_)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Plugins can't be changed anymore");
  }
  JreVolatileStrongAssign(&IoReactivexPluginsRxJavaPlugins_onInitNewThreadHandler, handler);
}

void IoReactivexPluginsRxJavaPlugins_setInitSingleSchedulerHandlerWithIoReactivexFunctionsFunction_(id<IoReactivexFunctionsFunction> handler) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  if (JreLoadVolatileBoolean(&IoReactivexPluginsRxJavaPlugins_lockdown_)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Plugins can't be changed anymore");
  }
  JreVolatileStrongAssign(&IoReactivexPluginsRxJavaPlugins_onInitSingleHandler, handler);
}

void IoReactivexPluginsRxJavaPlugins_setIoSchedulerHandlerWithIoReactivexFunctionsFunction_(id<IoReactivexFunctionsFunction> handler) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  if (JreLoadVolatileBoolean(&IoReactivexPluginsRxJavaPlugins_lockdown_)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Plugins can't be changed anymore");
  }
  JreVolatileStrongAssign(&IoReactivexPluginsRxJavaPlugins_onIoHandler, handler);
}

void IoReactivexPluginsRxJavaPlugins_setNewThreadSchedulerHandlerWithIoReactivexFunctionsFunction_(id<IoReactivexFunctionsFunction> handler) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  if (JreLoadVolatileBoolean(&IoReactivexPluginsRxJavaPlugins_lockdown_)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Plugins can't be changed anymore");
  }
  JreVolatileStrongAssign(&IoReactivexPluginsRxJavaPlugins_onNewThreadHandler, handler);
}

void IoReactivexPluginsRxJavaPlugins_setScheduleHandlerWithIoReactivexFunctionsFunction_(id<IoReactivexFunctionsFunction> handler) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  if (JreLoadVolatileBoolean(&IoReactivexPluginsRxJavaPlugins_lockdown_)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Plugins can't be changed anymore");
  }
  JreVolatileStrongAssign(&IoReactivexPluginsRxJavaPlugins_onScheduleHandler, handler);
}

void IoReactivexPluginsRxJavaPlugins_setSingleSchedulerHandlerWithIoReactivexFunctionsFunction_(id<IoReactivexFunctionsFunction> handler) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  if (JreLoadVolatileBoolean(&IoReactivexPluginsRxJavaPlugins_lockdown_)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Plugins can't be changed anymore");
  }
  JreVolatileStrongAssign(&IoReactivexPluginsRxJavaPlugins_onSingleHandler, handler);
}

void IoReactivexPluginsRxJavaPlugins_unlock() {
  IoReactivexPluginsRxJavaPlugins_initialize();
  JreAssignVolatileBoolean(&IoReactivexPluginsRxJavaPlugins_lockdown_, false);
}

id<IoReactivexFunctionsFunction> IoReactivexPluginsRxJavaPlugins_getOnCompletableAssembly() {
  IoReactivexPluginsRxJavaPlugins_initialize();
  return JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onCompletableAssembly);
}

id<IoReactivexFunctionsBiFunction> IoReactivexPluginsRxJavaPlugins_getOnCompletableSubscribe() {
  IoReactivexPluginsRxJavaPlugins_initialize();
  return JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onCompletableSubscribe);
}

id<IoReactivexFunctionsFunction> IoReactivexPluginsRxJavaPlugins_getOnFlowableAssembly() {
  IoReactivexPluginsRxJavaPlugins_initialize();
  return JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onFlowableAssembly);
}

id<IoReactivexFunctionsFunction> IoReactivexPluginsRxJavaPlugins_getOnConnectableFlowableAssembly() {
  IoReactivexPluginsRxJavaPlugins_initialize();
  return JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onConnectableFlowableAssembly);
}

id<IoReactivexFunctionsBiFunction> IoReactivexPluginsRxJavaPlugins_getOnFlowableSubscribe() {
  IoReactivexPluginsRxJavaPlugins_initialize();
  return JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onFlowableSubscribe);
}

id<IoReactivexFunctionsBiFunction> IoReactivexPluginsRxJavaPlugins_getOnMaybeSubscribe() {
  IoReactivexPluginsRxJavaPlugins_initialize();
  return JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onMaybeSubscribe);
}

id<IoReactivexFunctionsFunction> IoReactivexPluginsRxJavaPlugins_getOnMaybeAssembly() {
  IoReactivexPluginsRxJavaPlugins_initialize();
  return JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onMaybeAssembly);
}

id<IoReactivexFunctionsFunction> IoReactivexPluginsRxJavaPlugins_getOnSingleAssembly() {
  IoReactivexPluginsRxJavaPlugins_initialize();
  return JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onSingleAssembly);
}

id<IoReactivexFunctionsBiFunction> IoReactivexPluginsRxJavaPlugins_getOnSingleSubscribe() {
  IoReactivexPluginsRxJavaPlugins_initialize();
  return JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onSingleSubscribe);
}

id<IoReactivexFunctionsFunction> IoReactivexPluginsRxJavaPlugins_getOnObservableAssembly() {
  IoReactivexPluginsRxJavaPlugins_initialize();
  return JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onObservableAssembly);
}

id<IoReactivexFunctionsFunction> IoReactivexPluginsRxJavaPlugins_getOnConnectableObservableAssembly() {
  IoReactivexPluginsRxJavaPlugins_initialize();
  return JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onConnectableObservableAssembly);
}

id<IoReactivexFunctionsBiFunction> IoReactivexPluginsRxJavaPlugins_getOnObservableSubscribe() {
  IoReactivexPluginsRxJavaPlugins_initialize();
  return JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onObservableSubscribe);
}

void IoReactivexPluginsRxJavaPlugins_setOnCompletableAssemblyWithIoReactivexFunctionsFunction_(id<IoReactivexFunctionsFunction> onCompletableAssembly) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  if (JreLoadVolatileBoolean(&IoReactivexPluginsRxJavaPlugins_lockdown_)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Plugins can't be changed anymore");
  }
  JreVolatileStrongAssign(&IoReactivexPluginsRxJavaPlugins_onCompletableAssembly, onCompletableAssembly);
}

void IoReactivexPluginsRxJavaPlugins_setOnCompletableSubscribeWithIoReactivexFunctionsBiFunction_(id<IoReactivexFunctionsBiFunction> onCompletableSubscribe) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  if (JreLoadVolatileBoolean(&IoReactivexPluginsRxJavaPlugins_lockdown_)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Plugins can't be changed anymore");
  }
  JreVolatileStrongAssign(&IoReactivexPluginsRxJavaPlugins_onCompletableSubscribe, onCompletableSubscribe);
}

void IoReactivexPluginsRxJavaPlugins_setOnFlowableAssemblyWithIoReactivexFunctionsFunction_(id<IoReactivexFunctionsFunction> onFlowableAssembly) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  if (JreLoadVolatileBoolean(&IoReactivexPluginsRxJavaPlugins_lockdown_)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Plugins can't be changed anymore");
  }
  JreVolatileStrongAssign(&IoReactivexPluginsRxJavaPlugins_onFlowableAssembly, onFlowableAssembly);
}

void IoReactivexPluginsRxJavaPlugins_setOnMaybeAssemblyWithIoReactivexFunctionsFunction_(id<IoReactivexFunctionsFunction> onMaybeAssembly) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  if (JreLoadVolatileBoolean(&IoReactivexPluginsRxJavaPlugins_lockdown_)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Plugins can't be changed anymore");
  }
  JreVolatileStrongAssign(&IoReactivexPluginsRxJavaPlugins_onMaybeAssembly, onMaybeAssembly);
}

void IoReactivexPluginsRxJavaPlugins_setOnConnectableFlowableAssemblyWithIoReactivexFunctionsFunction_(id<IoReactivexFunctionsFunction> onConnectableFlowableAssembly) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  if (JreLoadVolatileBoolean(&IoReactivexPluginsRxJavaPlugins_lockdown_)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Plugins can't be changed anymore");
  }
  JreVolatileStrongAssign(&IoReactivexPluginsRxJavaPlugins_onConnectableFlowableAssembly, onConnectableFlowableAssembly);
}

void IoReactivexPluginsRxJavaPlugins_setOnFlowableSubscribeWithIoReactivexFunctionsBiFunction_(id<IoReactivexFunctionsBiFunction> onFlowableSubscribe) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  if (JreLoadVolatileBoolean(&IoReactivexPluginsRxJavaPlugins_lockdown_)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Plugins can't be changed anymore");
  }
  JreVolatileStrongAssign(&IoReactivexPluginsRxJavaPlugins_onFlowableSubscribe, onFlowableSubscribe);
}

void IoReactivexPluginsRxJavaPlugins_setOnMaybeSubscribeWithIoReactivexFunctionsBiFunction_(id<IoReactivexFunctionsBiFunction> onMaybeSubscribe) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  if (JreLoadVolatileBoolean(&IoReactivexPluginsRxJavaPlugins_lockdown_)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Plugins can't be changed anymore");
  }
  JreVolatileStrongAssign(&IoReactivexPluginsRxJavaPlugins_onMaybeSubscribe, onMaybeSubscribe);
}

void IoReactivexPluginsRxJavaPlugins_setOnObservableAssemblyWithIoReactivexFunctionsFunction_(id<IoReactivexFunctionsFunction> onObservableAssembly) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  if (JreLoadVolatileBoolean(&IoReactivexPluginsRxJavaPlugins_lockdown_)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Plugins can't be changed anymore");
  }
  JreVolatileStrongAssign(&IoReactivexPluginsRxJavaPlugins_onObservableAssembly, onObservableAssembly);
}

void IoReactivexPluginsRxJavaPlugins_setOnConnectableObservableAssemblyWithIoReactivexFunctionsFunction_(id<IoReactivexFunctionsFunction> onConnectableObservableAssembly) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  if (JreLoadVolatileBoolean(&IoReactivexPluginsRxJavaPlugins_lockdown_)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Plugins can't be changed anymore");
  }
  JreVolatileStrongAssign(&IoReactivexPluginsRxJavaPlugins_onConnectableObservableAssembly, onConnectableObservableAssembly);
}

void IoReactivexPluginsRxJavaPlugins_setOnObservableSubscribeWithIoReactivexFunctionsBiFunction_(id<IoReactivexFunctionsBiFunction> onObservableSubscribe) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  if (JreLoadVolatileBoolean(&IoReactivexPluginsRxJavaPlugins_lockdown_)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Plugins can't be changed anymore");
  }
  JreVolatileStrongAssign(&IoReactivexPluginsRxJavaPlugins_onObservableSubscribe, onObservableSubscribe);
}

void IoReactivexPluginsRxJavaPlugins_setOnSingleAssemblyWithIoReactivexFunctionsFunction_(id<IoReactivexFunctionsFunction> onSingleAssembly) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  if (JreLoadVolatileBoolean(&IoReactivexPluginsRxJavaPlugins_lockdown_)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Plugins can't be changed anymore");
  }
  JreVolatileStrongAssign(&IoReactivexPluginsRxJavaPlugins_onSingleAssembly, onSingleAssembly);
}

void IoReactivexPluginsRxJavaPlugins_setOnSingleSubscribeWithIoReactivexFunctionsBiFunction_(id<IoReactivexFunctionsBiFunction> onSingleSubscribe) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  if (JreLoadVolatileBoolean(&IoReactivexPluginsRxJavaPlugins_lockdown_)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Plugins can't be changed anymore");
  }
  JreVolatileStrongAssign(&IoReactivexPluginsRxJavaPlugins_onSingleSubscribe, onSingleSubscribe);
}

id<OrgReactivestreamsSubscriber> IoReactivexPluginsRxJavaPlugins_onSubscribeWithIoReactivexFlowable_withOrgReactivestreamsSubscriber_(IoReactivexFlowable *source, id<OrgReactivestreamsSubscriber> subscriber) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  id<IoReactivexFunctionsBiFunction> f = JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onFlowableSubscribe);
  if (f != nil) {
    return IoReactivexPluginsRxJavaPlugins_applyWithIoReactivexFunctionsBiFunction_withId_withId_(f, source, subscriber);
  }
  return subscriber;
}

id<IoReactivexObserver> IoReactivexPluginsRxJavaPlugins_onSubscribeWithIoReactivexObservable_withIoReactivexObserver_(IoReactivexObservable *source, id<IoReactivexObserver> observer) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  id<IoReactivexFunctionsBiFunction> f = JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onObservableSubscribe);
  if (f != nil) {
    return IoReactivexPluginsRxJavaPlugins_applyWithIoReactivexFunctionsBiFunction_withId_withId_(f, source, observer);
  }
  return observer;
}

id<IoReactivexSingleObserver> IoReactivexPluginsRxJavaPlugins_onSubscribeWithIoReactivexSingle_withIoReactivexSingleObserver_(IoReactivexSingle *source, id<IoReactivexSingleObserver> observer) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  id<IoReactivexFunctionsBiFunction> f = JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onSingleSubscribe);
  if (f != nil) {
    return IoReactivexPluginsRxJavaPlugins_applyWithIoReactivexFunctionsBiFunction_withId_withId_(f, source, observer);
  }
  return observer;
}

id<IoReactivexCompletableObserver> IoReactivexPluginsRxJavaPlugins_onSubscribeWithIoReactivexCompletable_withIoReactivexCompletableObserver_(IoReactivexCompletable *source, id<IoReactivexCompletableObserver> observer) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  id<IoReactivexFunctionsBiFunction> f = JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onCompletableSubscribe);
  if (f != nil) {
    return IoReactivexPluginsRxJavaPlugins_applyWithIoReactivexFunctionsBiFunction_withId_withId_(f, source, observer);
  }
  return observer;
}

id<IoReactivexMaybeObserver> IoReactivexPluginsRxJavaPlugins_onSubscribeWithIoReactivexMaybe_withIoReactivexMaybeObserver_(IoReactivexMaybe *source, id<IoReactivexMaybeObserver> subscriber) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  id<IoReactivexFunctionsBiFunction> f = JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onMaybeSubscribe);
  if (f != nil) {
    return IoReactivexPluginsRxJavaPlugins_applyWithIoReactivexFunctionsBiFunction_withId_withId_(f, source, subscriber);
  }
  return subscriber;
}

IoReactivexMaybe *IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexMaybe_(IoReactivexMaybe *source) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  id<IoReactivexFunctionsFunction> f = JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onMaybeAssembly);
  if (f != nil) {
    return IoReactivexPluginsRxJavaPlugins_applyWithIoReactivexFunctionsFunction_withId_(f, source);
  }
  return source;
}

IoReactivexFlowable *IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexFlowable_(IoReactivexFlowable *source) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  id<IoReactivexFunctionsFunction> f = JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onFlowableAssembly);
  if (f != nil) {
    return IoReactivexPluginsRxJavaPlugins_applyWithIoReactivexFunctionsFunction_withId_(f, source);
  }
  return source;
}

IoReactivexFlowablesConnectableFlowable *IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexFlowablesConnectableFlowable_(IoReactivexFlowablesConnectableFlowable *source) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  id<IoReactivexFunctionsFunction> f = JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onConnectableFlowableAssembly);
  if (f != nil) {
    return IoReactivexPluginsRxJavaPlugins_applyWithIoReactivexFunctionsFunction_withId_(f, source);
  }
  return source;
}

IoReactivexObservable *IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexObservable_(IoReactivexObservable *source) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  id<IoReactivexFunctionsFunction> f = JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onObservableAssembly);
  if (f != nil) {
    return IoReactivexPluginsRxJavaPlugins_applyWithIoReactivexFunctionsFunction_withId_(f, source);
  }
  return source;
}

IoReactivexObservablesConnectableObservable *IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexObservablesConnectableObservable_(IoReactivexObservablesConnectableObservable *source) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  id<IoReactivexFunctionsFunction> f = JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onConnectableObservableAssembly);
  if (f != nil) {
    return IoReactivexPluginsRxJavaPlugins_applyWithIoReactivexFunctionsFunction_withId_(f, source);
  }
  return source;
}

IoReactivexSingle *IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexSingle_(IoReactivexSingle *source) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  id<IoReactivexFunctionsFunction> f = JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onSingleAssembly);
  if (f != nil) {
    return IoReactivexPluginsRxJavaPlugins_applyWithIoReactivexFunctionsFunction_withId_(f, source);
  }
  return source;
}

IoReactivexCompletable *IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexCompletable_(IoReactivexCompletable *source) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  id<IoReactivexFunctionsFunction> f = JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onCompletableAssembly);
  if (f != nil) {
    return IoReactivexPluginsRxJavaPlugins_applyWithIoReactivexFunctionsFunction_withId_(f, source);
  }
  return source;
}

void IoReactivexPluginsRxJavaPlugins_setOnParallelAssemblyWithIoReactivexFunctionsFunction_(id<IoReactivexFunctionsFunction> handler) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  if (JreLoadVolatileBoolean(&IoReactivexPluginsRxJavaPlugins_lockdown_)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Plugins can't be changed anymore");
  }
  JreVolatileStrongAssign(&IoReactivexPluginsRxJavaPlugins_onParallelAssembly, handler);
}

id<IoReactivexFunctionsFunction> IoReactivexPluginsRxJavaPlugins_getOnParallelAssembly() {
  IoReactivexPluginsRxJavaPlugins_initialize();
  return JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onParallelAssembly);
}

IoReactivexParallelParallelFlowable *IoReactivexPluginsRxJavaPlugins_onAssemblyWithIoReactivexParallelParallelFlowable_(IoReactivexParallelParallelFlowable *source) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  id<IoReactivexFunctionsFunction> f = JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onParallelAssembly);
  if (f != nil) {
    return IoReactivexPluginsRxJavaPlugins_applyWithIoReactivexFunctionsFunction_withId_(f, source);
  }
  return source;
}

jboolean IoReactivexPluginsRxJavaPlugins_onBeforeBlocking() {
  IoReactivexPluginsRxJavaPlugins_initialize();
  id<IoReactivexFunctionsBooleanSupplier> f = JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onBeforeBlocking_);
  if (f != nil) {
    @try {
      return [f getAsBoolean];
    }
    @catch (NSException *ex) {
      @throw IoReactivexInternalUtilExceptionHelper_wrapOrThrowWithNSException_(ex);
    }
  }
  return false;
}

void IoReactivexPluginsRxJavaPlugins_setOnBeforeBlockingWithIoReactivexFunctionsBooleanSupplier_(id<IoReactivexFunctionsBooleanSupplier> handler) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  if (JreLoadVolatileBoolean(&IoReactivexPluginsRxJavaPlugins_lockdown_)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Plugins can't be changed anymore");
  }
  JreVolatileStrongAssign(&IoReactivexPluginsRxJavaPlugins_onBeforeBlocking_, handler);
}

id<IoReactivexFunctionsBooleanSupplier> IoReactivexPluginsRxJavaPlugins_getOnBeforeBlocking() {
  IoReactivexPluginsRxJavaPlugins_initialize();
  return JreLoadVolatileId(&IoReactivexPluginsRxJavaPlugins_onBeforeBlocking_);
}

IoReactivexScheduler *IoReactivexPluginsRxJavaPlugins_createComputationSchedulerWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  return create_IoReactivexInternalSchedulersComputationScheduler_initWithJavaUtilConcurrentThreadFactory_(IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(threadFactory, @"threadFactory is null"));
}

IoReactivexScheduler *IoReactivexPluginsRxJavaPlugins_createIoSchedulerWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  return create_IoReactivexInternalSchedulersIoScheduler_initWithJavaUtilConcurrentThreadFactory_(IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(threadFactory, @"threadFactory is null"));
}

IoReactivexScheduler *IoReactivexPluginsRxJavaPlugins_createNewThreadSchedulerWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  return create_IoReactivexInternalSchedulersNewThreadScheduler_initWithJavaUtilConcurrentThreadFactory_(IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(threadFactory, @"threadFactory is null"));
}

IoReactivexScheduler *IoReactivexPluginsRxJavaPlugins_createSingleSchedulerWithJavaUtilConcurrentThreadFactory_(id<JavaUtilConcurrentThreadFactory> threadFactory) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  return create_IoReactivexInternalSchedulersSingleScheduler_initWithJavaUtilConcurrentThreadFactory_(IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(threadFactory, @"threadFactory is null"));
}

id IoReactivexPluginsRxJavaPlugins_applyWithIoReactivexFunctionsFunction_withId_(id<IoReactivexFunctionsFunction> f, id t) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  @try {
    return [((id<IoReactivexFunctionsFunction>) nil_chk(f)) applyWithId:t];
  }
  @catch (NSException *ex) {
    @throw IoReactivexInternalUtilExceptionHelper_wrapOrThrowWithNSException_(ex);
  }
}

id IoReactivexPluginsRxJavaPlugins_applyWithIoReactivexFunctionsBiFunction_withId_withId_(id<IoReactivexFunctionsBiFunction> f, id t, id u) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  @try {
    return [((id<IoReactivexFunctionsBiFunction>) nil_chk(f)) applyWithId:t withId:u];
  }
  @catch (NSException *ex) {
    @throw IoReactivexInternalUtilExceptionHelper_wrapOrThrowWithNSException_(ex);
  }
}

IoReactivexScheduler *IoReactivexPluginsRxJavaPlugins_callRequireNonNullWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> s) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  @try {
    return IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(s)) call], @"Scheduler Callable result can't be null");
  }
  @catch (NSException *ex) {
    @throw IoReactivexInternalUtilExceptionHelper_wrapOrThrowWithNSException_(ex);
  }
}

IoReactivexScheduler *IoReactivexPluginsRxJavaPlugins_applyRequireNonNullWithIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(id<IoReactivexFunctionsFunction> f, id<JavaUtilConcurrentCallable> s) {
  IoReactivexPluginsRxJavaPlugins_initialize();
  return IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_(IoReactivexPluginsRxJavaPlugins_applyWithIoReactivexFunctionsFunction_withId_(f, s), @"Scheduler Callable result can't be null");
}

void IoReactivexPluginsRxJavaPlugins_init(IoReactivexPluginsRxJavaPlugins *self) {
  NSObject_init(self);
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"No instances!");
}

IoReactivexPluginsRxJavaPlugins *new_IoReactivexPluginsRxJavaPlugins_init() {
  J2OBJC_NEW_IMPL(IoReactivexPluginsRxJavaPlugins, init)
}

IoReactivexPluginsRxJavaPlugins *create_IoReactivexPluginsRxJavaPlugins_init() {
  J2OBJC_CREATE_IMPL(IoReactivexPluginsRxJavaPlugins, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexPluginsRxJavaPlugins)
