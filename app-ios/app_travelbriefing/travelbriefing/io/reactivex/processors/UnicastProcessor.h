//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/processors/UnicastProcessor.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexProcessorsUnicastProcessor")
#ifdef RESTRICT_IoReactivexProcessorsUnicastProcessor
#define INCLUDE_ALL_IoReactivexProcessorsUnicastProcessor 0
#else
#define INCLUDE_ALL_IoReactivexProcessorsUnicastProcessor 1
#endif
#undef RESTRICT_IoReactivexProcessorsUnicastProcessor

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoReactivexProcessorsUnicastProcessor_) && (INCLUDE_ALL_IoReactivexProcessorsUnicastProcessor || defined(INCLUDE_IoReactivexProcessorsUnicastProcessor))
#define IoReactivexProcessorsUnicastProcessor_

#define RESTRICT_IoReactivexProcessorsFlowableProcessor 1
#define INCLUDE_IoReactivexProcessorsFlowableProcessor 1
#include "io/reactivex/processors/FlowableProcessor.h"

@class IoReactivexInternalQueueSpscLinkedArrayQueue;
@class IoReactivexInternalSubscriptionsBasicIntQueueSubscription;
@class JavaUtilConcurrentAtomicAtomicBoolean;
@class JavaUtilConcurrentAtomicAtomicLong;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol JavaLangRunnable;
@protocol OrgReactivestreamsSubscriber;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexProcessorsUnicastProcessor : IoReactivexProcessorsFlowableProcessor {
 @public
  IoReactivexInternalQueueSpscLinkedArrayQueue *queue_;
  JavaUtilConcurrentAtomicAtomicReference *onTerminate_;
  volatile_jboolean done_;
  NSException *error_;
  JavaUtilConcurrentAtomicAtomicReference *actual_;
  volatile_jboolean cancelled_;
  JavaUtilConcurrentAtomicAtomicBoolean *once_;
  IoReactivexInternalSubscriptionsBasicIntQueueSubscription *wip_;
  JavaUtilConcurrentAtomicAtomicLong *requested_;
  jboolean enableOperatorFusion_;
}

#pragma mark Public

+ (IoReactivexProcessorsUnicastProcessor *)create;

+ (IoReactivexProcessorsUnicastProcessor *)createWithInt:(jint)capacityHint;

+ (IoReactivexProcessorsUnicastProcessor *)createWithInt:(jint)capacityHint
                                    withJavaLangRunnable:(id<JavaLangRunnable>)onCancelled;

- (NSException *)getThrowable;

- (jboolean)hasComplete;

- (jboolean)hasSubscribers;

- (jboolean)hasThrowable;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

#pragma mark Package-Private

- (instancetype)initWithInt:(jint)capacityHint;

- (instancetype)initWithInt:(jint)capacityHint
       withJavaLangRunnable:(id<JavaLangRunnable>)onTerminate;

- (jboolean)checkTerminatedWithBoolean:(jboolean)d
                           withBoolean:(jboolean)empty
      withOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)a
withIoReactivexInternalQueueSpscLinkedArrayQueue:(IoReactivexInternalQueueSpscLinkedArrayQueue *)q;

- (void)doTerminate;

- (void)drain;

- (void)drainFusedWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)a;

- (void)drainRegularWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)a;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexProcessorsUnicastProcessor)

J2OBJC_FIELD_SETTER(IoReactivexProcessorsUnicastProcessor, queue_, IoReactivexInternalQueueSpscLinkedArrayQueue *)
J2OBJC_FIELD_SETTER(IoReactivexProcessorsUnicastProcessor, onTerminate_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexProcessorsUnicastProcessor, error_, NSException *)
J2OBJC_FIELD_SETTER(IoReactivexProcessorsUnicastProcessor, actual_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexProcessorsUnicastProcessor, once_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(IoReactivexProcessorsUnicastProcessor, wip_, IoReactivexInternalSubscriptionsBasicIntQueueSubscription *)
J2OBJC_FIELD_SETTER(IoReactivexProcessorsUnicastProcessor, requested_, JavaUtilConcurrentAtomicAtomicLong *)

FOUNDATION_EXPORT IoReactivexProcessorsUnicastProcessor *IoReactivexProcessorsUnicastProcessor_create();

FOUNDATION_EXPORT IoReactivexProcessorsUnicastProcessor *IoReactivexProcessorsUnicastProcessor_createWithInt_(jint capacityHint);

FOUNDATION_EXPORT IoReactivexProcessorsUnicastProcessor *IoReactivexProcessorsUnicastProcessor_createWithInt_withJavaLangRunnable_(jint capacityHint, id<JavaLangRunnable> onCancelled);

FOUNDATION_EXPORT void IoReactivexProcessorsUnicastProcessor_initWithInt_(IoReactivexProcessorsUnicastProcessor *self, jint capacityHint);

FOUNDATION_EXPORT IoReactivexProcessorsUnicastProcessor *new_IoReactivexProcessorsUnicastProcessor_initWithInt_(jint capacityHint) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexProcessorsUnicastProcessor *create_IoReactivexProcessorsUnicastProcessor_initWithInt_(jint capacityHint);

FOUNDATION_EXPORT void IoReactivexProcessorsUnicastProcessor_initWithInt_withJavaLangRunnable_(IoReactivexProcessorsUnicastProcessor *self, jint capacityHint, id<JavaLangRunnable> onTerminate);

FOUNDATION_EXPORT IoReactivexProcessorsUnicastProcessor *new_IoReactivexProcessorsUnicastProcessor_initWithInt_withJavaLangRunnable_(jint capacityHint, id<JavaLangRunnable> onTerminate) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexProcessorsUnicastProcessor *create_IoReactivexProcessorsUnicastProcessor_initWithInt_withJavaLangRunnable_(jint capacityHint, id<JavaLangRunnable> onTerminate);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexProcessorsUnicastProcessor)

#endif

#if !defined (IoReactivexProcessorsUnicastProcessor_UnicastQueueSubscription_) && (INCLUDE_ALL_IoReactivexProcessorsUnicastProcessor || defined(INCLUDE_IoReactivexProcessorsUnicastProcessor_UnicastQueueSubscription))
#define IoReactivexProcessorsUnicastProcessor_UnicastQueueSubscription_

#define RESTRICT_IoReactivexInternalSubscriptionsBasicIntQueueSubscription 1
#define INCLUDE_IoReactivexInternalSubscriptionsBasicIntQueueSubscription 1
#include "io/reactivex/internal/subscriptions/BasicIntQueueSubscription.h"

@class IoReactivexProcessorsUnicastProcessor;

@interface IoReactivexProcessorsUnicastProcessor_UnicastQueueSubscription : IoReactivexInternalSubscriptionsBasicIntQueueSubscription

#pragma mark Public

- (void)cancel;

- (void)clear;

- (jboolean)isEmpty;

- (id)poll;

- (void)requestWithLong:(jlong)n;

- (jint)requestFusionWithInt:(jint)requestedMode;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexProcessorsUnicastProcessor:(IoReactivexProcessorsUnicastProcessor *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexProcessorsUnicastProcessor_UnicastQueueSubscription)

FOUNDATION_EXPORT void IoReactivexProcessorsUnicastProcessor_UnicastQueueSubscription_initWithIoReactivexProcessorsUnicastProcessor_(IoReactivexProcessorsUnicastProcessor_UnicastQueueSubscription *self, IoReactivexProcessorsUnicastProcessor *outer$);

FOUNDATION_EXPORT IoReactivexProcessorsUnicastProcessor_UnicastQueueSubscription *new_IoReactivexProcessorsUnicastProcessor_UnicastQueueSubscription_initWithIoReactivexProcessorsUnicastProcessor_(IoReactivexProcessorsUnicastProcessor *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexProcessorsUnicastProcessor_UnicastQueueSubscription *create_IoReactivexProcessorsUnicastProcessor_UnicastQueueSubscription_initWithIoReactivexProcessorsUnicastProcessor_(IoReactivexProcessorsUnicastProcessor *outer$);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexProcessorsUnicastProcessor_UnicastQueueSubscription)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoReactivexProcessorsUnicastProcessor")
