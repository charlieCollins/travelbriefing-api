//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/schedulers/TestScheduler.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "io/reactivex/Scheduler.h"
#include "io/reactivex/disposables/Disposable.h"
#include "io/reactivex/disposables/Disposables.h"
#include "io/reactivex/internal/disposables/EmptyDisposable.h"
#include "io/reactivex/internal/functions/ObjectHelper.h"
#include "io/reactivex/schedulers/TestScheduler.h"
#include "java/lang/Long.h"
#include "java/lang/Runnable.h"
#include "java/util/Queue.h"
#include "java/util/concurrent/PriorityBlockingQueue.h"
#include "java/util/concurrent/TimeUnit.h"

@interface IoReactivexSchedulersTestScheduler ()

- (void)triggerActionsWithLong:(jlong)targetTimeInNanoseconds;

@end

__attribute__((unused)) static void IoReactivexSchedulersTestScheduler_triggerActionsWithLong_(IoReactivexSchedulersTestScheduler *self, jlong targetTimeInNanoseconds);

@interface IoReactivexSchedulersTestScheduler_TestWorker () {
 @public
  IoReactivexSchedulersTestScheduler *this$0_;
}

@end

@interface IoReactivexSchedulersTestScheduler_TestWorker_1 : NSObject < JavaLangRunnable > {
 @public
  IoReactivexSchedulersTestScheduler_TestWorker *this$0_;
  IoReactivexSchedulersTestScheduler_TimedRunnable *val$timedAction_;
}

- (instancetype)initWithIoReactivexSchedulersTestScheduler_TestWorker:(IoReactivexSchedulersTestScheduler_TestWorker *)outer$
                 withIoReactivexSchedulersTestScheduler_TimedRunnable:(IoReactivexSchedulersTestScheduler_TimedRunnable *)capture$0;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexSchedulersTestScheduler_TestWorker_1)

__attribute__((unused)) static void IoReactivexSchedulersTestScheduler_TestWorker_1_initWithIoReactivexSchedulersTestScheduler_TestWorker_withIoReactivexSchedulersTestScheduler_TimedRunnable_(IoReactivexSchedulersTestScheduler_TestWorker_1 *self, IoReactivexSchedulersTestScheduler_TestWorker *outer$, IoReactivexSchedulersTestScheduler_TimedRunnable *capture$0);

__attribute__((unused)) static IoReactivexSchedulersTestScheduler_TestWorker_1 *new_IoReactivexSchedulersTestScheduler_TestWorker_1_initWithIoReactivexSchedulersTestScheduler_TestWorker_withIoReactivexSchedulersTestScheduler_TimedRunnable_(IoReactivexSchedulersTestScheduler_TestWorker *outer$, IoReactivexSchedulersTestScheduler_TimedRunnable *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexSchedulersTestScheduler_TestWorker_1 *create_IoReactivexSchedulersTestScheduler_TestWorker_1_initWithIoReactivexSchedulersTestScheduler_TestWorker_withIoReactivexSchedulersTestScheduler_TimedRunnable_(IoReactivexSchedulersTestScheduler_TestWorker *outer$, IoReactivexSchedulersTestScheduler_TimedRunnable *capture$0);

@interface IoReactivexSchedulersTestScheduler_TestWorker_2 : NSObject < JavaLangRunnable > {
 @public
  IoReactivexSchedulersTestScheduler_TestWorker *this$0_;
  IoReactivexSchedulersTestScheduler_TimedRunnable *val$timedAction_;
}

- (instancetype)initWithIoReactivexSchedulersTestScheduler_TestWorker:(IoReactivexSchedulersTestScheduler_TestWorker *)outer$
                 withIoReactivexSchedulersTestScheduler_TimedRunnable:(IoReactivexSchedulersTestScheduler_TimedRunnable *)capture$0;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexSchedulersTestScheduler_TestWorker_2)

__attribute__((unused)) static void IoReactivexSchedulersTestScheduler_TestWorker_2_initWithIoReactivexSchedulersTestScheduler_TestWorker_withIoReactivexSchedulersTestScheduler_TimedRunnable_(IoReactivexSchedulersTestScheduler_TestWorker_2 *self, IoReactivexSchedulersTestScheduler_TestWorker *outer$, IoReactivexSchedulersTestScheduler_TimedRunnable *capture$0);

__attribute__((unused)) static IoReactivexSchedulersTestScheduler_TestWorker_2 *new_IoReactivexSchedulersTestScheduler_TestWorker_2_initWithIoReactivexSchedulersTestScheduler_TestWorker_withIoReactivexSchedulersTestScheduler_TimedRunnable_(IoReactivexSchedulersTestScheduler_TestWorker *outer$, IoReactivexSchedulersTestScheduler_TimedRunnable *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexSchedulersTestScheduler_TestWorker_2 *create_IoReactivexSchedulersTestScheduler_TestWorker_2_initWithIoReactivexSchedulersTestScheduler_TestWorker_withIoReactivexSchedulersTestScheduler_TimedRunnable_(IoReactivexSchedulersTestScheduler_TestWorker *outer$, IoReactivexSchedulersTestScheduler_TimedRunnable *capture$0);

@implementation IoReactivexSchedulersTestScheduler

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoReactivexSchedulersTestScheduler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jlong)nowWithJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return [((JavaUtilConcurrentTimeUnit *) nil_chk(unit)) convertWithLong:JreLoadVolatileLong(&time_) withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, NANOSECONDS)];
}

- (void)advanceTimeByWithLong:(jlong)delayTime
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  [self advanceTimeToWithLong:JreLoadVolatileLong(&time_) + [((JavaUtilConcurrentTimeUnit *) nil_chk(unit)) toNanosWithLong:delayTime] withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, NANOSECONDS)];
}

- (void)advanceTimeToWithLong:(jlong)delayTime
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  jlong targetTime = [((JavaUtilConcurrentTimeUnit *) nil_chk(unit)) toNanosWithLong:delayTime];
  IoReactivexSchedulersTestScheduler_triggerActionsWithLong_(self, targetTime);
}

- (void)triggerActions {
  IoReactivexSchedulersTestScheduler_triggerActionsWithLong_(self, JreLoadVolatileLong(&time_));
}

- (void)triggerActionsWithLong:(jlong)targetTimeInNanoseconds {
  IoReactivexSchedulersTestScheduler_triggerActionsWithLong_(self, targetTimeInNanoseconds);
}

- (IoReactivexScheduler_Worker *)createWorker {
  return create_IoReactivexSchedulersTestScheduler_TestWorker_initWithIoReactivexSchedulersTestScheduler_(self);
}

- (void)dealloc {
  RELEASE_(queue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "LIoReactivexScheduler_Worker;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(nowWithJavaUtilConcurrentTimeUnit:);
  methods[2].selector = @selector(advanceTimeByWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[3].selector = @selector(advanceTimeToWithLong:withJavaUtilConcurrentTimeUnit:);
  methods[4].selector = @selector(triggerActions);
  methods[5].selector = @selector(triggerActionsWithLong:);
  methods[6].selector = @selector(createWorker);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "queue_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
    { "counter_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "time_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "now", "LJavaUtilConcurrentTimeUnit;", "advanceTimeBy", "JLJavaUtilConcurrentTimeUnit;", "advanceTimeTo", "triggerActions", "J", "Ljava/util/Queue<Lio/reactivex/schedulers/TestScheduler$TimedRunnable;>;", "LIoReactivexSchedulersTestScheduler_TimedRunnable;LIoReactivexSchedulersTestScheduler_TestWorker;" };
  static const J2ObjcClassInfo _IoReactivexSchedulersTestScheduler = { "TestScheduler", "io.reactivex.schedulers", ptrTable, methods, fields, 7, 0x11, 7, 3, -1, 8, -1, -1, -1 };
  return &_IoReactivexSchedulersTestScheduler;
}

@end

void IoReactivexSchedulersTestScheduler_init(IoReactivexSchedulersTestScheduler *self) {
  IoReactivexScheduler_init(self);
  JreStrongAssignAndConsume(&self->queue_, new_JavaUtilConcurrentPriorityBlockingQueue_initWithInt_(11));
}

IoReactivexSchedulersTestScheduler *new_IoReactivexSchedulersTestScheduler_init() {
  J2OBJC_NEW_IMPL(IoReactivexSchedulersTestScheduler, init)
}

IoReactivexSchedulersTestScheduler *create_IoReactivexSchedulersTestScheduler_init() {
  J2OBJC_CREATE_IMPL(IoReactivexSchedulersTestScheduler, init)
}

void IoReactivexSchedulersTestScheduler_triggerActionsWithLong_(IoReactivexSchedulersTestScheduler *self, jlong targetTimeInNanoseconds) {
  while (![((id<JavaUtilQueue>) nil_chk(self->queue_)) isEmpty]) {
    IoReactivexSchedulersTestScheduler_TimedRunnable *current = [self->queue_ peek];
    if (((IoReactivexSchedulersTestScheduler_TimedRunnable *) nil_chk(current))->time_ > targetTimeInNanoseconds) {
      break;
    }
    JreAssignVolatileLong(&self->time_, current->time_ == 0 ? JreLoadVolatileLong(&self->time_) : current->time_);
    [self->queue_ remove];
    if (!JreLoadVolatileBoolean(&((IoReactivexSchedulersTestScheduler_TestWorker *) nil_chk(current->scheduler_))->disposed_)) {
      [((id<JavaLangRunnable>) nil_chk(current->run_)) run];
    }
  }
  JreAssignVolatileLong(&self->time_, targetTimeInNanoseconds);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexSchedulersTestScheduler)

@implementation IoReactivexSchedulersTestScheduler_TimedRunnable

- (instancetype)initWithIoReactivexSchedulersTestScheduler_TestWorker:(IoReactivexSchedulersTestScheduler_TestWorker *)scheduler
                                                             withLong:(jlong)time
                                                 withJavaLangRunnable:(id<JavaLangRunnable>)run
                                                             withLong:(jlong)count {
  IoReactivexSchedulersTestScheduler_TimedRunnable_initWithIoReactivexSchedulersTestScheduler_TestWorker_withLong_withJavaLangRunnable_withLong_(self, scheduler, time, run, count);
  return self;
}

- (NSString *)description {
  return NSString_java_formatWithNSString_withNSObjectArray_(@"TimedRunnable(time = %d, run = %s)", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(time_), [((id<JavaLangRunnable>) nil_chk(run_)) description] } count:2 type:NSObject_class_()]);
}

- (jint)compareToWithId:(IoReactivexSchedulersTestScheduler_TimedRunnable *)o {
  cast_chk(o, [IoReactivexSchedulersTestScheduler_TimedRunnable class]);
  if (time_ == ((IoReactivexSchedulersTestScheduler_TimedRunnable *) nil_chk(o))->time_) {
    return IoReactivexInternalFunctionsObjectHelper_compareWithLong_withLong_(count_, o->count_);
  }
  return IoReactivexInternalFunctionsObjectHelper_compareWithLong_withLong_(time_, o->time_);
}

- (void)dealloc {
  RELEASE_(run_);
  RELEASE_(scheduler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSchedulersTestScheduler_TestWorker:withLong:withJavaLangRunnable:withLong:);
  methods[1].selector = @selector(description);
  methods[2].selector = @selector(compareToWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "time_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "run_", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LIoReactivexSchedulersTestScheduler_TestWorker;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "count_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSchedulersTestScheduler_TestWorker;JLJavaLangRunnable;J", "toString", "compareTo", "LIoReactivexSchedulersTestScheduler_TimedRunnable;", "LIoReactivexSchedulersTestScheduler;", "Ljava/lang/Object;Ljava/lang/Comparable<Lio/reactivex/schedulers/TestScheduler$TimedRunnable;>;" };
  static const J2ObjcClassInfo _IoReactivexSchedulersTestScheduler_TimedRunnable = { "TimedRunnable", "io.reactivex.schedulers", ptrTable, methods, fields, 7, 0x18, 3, 4, 4, -1, -1, 5, -1 };
  return &_IoReactivexSchedulersTestScheduler_TimedRunnable;
}

@end

void IoReactivexSchedulersTestScheduler_TimedRunnable_initWithIoReactivexSchedulersTestScheduler_TestWorker_withLong_withJavaLangRunnable_withLong_(IoReactivexSchedulersTestScheduler_TimedRunnable *self, IoReactivexSchedulersTestScheduler_TestWorker *scheduler, jlong time, id<JavaLangRunnable> run, jlong count) {
  NSObject_init(self);
  self->time_ = time;
  JreStrongAssign(&self->run_, run);
  JreStrongAssign(&self->scheduler_, scheduler);
  self->count_ = count;
}

IoReactivexSchedulersTestScheduler_TimedRunnable *new_IoReactivexSchedulersTestScheduler_TimedRunnable_initWithIoReactivexSchedulersTestScheduler_TestWorker_withLong_withJavaLangRunnable_withLong_(IoReactivexSchedulersTestScheduler_TestWorker *scheduler, jlong time, id<JavaLangRunnable> run, jlong count) {
  J2OBJC_NEW_IMPL(IoReactivexSchedulersTestScheduler_TimedRunnable, initWithIoReactivexSchedulersTestScheduler_TestWorker_withLong_withJavaLangRunnable_withLong_, scheduler, time, run, count)
}

IoReactivexSchedulersTestScheduler_TimedRunnable *create_IoReactivexSchedulersTestScheduler_TimedRunnable_initWithIoReactivexSchedulersTestScheduler_TestWorker_withLong_withJavaLangRunnable_withLong_(IoReactivexSchedulersTestScheduler_TestWorker *scheduler, jlong time, id<JavaLangRunnable> run, jlong count) {
  J2OBJC_CREATE_IMPL(IoReactivexSchedulersTestScheduler_TimedRunnable, initWithIoReactivexSchedulersTestScheduler_TestWorker_withLong_withJavaLangRunnable_withLong_, scheduler, time, run, count)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexSchedulersTestScheduler_TimedRunnable)

@implementation IoReactivexSchedulersTestScheduler_TestWorker

- (instancetype)initWithIoReactivexSchedulersTestScheduler:(IoReactivexSchedulersTestScheduler *)outer$ {
  IoReactivexSchedulersTestScheduler_TestWorker_initWithIoReactivexSchedulersTestScheduler_(self, outer$);
  return self;
}

- (void)dispose {
  JreAssignVolatileBoolean(&disposed_, true);
}

- (jboolean)isDisposed {
  return JreLoadVolatileBoolean(&disposed_);
}

- (id<IoReactivexDisposablesDisposable>)scheduleWithJavaLangRunnable:(id<JavaLangRunnable>)run
                                                            withLong:(jlong)delayTime
                                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  if (JreLoadVolatileBoolean(&disposed_)) {
    return JreLoadEnum(IoReactivexInternalDisposablesEmptyDisposable, INSTANCE);
  }
  IoReactivexSchedulersTestScheduler_TimedRunnable *timedAction = create_IoReactivexSchedulersTestScheduler_TimedRunnable_initWithIoReactivexSchedulersTestScheduler_TestWorker_withLong_withJavaLangRunnable_withLong_(self, JreLoadVolatileLong(&this$0_->time_) + [((JavaUtilConcurrentTimeUnit *) nil_chk(unit)) toNanosWithLong:delayTime], run, this$0_->counter_++);
  [((id<JavaUtilQueue>) nil_chk(this$0_->queue_)) addWithId:timedAction];
  return IoReactivexDisposablesDisposables_fromRunnableWithJavaLangRunnable_(create_IoReactivexSchedulersTestScheduler_TestWorker_1_initWithIoReactivexSchedulersTestScheduler_TestWorker_withIoReactivexSchedulersTestScheduler_TimedRunnable_(self, timedAction));
}

- (id<IoReactivexDisposablesDisposable>)scheduleWithJavaLangRunnable:(id<JavaLangRunnable>)run {
  if (JreLoadVolatileBoolean(&disposed_)) {
    return JreLoadEnum(IoReactivexInternalDisposablesEmptyDisposable, INSTANCE);
  }
  IoReactivexSchedulersTestScheduler_TimedRunnable *timedAction = create_IoReactivexSchedulersTestScheduler_TimedRunnable_initWithIoReactivexSchedulersTestScheduler_TestWorker_withLong_withJavaLangRunnable_withLong_(self, 0, run, this$0_->counter_++);
  [((id<JavaUtilQueue>) nil_chk(this$0_->queue_)) addWithId:timedAction];
  return IoReactivexDisposablesDisposables_fromRunnableWithJavaLangRunnable_(create_IoReactivexSchedulersTestScheduler_TestWorker_2_initWithIoReactivexSchedulersTestScheduler_TestWorker_withIoReactivexSchedulersTestScheduler_TimedRunnable_(self, timedAction));
}

- (jlong)nowWithJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit {
  return [this$0_ nowWithJavaUtilConcurrentTimeUnit:unit];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIoReactivexDisposablesDisposable;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LIoReactivexDisposablesDisposable;", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSchedulersTestScheduler:);
  methods[1].selector = @selector(dispose);
  methods[2].selector = @selector(isDisposed);
  methods[3].selector = @selector(scheduleWithJavaLangRunnable:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[4].selector = @selector(scheduleWithJavaLangRunnable:);
  methods[5].selector = @selector(nowWithJavaUtilConcurrentTimeUnit:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexSchedulersTestScheduler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "disposed_", "Z", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "schedule", "LJavaLangRunnable;JLJavaUtilConcurrentTimeUnit;", "LJavaLangRunnable;", "now", "LJavaUtilConcurrentTimeUnit;", "LIoReactivexSchedulersTestScheduler;" };
  static const J2ObjcClassInfo _IoReactivexSchedulersTestScheduler_TestWorker = { "TestWorker", "io.reactivex.schedulers", ptrTable, methods, fields, 7, 0x10, 6, 2, 5, -1, -1, -1, -1 };
  return &_IoReactivexSchedulersTestScheduler_TestWorker;
}

@end

void IoReactivexSchedulersTestScheduler_TestWorker_initWithIoReactivexSchedulersTestScheduler_(IoReactivexSchedulersTestScheduler_TestWorker *self, IoReactivexSchedulersTestScheduler *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  IoReactivexScheduler_Worker_init(self);
}

IoReactivexSchedulersTestScheduler_TestWorker *new_IoReactivexSchedulersTestScheduler_TestWorker_initWithIoReactivexSchedulersTestScheduler_(IoReactivexSchedulersTestScheduler *outer$) {
  J2OBJC_NEW_IMPL(IoReactivexSchedulersTestScheduler_TestWorker, initWithIoReactivexSchedulersTestScheduler_, outer$)
}

IoReactivexSchedulersTestScheduler_TestWorker *create_IoReactivexSchedulersTestScheduler_TestWorker_initWithIoReactivexSchedulersTestScheduler_(IoReactivexSchedulersTestScheduler *outer$) {
  J2OBJC_CREATE_IMPL(IoReactivexSchedulersTestScheduler_TestWorker, initWithIoReactivexSchedulersTestScheduler_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexSchedulersTestScheduler_TestWorker)

@implementation IoReactivexSchedulersTestScheduler_TestWorker_1

- (instancetype)initWithIoReactivexSchedulersTestScheduler_TestWorker:(IoReactivexSchedulersTestScheduler_TestWorker *)outer$
                 withIoReactivexSchedulersTestScheduler_TimedRunnable:(IoReactivexSchedulersTestScheduler_TimedRunnable *)capture$0 {
  IoReactivexSchedulersTestScheduler_TestWorker_1_initWithIoReactivexSchedulersTestScheduler_TestWorker_withIoReactivexSchedulersTestScheduler_TimedRunnable_(self, outer$, capture$0);
  return self;
}

- (void)run {
  [((id<JavaUtilQueue>) nil_chk(this$0_->this$0_->queue_)) removeWithId:val$timedAction_];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$timedAction_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSchedulersTestScheduler_TestWorker:withIoReactivexSchedulersTestScheduler_TimedRunnable:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexSchedulersTestScheduler_TestWorker;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$timedAction_", "LIoReactivexSchedulersTestScheduler_TimedRunnable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSchedulersTestScheduler_TestWorker;", "scheduleWithJavaLangRunnable:withLong:withJavaUtilConcurrentTimeUnit:" };
  static const J2ObjcClassInfo _IoReactivexSchedulersTestScheduler_TestWorker_1 = { "", "io.reactivex.schedulers", ptrTable, methods, fields, 7, 0x8018, 2, 2, 0, -1, 1, -1, -1 };
  return &_IoReactivexSchedulersTestScheduler_TestWorker_1;
}

@end

void IoReactivexSchedulersTestScheduler_TestWorker_1_initWithIoReactivexSchedulersTestScheduler_TestWorker_withIoReactivexSchedulersTestScheduler_TimedRunnable_(IoReactivexSchedulersTestScheduler_TestWorker_1 *self, IoReactivexSchedulersTestScheduler_TestWorker *outer$, IoReactivexSchedulersTestScheduler_TimedRunnable *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$timedAction_, capture$0);
  NSObject_init(self);
}

IoReactivexSchedulersTestScheduler_TestWorker_1 *new_IoReactivexSchedulersTestScheduler_TestWorker_1_initWithIoReactivexSchedulersTestScheduler_TestWorker_withIoReactivexSchedulersTestScheduler_TimedRunnable_(IoReactivexSchedulersTestScheduler_TestWorker *outer$, IoReactivexSchedulersTestScheduler_TimedRunnable *capture$0) {
  J2OBJC_NEW_IMPL(IoReactivexSchedulersTestScheduler_TestWorker_1, initWithIoReactivexSchedulersTestScheduler_TestWorker_withIoReactivexSchedulersTestScheduler_TimedRunnable_, outer$, capture$0)
}

IoReactivexSchedulersTestScheduler_TestWorker_1 *create_IoReactivexSchedulersTestScheduler_TestWorker_1_initWithIoReactivexSchedulersTestScheduler_TestWorker_withIoReactivexSchedulersTestScheduler_TimedRunnable_(IoReactivexSchedulersTestScheduler_TestWorker *outer$, IoReactivexSchedulersTestScheduler_TimedRunnable *capture$0) {
  J2OBJC_CREATE_IMPL(IoReactivexSchedulersTestScheduler_TestWorker_1, initWithIoReactivexSchedulersTestScheduler_TestWorker_withIoReactivexSchedulersTestScheduler_TimedRunnable_, outer$, capture$0)
}

@implementation IoReactivexSchedulersTestScheduler_TestWorker_2

- (instancetype)initWithIoReactivexSchedulersTestScheduler_TestWorker:(IoReactivexSchedulersTestScheduler_TestWorker *)outer$
                 withIoReactivexSchedulersTestScheduler_TimedRunnable:(IoReactivexSchedulersTestScheduler_TimedRunnable *)capture$0 {
  IoReactivexSchedulersTestScheduler_TestWorker_2_initWithIoReactivexSchedulersTestScheduler_TestWorker_withIoReactivexSchedulersTestScheduler_TimedRunnable_(self, outer$, capture$0);
  return self;
}

- (void)run {
  [((id<JavaUtilQueue>) nil_chk(this$0_->this$0_->queue_)) removeWithId:val$timedAction_];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$timedAction_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSchedulersTestScheduler_TestWorker:withIoReactivexSchedulersTestScheduler_TimedRunnable:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexSchedulersTestScheduler_TestWorker;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$timedAction_", "LIoReactivexSchedulersTestScheduler_TimedRunnable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSchedulersTestScheduler_TestWorker;", "scheduleWithJavaLangRunnable:" };
  static const J2ObjcClassInfo _IoReactivexSchedulersTestScheduler_TestWorker_2 = { "", "io.reactivex.schedulers", ptrTable, methods, fields, 7, 0x8018, 2, 2, 0, -1, 1, -1, -1 };
  return &_IoReactivexSchedulersTestScheduler_TestWorker_2;
}

@end

void IoReactivexSchedulersTestScheduler_TestWorker_2_initWithIoReactivexSchedulersTestScheduler_TestWorker_withIoReactivexSchedulersTestScheduler_TimedRunnable_(IoReactivexSchedulersTestScheduler_TestWorker_2 *self, IoReactivexSchedulersTestScheduler_TestWorker *outer$, IoReactivexSchedulersTestScheduler_TimedRunnable *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$timedAction_, capture$0);
  NSObject_init(self);
}

IoReactivexSchedulersTestScheduler_TestWorker_2 *new_IoReactivexSchedulersTestScheduler_TestWorker_2_initWithIoReactivexSchedulersTestScheduler_TestWorker_withIoReactivexSchedulersTestScheduler_TimedRunnable_(IoReactivexSchedulersTestScheduler_TestWorker *outer$, IoReactivexSchedulersTestScheduler_TimedRunnable *capture$0) {
  J2OBJC_NEW_IMPL(IoReactivexSchedulersTestScheduler_TestWorker_2, initWithIoReactivexSchedulersTestScheduler_TestWorker_withIoReactivexSchedulersTestScheduler_TimedRunnable_, outer$, capture$0)
}

IoReactivexSchedulersTestScheduler_TestWorker_2 *create_IoReactivexSchedulersTestScheduler_TestWorker_2_initWithIoReactivexSchedulersTestScheduler_TestWorker_withIoReactivexSchedulersTestScheduler_TimedRunnable_(IoReactivexSchedulersTestScheduler_TestWorker *outer$, IoReactivexSchedulersTestScheduler_TimedRunnable *capture$0) {
  J2OBJC_CREATE_IMPL(IoReactivexSchedulersTestScheduler_TestWorker_2, initWithIoReactivexSchedulersTestScheduler_TestWorker_withIoReactivexSchedulersTestScheduler_TimedRunnable_, outer$, capture$0)
}
