//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/disposables/EmptyDisposable.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalDisposablesEmptyDisposable")
#ifdef RESTRICT_IoReactivexInternalDisposablesEmptyDisposable
#define INCLUDE_ALL_IoReactivexInternalDisposablesEmptyDisposable 0
#else
#define INCLUDE_ALL_IoReactivexInternalDisposablesEmptyDisposable 1
#endif
#undef RESTRICT_IoReactivexInternalDisposablesEmptyDisposable

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoReactivexInternalDisposablesEmptyDisposable_) && (INCLUDE_ALL_IoReactivexInternalDisposablesEmptyDisposable || defined(INCLUDE_IoReactivexInternalDisposablesEmptyDisposable))
#define IoReactivexInternalDisposablesEmptyDisposable_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

#define RESTRICT_IoReactivexInternalFuseableQueueDisposable 1
#define INCLUDE_IoReactivexInternalFuseableQueueDisposable 1
#include "io/reactivex/internal/fuseable/QueueDisposable.h"

@class IOSObjectArray;
@protocol IoReactivexCompletableObserver;
@protocol IoReactivexMaybeObserver;
@protocol IoReactivexObserver;
@protocol IoReactivexSingleObserver;

typedef NS_ENUM(NSUInteger, IoReactivexInternalDisposablesEmptyDisposable_Enum) {
  IoReactivexInternalDisposablesEmptyDisposable_Enum_INSTANCE = 0,
  IoReactivexInternalDisposablesEmptyDisposable_Enum_NEVER = 1,
};

@interface IoReactivexInternalDisposablesEmptyDisposable : JavaLangEnum < NSCopying, IoReactivexInternalFuseableQueueDisposable >

#pragma mark Public

- (void)clear;

+ (void)completeWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s;

+ (void)completeWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)s;

+ (void)completeWithIoReactivexObserver:(id<IoReactivexObserver>)s;

- (void)dispose;

+ (void)errorWithNSException:(NSException *)e
withIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s;

+ (void)errorWithNSException:(NSException *)e
withIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)s;

+ (void)errorWithNSException:(NSException *)e
     withIoReactivexObserver:(id<IoReactivexObserver>)s;

+ (void)errorWithNSException:(NSException *)e
withIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s;

- (jboolean)isDisposed;

- (jboolean)isEmpty;

- (jboolean)offerWithId:(id)value;

- (jboolean)offerWithId:(id)v1
                 withId:(id)v2;

- (id)poll;

- (jint)requestFusionWithInt:(jint)mode;

+ (IoReactivexInternalDisposablesEmptyDisposable *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(IoReactivexInternalDisposablesEmptyDisposable)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT IoReactivexInternalDisposablesEmptyDisposable *IoReactivexInternalDisposablesEmptyDisposable_values_[];

inline IoReactivexInternalDisposablesEmptyDisposable *IoReactivexInternalDisposablesEmptyDisposable_get_INSTANCE();
J2OBJC_ENUM_CONSTANT(IoReactivexInternalDisposablesEmptyDisposable, INSTANCE)

inline IoReactivexInternalDisposablesEmptyDisposable *IoReactivexInternalDisposablesEmptyDisposable_get_NEVER();
J2OBJC_ENUM_CONSTANT(IoReactivexInternalDisposablesEmptyDisposable, NEVER)

FOUNDATION_EXPORT void IoReactivexInternalDisposablesEmptyDisposable_completeWithIoReactivexObserver_(id<IoReactivexObserver> s);

FOUNDATION_EXPORT void IoReactivexInternalDisposablesEmptyDisposable_completeWithIoReactivexMaybeObserver_(id<IoReactivexMaybeObserver> s);

FOUNDATION_EXPORT void IoReactivexInternalDisposablesEmptyDisposable_errorWithNSException_withIoReactivexObserver_(NSException *e, id<IoReactivexObserver> s);

FOUNDATION_EXPORT void IoReactivexInternalDisposablesEmptyDisposable_completeWithIoReactivexCompletableObserver_(id<IoReactivexCompletableObserver> s);

FOUNDATION_EXPORT void IoReactivexInternalDisposablesEmptyDisposable_errorWithNSException_withIoReactivexCompletableObserver_(NSException *e, id<IoReactivexCompletableObserver> s);

FOUNDATION_EXPORT void IoReactivexInternalDisposablesEmptyDisposable_errorWithNSException_withIoReactivexSingleObserver_(NSException *e, id<IoReactivexSingleObserver> s);

FOUNDATION_EXPORT void IoReactivexInternalDisposablesEmptyDisposable_errorWithNSException_withIoReactivexMaybeObserver_(NSException *e, id<IoReactivexMaybeObserver> s);

FOUNDATION_EXPORT IOSObjectArray *IoReactivexInternalDisposablesEmptyDisposable_values();

FOUNDATION_EXPORT IoReactivexInternalDisposablesEmptyDisposable *IoReactivexInternalDisposablesEmptyDisposable_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT IoReactivexInternalDisposablesEmptyDisposable *IoReactivexInternalDisposablesEmptyDisposable_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalDisposablesEmptyDisposable)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalDisposablesEmptyDisposable")
