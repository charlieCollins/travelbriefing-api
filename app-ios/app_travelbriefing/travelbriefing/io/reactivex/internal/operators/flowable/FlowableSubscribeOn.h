//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/flowable/FlowableSubscribeOn.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSubscribeOn")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableSubscribeOn
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSubscribeOn 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSubscribeOn 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableSubscribeOn

#if !defined (IoReactivexInternalOperatorsFlowableFlowableSubscribeOn_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSubscribeOn || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableSubscribeOn))
#define IoReactivexInternalOperatorsFlowableFlowableSubscribeOn_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "io/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream.h"

@class IoReactivexScheduler;
@protocol OrgReactivestreamsPublisher;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableSubscribeOn : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  IoReactivexScheduler *scheduler_;
  jboolean nonScheduledRequests_;
}

#pragma mark Public

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                           withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                        withBoolean:(jboolean)nonScheduledRequests;

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableSubscribeOn)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSubscribeOn, scheduler_, IoReactivexScheduler *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableSubscribeOn_initWithOrgReactivestreamsPublisher_withIoReactivexScheduler_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableSubscribeOn *self, id<OrgReactivestreamsPublisher> source, IoReactivexScheduler *scheduler, jboolean nonScheduledRequests);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSubscribeOn *new_IoReactivexInternalOperatorsFlowableFlowableSubscribeOn_initWithOrgReactivestreamsPublisher_withIoReactivexScheduler_withBoolean_(id<OrgReactivestreamsPublisher> source, IoReactivexScheduler *scheduler, jboolean nonScheduledRequests) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSubscribeOn *create_IoReactivexInternalOperatorsFlowableFlowableSubscribeOn_initWithOrgReactivestreamsPublisher_withIoReactivexScheduler_withBoolean_(id<OrgReactivestreamsPublisher> source, IoReactivexScheduler *scheduler, jboolean nonScheduledRequests);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableSubscribeOn)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableSubscribeOn_SubscribeOnSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSubscribeOn || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableSubscribeOn_SubscribeOnSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableSubscribeOn_SubscribeOnSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_OrgReactivestreamsSubscriber 1
#define INCLUDE_OrgReactivestreamsSubscriber 1
#include "org/reactivestreams/Subscriber.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "org/reactivestreams/Subscription.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IoReactivexScheduler_Worker;
@class JavaLangThread;
@class JavaUtilConcurrentAtomicAtomicLong;
@protocol OrgReactivestreamsPublisher;

@interface IoReactivexInternalOperatorsFlowableFlowableSubscribeOn_SubscribeOnSubscriber : JavaUtilConcurrentAtomicAtomicReference < OrgReactivestreamsSubscriber, OrgReactivestreamsSubscription, JavaLangRunnable > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  IoReactivexScheduler_Worker *worker_;
  JavaUtilConcurrentAtomicAtomicReference *s_;
  JavaUtilConcurrentAtomicAtomicLong *requested_;
  jboolean nonScheduledRequests_;
  id<OrgReactivestreamsPublisher> source_;
}

#pragma mark Public

- (void)cancel;

- (JavaLangThread *)get;

- (JavaLangThread *)getAndSetWithId:(JavaLangThread *)arg0;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)requestWithLong:(jlong)n;

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                     withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)worker
                     withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                                         withBoolean:(jboolean)nonScheduledRequests;

- (void)requestUpstreamWithLong:(jlong)n
withOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableSubscribeOn_SubscribeOnSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSubscribeOn_SubscribeOnSubscriber, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSubscribeOn_SubscribeOnSubscriber, worker_, IoReactivexScheduler_Worker *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSubscribeOn_SubscribeOnSubscriber, s_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSubscribeOn_SubscribeOnSubscriber, requested_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSubscribeOn_SubscribeOnSubscriber, source_, id<OrgReactivestreamsPublisher>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableSubscribeOn_SubscribeOnSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexScheduler_Worker_withOrgReactivestreamsPublisher_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableSubscribeOn_SubscribeOnSubscriber *self, id<OrgReactivestreamsSubscriber> actual, IoReactivexScheduler_Worker *worker, id<OrgReactivestreamsPublisher> source, jboolean nonScheduledRequests);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSubscribeOn_SubscribeOnSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableSubscribeOn_SubscribeOnSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexScheduler_Worker_withOrgReactivestreamsPublisher_withBoolean_(id<OrgReactivestreamsSubscriber> actual, IoReactivexScheduler_Worker *worker, id<OrgReactivestreamsPublisher> source, jboolean nonScheduledRequests) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSubscribeOn_SubscribeOnSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableSubscribeOn_SubscribeOnSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexScheduler_Worker_withOrgReactivestreamsPublisher_withBoolean_(id<OrgReactivestreamsSubscriber> actual, IoReactivexScheduler_Worker *worker, id<OrgReactivestreamsPublisher> source, jboolean nonScheduledRequests);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableSubscribeOn_SubscribeOnSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSubscribeOn")
