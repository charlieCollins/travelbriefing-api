//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/flowable/FlowableBufferTimed.java
//

#include "J2ObjC_source.h"
#include "io/reactivex/Scheduler.h"
#include "io/reactivex/disposables/Disposable.h"
#include "io/reactivex/exceptions/Exceptions.h"
#include "io/reactivex/internal/disposables/DisposableHelper.h"
#include "io/reactivex/internal/functions/ObjectHelper.h"
#include "io/reactivex/internal/fuseable/SimplePlainQueue.h"
#include "io/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream.h"
#include "io/reactivex/internal/operators/flowable/FlowableBufferTimed.h"
#include "io/reactivex/internal/queue/MpscLinkedQueue.h"
#include "io/reactivex/internal/subscribers/QueueDrainSubscriber.h"
#include "io/reactivex/internal/subscriptions/EmptySubscription.h"
#include "io/reactivex/internal/subscriptions/SubscriptionHelper.h"
#include "io/reactivex/internal/util/QueueDrainHelper.h"
#include "io/reactivex/subscribers/SerializedSubscriber.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Runnable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicReference.h"
#include "org/reactivestreams/Publisher.h"
#include "org/reactivestreams/Subscriber.h"
#include "org/reactivestreams/Subscription.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_1 : NSObject < JavaLangRunnable > {
 @public
  IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber *this$0_;
  id<JavaUtilCollection> val$b_;
}

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber:(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber *)outer$
                                                                                     withJavaUtilCollection:(id<JavaUtilCollection>)capture$0;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_1)

__attribute__((unused)) static void IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_1_initWithIoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_withJavaUtilCollection_(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_1 *self, IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber *outer$, id<JavaUtilCollection> capture$0);

__attribute__((unused)) static IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_1 *new_IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_1_initWithIoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_withJavaUtilCollection_(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber *outer$, id<JavaUtilCollection> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_1 *create_IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_1_initWithIoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_withJavaUtilCollection_(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber *outer$, id<JavaUtilCollection> capture$0);

@interface IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_2 : NSObject < JavaLangRunnable > {
 @public
  IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber *this$0_;
  id<JavaUtilCollection> val$b_;
}

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber:(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber *)outer$
                                                                                     withJavaUtilCollection:(id<JavaUtilCollection>)capture$0;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_2)

__attribute__((unused)) static void IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_2_initWithIoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_withJavaUtilCollection_(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_2 *self, IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber *outer$, id<JavaUtilCollection> capture$0);

__attribute__((unused)) static IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_2 *new_IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_2_initWithIoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_withJavaUtilCollection_(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber *outer$, id<JavaUtilCollection> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_2 *create_IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_2_initWithIoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_withJavaUtilCollection_(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber *outer$, id<JavaUtilCollection> capture$0);

@implementation IoReactivexInternalOperatorsFlowableFlowableBufferTimed

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                                           withLong:(jlong)timespan
                                           withLong:(jlong)timeskip
                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                           withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                     withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier
                                            withInt:(jint)maxSize
                                        withBoolean:(jboolean)restartTimerOnMaxSize {
  IoReactivexInternalOperatorsFlowableFlowableBufferTimed_initWithOrgReactivestreamsPublisher_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withJavaUtilConcurrentCallable_withInt_withBoolean_(self, source, timespan, timeskip, unit, scheduler, bufferSupplier, maxSize, restartTimerOnMaxSize);
  return self;
}

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s {
  if (timespan_ == timeskip_ && maxSize_ == JavaLangInteger_MAX_VALUE) {
    [((id<OrgReactivestreamsPublisher>) nil_chk(source_)) subscribeWithOrgReactivestreamsSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferExactUnboundedSubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(create_IoReactivexSubscribersSerializedSubscriber_initWithOrgReactivestreamsSubscriber_(s), bufferSupplier_, timespan_, unit_, scheduler_)];
    return;
  }
  IoReactivexScheduler_Worker *w = [((IoReactivexScheduler *) nil_chk(scheduler_)) createWorker];
  if (timespan_ == timeskip_) {
    [((id<OrgReactivestreamsPublisher>) nil_chk(source_)) subscribeWithOrgReactivestreamsSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferExactBoundedSubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withLong_withJavaUtilConcurrentTimeUnit_withInt_withBoolean_withIoReactivexScheduler_Worker_(create_IoReactivexSubscribersSerializedSubscriber_initWithOrgReactivestreamsSubscriber_(s), bufferSupplier_, timespan_, unit_, maxSize_, restartTimerOnMaxSize_, w)];
    return;
  }
  [((id<OrgReactivestreamsPublisher>) nil_chk(source_)) subscribeWithOrgReactivestreamsSubscriber:create_IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(create_IoReactivexSubscribersSerializedSubscriber_initWithOrgReactivestreamsSubscriber_(s), bufferSupplier_, timespan_, timeskip_, unit_, w)];
}

- (void)dealloc {
  RELEASE_(unit_);
  RELEASE_(scheduler_);
  RELEASE_(bufferSupplier_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsPublisher:withLong:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:withJavaUtilConcurrentCallable:withInt:withBoolean:);
  methods[1].selector = @selector(subscribeActualWithOrgReactivestreamsSubscriber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "timespan_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "timeskip_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bufferSupplier_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "maxSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "restartTimerOnMaxSize_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsPublisher;JJLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;LJavaUtilConcurrentCallable;IZ", "(Lorg/reactivestreams/Publisher<TT;>;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Ljava/util/concurrent/Callable<TU;>;IZ)V", "subscribeActual", "LOrgReactivestreamsSubscriber;", "(Lorg/reactivestreams/Subscriber<-TU;>;)V", "Ljava/util/concurrent/Callable<TU;>;", "LIoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferExactUnboundedSubscriber;LIoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber;LIoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferExactBoundedSubscriber;", "<T:Ljava/lang/Object;U::Ljava/util/Collection<-TT;>;>Lio/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream<TT;TU;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableBufferTimed = { "FlowableBufferTimed", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x11, 2, 7, -1, 6, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableBufferTimed;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableBufferTimed_initWithOrgReactivestreamsPublisher_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withJavaUtilConcurrentCallable_withInt_withBoolean_(IoReactivexInternalOperatorsFlowableFlowableBufferTimed *self, id<OrgReactivestreamsPublisher> source, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<JavaUtilConcurrentCallable> bufferSupplier, jint maxSize, jboolean restartTimerOnMaxSize) {
  IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream_initWithOrgReactivestreamsPublisher_(self, source);
  self->timespan_ = timespan;
  self->timeskip_ = timeskip;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->scheduler_, scheduler);
  JreStrongAssign(&self->bufferSupplier_, bufferSupplier);
  self->maxSize_ = maxSize;
  self->restartTimerOnMaxSize_ = restartTimerOnMaxSize;
}

IoReactivexInternalOperatorsFlowableFlowableBufferTimed *new_IoReactivexInternalOperatorsFlowableFlowableBufferTimed_initWithOrgReactivestreamsPublisher_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withJavaUtilConcurrentCallable_withInt_withBoolean_(id<OrgReactivestreamsPublisher> source, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<JavaUtilConcurrentCallable> bufferSupplier, jint maxSize, jboolean restartTimerOnMaxSize) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableBufferTimed, initWithOrgReactivestreamsPublisher_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withJavaUtilConcurrentCallable_withInt_withBoolean_, source, timespan, timeskip, unit, scheduler, bufferSupplier, maxSize, restartTimerOnMaxSize)
}

IoReactivexInternalOperatorsFlowableFlowableBufferTimed *create_IoReactivexInternalOperatorsFlowableFlowableBufferTimed_initWithOrgReactivestreamsPublisher_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withJavaUtilConcurrentCallable_withInt_withBoolean_(id<OrgReactivestreamsPublisher> source, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<JavaUtilConcurrentCallable> bufferSupplier, jint maxSize, jboolean restartTimerOnMaxSize) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableBufferTimed, initWithOrgReactivestreamsPublisher_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withJavaUtilConcurrentCallable_withInt_withBoolean_, source, timespan, timeskip, unit, scheduler, bufferSupplier, maxSize, restartTimerOnMaxSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableBufferTimed)

@implementation IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferExactUnboundedSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                      withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier
                                            withLong:(jlong)timespan
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                            withIoReactivexScheduler:(IoReactivexScheduler *)scheduler {
  IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferExactUnboundedSubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(self, actual, bufferSupplier, timespan, unit, scheduler);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    JreStrongAssign(&self->s_, s);
    id<JavaUtilCollection> b;
    @try {
      b = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(bufferSupplier_)) call], @"The supplied buffer is null");
    }
    @catch (NSException *e) {
      IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(e);
      [self cancel];
      IoReactivexInternalSubscriptionsEmptySubscription_errorWithNSException_withOrgReactivestreamsSubscriber_(e, actual_);
      return;
    }
    JreStrongAssign(&buffer_, b);
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
    if (!JreLoadVolatileBoolean(&cancelled_)) {
      [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
      id<IoReactivexDisposablesDisposable> d = [((IoReactivexScheduler *) nil_chk(scheduler_)) schedulePeriodicallyDirectWithJavaLangRunnable:self withLong:timespan_ withLong:timespan_ withJavaUtilConcurrentTimeUnit:unit_];
      if (![((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(timer_)) compareAndSetWithId:nil withId:d]) {
        [((id<IoReactivexDisposablesDisposable>) nil_chk(d)) dispose];
      }
    }
  }
}

- (void)onNextWithId:(id)t {
  @synchronized(self) {
    id<JavaUtilCollection> b = buffer_;
    if (b != nil) {
      [b addWithId:t];
    }
  }
}

- (void)onErrorWithNSException:(NSException *)t {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(timer_);
  @synchronized(self) {
    JreStrongAssign(&buffer_, nil);
  }
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithNSException:t];
}

- (void)onComplete {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(timer_);
  id<JavaUtilCollection> b;
  @synchronized(self) {
    b = buffer_;
    if (b == nil) {
      return;
    }
    JreStrongAssign(&buffer_, nil);
  }
  [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) offerWithId:b];
  JreAssignVolatileBoolean(&done_, true);
  if ([self enter]) {
    IoReactivexInternalUtilQueueDrainHelper_drainMaxLoopWithIoReactivexInternalFuseableSimpleQueue_withOrgReactivestreamsSubscriber_withBoolean_withIoReactivexDisposablesDisposable_withIoReactivexInternalUtilQueueDrain_(queue_, actual_, false, self, self);
  }
}

- (void)requestWithLong:(jlong)n {
  [self requestedWithLong:n];
}

- (void)cancel {
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(timer_);
}

- (void)run {
  id<JavaUtilCollection> next;
  @try {
    next = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(bufferSupplier_)) call], @"The supplied buffer is null");
  }
  @catch (NSException *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(e);
    [self cancel];
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithNSException:e];
    return;
  }
  id<JavaUtilCollection> current;
  @synchronized(self) {
    current = buffer_;
    if (current != nil) {
      JreStrongAssign(&buffer_, next);
    }
  }
  if (current == nil) {
    IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(timer_);
    return;
  }
  [self fastPathEmitMaxWithId:current withBoolean:false withIoReactivexDisposablesDisposable:self];
}

- (jboolean)acceptWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)a
                                            withId:(id<JavaUtilCollection>)v {
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onNextWithId:v];
  return true;
}

- (void)dispose {
  [self cancel];
}

- (jboolean)isDisposed {
  return [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(timer_)) get] == JreLoadEnum(IoReactivexInternalDisposablesDisposableHelper, DISPOSED);
}

- (void)dealloc {
  RELEASE_(bufferSupplier_);
  RELEASE_(unit_);
  RELEASE_(scheduler_);
  RELEASE_(s_);
  RELEASE_(buffer_);
  RELEASE_(timer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 12, -1, 13, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withJavaUtilConcurrentCallable:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithNSException:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(requestWithLong:);
  methods[6].selector = @selector(cancel);
  methods[7].selector = @selector(run);
  methods[8].selector = @selector(acceptWithOrgReactivestreamsSubscriber:withId:);
  methods[9].selector = @selector(dispose);
  methods[10].selector = @selector(isDisposed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bufferSupplier_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 14, -1 },
    { "timespan_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "buffer_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x0, -1, -1, 15, -1 },
    { "timer_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x10, -1, -1, 16, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LJavaUtilConcurrentCallable;JLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;", "(Lorg/reactivestreams/Subscriber<-TU;>;Ljava/util/concurrent/Callable<TU;>;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "request", "J", "accept", "LOrgReactivestreamsSubscriber;LJavaUtilCollection;", "(Lorg/reactivestreams/Subscriber<-TU;>;TU;)Z", "Ljava/util/concurrent/Callable<TU;>;", "TU;", "Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;", "LIoReactivexInternalOperatorsFlowableFlowableBufferTimed;", "<T:Ljava/lang/Object;U::Ljava/util/Collection<-TT;>;>Lio/reactivex/internal/subscribers/QueueDrainSubscriber<TT;TU;TU;>;Lorg/reactivestreams/Subscription;Ljava/lang/Runnable;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferExactUnboundedSubscriber = { "BufferExactUnboundedSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 11, 7, 17, -1, -1, 18, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferExactUnboundedSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferExactUnboundedSubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferExactUnboundedSubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<JavaUtilConcurrentCallable> bufferSupplier, jlong timespan, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  IoReactivexInternalSubscribersQueueDrainSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalFuseableSimplePlainQueue_(self, actual, create_IoReactivexInternalQueueMpscLinkedQueue_init());
  JreStrongAssignAndConsume(&self->timer_, new_JavaUtilConcurrentAtomicAtomicReference_init());
  JreStrongAssign(&self->bufferSupplier_, bufferSupplier);
  self->timespan_ = timespan;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->scheduler_, scheduler);
}

IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferExactUnboundedSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferExactUnboundedSubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<OrgReactivestreamsSubscriber> actual, id<JavaUtilConcurrentCallable> bufferSupplier, jlong timespan, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferExactUnboundedSubscriber, initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_, actual, bufferSupplier, timespan, unit, scheduler)
}

IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferExactUnboundedSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferExactUnboundedSubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<OrgReactivestreamsSubscriber> actual, id<JavaUtilConcurrentCallable> bufferSupplier, jlong timespan, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferExactUnboundedSubscriber, initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_, actual, bufferSupplier, timespan, unit, scheduler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferExactUnboundedSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                      withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier
                                            withLong:(jlong)timespan
                                            withLong:(jlong)timeskip
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                     withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)w {
  IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(self, actual, bufferSupplier, timespan, timeskip, unit, w);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (!IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    return;
  }
  JreStrongAssign(&self->s_, s);
  id<JavaUtilCollection> b;
  @try {
    b = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(bufferSupplier_)) call], @"The supplied buffer is null");
  }
  @catch (NSException *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(e);
    [((IoReactivexScheduler_Worker *) nil_chk(w_)) dispose];
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) cancel];
    IoReactivexInternalSubscriptionsEmptySubscription_errorWithNSException_withOrgReactivestreamsSubscriber_(e, actual_);
    return;
  }
  [((id<JavaUtilList>) nil_chk(buffers_)) addWithId:b];
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
  [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
  [((IoReactivexScheduler_Worker *) nil_chk(w_)) schedulePeriodicallyWithJavaLangRunnable:self withLong:timeskip_ withLong:timeskip_ withJavaUtilConcurrentTimeUnit:unit_];
  [w_ scheduleWithJavaLangRunnable:create_IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_1_initWithIoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_withJavaUtilCollection_(self, b) withLong:timespan_ withJavaUtilConcurrentTimeUnit:unit_];
}

- (void)onNextWithId:(id)t {
  @synchronized(self) {
    for (id<JavaUtilCollection> __strong b in nil_chk(buffers_)) {
      [((id<JavaUtilCollection>) nil_chk(b)) addWithId:t];
    }
  }
}

- (void)onErrorWithNSException:(NSException *)t {
  JreAssignVolatileBoolean(&done_, true);
  [((IoReactivexScheduler_Worker *) nil_chk(w_)) dispose];
  [self clear];
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithNSException:t];
}

- (void)onComplete {
  id<JavaUtilList> bs;
  @synchronized(self) {
    bs = create_JavaUtilArrayList_initWithJavaUtilCollection_(buffers_);
    [((id<JavaUtilList>) nil_chk(buffers_)) clear];
  }
  for (id<JavaUtilCollection> __strong b in bs) {
    [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) offerWithId:b];
  }
  JreAssignVolatileBoolean(&done_, true);
  if ([self enter]) {
    IoReactivexInternalUtilQueueDrainHelper_drainMaxLoopWithIoReactivexInternalFuseableSimpleQueue_withOrgReactivestreamsSubscriber_withBoolean_withIoReactivexDisposablesDisposable_withIoReactivexInternalUtilQueueDrain_(queue_, actual_, false, w_, self);
  }
}

- (void)requestWithLong:(jlong)n {
  [self requestedWithLong:n];
}

- (void)cancel {
  [self clear];
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
  [((IoReactivexScheduler_Worker *) nil_chk(w_)) dispose];
}

- (void)clear {
  @synchronized(self) {
    [((id<JavaUtilList>) nil_chk(buffers_)) clear];
  }
}

- (void)run {
  if (JreLoadVolatileBoolean(&cancelled_)) {
    return;
  }
  id<JavaUtilCollection> b;
  @try {
    b = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(bufferSupplier_)) call], @"The supplied buffer is null");
  }
  @catch (NSException *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(e);
    [self cancel];
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithNSException:e];
    return;
  }
  @synchronized(self) {
    if (JreLoadVolatileBoolean(&cancelled_)) {
      return;
    }
    [((id<JavaUtilList>) nil_chk(buffers_)) addWithId:b];
  }
  [((IoReactivexScheduler_Worker *) nil_chk(w_)) scheduleWithJavaLangRunnable:create_IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_2_initWithIoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_withJavaUtilCollection_(self, b) withLong:timespan_ withJavaUtilConcurrentTimeUnit:unit_];
}

- (jboolean)acceptWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)a
                                            withId:(id<JavaUtilCollection>)v {
  [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:v];
  return true;
}

- (void)dealloc {
  RELEASE_(bufferSupplier_);
  RELEASE_(unit_);
  RELEASE_(w_);
  RELEASE_(buffers_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 12, -1, 13, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withJavaUtilConcurrentCallable:withLong:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler_Worker:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithNSException:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(requestWithLong:);
  methods[6].selector = @selector(cancel);
  methods[7].selector = @selector(clear);
  methods[8].selector = @selector(run);
  methods[9].selector = @selector(acceptWithOrgReactivestreamsSubscriber:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bufferSupplier_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 14, -1 },
    { "timespan_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "timeskip_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "w_", "LIoReactivexScheduler_Worker;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "buffers_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 15, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LJavaUtilConcurrentCallable;JJLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler_Worker;", "(Lorg/reactivestreams/Subscriber<-TU;>;Ljava/util/concurrent/Callable<TU;>;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "request", "J", "accept", "LOrgReactivestreamsSubscriber;LJavaUtilCollection;", "(Lorg/reactivestreams/Subscriber<-TU;>;TU;)Z", "Ljava/util/concurrent/Callable<TU;>;", "Ljava/util/List<TU;>;", "LIoReactivexInternalOperatorsFlowableFlowableBufferTimed;", "<T:Ljava/lang/Object;U::Ljava/util/Collection<-TT;>;>Lio/reactivex/internal/subscribers/QueueDrainSubscriber<TT;TU;TU;>;Lorg/reactivestreams/Subscription;Ljava/lang/Runnable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber = { "BufferSkipBoundedSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 10, 7, 16, -1, -1, 17, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<JavaUtilConcurrentCallable> bufferSupplier, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *w) {
  IoReactivexInternalSubscribersQueueDrainSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalFuseableSimplePlainQueue_(self, actual, create_IoReactivexInternalQueueMpscLinkedQueue_init());
  JreStrongAssign(&self->bufferSupplier_, bufferSupplier);
  self->timespan_ = timespan;
  self->timeskip_ = timeskip;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->w_, w);
  JreStrongAssignAndConsume(&self->buffers_, new_JavaUtilLinkedList_init());
}

IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(id<OrgReactivestreamsSubscriber> actual, id<JavaUtilConcurrentCallable> bufferSupplier, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *w) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber, initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_, actual, bufferSupplier, timespan, timeskip, unit, w)
}

IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(id<OrgReactivestreamsSubscriber> actual, id<JavaUtilConcurrentCallable> bufferSupplier, jlong timespan, jlong timeskip, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *w) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber, initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withLong_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_, actual, bufferSupplier, timespan, timeskip, unit, w)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber)

@implementation IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_1

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber:(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber *)outer$
                                                                                     withJavaUtilCollection:(id<JavaUtilCollection>)capture$0 {
  IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_1_initWithIoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_withJavaUtilCollection_(self, outer$, capture$0);
  return self;
}

- (void)run {
  @synchronized(this$0_) {
    [((id<JavaUtilList>) nil_chk(this$0_->buffers_)) removeWithId:val$b_];
  }
  [this$0_ fastPathOrderedEmitMaxWithId:val$b_ withBoolean:false withIoReactivexDisposablesDisposable:this$0_->w_];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$b_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber:withJavaUtilCollection:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 0, -1 },
    { "val$b_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x1012, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferSkipBoundedSubscriber<TT;TU;>;", "TU;", "LIoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber;", "onSubscribeWithOrgReactivestreamsSubscription:" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_1 = { "", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x8018, 2, 2, 2, -1, 3, -1, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_1;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_1_initWithIoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_withJavaUtilCollection_(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_1 *self, IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber *outer$, id<JavaUtilCollection> capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$b_, capture$0);
  NSObject_init(self);
}

IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_1 *new_IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_1_initWithIoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_withJavaUtilCollection_(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber *outer$, id<JavaUtilCollection> capture$0) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_1, initWithIoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_withJavaUtilCollection_, outer$, capture$0)
}

IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_1 *create_IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_1_initWithIoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_withJavaUtilCollection_(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber *outer$, id<JavaUtilCollection> capture$0) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_1, initWithIoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_withJavaUtilCollection_, outer$, capture$0)
}

@implementation IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_2

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber:(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber *)outer$
                                                                                     withJavaUtilCollection:(id<JavaUtilCollection>)capture$0 {
  IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_2_initWithIoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_withJavaUtilCollection_(self, outer$, capture$0);
  return self;
}

- (void)run {
  @synchronized(this$0_) {
    [((id<JavaUtilList>) nil_chk(this$0_->buffers_)) removeWithId:val$b_];
  }
  [this$0_ fastPathOrderedEmitMaxWithId:val$b_ withBoolean:false withIoReactivexDisposablesDisposable:this$0_->w_];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$b_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber:withJavaUtilCollection:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber;", .constantValue.asLong = 0, 0x1012, -1, -1, 0, -1 },
    { "val$b_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x1012, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$BufferSkipBoundedSubscriber<TT;TU;>;", "TU;", "LIoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber;", "run" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_2 = { "", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x8018, 2, 2, 2, -1, 3, -1, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_2;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_2_initWithIoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_withJavaUtilCollection_(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_2 *self, IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber *outer$, id<JavaUtilCollection> capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$b_, capture$0);
  NSObject_init(self);
}

IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_2 *new_IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_2_initWithIoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_withJavaUtilCollection_(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber *outer$, id<JavaUtilCollection> capture$0) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_2, initWithIoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_withJavaUtilCollection_, outer$, capture$0)
}

IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_2 *create_IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_2_initWithIoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_withJavaUtilCollection_(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber *outer$, id<JavaUtilCollection> capture$0) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_2, initWithIoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferSkipBoundedSubscriber_withJavaUtilCollection_, outer$, capture$0)
}

@implementation IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferExactBoundedSubscriber

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                      withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier
                                            withLong:(jlong)timespan
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                                             withInt:(jint)maxSize
                                         withBoolean:(jboolean)restartOnMaxSize
                     withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)w {
  IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferExactBoundedSubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withLong_withJavaUtilConcurrentTimeUnit_withInt_withBoolean_withIoReactivexScheduler_Worker_(self, actual, bufferSupplier, timespan, unit, maxSize, restartOnMaxSize, w);
  return self;
}

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s {
  if (!IoReactivexInternalSubscriptionsSubscriptionHelper_validateWithOrgReactivestreamsSubscription_withOrgReactivestreamsSubscription_(self->s_, s)) {
    return;
  }
  JreStrongAssign(&self->s_, s);
  id<JavaUtilCollection> b;
  @try {
    b = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(bufferSupplier_)) call], @"The supplied buffer is null");
  }
  @catch (NSException *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(e);
    [((IoReactivexScheduler_Worker *) nil_chk(w_)) dispose];
    [((id<OrgReactivestreamsSubscription>) nil_chk(s)) cancel];
    IoReactivexInternalSubscriptionsEmptySubscription_errorWithNSException_withOrgReactivestreamsSubscriber_(e, actual_);
    return;
  }
  JreStrongAssign(&buffer_, b);
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onSubscribeWithOrgReactivestreamsSubscription:self];
  JreStrongAssign(&timer_, [((IoReactivexScheduler_Worker *) nil_chk(w_)) schedulePeriodicallyWithJavaLangRunnable:self withLong:timespan_ withLong:timespan_ withJavaUtilConcurrentTimeUnit:unit_]);
  [((id<OrgReactivestreamsSubscription>) nil_chk(s)) requestWithLong:JavaLangLong_MAX_VALUE];
}

- (void)onNextWithId:(id)t {
  id<JavaUtilCollection> b;
  @synchronized(self) {
    b = buffer_;
    if (b == nil) {
      return;
    }
    [b addWithId:t];
    if ([b size] < maxSize_) {
      return;
    }
  }
  if (restartTimerOnMaxSize_) {
    JreStrongAssign(&buffer_, nil);
    producerIndex_++;
    [((id<IoReactivexDisposablesDisposable>) nil_chk(timer_)) dispose];
  }
  [self fastPathOrderedEmitMaxWithId:b withBoolean:false withIoReactivexDisposablesDisposable:self];
  @try {
    b = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(bufferSupplier_)) call], @"The supplied buffer is null");
  }
  @catch (NSException *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(e);
    [self cancel];
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithNSException:e];
    return;
  }
  if (restartTimerOnMaxSize_) {
    @synchronized(self) {
      JreStrongAssign(&buffer_, b);
      consumerIndex_++;
    }
    JreStrongAssign(&timer_, [((IoReactivexScheduler_Worker *) nil_chk(w_)) schedulePeriodicallyWithJavaLangRunnable:self withLong:timespan_ withLong:timespan_ withJavaUtilConcurrentTimeUnit:unit_]);
  }
  else {
    @synchronized(self) {
      JreStrongAssign(&buffer_, b);
    }
  }
}

- (void)onErrorWithNSException:(NSException *)t {
  @synchronized(self) {
    JreStrongAssign(&buffer_, nil);
  }
  [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithNSException:t];
  [((IoReactivexScheduler_Worker *) nil_chk(w_)) dispose];
}

- (void)onComplete {
  id<JavaUtilCollection> b;
  @synchronized(self) {
    b = buffer_;
    JreStrongAssign(&buffer_, nil);
  }
  [((id<IoReactivexInternalFuseableSimplePlainQueue>) nil_chk(queue_)) offerWithId:b];
  JreAssignVolatileBoolean(&done_, true);
  if ([self enter]) {
    IoReactivexInternalUtilQueueDrainHelper_drainMaxLoopWithIoReactivexInternalFuseableSimpleQueue_withOrgReactivestreamsSubscriber_withBoolean_withIoReactivexDisposablesDisposable_withIoReactivexInternalUtilQueueDrain_(queue_, actual_, false, self, self);
  }
  [((IoReactivexScheduler_Worker *) nil_chk(w_)) dispose];
}

- (jboolean)acceptWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)a
                                            withId:(id<JavaUtilCollection>)v {
  [((id<OrgReactivestreamsSubscriber>) nil_chk(a)) onNextWithId:v];
  return true;
}

- (void)requestWithLong:(jlong)n {
  [self requestedWithLong:n];
}

- (void)cancel {
  if (!JreLoadVolatileBoolean(&cancelled_)) {
    JreAssignVolatileBoolean(&cancelled_, true);
    [self dispose];
  }
}

- (void)dispose {
  @synchronized(self) {
    JreStrongAssign(&buffer_, nil);
  }
  [((id<OrgReactivestreamsSubscription>) nil_chk(s_)) cancel];
  [((IoReactivexScheduler_Worker *) nil_chk(w_)) dispose];
}

- (jboolean)isDisposed {
  return [((IoReactivexScheduler_Worker *) nil_chk(w_)) isDisposed];
}

- (void)run {
  id<JavaUtilCollection> next;
  @try {
    next = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(bufferSupplier_)) call], @"The supplied buffer is null");
  }
  @catch (NSException *e) {
    IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(e);
    [self cancel];
    [((id<OrgReactivestreamsSubscriber>) nil_chk(actual_)) onErrorWithNSException:e];
    return;
  }
  id<JavaUtilCollection> current;
  @synchronized(self) {
    current = buffer_;
    if (current == nil || producerIndex_ != consumerIndex_) {
      return;
    }
    JreStrongAssign(&buffer_, next);
  }
  [self fastPathOrderedEmitMaxWithId:current withBoolean:false withIoReactivexDisposablesDisposable:self];
}

- (void)dealloc {
  RELEASE_(bufferSupplier_);
  RELEASE_(unit_);
  RELEASE_(w_);
  RELEASE_(buffer_);
  RELEASE_(timer_);
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgReactivestreamsSubscriber:withJavaUtilConcurrentCallable:withLong:withJavaUtilConcurrentTimeUnit:withInt:withBoolean:withIoReactivexScheduler_Worker:);
  methods[1].selector = @selector(onSubscribeWithOrgReactivestreamsSubscription:);
  methods[2].selector = @selector(onNextWithId:);
  methods[3].selector = @selector(onErrorWithNSException:);
  methods[4].selector = @selector(onComplete);
  methods[5].selector = @selector(acceptWithOrgReactivestreamsSubscriber:withId:);
  methods[6].selector = @selector(requestWithLong:);
  methods[7].selector = @selector(cancel);
  methods[8].selector = @selector(dispose);
  methods[9].selector = @selector(isDisposed);
  methods[10].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bufferSupplier_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 14, -1 },
    { "timespan_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maxSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "restartTimerOnMaxSize_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "w_", "LIoReactivexScheduler_Worker;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "buffer_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x0, -1, -1, 15, -1 },
    { "timer_", "LIoReactivexDisposablesDisposable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "s_", "LOrgReactivestreamsSubscription;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "producerIndex_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "consumerIndex_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgReactivestreamsSubscriber;LJavaUtilConcurrentCallable;JLJavaUtilConcurrentTimeUnit;IZLIoReactivexScheduler_Worker;", "(Lorg/reactivestreams/Subscriber<-TU;>;Ljava/util/concurrent/Callable<TU;>;JLjava/util/concurrent/TimeUnit;IZLio/reactivex/Scheduler$Worker;)V", "onSubscribe", "LOrgReactivestreamsSubscription;", "onNext", "LNSObject;", "(TT;)V", "onError", "LNSException;", "accept", "LOrgReactivestreamsSubscriber;LJavaUtilCollection;", "(Lorg/reactivestreams/Subscriber<-TU;>;TU;)Z", "request", "J", "Ljava/util/concurrent/Callable<TU;>;", "TU;", "LIoReactivexInternalOperatorsFlowableFlowableBufferTimed;", "<T:Ljava/lang/Object;U::Ljava/util/Collection<-TT;>;>Lio/reactivex/internal/subscribers/QueueDrainSubscriber<TT;TU;TU;>;Lorg/reactivestreams/Subscription;Ljava/lang/Runnable;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferExactBoundedSubscriber = { "BufferExactBoundedSubscriber", "io.reactivex.internal.operators.flowable", ptrTable, methods, fields, 7, 0x18, 11, 11, 16, -1, -1, 17, -1 };
  return &_IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferExactBoundedSubscriber;
}

@end

void IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferExactBoundedSubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withLong_withJavaUtilConcurrentTimeUnit_withInt_withBoolean_withIoReactivexScheduler_Worker_(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferExactBoundedSubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<JavaUtilConcurrentCallable> bufferSupplier, jlong timespan, JavaUtilConcurrentTimeUnit *unit, jint maxSize, jboolean restartOnMaxSize, IoReactivexScheduler_Worker *w) {
  IoReactivexInternalSubscribersQueueDrainSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalFuseableSimplePlainQueue_(self, actual, create_IoReactivexInternalQueueMpscLinkedQueue_init());
  JreStrongAssign(&self->bufferSupplier_, bufferSupplier);
  self->timespan_ = timespan;
  JreStrongAssign(&self->unit_, unit);
  self->maxSize_ = maxSize;
  self->restartTimerOnMaxSize_ = restartOnMaxSize;
  JreStrongAssign(&self->w_, w);
}

IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferExactBoundedSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferExactBoundedSubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withLong_withJavaUtilConcurrentTimeUnit_withInt_withBoolean_withIoReactivexScheduler_Worker_(id<OrgReactivestreamsSubscriber> actual, id<JavaUtilConcurrentCallable> bufferSupplier, jlong timespan, JavaUtilConcurrentTimeUnit *unit, jint maxSize, jboolean restartOnMaxSize, IoReactivexScheduler_Worker *w) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferExactBoundedSubscriber, initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withLong_withJavaUtilConcurrentTimeUnit_withInt_withBoolean_withIoReactivexScheduler_Worker_, actual, bufferSupplier, timespan, unit, maxSize, restartOnMaxSize, w)
}

IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferExactBoundedSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferExactBoundedSubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withLong_withJavaUtilConcurrentTimeUnit_withInt_withBoolean_withIoReactivexScheduler_Worker_(id<OrgReactivestreamsSubscriber> actual, id<JavaUtilConcurrentCallable> bufferSupplier, jlong timespan, JavaUtilConcurrentTimeUnit *unit, jint maxSize, jboolean restartOnMaxSize, IoReactivexScheduler_Worker *w) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferExactBoundedSubscriber, initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentCallable_withLong_withJavaUtilConcurrentTimeUnit_withInt_withBoolean_withIoReactivexScheduler_Worker_, actual, bufferSupplier, timespan, unit, maxSize, restartOnMaxSize, w)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsFlowableFlowableBufferTimed_BufferExactBoundedSubscriber)
