//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/flowable/FlowableObserveOn.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableObserveOn")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableObserveOn
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableObserveOn 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableObserveOn 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableObserveOn
#ifdef INCLUDE_IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnConditionalSubscriber
#define INCLUDE_IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber 1
#endif
#ifdef INCLUDE_IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnSubscriber
#define INCLUDE_IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber 1
#endif

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableObserveOn_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableObserveOn || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableObserveOn))
#define IoReactivexInternalOperatorsFlowableFlowableObserveOn_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "io/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream.h"

@class IoReactivexScheduler;
@protocol OrgReactivestreamsPublisher;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableObserveOn : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  IoReactivexScheduler *scheduler_;
  jboolean delayError_;
  jint prefetch_;
}

#pragma mark Public

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                           withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                                        withBoolean:(jboolean)delayError
                                            withInt:(jint)prefetch;

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableObserveOn)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableObserveOn, scheduler_, IoReactivexScheduler *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableObserveOn_initWithOrgReactivestreamsPublisher_withIoReactivexScheduler_withBoolean_withInt_(IoReactivexInternalOperatorsFlowableFlowableObserveOn *self, id<OrgReactivestreamsPublisher> source, IoReactivexScheduler *scheduler, jboolean delayError, jint prefetch);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableObserveOn *new_IoReactivexInternalOperatorsFlowableFlowableObserveOn_initWithOrgReactivestreamsPublisher_withIoReactivexScheduler_withBoolean_withInt_(id<OrgReactivestreamsPublisher> source, IoReactivexScheduler *scheduler, jboolean delayError, jint prefetch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableObserveOn *create_IoReactivexInternalOperatorsFlowableFlowableObserveOn_initWithOrgReactivestreamsPublisher_withIoReactivexScheduler_withBoolean_withInt_(id<OrgReactivestreamsPublisher> source, IoReactivexScheduler *scheduler, jboolean delayError, jint prefetch);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableObserveOn)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableObserveOn || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber_

#define RESTRICT_IoReactivexInternalSubscriptionsBasicIntQueueSubscription 1
#define INCLUDE_IoReactivexInternalSubscriptionsBasicIntQueueSubscription 1
#include "io/reactivex/internal/subscriptions/BasicIntQueueSubscription.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

#define RESTRICT_OrgReactivestreamsSubscriber 1
#define INCLUDE_OrgReactivestreamsSubscriber 1
#include "org/reactivestreams/Subscriber.h"

@class IoReactivexScheduler_Worker;
@class JavaUtilConcurrentAtomicAtomicLong;
@protocol IoReactivexInternalFuseableSimpleQueue;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber : IoReactivexInternalSubscriptionsBasicIntQueueSubscription < JavaLangRunnable, OrgReactivestreamsSubscriber > {
 @public
  IoReactivexScheduler_Worker *worker_;
  jboolean delayError_;
  jint prefetch_;
  jint limit_;
  JavaUtilConcurrentAtomicAtomicLong *requested_;
  id<OrgReactivestreamsSubscription> s_;
  id<IoReactivexInternalFuseableSimpleQueue> queue_;
  volatile_jboolean cancelled_;
  volatile_jboolean done_;
  NSException *error_;
  jint sourceMode_;
  jlong produced_;
  jboolean outputFused_;
}

#pragma mark Public

- (void)cancel;

- (void)clear;

- (jboolean)isEmpty;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)requestWithLong:(jlong)n;

- (jint)requestFusionWithInt:(jint)requestedMode;

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)worker
                                        withBoolean:(jboolean)delayError
                                            withInt:(jint)prefetch;

- (jboolean)checkTerminatedWithBoolean:(jboolean)d
                           withBoolean:(jboolean)empty
      withOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)a;

- (void)runAsync;

- (void)runBackfused;

- (void)runSync;

- (void)trySchedule;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber, worker_, IoReactivexScheduler_Worker *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber, requested_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber, s_, id<OrgReactivestreamsSubscription>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber, queue_, id<IoReactivexInternalFuseableSimpleQueue>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber, error_, NSException *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber_initWithIoReactivexScheduler_Worker_withBoolean_withInt_(IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber *self, IoReactivexScheduler_Worker *worker, jboolean delayError, jint prefetch);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableObserveOn || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnSubscriber_

#define RESTRICT_OrgReactivestreamsSubscriber 1
#define INCLUDE_OrgReactivestreamsSubscriber 1
#include "org/reactivestreams/Subscriber.h"

@class IoReactivexScheduler_Worker;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnSubscriber : IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber < OrgReactivestreamsSubscriber > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
}

#pragma mark Public

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (id)poll;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                     withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)worker
                                         withBoolean:(jboolean)delayError
                                             withInt:(jint)prefetch;

- (void)runAsync;

- (void)runBackfused;

- (void)runSync;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnSubscriber, actual_, id<OrgReactivestreamsSubscriber>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexScheduler_Worker_withBoolean_withInt_(IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnSubscriber *self, id<OrgReactivestreamsSubscriber> actual, IoReactivexScheduler_Worker *worker, jboolean delayError, jint prefetch);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexScheduler_Worker_withBoolean_withInt_(id<OrgReactivestreamsSubscriber> actual, IoReactivexScheduler_Worker *worker, jboolean delayError, jint prefetch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexScheduler_Worker_withBoolean_withInt_(id<OrgReactivestreamsSubscriber> actual, IoReactivexScheduler_Worker *worker, jboolean delayError, jint prefetch);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnSubscriber)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnConditionalSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableObserveOn || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnConditionalSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnConditionalSubscriber_

@class IoReactivexScheduler_Worker;
@protocol IoReactivexInternalFuseableConditionalSubscriber;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnConditionalSubscriber : IoReactivexInternalOperatorsFlowableFlowableObserveOn_BaseObserveOnSubscriber {
 @public
  id<IoReactivexInternalFuseableConditionalSubscriber> actual_;
  jlong consumed_;
}

#pragma mark Public

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (id)poll;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalFuseableConditionalSubscriber:(id<IoReactivexInternalFuseableConditionalSubscriber>)actual
                                         withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)worker
                                                             withBoolean:(jboolean)delayError
                                                                 withInt:(jint)prefetch;

- (void)runAsync;

- (void)runBackfused;

- (void)runSync;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnConditionalSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnConditionalSubscriber, actual_, id<IoReactivexInternalFuseableConditionalSubscriber>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexScheduler_Worker_withBoolean_withInt_(IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnConditionalSubscriber *self, id<IoReactivexInternalFuseableConditionalSubscriber> actual, IoReactivexScheduler_Worker *worker, jboolean delayError, jint prefetch);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnConditionalSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexScheduler_Worker_withBoolean_withInt_(id<IoReactivexInternalFuseableConditionalSubscriber> actual, IoReactivexScheduler_Worker *worker, jboolean delayError, jint prefetch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnConditionalSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnConditionalSubscriber_initWithIoReactivexInternalFuseableConditionalSubscriber_withIoReactivexScheduler_Worker_withBoolean_withInt_(id<IoReactivexInternalFuseableConditionalSubscriber> actual, IoReactivexScheduler_Worker *worker, jboolean delayError, jint prefetch);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableObserveOn_ObserveOnConditionalSubscriber)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableObserveOn")
