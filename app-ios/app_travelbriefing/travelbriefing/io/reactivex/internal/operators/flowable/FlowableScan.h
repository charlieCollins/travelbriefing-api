//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/flowable/FlowableScan.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableScan")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableScan
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableScan 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableScan 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableScan

#if !defined (IoReactivexInternalOperatorsFlowableFlowableScan_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableScan || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableScan))
#define IoReactivexInternalOperatorsFlowableFlowableScan_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "io/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream.h"

@protocol IoReactivexFunctionsBiFunction;
@protocol OrgReactivestreamsPublisher;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableScan : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  id<IoReactivexFunctionsBiFunction> accumulator_;
}

#pragma mark Public

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                 withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)accumulator;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableScan)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableScan, accumulator_, id<IoReactivexFunctionsBiFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableScan_initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsBiFunction_(IoReactivexInternalOperatorsFlowableFlowableScan *self, id<OrgReactivestreamsPublisher> source, id<IoReactivexFunctionsBiFunction> accumulator);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableScan *new_IoReactivexInternalOperatorsFlowableFlowableScan_initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsBiFunction_(id<OrgReactivestreamsPublisher> source, id<IoReactivexFunctionsBiFunction> accumulator) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableScan *create_IoReactivexInternalOperatorsFlowableFlowableScan_initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsBiFunction_(id<OrgReactivestreamsPublisher> source, id<IoReactivexFunctionsBiFunction> accumulator);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableScan)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableScan_ScanSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableScan || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableScan_ScanSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableScan_ScanSubscriber_

#define RESTRICT_OrgReactivestreamsSubscriber 1
#define INCLUDE_OrgReactivestreamsSubscriber 1
#include "org/reactivestreams/Subscriber.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "org/reactivestreams/Subscription.h"

@protocol IoReactivexFunctionsBiFunction;

@interface IoReactivexInternalOperatorsFlowableFlowableScan_ScanSubscriber : NSObject < OrgReactivestreamsSubscriber, OrgReactivestreamsSubscription > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  id<IoReactivexFunctionsBiFunction> accumulator_;
  id<OrgReactivestreamsSubscription> s_;
  id value_;
  jboolean done_;
}

#pragma mark Public

- (void)cancel;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                  withIoReactivexFunctionsBiFunction:(id<IoReactivexFunctionsBiFunction>)accumulator;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableScan_ScanSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableScan_ScanSubscriber, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableScan_ScanSubscriber, accumulator_, id<IoReactivexFunctionsBiFunction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableScan_ScanSubscriber, s_, id<OrgReactivestreamsSubscription>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableScan_ScanSubscriber, value_, id)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableScan_ScanSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsBiFunction_(IoReactivexInternalOperatorsFlowableFlowableScan_ScanSubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsBiFunction> accumulator);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableScan_ScanSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableScan_ScanSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsBiFunction_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsBiFunction> accumulator) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableScan_ScanSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableScan_ScanSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsBiFunction_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsBiFunction> accumulator);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableScan_ScanSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableScan")
