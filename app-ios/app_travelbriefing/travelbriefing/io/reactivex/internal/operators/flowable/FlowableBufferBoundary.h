//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/flowable/FlowableBufferBoundary.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary

#if !defined (IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary))
#define IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "io/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream.h"

@protocol IoReactivexFunctionsFunction;
@protocol JavaUtilCollection;
@protocol JavaUtilConcurrentCallable;
@protocol OrgReactivestreamsPublisher;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableBufferBoundary : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  id<JavaUtilConcurrentCallable> bufferSupplier_;
  id<OrgReactivestreamsPublisher> bufferOpen_;
  id<IoReactivexFunctionsFunction> bufferClose_;
}

#pragma mark Public

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                    withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)bufferOpen
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)bufferClose
                     withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier;

- (id<JavaUtilCollection>)blockingFirst;

- (id<JavaUtilCollection>)blockingFirstWithId:(id<JavaUtilCollection>)arg0;

- (id<JavaUtilCollection>)blockingLast;

- (id<JavaUtilCollection>)blockingLastWithId:(id<JavaUtilCollection>)arg0;

- (id<JavaUtilCollection>)blockingSingle;

- (id<JavaUtilCollection>)blockingSingleWithId:(id<JavaUtilCollection>)arg0;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary, bufferSupplier_, id<JavaUtilConcurrentCallable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary, bufferOpen_, id<OrgReactivestreamsPublisher>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary, bufferClose_, id<IoReactivexFunctionsFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_initWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary *self, id<OrgReactivestreamsPublisher> source, id<OrgReactivestreamsPublisher> bufferOpen, id<IoReactivexFunctionsFunction> bufferClose, id<JavaUtilConcurrentCallable> bufferSupplier);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableBufferBoundary *new_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_initWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(id<OrgReactivestreamsPublisher> source, id<OrgReactivestreamsPublisher> bufferOpen, id<IoReactivexFunctionsFunction> bufferClose, id<JavaUtilConcurrentCallable> bufferSupplier) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableBufferBoundary *create_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_initWithOrgReactivestreamsPublisher_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(id<OrgReactivestreamsPublisher> source, id<OrgReactivestreamsPublisher> bufferOpen, id<IoReactivexFunctionsFunction> bufferClose, id<JavaUtilConcurrentCallable> bufferSupplier);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber_

#define RESTRICT_IoReactivexInternalSubscribersQueueDrainSubscriber 1
#define INCLUDE_IoReactivexInternalSubscribersQueueDrainSubscriber 1
#include "io/reactivex/internal/subscribers/QueueDrainSubscriber.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "org/reactivestreams/Subscription.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "io/reactivex/disposables/Disposable.h"

@class IoReactivexDisposablesCompositeDisposable;
@class JavaUtilConcurrentAtomicAtomicInteger;
@protocol IoReactivexFunctionsFunction;
@protocol JavaUtilCollection;
@protocol JavaUtilConcurrentCallable;
@protocol JavaUtilList;
@protocol OrgReactivestreamsPublisher;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber : IoReactivexInternalSubscribersQueueDrainSubscriber < OrgReactivestreamsSubscription, IoReactivexDisposablesDisposable > {
 @public
  id<OrgReactivestreamsPublisher> bufferOpen_;
  id<IoReactivexFunctionsFunction> bufferClose_;
  id<JavaUtilConcurrentCallable> bufferSupplier_;
  IoReactivexDisposablesCompositeDisposable *resources_;
  id<OrgReactivestreamsSubscription> s_;
  id<JavaUtilList> buffers_;
  JavaUtilConcurrentAtomicAtomicInteger *windows_;
}

#pragma mark Public

- (jboolean)acceptWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)a
                                            withId:(id<JavaUtilCollection>)v;

- (void)cancel;

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                     withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)bufferOpen
                    withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)bufferClose
                      withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)bufferSupplier;

- (void)closeWithJavaUtilCollection:(id<JavaUtilCollection>)b
withIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)complete;

- (void)openWithId:(id)window;

- (void)openFinishedWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber, bufferOpen_, id<OrgReactivestreamsPublisher>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber, bufferClose_, id<IoReactivexFunctionsFunction>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber, bufferSupplier_, id<JavaUtilConcurrentCallable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber, resources_, IoReactivexDisposablesCompositeDisposable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber, s_, id<OrgReactivestreamsSubscription>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber, buffers_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber, windows_, JavaUtilConcurrentAtomicAtomicInteger *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<OrgReactivestreamsPublisher> bufferOpen, id<IoReactivexFunctionsFunction> bufferClose, id<JavaUtilConcurrentCallable> bufferSupplier);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber *new_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(id<OrgReactivestreamsSubscriber> actual, id<OrgReactivestreamsPublisher> bufferOpen, id<IoReactivexFunctionsFunction> bufferClose, id<JavaUtilConcurrentCallable> bufferSupplier) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber *create_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber_initWithOrgReactivestreamsSubscriber_withOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withJavaUtilConcurrentCallable_(id<OrgReactivestreamsSubscriber> actual, id<OrgReactivestreamsPublisher> bufferOpen, id<IoReactivexFunctionsFunction> bufferClose, id<JavaUtilConcurrentCallable> bufferSupplier);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferOpenSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferOpenSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferOpenSubscriber_

#define RESTRICT_IoReactivexSubscribersDisposableSubscriber 1
#define INCLUDE_IoReactivexSubscribersDisposableSubscriber 1
#include "io/reactivex/subscribers/DisposableSubscriber.h"

@class IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferOpenSubscriber : IoReactivexSubscribersDisposableSubscriber {
 @public
  IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber *parent_;
  jboolean done_;
}

#pragma mark Public

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber:(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber *)parent;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferOpenSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferOpenSubscriber, parent_, IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferOpenSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber_(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferOpenSubscriber *self, IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber *parent);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferOpenSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferOpenSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber_(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber *parent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferOpenSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferOpenSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber_(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber *parent);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferOpenSubscriber)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferCloseSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferCloseSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferCloseSubscriber_

#define RESTRICT_IoReactivexSubscribersDisposableSubscriber 1
#define INCLUDE_IoReactivexSubscribersDisposableSubscriber 1
#include "io/reactivex/subscribers/DisposableSubscriber.h"

@class IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber;
@protocol JavaUtilCollection;

@interface IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferCloseSubscriber : IoReactivexSubscribersDisposableSubscriber {
 @public
  IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber *parent_;
  id<JavaUtilCollection> value_;
  jboolean done_;
}

#pragma mark Public

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)value
withIoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber:(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber *)parent;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferCloseSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferCloseSubscriber, parent_, IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferCloseSubscriber, value_, id<JavaUtilCollection>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferCloseSubscriber_initWithJavaUtilCollection_withIoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber_(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferCloseSubscriber *self, id<JavaUtilCollection> value, IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber *parent);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferCloseSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferCloseSubscriber_initWithJavaUtilCollection_withIoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber_(id<JavaUtilCollection> value, IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber *parent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferCloseSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferCloseSubscriber_initWithJavaUtilCollection_withIoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber_(id<JavaUtilCollection> value, IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferBoundarySubscriber *parent);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableBufferBoundary_BufferCloseSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableBufferBoundary")
