//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/flowable/FlowableTimeInterval.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTimeInterval")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableTimeInterval
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTimeInterval 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTimeInterval 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableTimeInterval

#if !defined (IoReactivexInternalOperatorsFlowableFlowableTimeInterval_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTimeInterval || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableTimeInterval))
#define IoReactivexInternalOperatorsFlowableFlowableTimeInterval_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "io/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream.h"

@class IoReactivexScheduler;
@class IoReactivexSchedulersTimed;
@class JavaUtilConcurrentTimeUnit;
@protocol OrgReactivestreamsPublisher;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableTimeInterval : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  IoReactivexScheduler *scheduler_;
  JavaUtilConcurrentTimeUnit *unit_;
}

#pragma mark Public

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                           withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (IoReactivexSchedulersTimed *)blockingFirst;

- (IoReactivexSchedulersTimed *)blockingFirstWithId:(IoReactivexSchedulersTimed *)arg0;

- (IoReactivexSchedulersTimed *)blockingLast;

- (IoReactivexSchedulersTimed *)blockingLastWithId:(IoReactivexSchedulersTimed *)arg0;

- (IoReactivexSchedulersTimed *)blockingSingle;

- (IoReactivexSchedulersTimed *)blockingSingleWithId:(IoReactivexSchedulersTimed *)arg0;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableTimeInterval)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTimeInterval, scheduler_, IoReactivexScheduler *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTimeInterval, unit_, JavaUtilConcurrentTimeUnit *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableTimeInterval_initWithOrgReactivestreamsPublisher_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(IoReactivexInternalOperatorsFlowableFlowableTimeInterval *self, id<OrgReactivestreamsPublisher> source, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableTimeInterval *new_IoReactivexInternalOperatorsFlowableFlowableTimeInterval_initWithOrgReactivestreamsPublisher_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<OrgReactivestreamsPublisher> source, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableTimeInterval *create_IoReactivexInternalOperatorsFlowableFlowableTimeInterval_initWithOrgReactivestreamsPublisher_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<OrgReactivestreamsPublisher> source, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableTimeInterval)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableTimeInterval_TimeIntervalSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTimeInterval || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableTimeInterval_TimeIntervalSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableTimeInterval_TimeIntervalSubscriber_

#define RESTRICT_OrgReactivestreamsSubscriber 1
#define INCLUDE_OrgReactivestreamsSubscriber 1
#include "org/reactivestreams/Subscriber.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "org/reactivestreams/Subscription.h"

@class IoReactivexScheduler;
@class JavaUtilConcurrentTimeUnit;

@interface IoReactivexInternalOperatorsFlowableFlowableTimeInterval_TimeIntervalSubscriber : NSObject < OrgReactivestreamsSubscriber, OrgReactivestreamsSubscription > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler *scheduler_;
  id<OrgReactivestreamsSubscription> s_;
  jlong lastTime_;
}

#pragma mark Public

- (void)cancel;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                            withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableTimeInterval_TimeIntervalSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTimeInterval_TimeIntervalSubscriber, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTimeInterval_TimeIntervalSubscriber, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTimeInterval_TimeIntervalSubscriber, scheduler_, IoReactivexScheduler *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableTimeInterval_TimeIntervalSubscriber, s_, id<OrgReactivestreamsSubscription>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableTimeInterval_TimeIntervalSubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(IoReactivexInternalOperatorsFlowableFlowableTimeInterval_TimeIntervalSubscriber *self, id<OrgReactivestreamsSubscriber> actual, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableTimeInterval_TimeIntervalSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableTimeInterval_TimeIntervalSubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<OrgReactivestreamsSubscriber> actual, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableTimeInterval_TimeIntervalSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableTimeInterval_TimeIntervalSubscriber_initWithOrgReactivestreamsSubscriber_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<OrgReactivestreamsSubscriber> actual, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableTimeInterval_TimeIntervalSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableTimeInterval")
