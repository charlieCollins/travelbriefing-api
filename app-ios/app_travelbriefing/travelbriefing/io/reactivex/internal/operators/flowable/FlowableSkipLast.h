//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/flowable/FlowableSkipLast.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSkipLast")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableSkipLast
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSkipLast 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSkipLast 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableSkipLast

#if !defined (IoReactivexInternalOperatorsFlowableFlowableSkipLast_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSkipLast || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableSkipLast))
#define IoReactivexInternalOperatorsFlowableFlowableSkipLast_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "io/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream.h"

@protocol OrgReactivestreamsPublisher;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableSkipLast : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  jint skip_;
}

#pragma mark Public

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                                            withInt:(jint)skip;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableSkipLast)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableSkipLast_initWithOrgReactivestreamsPublisher_withInt_(IoReactivexInternalOperatorsFlowableFlowableSkipLast *self, id<OrgReactivestreamsPublisher> source, jint skip);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSkipLast *new_IoReactivexInternalOperatorsFlowableFlowableSkipLast_initWithOrgReactivestreamsPublisher_withInt_(id<OrgReactivestreamsPublisher> source, jint skip) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSkipLast *create_IoReactivexInternalOperatorsFlowableFlowableSkipLast_initWithOrgReactivestreamsPublisher_withInt_(id<OrgReactivestreamsPublisher> source, jint skip);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableSkipLast)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableSkipLast_SkipLastSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSkipLast || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableSkipLast_SkipLastSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableSkipLast_SkipLastSubscriber_

#define RESTRICT_JavaUtilArrayDeque 1
#define INCLUDE_JavaUtilArrayDeque 1
#include "java/util/ArrayDeque.h"

#define RESTRICT_OrgReactivestreamsSubscriber 1
#define INCLUDE_OrgReactivestreamsSubscriber 1
#include "org/reactivestreams/Subscriber.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "org/reactivestreams/Subscription.h"

@interface IoReactivexInternalOperatorsFlowableFlowableSkipLast_SkipLastSubscriber : JavaUtilArrayDeque < OrgReactivestreamsSubscriber, OrgReactivestreamsSubscription > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  jint skip_;
  id<OrgReactivestreamsSubscription> s_;
}

#pragma mark Public

- (void)cancel;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                                             withInt:(jint)skip;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableSkipLast_SkipLastSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSkipLast_SkipLastSubscriber, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableSkipLast_SkipLastSubscriber, s_, id<OrgReactivestreamsSubscription>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableSkipLast_SkipLastSubscriber_initWithOrgReactivestreamsSubscriber_withInt_(IoReactivexInternalOperatorsFlowableFlowableSkipLast_SkipLastSubscriber *self, id<OrgReactivestreamsSubscriber> actual, jint skip);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSkipLast_SkipLastSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableSkipLast_SkipLastSubscriber_initWithOrgReactivestreamsSubscriber_withInt_(id<OrgReactivestreamsSubscriber> actual, jint skip) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableSkipLast_SkipLastSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableSkipLast_SkipLastSubscriber_initWithOrgReactivestreamsSubscriber_withInt_(id<OrgReactivestreamsSubscriber> actual, jint skip);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableSkipLast_SkipLastSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableSkipLast")
