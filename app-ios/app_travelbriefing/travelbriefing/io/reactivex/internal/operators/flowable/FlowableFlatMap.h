//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/flowable/FlowableFlatMap.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFlatMap")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableFlatMap
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFlatMap 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFlatMap 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowableFlatMap

#if !defined (IoReactivexInternalOperatorsFlowableFlowableFlatMap_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFlatMap || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableFlatMap))
#define IoReactivexInternalOperatorsFlowableFlowableFlatMap_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "io/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream.h"

@protocol IoReactivexFunctionsFunction;
@protocol OrgReactivestreamsPublisher;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowableFlatMap : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  id<IoReactivexFunctionsFunction> mapper_;
  jboolean delayErrors_;
  jint maxConcurrency_;
  jint bufferSize_;
}

#pragma mark Public

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                        withBoolean:(jboolean)delayErrors
                                            withInt:(jint)maxConcurrency
                                            withInt:(jint)bufferSize;

+ (id<OrgReactivestreamsSubscriber>)subscribeWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s
                                             withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                                                  withBoolean:(jboolean)delayErrors
                                                                      withInt:(jint)maxConcurrency
                                                                      withInt:(jint)bufferSize;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableFlatMap)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFlatMap, mapper_, id<IoReactivexFunctionsFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableFlatMap_initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(IoReactivexInternalOperatorsFlowableFlowableFlatMap *self, id<OrgReactivestreamsPublisher> source, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency, jint bufferSize);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableFlatMap *new_IoReactivexInternalOperatorsFlowableFlowableFlatMap_initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(id<OrgReactivestreamsPublisher> source, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency, jint bufferSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableFlatMap *create_IoReactivexInternalOperatorsFlowableFlowableFlatMap_initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(id<OrgReactivestreamsPublisher> source, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency, jint bufferSize);

FOUNDATION_EXPORT id<OrgReactivestreamsSubscriber> IoReactivexInternalOperatorsFlowableFlowableFlatMap_subscribeWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(id<OrgReactivestreamsSubscriber> s, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency, jint bufferSize);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableFlatMap)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFlatMap || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "org/reactivestreams/Subscription.h"

#define RESTRICT_OrgReactivestreamsSubscriber 1
#define INCLUDE_OrgReactivestreamsSubscriber 1
#include "org/reactivestreams/Subscriber.h"

@class IOSObjectArray;
@class IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber;
@class IoReactivexInternalUtilAtomicThrowable;
@class JavaUtilConcurrentAtomicAtomicLong;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexFunctionsFunction;
@protocol IoReactivexInternalFuseableSimplePlainQueue;
@protocol IoReactivexInternalFuseableSimpleQueue;

@interface IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber : JavaUtilConcurrentAtomicAtomicInteger < OrgReactivestreamsSubscription, OrgReactivestreamsSubscriber > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  id<IoReactivexFunctionsFunction> mapper_;
  jboolean delayErrors_;
  jint maxConcurrency_;
  jint bufferSize_;
  volatile_id queue_;
  volatile_jboolean done_;
  IoReactivexInternalUtilAtomicThrowable *errs_;
  volatile_jboolean cancelled_;
  JavaUtilConcurrentAtomicAtomicReference *subscribers_;
  JavaUtilConcurrentAtomicAtomicLong *requested_;
  id<OrgReactivestreamsSubscription> s_;
  jlong uniqueId_;
  jlong lastId_;
  jint lastIndex_;
  jint scalarEmitted_;
  jint scalarLimit_;
}

#pragma mark Public

- (void)cancel;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
                    withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)mapper
                                         withBoolean:(jboolean)delayErrors
                                             withInt:(jint)maxConcurrency
                                             withInt:(jint)bufferSize;

- (jboolean)addInnerWithIoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber:(IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber *)inner;

- (jboolean)checkTerminate;

- (void)disposeAll;

- (void)drain;

- (void)drainLoop;

- (id<IoReactivexInternalFuseableSimpleQueue>)getInnerQueueWithIoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber:(IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber *)inner;

- (id<IoReactivexInternalFuseableSimpleQueue>)getMainQueue;

- (void)removeInnerWithIoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber:(IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber *)inner;

- (void)tryEmitWithId:(id)value
withIoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber:(IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber *)inner;

- (void)tryEmitScalarWithId:(id)value;

@end

J2OBJC_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber, mapper_, id<IoReactivexFunctionsFunction>)
J2OBJC_VOLATILE_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber, queue_, id<IoReactivexInternalFuseableSimplePlainQueue>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber, errs_, IoReactivexInternalUtilAtomicThrowable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber, subscribers_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber, requested_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber, s_, id<OrgReactivestreamsSubscription>)

inline IOSObjectArray *IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_get_EMPTY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber, EMPTY, IOSObjectArray *)

inline IOSObjectArray *IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_get_CANCELLED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_CANCELLED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber, CANCELLED, IOSObjectArray *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber *self, id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency, jint bufferSize);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency, jint bufferSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_initWithOrgReactivestreamsSubscriber_withIoReactivexFunctionsFunction_withBoolean_withInt_withInt_(id<OrgReactivestreamsSubscriber> actual, id<IoReactivexFunctionsFunction> mapper, jboolean delayErrors, jint maxConcurrency, jint bufferSize);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFlatMap || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber))
#define IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_OrgReactivestreamsSubscriber 1
#define INCLUDE_OrgReactivestreamsSubscriber 1
#include "org/reactivestreams/Subscriber.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "io/reactivex/disposables/Disposable.h"

@class IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber;
@protocol IoReactivexInternalFuseableSimpleQueue;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber : JavaUtilConcurrentAtomicAtomicReference < OrgReactivestreamsSubscriber, IoReactivexDisposablesDisposable > {
 @public
  jlong id__;
  IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber *parent_;
  jint limit_;
  jint bufferSize_;
  volatile_jboolean done_;
  volatile_id queue_;
  jlong produced_;
  jint fusionMode_;
}

#pragma mark Public

- (void)dispose;

- (id<OrgReactivestreamsSubscription>)get;

- (id<OrgReactivestreamsSubscription>)getAndSetWithId:(id<OrgReactivestreamsSubscription>)arg0;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber:(IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber *)parent
                                                                                   withLong:(jlong)id_;

- (void)requestMoreWithLong:(jlong)n;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber, parent_, IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber *)
J2OBJC_VOLATILE_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber, queue_, id<IoReactivexInternalFuseableSimpleQueue>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_withLong_(IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber *self, IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber *parent, jlong id_);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber *new_IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_withLong_(IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber *parent, jlong id_) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber *create_IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber_initWithIoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber_withLong_(IoReactivexInternalOperatorsFlowableFlowableFlatMap_MergeSubscriber *parent, jlong id_);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowableFlatMap_InnerSubscriber)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowableFlatMap")
