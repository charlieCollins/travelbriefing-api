//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/flowable/FlowablePublishMulticast.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast")
#ifdef RESTRICT_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast

#if !defined (IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast))
#define IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_

#define RESTRICT_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream 1
#include "io/reactivex/internal/operators/flowable/AbstractFlowableWithUpstream.h"

@protocol IoReactivexFunctionsFunction;
@protocol OrgReactivestreamsPublisher;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowablePublishMulticast : IoReactivexInternalOperatorsFlowableAbstractFlowableWithUpstream {
 @public
  id<IoReactivexFunctionsFunction> selector_;
  jint prefetch_;
  jboolean delayError_;
}

#pragma mark Public

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                   withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)selector
                                            withInt:(jint)prefetch
                                        withBoolean:(jboolean)delayError;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast, selector_, id<IoReactivexFunctionsFunction>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withInt_withBoolean_(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast *self, id<OrgReactivestreamsPublisher> source, id<IoReactivexFunctionsFunction> selector, jint prefetch, jboolean delayError);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowablePublishMulticast *new_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withInt_withBoolean_(id<OrgReactivestreamsPublisher> source, id<IoReactivexFunctionsFunction> selector, jint prefetch, jboolean delayError) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowablePublishMulticast *create_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_initWithOrgReactivestreamsPublisher_withIoReactivexFunctionsFunction_withInt_withBoolean_(id<OrgReactivestreamsPublisher> source, id<IoReactivexFunctionsFunction> selector, jint prefetch, jboolean delayError);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_OutputCanceller_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_OutputCanceller))
#define IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_OutputCanceller_

#define RESTRICT_OrgReactivestreamsSubscriber 1
#define INCLUDE_OrgReactivestreamsSubscriber 1
#include "org/reactivestreams/Subscriber.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "org/reactivestreams/Subscription.h"

@class IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor;

@interface IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_OutputCanceller : NSObject < OrgReactivestreamsSubscriber, OrgReactivestreamsSubscription > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor *processor_;
  id<OrgReactivestreamsSubscription> s_;
}

#pragma mark Public

- (void)cancel;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
withIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor:(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor *)processor;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_OutputCanceller)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_OutputCanceller, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_OutputCanceller, processor_, IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_OutputCanceller, s_, id<OrgReactivestreamsSubscription>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_OutputCanceller_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_OutputCanceller *self, id<OrgReactivestreamsSubscriber> actual, IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor *processor);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_OutputCanceller *new_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_OutputCanceller_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_(id<OrgReactivestreamsSubscriber> actual, IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor *processor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_OutputCanceller *create_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_OutputCanceller_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_(id<OrgReactivestreamsSubscriber> actual, IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor *processor);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_OutputCanceller)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor))
#define IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_

#define RESTRICT_IoReactivexFlowable 1
#define INCLUDE_IoReactivexFlowable 1
#include "io/reactivex/Flowable.h"

#define RESTRICT_OrgReactivestreamsSubscriber 1
#define INCLUDE_OrgReactivestreamsSubscriber 1
#include "org/reactivestreams/Subscriber.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "io/reactivex/disposables/Disposable.h"

@class IOSObjectArray;
@class IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription;
@class JavaUtilConcurrentAtomicAtomicInteger;
@class JavaUtilConcurrentAtomicAtomicReference;
@protocol IoReactivexInternalFuseableSimpleQueue;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor : IoReactivexFlowable < OrgReactivestreamsSubscriber, IoReactivexDisposablesDisposable > {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *wip_;
  JavaUtilConcurrentAtomicAtomicReference *subscribers_;
  jint prefetch_;
  jint limit_;
  jboolean delayError_;
  JavaUtilConcurrentAtomicAtomicReference *s_;
  volatile_id queue_;
  jint sourceMode_;
  volatile_jboolean done_;
  NSException *error_;
  jint consumed_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

#pragma mark Protected

- (void)subscribeActualWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)s;

#pragma mark Package-Private

- (instancetype)initWithInt:(jint)prefetch
                withBoolean:(jboolean)delayError;

- (jboolean)addWithIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription:(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription *)s;

- (void)completeAll;

- (void)drain;

- (void)errorAllWithNSException:(NSException *)ex;

- (void)removeWithIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription:(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription *)s;

@end

J2OBJC_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor, wip_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor, subscribers_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor, s_, JavaUtilConcurrentAtomicAtomicReference *)
J2OBJC_VOLATILE_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor, queue_, id<IoReactivexInternalFuseableSimpleQueue>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor, error_, NSException *)

inline IOSObjectArray *IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_get_EMPTY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor, EMPTY, IOSObjectArray *)

inline IOSObjectArray *IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_get_TERMINATED();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_TERMINATED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor, TERMINATED, IOSObjectArray *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_initWithInt_withBoolean_(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor *self, jint prefetch, jboolean delayError);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor *new_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_initWithInt_withBoolean_(jint prefetch, jboolean delayError) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor *create_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_initWithInt_withBoolean_(jint prefetch, jboolean delayError);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor)

#endif

#if !defined (IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription_) && (INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast || defined(INCLUDE_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription))
#define IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicLong 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicLong 1
#include "java/util/concurrent/atomic/AtomicLong.h"

#define RESTRICT_OrgReactivestreamsSubscription 1
#define INCLUDE_OrgReactivestreamsSubscription 1
#include "org/reactivestreams/Subscription.h"

@class IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor;
@protocol OrgReactivestreamsSubscriber;

@interface IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription : JavaUtilConcurrentAtomicAtomicLong < OrgReactivestreamsSubscription > {
 @public
  id<OrgReactivestreamsSubscriber> actual_;
  IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor *parent_;
}

#pragma mark Public

- (void)cancel;

- (jboolean)isCancelled;

- (void)requestWithLong:(jlong)n;

#pragma mark Package-Private

- (instancetype)initWithOrgReactivestreamsSubscriber:(id<OrgReactivestreamsSubscriber>)actual
withIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor:(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor *)parent;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription, actual_, id<OrgReactivestreamsSubscriber>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription, parent_, IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription *self, id<OrgReactivestreamsSubscriber> actual, IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor *parent);

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription *new_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_(id<OrgReactivestreamsSubscriber> actual, IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor *parent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription *create_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription_initWithOrgReactivestreamsSubscriber_withIoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor_(id<OrgReactivestreamsSubscriber> actual, IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastProcessor *parent);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsFlowableFlowablePublishMulticast_MulticastSubscription)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsFlowableFlowablePublishMulticast")
