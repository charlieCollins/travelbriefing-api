//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/observable/ObserverResourceWrapper.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObserverResourceWrapper")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObserverResourceWrapper
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObserverResourceWrapper 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObserverResourceWrapper 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObserverResourceWrapper

#if !defined (IoReactivexInternalOperatorsObservableObserverResourceWrapper_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObserverResourceWrapper || defined(INCLUDE_IoReactivexInternalOperatorsObservableObserverResourceWrapper))
#define IoReactivexInternalOperatorsObservableObserverResourceWrapper_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "io/reactivex/Observer.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "io/reactivex/disposables/Disposable.h"

@interface IoReactivexInternalOperatorsObservableObserverResourceWrapper : JavaUtilConcurrentAtomicAtomicReference < IoReactivexObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexObserver> actual_;
  JavaUtilConcurrentAtomicAtomicReference *subscription_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual;

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

- (void)setResourceWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)resource;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObserverResourceWrapper)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObserverResourceWrapper, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObserverResourceWrapper, subscription_, JavaUtilConcurrentAtomicAtomicReference *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObserverResourceWrapper_initWithIoReactivexObserver_(IoReactivexInternalOperatorsObservableObserverResourceWrapper *self, id<IoReactivexObserver> actual);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObserverResourceWrapper *new_IoReactivexInternalOperatorsObservableObserverResourceWrapper_initWithIoReactivexObserver_(id<IoReactivexObserver> actual) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObserverResourceWrapper *create_IoReactivexInternalOperatorsObservableObserverResourceWrapper_initWithIoReactivexObserver_(id<IoReactivexObserver> actual);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObserverResourceWrapper)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObserverResourceWrapper")
