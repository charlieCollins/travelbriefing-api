//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/observable/ObservableDefer.java
//

#include "J2ObjC_source.h"
#include "io/reactivex/Observable.h"
#include "io/reactivex/ObservableSource.h"
#include "io/reactivex/Observer.h"
#include "io/reactivex/exceptions/Exceptions.h"
#include "io/reactivex/internal/disposables/EmptyDisposable.h"
#include "io/reactivex/internal/functions/ObjectHelper.h"
#include "io/reactivex/internal/operators/observable/ObservableDefer.h"
#include "java/util/concurrent/Callable.h"

@implementation IoReactivexInternalOperatorsObservableObservableDefer

- (instancetype)initWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)supplier {
  IoReactivexInternalOperatorsObservableObservableDefer_initWithJavaUtilConcurrentCallable_(self, supplier);
  return self;
}

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)s {
  id<IoReactivexObservableSource> pub;
  @try {
    pub = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<JavaUtilConcurrentCallable>) nil_chk(supplier_)) call], @"null publisher supplied");
  }
  @catch (NSException *t) {
    IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(t);
    IoReactivexInternalDisposablesEmptyDisposable_errorWithNSException_withIoReactivexObserver_(t, s);
    return;
  }
  [((id<IoReactivexObservableSource>) nil_chk(pub)) subscribeWithIoReactivexObserver:s];
}

- (void)dealloc {
  RELEASE_(supplier_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentCallable:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "supplier_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentCallable;", "(Ljava/util/concurrent/Callable<+Lio/reactivex/ObservableSource<+TT;>;>;)V", "subscribeActual", "LIoReactivexObserver;", "(Lio/reactivex/Observer<-TT;>;)V", "Ljava/util/concurrent/Callable<+Lio/reactivex/ObservableSource<+TT;>;>;", "<T:Ljava/lang/Object;>Lio/reactivex/Observable<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsObservableObservableDefer = { "ObservableDefer", "io.reactivex.internal.operators.observable", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, -1, -1, 6, -1 };
  return &_IoReactivexInternalOperatorsObservableObservableDefer;
}

@end

void IoReactivexInternalOperatorsObservableObservableDefer_initWithJavaUtilConcurrentCallable_(IoReactivexInternalOperatorsObservableObservableDefer *self, id<JavaUtilConcurrentCallable> supplier) {
  IoReactivexObservable_init(self);
  JreStrongAssign(&self->supplier_, supplier);
}

IoReactivexInternalOperatorsObservableObservableDefer *new_IoReactivexInternalOperatorsObservableObservableDefer_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> supplier) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsObservableObservableDefer, initWithJavaUtilConcurrentCallable_, supplier)
}

IoReactivexInternalOperatorsObservableObservableDefer *create_IoReactivexInternalOperatorsObservableObservableDefer_initWithJavaUtilConcurrentCallable_(id<JavaUtilConcurrentCallable> supplier) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsObservableObservableDefer, initWithJavaUtilConcurrentCallable_, supplier)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsObservableObservableDefer)
