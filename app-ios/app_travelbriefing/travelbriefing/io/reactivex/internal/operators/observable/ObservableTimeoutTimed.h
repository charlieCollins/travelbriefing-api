//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/observable/ObservableTimeoutTimed.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableTimeoutTimed")
#ifdef RESTRICT_IoReactivexInternalOperatorsObservableObservableTimeoutTimed
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableTimeoutTimed 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableTimeoutTimed 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsObservableObservableTimeoutTimed

#if !defined (IoReactivexInternalOperatorsObservableObservableTimeoutTimed_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableTimeoutTimed || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableTimeoutTimed))
#define IoReactivexInternalOperatorsObservableObservableTimeoutTimed_

#define RESTRICT_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream 1
#include "io/reactivex/internal/operators/observable/AbstractObservableWithUpstream.h"

@class IoReactivexScheduler;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexDisposablesDisposable;
@protocol IoReactivexObservableSource;
@protocol IoReactivexObserver;

@interface IoReactivexInternalOperatorsObservableObservableTimeoutTimed : IoReactivexInternalOperatorsObservableAbstractObservableWithUpstream {
 @public
  jlong timeout_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler *scheduler_;
  id<IoReactivexObservableSource> other_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexObservableSource:(id<IoReactivexObservableSource>)source
                                           withLong:(jlong)timeout
                     withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                           withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                    withIoReactivexObservableSource:(id<IoReactivexObservableSource>)other;

- (void)subscribeActualWithIoReactivexObserver:(id<IoReactivexObserver>)t;

@end

J2OBJC_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableTimeoutTimed)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableTimeoutTimed, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableTimeoutTimed, scheduler_, IoReactivexScheduler *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableTimeoutTimed, other_, id<IoReactivexObservableSource>)

inline id<IoReactivexDisposablesDisposable> IoReactivexInternalOperatorsObservableObservableTimeoutTimed_get_NEW_TIMER();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<IoReactivexDisposablesDisposable> IoReactivexInternalOperatorsObservableObservableTimeoutTimed_NEW_TIMER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoReactivexInternalOperatorsObservableObservableTimeoutTimed, NEW_TIMER, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableTimeoutTimed_initWithIoReactivexObservableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexObservableSource_(IoReactivexInternalOperatorsObservableObservableTimeoutTimed *self, id<IoReactivexObservableSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<IoReactivexObservableSource> other);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableTimeoutTimed *new_IoReactivexInternalOperatorsObservableObservableTimeoutTimed_initWithIoReactivexObservableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexObservableSource_(id<IoReactivexObservableSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<IoReactivexObservableSource> other) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableTimeoutTimed *create_IoReactivexInternalOperatorsObservableObservableTimeoutTimed_initWithIoReactivexObservableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexObservableSource_(id<IoReactivexObservableSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<IoReactivexObservableSource> other);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableTimeoutTimed)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableTimeoutTimed || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver))
#define IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "io/reactivex/Observer.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "io/reactivex/disposables/Disposable.h"

@class IoReactivexInternalDisposablesObserverFullArbiter;
@class IoReactivexScheduler_Worker;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexObservableSource;

@interface IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexObserver> actual_;
  jlong timeout_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler_Worker *worker_;
  id<IoReactivexObservableSource> other_;
  id<IoReactivexDisposablesDisposable> s_;
  IoReactivexInternalDisposablesObserverFullArbiter *arbiter_;
  volatile_jlong index_;
  volatile_jboolean done_;
}

#pragma mark Public

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                   withLong:(jlong)timeout
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
            withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)worker
            withIoReactivexObservableSource:(id<IoReactivexObservableSource>)other;

- (void)scheduleTimeoutWithLong:(jlong)idx;

- (void)subscribeNext;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver, worker_, IoReactivexScheduler_Worker *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver, other_, id<IoReactivexObservableSource>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver, s_, id<IoReactivexDisposablesDisposable>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver, arbiter_, IoReactivexInternalDisposablesObserverFullArbiter *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withIoReactivexObservableSource_(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver *self, id<IoReactivexObserver> actual, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker, id<IoReactivexObservableSource> other);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver *new_IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withIoReactivexObservableSource_(id<IoReactivexObserver> actual, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker, id<IoReactivexObservableSource> other) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver *create_IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_withIoReactivexObservableSource_(id<IoReactivexObserver> actual, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker, id<IoReactivexObservableSource> other);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedOtherObserver)

#endif

#if !defined (IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableTimeoutTimed || defined(INCLUDE_IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver))
#define IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexObserver 1
#define INCLUDE_IoReactivexObserver 1
#include "io/reactivex/Observer.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "io/reactivex/disposables/Disposable.h"

@class IoReactivexScheduler_Worker;
@class JavaUtilConcurrentTimeUnit;

@interface IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexObserver> actual_;
  jlong timeout_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler_Worker *worker_;
  id<IoReactivexDisposablesDisposable> s_;
  volatile_jlong index_;
  volatile_jboolean done_;
}

#pragma mark Public

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id)t;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexObserver:(id<IoReactivexObserver>)actual
                                   withLong:(jlong)timeout
             withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
            withIoReactivexScheduler_Worker:(IoReactivexScheduler_Worker *)worker;

- (void)scheduleTimeoutWithLong:(jlong)idx;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver, actual_, id<IoReactivexObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver, worker_, IoReactivexScheduler_Worker *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver, s_, id<IoReactivexDisposablesDisposable>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver *self, id<IoReactivexObserver> actual, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker);

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver *new_IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(id<IoReactivexObserver> actual, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver *create_IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver_initWithIoReactivexObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_Worker_(id<IoReactivexObserver> actual, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler_Worker *worker);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsObservableObservableTimeoutTimed_TimeoutTimedObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsObservableObservableTimeoutTimed")
