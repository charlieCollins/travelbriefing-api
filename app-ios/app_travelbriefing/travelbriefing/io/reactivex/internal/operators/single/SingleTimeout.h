//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/single/SingleTimeout.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleTimeout")
#ifdef RESTRICT_IoReactivexInternalOperatorsSingleSingleTimeout
#define INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleTimeout 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleTimeout 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsSingleSingleTimeout

#if !defined (IoReactivexInternalOperatorsSingleSingleTimeout_) && (INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleTimeout || defined(INCLUDE_IoReactivexInternalOperatorsSingleSingleTimeout))
#define IoReactivexInternalOperatorsSingleSingleTimeout_

#define RESTRICT_IoReactivexSingle 1
#define INCLUDE_IoReactivexSingle 1
#include "io/reactivex/Single.h"

@class IoReactivexScheduler;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexSingleObserver;
@protocol IoReactivexSingleSource;

@interface IoReactivexInternalOperatorsSingleSingleTimeout : IoReactivexSingle {
 @public
  id<IoReactivexSingleSource> source_;
  jlong timeout_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler *scheduler_;
  id<IoReactivexSingleSource> other_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source
                                       withLong:(jlong)timeout
                 withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                       withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                    withIoReactivexSingleSource:(id<IoReactivexSingleSource>)other;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleTimeout)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleTimeout, source_, id<IoReactivexSingleSource>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleTimeout, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleTimeout, scheduler_, IoReactivexScheduler *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleTimeout, other_, id<IoReactivexSingleSource>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsSingleSingleTimeout_initWithIoReactivexSingleSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexSingleSource_(IoReactivexInternalOperatorsSingleSingleTimeout *self, id<IoReactivexSingleSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<IoReactivexSingleSource> other);

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleTimeout *new_IoReactivexInternalOperatorsSingleSingleTimeout_initWithIoReactivexSingleSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexSingleSource_(id<IoReactivexSingleSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<IoReactivexSingleSource> other) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleTimeout *create_IoReactivexInternalOperatorsSingleSingleTimeout_initWithIoReactivexSingleSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexSingleSource_(id<IoReactivexSingleSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<IoReactivexSingleSource> other);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsSingleSingleTimeout)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleTimeout")
