//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/single/SingleTimer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleTimer")
#ifdef RESTRICT_IoReactivexInternalOperatorsSingleSingleTimer
#define INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleTimer 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleTimer 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsSingleSingleTimer

#if !defined (IoReactivexInternalOperatorsSingleSingleTimer_) && (INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleTimer || defined(INCLUDE_IoReactivexInternalOperatorsSingleSingleTimer))
#define IoReactivexInternalOperatorsSingleSingleTimer_

#define RESTRICT_IoReactivexSingle 1
#define INCLUDE_IoReactivexSingle 1
#include "io/reactivex/Single.h"

@class IoReactivexScheduler;
@class JavaLangLong;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexSingleObserver;

@interface IoReactivexInternalOperatorsSingleSingleTimer : IoReactivexSingle {
 @public
  jlong delay_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler *scheduler_;
}

#pragma mark Public

- (instancetype)initWithLong:(jlong)delay
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
    withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (JavaLangLong *)blockingGet;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleTimer)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleTimer, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleTimer, scheduler_, IoReactivexScheduler *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsSingleSingleTimer_initWithLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(IoReactivexInternalOperatorsSingleSingleTimer *self, jlong delay, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleTimer *new_IoReactivexInternalOperatorsSingleSingleTimer_initWithLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jlong delay, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleTimer *create_IoReactivexInternalOperatorsSingleSingleTimer_initWithLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(jlong delay, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsSingleSingleTimer)

#endif

#if !defined (IoReactivexInternalOperatorsSingleSingleTimer_TimerDisposable_) && (INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleTimer || defined(INCLUDE_IoReactivexInternalOperatorsSingleSingleTimer_TimerDisposable))
#define IoReactivexInternalOperatorsSingleSingleTimer_TimerDisposable_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "io/reactivex/disposables/Disposable.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@protocol IoReactivexSingleObserver;

@interface IoReactivexInternalOperatorsSingleSingleTimer_TimerDisposable : JavaUtilConcurrentAtomicAtomicReference < IoReactivexDisposablesDisposable, JavaLangRunnable > {
 @public
  id<IoReactivexSingleObserver> actual_;
}

#pragma mark Public

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (jboolean)isDisposed;

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)actual;

- (void)setFutureWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleTimer_TimerDisposable)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsSingleSingleTimer_TimerDisposable, actual_, id<IoReactivexSingleObserver>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsSingleSingleTimer_TimerDisposable_initWithIoReactivexSingleObserver_(IoReactivexInternalOperatorsSingleSingleTimer_TimerDisposable *self, id<IoReactivexSingleObserver> actual);

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleTimer_TimerDisposable *new_IoReactivexInternalOperatorsSingleSingleTimer_TimerDisposable_initWithIoReactivexSingleObserver_(id<IoReactivexSingleObserver> actual) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsSingleSingleTimer_TimerDisposable *create_IoReactivexInternalOperatorsSingleSingleTimer_TimerDisposable_initWithIoReactivexSingleObserver_(id<IoReactivexSingleObserver> actual);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsSingleSingleTimer_TimerDisposable)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsSingleSingleTimer")
