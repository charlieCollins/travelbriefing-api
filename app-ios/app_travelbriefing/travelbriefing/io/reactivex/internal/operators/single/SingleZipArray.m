//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/single/SingleZipArray.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "io/reactivex/Single.h"
#include "io/reactivex/SingleObserver.h"
#include "io/reactivex/SingleSource.h"
#include "io/reactivex/disposables/Disposable.h"
#include "io/reactivex/exceptions/Exceptions.h"
#include "io/reactivex/functions/Function.h"
#include "io/reactivex/internal/disposables/DisposableHelper.h"
#include "io/reactivex/internal/functions/ObjectHelper.h"
#include "io/reactivex/internal/operators/single/SingleMap.h"
#include "io/reactivex/internal/operators/single/SingleZipArray.h"
#include "io/reactivex/plugins/RxJavaPlugins.h"
#include "java/lang/NullPointerException.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface IoReactivexInternalOperatorsSingleSingleZipArray_1 : NSObject < IoReactivexFunctionsFunction > {
 @public
  IoReactivexInternalOperatorsSingleSingleZipArray *this$0_;
}

- (instancetype)initWithIoReactivexInternalOperatorsSingleSingleZipArray:(IoReactivexInternalOperatorsSingleSingleZipArray *)outer$;

- (id)applyWithId:(id)t;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleZipArray_1)

__attribute__((unused)) static void IoReactivexInternalOperatorsSingleSingleZipArray_1_initWithIoReactivexInternalOperatorsSingleSingleZipArray_(IoReactivexInternalOperatorsSingleSingleZipArray_1 *self, IoReactivexInternalOperatorsSingleSingleZipArray *outer$);

__attribute__((unused)) static IoReactivexInternalOperatorsSingleSingleZipArray_1 *new_IoReactivexInternalOperatorsSingleSingleZipArray_1_initWithIoReactivexInternalOperatorsSingleSingleZipArray_(IoReactivexInternalOperatorsSingleSingleZipArray *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalOperatorsSingleSingleZipArray_1 *create_IoReactivexInternalOperatorsSingleSingleZipArray_1_initWithIoReactivexInternalOperatorsSingleSingleZipArray_(IoReactivexInternalOperatorsSingleSingleZipArray *outer$);

inline jlong IoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator_get_serialVersionUID();
#define IoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator_serialVersionUID -5556924161382950569LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator, serialVersionUID, jlong)

inline jlong IoReactivexInternalOperatorsSingleSingleZipArray_ZipSingleObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsSingleSingleZipArray_ZipSingleObserver_serialVersionUID 3323743579927613702LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsSingleSingleZipArray_ZipSingleObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsSingleSingleZipArray

- (instancetype)initWithIoReactivexSingleSourceArray:(IOSObjectArray *)sources
                    withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)zipper {
  IoReactivexInternalOperatorsSingleSingleZipArray_initWithIoReactivexSingleSourceArray_withIoReactivexFunctionsFunction_(self, sources, zipper);
  return self;
}

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)observer {
  IOSObjectArray *sources = self->sources_;
  jint n = ((IOSObjectArray *) nil_chk(sources))->size_;
  if (n == 1) {
    [((id<IoReactivexSingleSource>) nil_chk(IOSObjectArray_Get(sources, 0))) subscribeWithIoReactivexSingleObserver:create_IoReactivexInternalOperatorsSingleSingleMap_MapSingleObserver_initWithIoReactivexSingleObserver_withIoReactivexFunctionsFunction_(observer, create_IoReactivexInternalOperatorsSingleSingleZipArray_1_initWithIoReactivexInternalOperatorsSingleSingleZipArray_(self))];
    return;
  }
  IoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator *parent = create_IoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator_initWithIoReactivexSingleObserver_withInt_withIoReactivexFunctionsFunction_(observer, n, zipper_);
  [((id<IoReactivexSingleObserver>) nil_chk(observer)) onSubscribeWithIoReactivexDisposablesDisposable:parent];
  for (jint i = 0; i < n; i++) {
    if ([parent isDisposed]) {
      return;
    }
    id<IoReactivexSingleSource> source = IOSObjectArray_Get(sources, i);
    if (source == nil) {
      [parent innerErrorWithNSException:create_JavaLangNullPointerException_initWithNSString_(@"One of the sources is null") withInt:i];
      return;
    }
    [source subscribeWithIoReactivexSingleObserver:IOSObjectArray_Get(nil_chk(parent->observers_), i)];
  }
}

- (void)dealloc {
  RELEASE_(sources_);
  RELEASE_(zipper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSingleSourceArray:withIoReactivexFunctionsFunction:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexSingleObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sources_", "[LIoReactivexSingleSource;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "zipper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "[LIoReactivexSingleSource;LIoReactivexFunctionsFunction;", "([Lio/reactivex/SingleSource<+TT;>;Lio/reactivex/functions/Function<-[Ljava/lang/Object;+TR;>;)V", "subscribeActual", "LIoReactivexSingleObserver;", "(Lio/reactivex/SingleObserver<-TR;>;)V", "[Lio/reactivex/SingleSource<+TT;>;", "Lio/reactivex/functions/Function<-[Ljava/lang/Object;+TR;>;", "LIoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator;LIoReactivexInternalOperatorsSingleSingleZipArray_ZipSingleObserver;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Lio/reactivex/Single<TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleZipArray = { "SingleZipArray", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, 7, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleZipArray;
}

@end

void IoReactivexInternalOperatorsSingleSingleZipArray_initWithIoReactivexSingleSourceArray_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsSingleSingleZipArray *self, IOSObjectArray *sources, id<IoReactivexFunctionsFunction> zipper) {
  IoReactivexSingle_init(self);
  JreStrongAssign(&self->sources_, sources);
  JreStrongAssign(&self->zipper_, zipper);
}

IoReactivexInternalOperatorsSingleSingleZipArray *new_IoReactivexInternalOperatorsSingleSingleZipArray_initWithIoReactivexSingleSourceArray_withIoReactivexFunctionsFunction_(IOSObjectArray *sources, id<IoReactivexFunctionsFunction> zipper) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleZipArray, initWithIoReactivexSingleSourceArray_withIoReactivexFunctionsFunction_, sources, zipper)
}

IoReactivexInternalOperatorsSingleSingleZipArray *create_IoReactivexInternalOperatorsSingleSingleZipArray_initWithIoReactivexSingleSourceArray_withIoReactivexFunctionsFunction_(IOSObjectArray *sources, id<IoReactivexFunctionsFunction> zipper) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleZipArray, initWithIoReactivexSingleSourceArray_withIoReactivexFunctionsFunction_, sources, zipper)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleZipArray)

@implementation IoReactivexInternalOperatorsSingleSingleZipArray_1

- (instancetype)initWithIoReactivexInternalOperatorsSingleSingleZipArray:(IoReactivexInternalOperatorsSingleSingleZipArray *)outer$ {
  IoReactivexInternalOperatorsSingleSingleZipArray_1_initWithIoReactivexInternalOperatorsSingleSingleZipArray_(self, outer$);
  return self;
}

- (id)applyWithId:(id)t {
  return [((id<IoReactivexFunctionsFunction>) nil_chk(this$0_->zipper_)) applyWithId:[IOSObjectArray arrayWithObjects:(id[]){ t } count:1 type:NSObject_class_()]];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, 1, 2, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsSingleSingleZipArray:);
  methods[1].selector = @selector(applyWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsSingleSingleZipArray;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "apply", "LNSObject;", "LJavaLangException;", "(TT;)TR;", "Lio/reactivex/internal/operators/single/SingleZipArray<TT;TR;>;", "LIoReactivexInternalOperatorsSingleSingleZipArray;", "subscribeActualWithIoReactivexSingleObserver:", "Ljava/lang/Object;Lio/reactivex/functions/Function<TT;TR;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleZipArray_1 = { "", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x8018, 2, 1, 5, -1, 6, 7, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleZipArray_1;
}

@end

void IoReactivexInternalOperatorsSingleSingleZipArray_1_initWithIoReactivexInternalOperatorsSingleSingleZipArray_(IoReactivexInternalOperatorsSingleSingleZipArray_1 *self, IoReactivexInternalOperatorsSingleSingleZipArray *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

IoReactivexInternalOperatorsSingleSingleZipArray_1 *new_IoReactivexInternalOperatorsSingleSingleZipArray_1_initWithIoReactivexInternalOperatorsSingleSingleZipArray_(IoReactivexInternalOperatorsSingleSingleZipArray *outer$) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleZipArray_1, initWithIoReactivexInternalOperatorsSingleSingleZipArray_, outer$)
}

IoReactivexInternalOperatorsSingleSingleZipArray_1 *create_IoReactivexInternalOperatorsSingleSingleZipArray_1_initWithIoReactivexInternalOperatorsSingleSingleZipArray_(IoReactivexInternalOperatorsSingleSingleZipArray *outer$) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleZipArray_1, initWithIoReactivexInternalOperatorsSingleSingleZipArray_, outer$)
}

@implementation IoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator

- (instancetype)initWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)observer
                                          withInt:(jint)n
                 withIoReactivexFunctionsFunction:(id<IoReactivexFunctionsFunction>)zipper {
  IoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator_initWithIoReactivexSingleObserver_withInt_withIoReactivexFunctionsFunction_(self, observer, n, zipper);
  return self;
}

- (jboolean)isDisposed {
  return [self get] <= 0;
}

- (void)dispose {
  if ([self getAndSetWithInt:0] > 0) {
    {
      IOSObjectArray *a__ = observers_;
      IoReactivexInternalOperatorsSingleSingleZipArray_ZipSingleObserver * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      IoReactivexInternalOperatorsSingleSingleZipArray_ZipSingleObserver * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        IoReactivexInternalOperatorsSingleSingleZipArray_ZipSingleObserver *d = *b__++;
        [((IoReactivexInternalOperatorsSingleSingleZipArray_ZipSingleObserver *) nil_chk(d)) dispose];
      }
    }
  }
}

- (void)innerSuccessWithId:(id)value
                   withInt:(jint)index {
  IOSObjectArray_Set(nil_chk(values_), index, value);
  if ([self decrementAndGet] == 0) {
    id v;
    @try {
      v = IoReactivexInternalFunctionsObjectHelper_requireNonNullWithId_withNSString_([((id<IoReactivexFunctionsFunction>) nil_chk(zipper_)) applyWithId:values_], @"The zipper returned a null value");
    }
    @catch (NSException *ex) {
      IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(ex);
      [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onErrorWithNSException:ex];
      return;
    }
    [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onSuccessWithId:v];
  }
}

- (void)disposeExceptWithInt:(jint)index {
  IOSObjectArray *observers = self->observers_;
  jint n = ((IOSObjectArray *) nil_chk(observers))->size_;
  for (jint i = 0; i < index; i++) {
    [((IoReactivexInternalOperatorsSingleSingleZipArray_ZipSingleObserver *) nil_chk(IOSObjectArray_Get(observers, i))) dispose];
  }
  for (jint i = index + 1; i < n; i++) {
    [((IoReactivexInternalOperatorsSingleSingleZipArray_ZipSingleObserver *) nil_chk(IOSObjectArray_Get(observers, i))) dispose];
  }
}

- (void)innerErrorWithNSException:(NSException *)ex
                          withInt:(jint)index {
  if ([self getAndSetWithInt:0] > 0) {
    [self disposeExceptWithInt:index];
    [((id<IoReactivexSingleObserver>) nil_chk(actual_)) onErrorWithNSException:ex];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_(ex);
  }
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(zipper_);
  RELEASE_(observers_);
  RELEASE_(values_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSingleObserver:withInt:withIoReactivexFunctionsFunction:);
  methods[1].selector = @selector(isDisposed);
  methods[2].selector = @selector(dispose);
  methods[3].selector = @selector(innerSuccessWithId:withInt:);
  methods[4].selector = @selector(disposeExceptWithInt:);
  methods[5].selector = @selector(innerErrorWithNSException:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexSingleObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "zipper_", "LIoReactivexFunctionsFunction;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
    { "observers_", "[LIoReactivexInternalOperatorsSingleSingleZipArray_ZipSingleObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
    { "values_", "[LNSObject;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSingleObserver;ILIoReactivexFunctionsFunction;", "(Lio/reactivex/SingleObserver<-TR;>;ILio/reactivex/functions/Function<-[Ljava/lang/Object;+TR;>;)V", "innerSuccess", "LNSObject;I", "(TT;I)V", "disposeExcept", "I", "innerError", "LNSException;I", "Lio/reactivex/SingleObserver<-TR;>;", "Lio/reactivex/functions/Function<-[Ljava/lang/Object;+TR;>;", "[Lio/reactivex/internal/operators/single/SingleZipArray$ZipSingleObserver<TT;>;", "LIoReactivexInternalOperatorsSingleSingleZipArray;", "<T:Ljava/lang/Object;R:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator = { "ZipCoordinator", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x18, 6, 5, 12, -1, -1, 13, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator;
}

@end

void IoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator_initWithIoReactivexSingleObserver_withInt_withIoReactivexFunctionsFunction_(IoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator *self, id<IoReactivexSingleObserver> observer, jint n, id<IoReactivexFunctionsFunction> zipper) {
  JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(self, n);
  JreStrongAssign(&self->actual_, observer);
  JreStrongAssign(&self->zipper_, zipper);
  IOSObjectArray *o = [IOSObjectArray arrayWithLength:n type:IoReactivexInternalOperatorsSingleSingleZipArray_ZipSingleObserver_class_()];
  for (jint i = 0; i < n; i++) {
    IOSObjectArray_SetAndConsume(o, i, new_IoReactivexInternalOperatorsSingleSingleZipArray_ZipSingleObserver_initWithIoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator_withInt_(self, i));
  }
  JreStrongAssign(&self->observers_, o);
  JreStrongAssignAndConsume(&self->values_, [IOSObjectArray newArrayWithLength:n type:NSObject_class_()]);
}

IoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator *new_IoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator_initWithIoReactivexSingleObserver_withInt_withIoReactivexFunctionsFunction_(id<IoReactivexSingleObserver> observer, jint n, id<IoReactivexFunctionsFunction> zipper) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator, initWithIoReactivexSingleObserver_withInt_withIoReactivexFunctionsFunction_, observer, n, zipper)
}

IoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator *create_IoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator_initWithIoReactivexSingleObserver_withInt_withIoReactivexFunctionsFunction_(id<IoReactivexSingleObserver> observer, jint n, id<IoReactivexFunctionsFunction> zipper) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator, initWithIoReactivexSingleObserver_withInt_withIoReactivexFunctionsFunction_, observer, n, zipper)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator)

@implementation IoReactivexInternalOperatorsSingleSingleZipArray_ZipSingleObserver

- (instancetype)initWithIoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator:(IoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator *)parent
                                                                                withInt:(jint)index {
  IoReactivexInternalOperatorsSingleSingleZipArray_ZipSingleObserver_initWithIoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator_withInt_(self, parent, index);
  return self;
}

- (void)dispose {
  IoReactivexInternalDisposablesDisposableHelper_disposeWithJavaUtilConcurrentAtomicAtomicReference_(self);
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  IoReactivexInternalDisposablesDisposableHelper_setOnceWithJavaUtilConcurrentAtomicAtomicReference_withIoReactivexDisposablesDisposable_(self, d);
}

- (void)onSuccessWithId:(id)value {
  [((IoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator *) nil_chk(parent_)) innerSuccessWithId:value withInt:index_];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((IoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator *) nil_chk(parent_)) innerErrorWithNSException:e withInt:index_];
}

- (void)dealloc {
  RELEASE_(parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator:withInt:);
  methods[1].selector = @selector(dispose);
  methods[2].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[3].selector = @selector(onSuccessWithId:);
  methods[4].selector = @selector(onErrorWithNSException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsSingleSingleZipArray_ZipSingleObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "parent_", "LIoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator;I", "(Lio/reactivex/internal/operators/single/SingleZipArray$ZipCoordinator<TT;*>;I)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onSuccess", "LNSObject;", "(TT;)V", "onError", "LNSException;", "Lio/reactivex/internal/operators/single/SingleZipArray$ZipCoordinator<TT;*>;", "LIoReactivexInternalOperatorsSingleSingleZipArray;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicReference<Lio/reactivex/disposables/Disposable;>;Lio/reactivex/SingleObserver<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleZipArray_ZipSingleObserver = { "ZipSingleObserver", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x18, 5, 3, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleZipArray_ZipSingleObserver;
}

@end

void IoReactivexInternalOperatorsSingleSingleZipArray_ZipSingleObserver_initWithIoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator_withInt_(IoReactivexInternalOperatorsSingleSingleZipArray_ZipSingleObserver *self, IoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator *parent, jint index) {
  JavaUtilConcurrentAtomicAtomicReference_init(self);
  JreStrongAssign(&self->parent_, parent);
  self->index_ = index;
}

IoReactivexInternalOperatorsSingleSingleZipArray_ZipSingleObserver *new_IoReactivexInternalOperatorsSingleSingleZipArray_ZipSingleObserver_initWithIoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator_withInt_(IoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator *parent, jint index) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleZipArray_ZipSingleObserver, initWithIoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator_withInt_, parent, index)
}

IoReactivexInternalOperatorsSingleSingleZipArray_ZipSingleObserver *create_IoReactivexInternalOperatorsSingleSingleZipArray_ZipSingleObserver_initWithIoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator_withInt_(IoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator *parent, jint index) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleZipArray_ZipSingleObserver, initWithIoReactivexInternalOperatorsSingleSingleZipArray_ZipCoordinator_withInt_, parent, index)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleZipArray_ZipSingleObserver)
