//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/single/SingleTimeout.java
//

#include "J2ObjC_source.h"
#include "io/reactivex/Scheduler.h"
#include "io/reactivex/Single.h"
#include "io/reactivex/SingleObserver.h"
#include "io/reactivex/SingleSource.h"
#include "io/reactivex/disposables/CompositeDisposable.h"
#include "io/reactivex/disposables/Disposable.h"
#include "io/reactivex/internal/operators/single/SingleTimeout.h"
#include "java/lang/Runnable.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/TimeoutException.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"

@interface IoReactivexInternalOperatorsSingleSingleTimeout_1 : NSObject < JavaLangRunnable > {
 @public
  IoReactivexInternalOperatorsSingleSingleTimeout *this$0_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$once_;
  IoReactivexDisposablesCompositeDisposable *val$set_;
  id<IoReactivexSingleObserver> val$s_;
}

- (instancetype)initWithIoReactivexInternalOperatorsSingleSingleTimeout:(IoReactivexInternalOperatorsSingleSingleTimeout *)outer$
                              withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                          withIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)capture$1
                                          withIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)capture$2;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleTimeout_1)

__attribute__((unused)) static void IoReactivexInternalOperatorsSingleSingleTimeout_1_initWithIoReactivexInternalOperatorsSingleSingleTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexSingleObserver_(IoReactivexInternalOperatorsSingleSingleTimeout_1 *self, IoReactivexInternalOperatorsSingleSingleTimeout *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, IoReactivexDisposablesCompositeDisposable *capture$1, id<IoReactivexSingleObserver> capture$2);

__attribute__((unused)) static IoReactivexInternalOperatorsSingleSingleTimeout_1 *new_IoReactivexInternalOperatorsSingleSingleTimeout_1_initWithIoReactivexInternalOperatorsSingleSingleTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexSingleObserver_(IoReactivexInternalOperatorsSingleSingleTimeout *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, IoReactivexDisposablesCompositeDisposable *capture$1, id<IoReactivexSingleObserver> capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalOperatorsSingleSingleTimeout_1 *create_IoReactivexInternalOperatorsSingleSingleTimeout_1_initWithIoReactivexInternalOperatorsSingleSingleTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexSingleObserver_(IoReactivexInternalOperatorsSingleSingleTimeout *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, IoReactivexDisposablesCompositeDisposable *capture$1, id<IoReactivexSingleObserver> capture$2);

@interface IoReactivexInternalOperatorsSingleSingleTimeout_1_1 : NSObject < IoReactivexSingleObserver > {
 @public
  IoReactivexInternalOperatorsSingleSingleTimeout_1 *this$0_;
}

- (instancetype)initWithIoReactivexInternalOperatorsSingleSingleTimeout_1:(IoReactivexInternalOperatorsSingleSingleTimeout_1 *)outer$;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleTimeout_1_1)

__attribute__((unused)) static void IoReactivexInternalOperatorsSingleSingleTimeout_1_1_initWithIoReactivexInternalOperatorsSingleSingleTimeout_1_(IoReactivexInternalOperatorsSingleSingleTimeout_1_1 *self, IoReactivexInternalOperatorsSingleSingleTimeout_1 *outer$);

__attribute__((unused)) static IoReactivexInternalOperatorsSingleSingleTimeout_1_1 *new_IoReactivexInternalOperatorsSingleSingleTimeout_1_1_initWithIoReactivexInternalOperatorsSingleSingleTimeout_1_(IoReactivexInternalOperatorsSingleSingleTimeout_1 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalOperatorsSingleSingleTimeout_1_1 *create_IoReactivexInternalOperatorsSingleSingleTimeout_1_1_initWithIoReactivexInternalOperatorsSingleSingleTimeout_1_(IoReactivexInternalOperatorsSingleSingleTimeout_1 *outer$);

@interface IoReactivexInternalOperatorsSingleSingleTimeout_2 : NSObject < IoReactivexSingleObserver > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$once_;
  IoReactivexDisposablesCompositeDisposable *val$set_;
  id<IoReactivexSingleObserver> val$s_;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                withIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)capture$1
                                withIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)capture$2;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsSingleSingleTimeout_2)

__attribute__((unused)) static void IoReactivexInternalOperatorsSingleSingleTimeout_2_initWithJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexSingleObserver_(IoReactivexInternalOperatorsSingleSingleTimeout_2 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, IoReactivexDisposablesCompositeDisposable *capture$1, id<IoReactivexSingleObserver> capture$2);

__attribute__((unused)) static IoReactivexInternalOperatorsSingleSingleTimeout_2 *new_IoReactivexInternalOperatorsSingleSingleTimeout_2_initWithJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexSingleObserver_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, IoReactivexDisposablesCompositeDisposable *capture$1, id<IoReactivexSingleObserver> capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalOperatorsSingleSingleTimeout_2 *create_IoReactivexInternalOperatorsSingleSingleTimeout_2_initWithJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexSingleObserver_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, IoReactivexDisposablesCompositeDisposable *capture$1, id<IoReactivexSingleObserver> capture$2);

@implementation IoReactivexInternalOperatorsSingleSingleTimeout

- (instancetype)initWithIoReactivexSingleSource:(id<IoReactivexSingleSource>)source
                                       withLong:(jlong)timeout
                 withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                       withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                    withIoReactivexSingleSource:(id<IoReactivexSingleSource>)other {
  IoReactivexInternalOperatorsSingleSingleTimeout_initWithIoReactivexSingleSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexSingleSource_(self, source, timeout, unit, scheduler, other);
  return self;
}

- (void)subscribeActualWithIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)s {
  IoReactivexDisposablesCompositeDisposable *set = create_IoReactivexDisposablesCompositeDisposable_init();
  [((id<IoReactivexSingleObserver>) nil_chk(s)) onSubscribeWithIoReactivexDisposablesDisposable:set];
  JavaUtilConcurrentAtomicAtomicBoolean *once = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  id<IoReactivexDisposablesDisposable> timer = [((IoReactivexScheduler *) nil_chk(scheduler_)) scheduleDirectWithJavaLangRunnable:create_IoReactivexInternalOperatorsSingleSingleTimeout_1_initWithIoReactivexInternalOperatorsSingleSingleTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexSingleObserver_(self, once, set, s) withLong:timeout_ withJavaUtilConcurrentTimeUnit:unit_];
  [set addWithIoReactivexDisposablesDisposable:timer];
  [((id<IoReactivexSingleSource>) nil_chk(source_)) subscribeWithIoReactivexSingleObserver:create_IoReactivexInternalOperatorsSingleSingleTimeout_2_initWithJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexSingleObserver_(once, set, s)];
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(unit_);
  RELEASE_(scheduler_);
  RELEASE_(other_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexSingleSource:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:withIoReactivexSingleSource:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexSingleObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexSingleSource;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "timeout_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "other_", "LIoReactivexSingleSource;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexSingleSource;JLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;LIoReactivexSingleSource;", "(Lio/reactivex/SingleSource<TT;>;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Lio/reactivex/SingleSource<+TT;>;)V", "subscribeActual", "LIoReactivexSingleObserver;", "(Lio/reactivex/SingleObserver<-TT;>;)V", "Lio/reactivex/SingleSource<TT;>;", "Lio/reactivex/SingleSource<+TT;>;", "<T:Ljava/lang/Object;>Lio/reactivex/Single<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleTimeout = { "SingleTimeout", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x11, 2, 5, -1, -1, -1, 7, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleTimeout;
}

@end

void IoReactivexInternalOperatorsSingleSingleTimeout_initWithIoReactivexSingleSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexSingleSource_(IoReactivexInternalOperatorsSingleSingleTimeout *self, id<IoReactivexSingleSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<IoReactivexSingleSource> other) {
  IoReactivexSingle_init(self);
  JreStrongAssign(&self->source_, source);
  self->timeout_ = timeout;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->scheduler_, scheduler);
  JreStrongAssign(&self->other_, other);
}

IoReactivexInternalOperatorsSingleSingleTimeout *new_IoReactivexInternalOperatorsSingleSingleTimeout_initWithIoReactivexSingleSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexSingleSource_(id<IoReactivexSingleSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<IoReactivexSingleSource> other) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleTimeout, initWithIoReactivexSingleSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexSingleSource_, source, timeout, unit, scheduler, other)
}

IoReactivexInternalOperatorsSingleSingleTimeout *create_IoReactivexInternalOperatorsSingleSingleTimeout_initWithIoReactivexSingleSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexSingleSource_(id<IoReactivexSingleSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<IoReactivexSingleSource> other) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleTimeout, initWithIoReactivexSingleSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexSingleSource_, source, timeout, unit, scheduler, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsSingleSingleTimeout)

@implementation IoReactivexInternalOperatorsSingleSingleTimeout_1

- (instancetype)initWithIoReactivexInternalOperatorsSingleSingleTimeout:(IoReactivexInternalOperatorsSingleSingleTimeout *)outer$
                              withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                          withIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)capture$1
                                          withIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)capture$2 {
  IoReactivexInternalOperatorsSingleSingleTimeout_1_initWithIoReactivexInternalOperatorsSingleSingleTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexSingleObserver_(self, outer$, capture$0, capture$1, capture$2);
  return self;
}

- (void)run {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    if (this$0_->other_ != nil) {
      [((IoReactivexDisposablesCompositeDisposable *) nil_chk(val$set_)) clear];
      [this$0_->other_ subscribeWithIoReactivexSingleObserver:create_IoReactivexInternalOperatorsSingleSingleTimeout_1_1_initWithIoReactivexInternalOperatorsSingleSingleTimeout_1_(self)];
    }
    else {
      [((IoReactivexDisposablesCompositeDisposable *) nil_chk(val$set_)) dispose];
      [((id<IoReactivexSingleObserver>) nil_chk(val$s_)) onErrorWithNSException:create_JavaUtilConcurrentTimeoutException_init()];
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$once_);
  RELEASE_(val$set_);
  RELEASE_(val$s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsSingleSingleTimeout:withJavaUtilConcurrentAtomicAtomicBoolean:withIoReactivexDisposablesCompositeDisposable:withIoReactivexSingleObserver:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsSingleSingleTimeout;", .constantValue.asLong = 0, 0x1012, -1, -1, 0, -1 },
    { "val$once_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$set_", "LIoReactivexDisposablesCompositeDisposable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$s_", "LIoReactivexSingleObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "Lio/reactivex/internal/operators/single/SingleTimeout<TT;>;", "Lio/reactivex/SingleObserver<-TT;>;", "LIoReactivexInternalOperatorsSingleSingleTimeout;", "subscribeActualWithIoReactivexSingleObserver:" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleTimeout_1 = { "", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x8018, 2, 4, 2, -1, 3, -1, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleTimeout_1;
}

@end

void IoReactivexInternalOperatorsSingleSingleTimeout_1_initWithIoReactivexInternalOperatorsSingleSingleTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexSingleObserver_(IoReactivexInternalOperatorsSingleSingleTimeout_1 *self, IoReactivexInternalOperatorsSingleSingleTimeout *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, IoReactivexDisposablesCompositeDisposable *capture$1, id<IoReactivexSingleObserver> capture$2) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$once_, capture$0);
  JreStrongAssign(&self->val$set_, capture$1);
  JreStrongAssign(&self->val$s_, capture$2);
  NSObject_init(self);
}

IoReactivexInternalOperatorsSingleSingleTimeout_1 *new_IoReactivexInternalOperatorsSingleSingleTimeout_1_initWithIoReactivexInternalOperatorsSingleSingleTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexSingleObserver_(IoReactivexInternalOperatorsSingleSingleTimeout *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, IoReactivexDisposablesCompositeDisposable *capture$1, id<IoReactivexSingleObserver> capture$2) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleTimeout_1, initWithIoReactivexInternalOperatorsSingleSingleTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexSingleObserver_, outer$, capture$0, capture$1, capture$2)
}

IoReactivexInternalOperatorsSingleSingleTimeout_1 *create_IoReactivexInternalOperatorsSingleSingleTimeout_1_initWithIoReactivexInternalOperatorsSingleSingleTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexSingleObserver_(IoReactivexInternalOperatorsSingleSingleTimeout *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, IoReactivexDisposablesCompositeDisposable *capture$1, id<IoReactivexSingleObserver> capture$2) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleTimeout_1, initWithIoReactivexInternalOperatorsSingleSingleTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexSingleObserver_, outer$, capture$0, capture$1, capture$2)
}

@implementation IoReactivexInternalOperatorsSingleSingleTimeout_1_1

- (instancetype)initWithIoReactivexInternalOperatorsSingleSingleTimeout_1:(IoReactivexInternalOperatorsSingleSingleTimeout_1 *)outer$ {
  IoReactivexInternalOperatorsSingleSingleTimeout_1_1_initWithIoReactivexInternalOperatorsSingleSingleTimeout_1_(self, outer$);
  return self;
}

- (void)onErrorWithNSException:(NSException *)e {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(this$0_->val$set_)) dispose];
  [((id<IoReactivexSingleObserver>) nil_chk(this$0_->val$s_)) onErrorWithNSException:e];
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(this$0_->val$set_)) addWithIoReactivexDisposablesDisposable:d];
}

- (void)onSuccessWithId:(id)value {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(this$0_->val$set_)) dispose];
  [((id<IoReactivexSingleObserver>) nil_chk(this$0_->val$s_)) onSuccessWithId:value];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsSingleSingleTimeout_1:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[3].selector = @selector(onSuccessWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsSingleSingleTimeout_1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onSuccess", "LNSObject;", "(TT;)V", "LIoReactivexInternalOperatorsSingleSingleTimeout_1;", "run", "Ljava/lang/Object;Lio/reactivex/SingleObserver<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleTimeout_1_1 = { "", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x8018, 4, 1, 7, -1, 8, 9, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleTimeout_1_1;
}

@end

void IoReactivexInternalOperatorsSingleSingleTimeout_1_1_initWithIoReactivexInternalOperatorsSingleSingleTimeout_1_(IoReactivexInternalOperatorsSingleSingleTimeout_1_1 *self, IoReactivexInternalOperatorsSingleSingleTimeout_1 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

IoReactivexInternalOperatorsSingleSingleTimeout_1_1 *new_IoReactivexInternalOperatorsSingleSingleTimeout_1_1_initWithIoReactivexInternalOperatorsSingleSingleTimeout_1_(IoReactivexInternalOperatorsSingleSingleTimeout_1 *outer$) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleTimeout_1_1, initWithIoReactivexInternalOperatorsSingleSingleTimeout_1_, outer$)
}

IoReactivexInternalOperatorsSingleSingleTimeout_1_1 *create_IoReactivexInternalOperatorsSingleSingleTimeout_1_1_initWithIoReactivexInternalOperatorsSingleSingleTimeout_1_(IoReactivexInternalOperatorsSingleSingleTimeout_1 *outer$) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleTimeout_1_1, initWithIoReactivexInternalOperatorsSingleSingleTimeout_1_, outer$)
}

@implementation IoReactivexInternalOperatorsSingleSingleTimeout_2

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                withIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)capture$1
                                withIoReactivexSingleObserver:(id<IoReactivexSingleObserver>)capture$2 {
  IoReactivexInternalOperatorsSingleSingleTimeout_2_initWithJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexSingleObserver_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)onErrorWithNSException:(NSException *)e {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [((IoReactivexDisposablesCompositeDisposable *) nil_chk(val$set_)) dispose];
    [((id<IoReactivexSingleObserver>) nil_chk(val$s_)) onErrorWithNSException:e];
  }
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(val$set_)) addWithIoReactivexDisposablesDisposable:d];
}

- (void)onSuccessWithId:(id)value {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [((IoReactivexDisposablesCompositeDisposable *) nil_chk(val$set_)) dispose];
    [((id<IoReactivexSingleObserver>) nil_chk(val$s_)) onSuccessWithId:value];
  }
}

- (void)dealloc {
  RELEASE_(val$once_);
  RELEASE_(val$set_);
  RELEASE_(val$s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:withIoReactivexDisposablesCompositeDisposable:withIoReactivexSingleObserver:);
  methods[1].selector = @selector(onErrorWithNSException:);
  methods[2].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[3].selector = @selector(onSuccessWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$once_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$set_", "LIoReactivexDisposablesCompositeDisposable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$s_", "LIoReactivexSingleObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onSuccess", "LNSObject;", "(TT;)V", "Lio/reactivex/SingleObserver<-TT;>;", "LIoReactivexInternalOperatorsSingleSingleTimeout;", "subscribeActualWithIoReactivexSingleObserver:", "Ljava/lang/Object;Lio/reactivex/SingleObserver<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsSingleSingleTimeout_2 = { "", "io.reactivex.internal.operators.single", ptrTable, methods, fields, 7, 0x8018, 4, 3, 8, -1, 9, 10, -1 };
  return &_IoReactivexInternalOperatorsSingleSingleTimeout_2;
}

@end

void IoReactivexInternalOperatorsSingleSingleTimeout_2_initWithJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexSingleObserver_(IoReactivexInternalOperatorsSingleSingleTimeout_2 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, IoReactivexDisposablesCompositeDisposable *capture$1, id<IoReactivexSingleObserver> capture$2) {
  JreStrongAssign(&self->val$once_, capture$0);
  JreStrongAssign(&self->val$set_, capture$1);
  JreStrongAssign(&self->val$s_, capture$2);
  NSObject_init(self);
}

IoReactivexInternalOperatorsSingleSingleTimeout_2 *new_IoReactivexInternalOperatorsSingleSingleTimeout_2_initWithJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexSingleObserver_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, IoReactivexDisposablesCompositeDisposable *capture$1, id<IoReactivexSingleObserver> capture$2) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsSingleSingleTimeout_2, initWithJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexSingleObserver_, capture$0, capture$1, capture$2)
}

IoReactivexInternalOperatorsSingleSingleTimeout_2 *create_IoReactivexInternalOperatorsSingleSingleTimeout_2_initWithJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexSingleObserver_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, IoReactivexDisposablesCompositeDisposable *capture$1, id<IoReactivexSingleObserver> capture$2) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsSingleSingleTimeout_2, initWithJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexSingleObserver_, capture$0, capture$1, capture$2)
}
