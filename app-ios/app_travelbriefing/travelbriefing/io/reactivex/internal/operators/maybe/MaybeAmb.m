//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/maybe/MaybeAmb.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "io/reactivex/Maybe.h"
#include "io/reactivex/MaybeObserver.h"
#include "io/reactivex/MaybeSource.h"
#include "io/reactivex/disposables/CompositeDisposable.h"
#include "io/reactivex/disposables/Disposable.h"
#include "io/reactivex/exceptions/Exceptions.h"
#include "io/reactivex/internal/disposables/EmptyDisposable.h"
#include "io/reactivex/internal/operators/maybe/MaybeAmb.h"
#include "io/reactivex/plugins/RxJavaPlugins.h"
#include "java/lang/Iterable.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"

@interface IoReactivexInternalOperatorsMaybeMaybeAmb () {
 @public
  IOSObjectArray *sources_;
  id<JavaLangIterable> sourcesIterable_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeAmb, sources_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeAmb, sourcesIterable_, id<JavaLangIterable>)

inline jlong IoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver_get_serialVersionUID();
#define IoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver_serialVersionUID -7044685185359438206LL
J2OBJC_STATIC_FIELD_CONSTANT(IoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver, serialVersionUID, jlong)

@implementation IoReactivexInternalOperatorsMaybeMaybeAmb

- (instancetype)initWithIoReactivexMaybeSourceArray:(IOSObjectArray *)sources
                               withJavaLangIterable:(id<JavaLangIterable>)sourcesIterable {
  IoReactivexInternalOperatorsMaybeMaybeAmb_initWithIoReactivexMaybeSourceArray_withJavaLangIterable_(self, sources, sourcesIterable);
  return self;
}

- (void)subscribeActualWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)observer {
  IOSObjectArray *sources = self->sources_;
  jint count = 0;
  if (sources == nil) {
    sources = [IOSObjectArray arrayWithLength:8 type:IoReactivexMaybeSource_class_()];
    @try {
      for (id<IoReactivexMaybeSource> __strong element in nil_chk(sourcesIterable_)) {
        if (element == nil) {
          IoReactivexInternalDisposablesEmptyDisposable_errorWithNSException_withIoReactivexMaybeObserver_(create_JavaLangNullPointerException_initWithNSString_(@"One of the sources is null"), observer);
          return;
        }
        if (count == sources->size_) {
          IOSObjectArray *b = [IOSObjectArray arrayWithLength:count + (JreRShift32(count, 2)) type:IoReactivexMaybeSource_class_()];
          JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sources, 0, b, 0, count);
          sources = b;
        }
        IOSObjectArray_Set(sources, count++, element);
      }
    }
    @catch (NSException *e) {
      IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(e);
      IoReactivexInternalDisposablesEmptyDisposable_errorWithNSException_withIoReactivexMaybeObserver_(e, observer);
      return;
    }
  }
  else {
    count = sources->size_;
  }
  IoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver *parent = create_IoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver_initWithIoReactivexMaybeObserver_(observer);
  [((id<IoReactivexMaybeObserver>) nil_chk(observer)) onSubscribeWithIoReactivexDisposablesDisposable:parent];
  for (jint i = 0; i < count; i++) {
    id<IoReactivexMaybeSource> s = IOSObjectArray_Get(sources, i);
    if ([parent isDisposed]) {
      return;
    }
    if (s == nil) {
      [parent onErrorWithNSException:create_JavaLangNullPointerException_initWithNSString_(@"One of the MaybeSources is null")];
      return;
    }
    [s subscribeWithIoReactivexMaybeObserver:parent];
  }
  if (count == 0) {
    [observer onComplete];
  }
}

- (void)dealloc {
  RELEASE_(sources_);
  RELEASE_(sourcesIterable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexMaybeSourceArray:withJavaLangIterable:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexMaybeObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sources_", "[LIoReactivexMaybeSource;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
    { "sourcesIterable_", "LJavaLangIterable;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "[LIoReactivexMaybeSource;LJavaLangIterable;", "([Lio/reactivex/MaybeSource<+TT;>;Ljava/lang/Iterable<+Lio/reactivex/MaybeSource<+TT;>;>;)V", "subscribeActual", "LIoReactivexMaybeObserver;", "(Lio/reactivex/MaybeObserver<-TT;>;)V", "[Lio/reactivex/MaybeSource<+TT;>;", "Ljava/lang/Iterable<+Lio/reactivex/MaybeSource<+TT;>;>;", "LIoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver;", "<T:Ljava/lang/Object;>Lio/reactivex/Maybe<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeAmb = { "MaybeAmb", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, 7, -1, 8, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeAmb;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeAmb_initWithIoReactivexMaybeSourceArray_withJavaLangIterable_(IoReactivexInternalOperatorsMaybeMaybeAmb *self, IOSObjectArray *sources, id<JavaLangIterable> sourcesIterable) {
  IoReactivexMaybe_init(self);
  JreStrongAssign(&self->sources_, sources);
  JreStrongAssign(&self->sourcesIterable_, sourcesIterable);
}

IoReactivexInternalOperatorsMaybeMaybeAmb *new_IoReactivexInternalOperatorsMaybeMaybeAmb_initWithIoReactivexMaybeSourceArray_withJavaLangIterable_(IOSObjectArray *sources, id<JavaLangIterable> sourcesIterable) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeAmb, initWithIoReactivexMaybeSourceArray_withJavaLangIterable_, sources, sourcesIterable)
}

IoReactivexInternalOperatorsMaybeMaybeAmb *create_IoReactivexInternalOperatorsMaybeMaybeAmb_initWithIoReactivexMaybeSourceArray_withJavaLangIterable_(IOSObjectArray *sources, id<JavaLangIterable> sourcesIterable) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeAmb, initWithIoReactivexMaybeSourceArray_withJavaLangIterable_, sources, sourcesIterable)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeAmb)

@implementation IoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver

- (instancetype)initWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)actual {
  IoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver_initWithIoReactivexMaybeObserver_(self, actual);
  return self;
}

- (void)dispose {
  if ([self compareAndSetWithBoolean:false withBoolean:true]) {
    [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) dispose];
  }
}

- (jboolean)isDisposed {
  return [self get];
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) addWithIoReactivexDisposablesDisposable:d];
}

- (void)onSuccessWithId:(id)value {
  if ([self compareAndSetWithBoolean:false withBoolean:true]) {
    [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) dispose];
    [((id<IoReactivexMaybeObserver>) nil_chk(actual_)) onSuccessWithId:value];
  }
}

- (void)onErrorWithNSException:(NSException *)e {
  if ([self compareAndSetWithBoolean:false withBoolean:true]) {
    [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) dispose];
    [((id<IoReactivexMaybeObserver>) nil_chk(actual_)) onErrorWithNSException:e];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_(e);
  }
}

- (void)onComplete {
  if ([self compareAndSetWithBoolean:false withBoolean:true]) {
    [((IoReactivexDisposablesCompositeDisposable *) nil_chk(set_)) dispose];
    [((id<IoReactivexMaybeObserver>) nil_chk(actual_)) onComplete];
  }
}

- (void)dealloc {
  RELEASE_(actual_);
  RELEASE_(set_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexMaybeObserver:);
  methods[1].selector = @selector(dispose);
  methods[2].selector = @selector(isDisposed);
  methods[3].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[4].selector = @selector(onSuccessWithId:);
  methods[5].selector = @selector(onErrorWithNSException:);
  methods[6].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = IoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "actual_", "LIoReactivexMaybeObserver;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "set_", "LIoReactivexDisposablesCompositeDisposable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexMaybeObserver;", "(Lio/reactivex/MaybeObserver<-TT;>;)V", "onSubscribe", "LIoReactivexDisposablesDisposable;", "onSuccess", "LNSObject;", "(TT;)V", "onError", "LNSException;", "Lio/reactivex/MaybeObserver<-TT;>;", "LIoReactivexInternalOperatorsMaybeMaybeAmb;", "<T:Ljava/lang/Object;>Ljava/util/concurrent/atomic/AtomicBoolean;Lio/reactivex/MaybeObserver<TT;>;Lio/reactivex/disposables/Disposable;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver = { "AmbMaybeObserver", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x18, 7, 3, 10, -1, -1, 11, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver_initWithIoReactivexMaybeObserver_(IoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver *self, id<IoReactivexMaybeObserver> actual) {
  JavaUtilConcurrentAtomicAtomicBoolean_init(self);
  JreStrongAssign(&self->actual_, actual);
  JreStrongAssignAndConsume(&self->set_, new_IoReactivexDisposablesCompositeDisposable_init());
}

IoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver *new_IoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver_initWithIoReactivexMaybeObserver_(id<IoReactivexMaybeObserver> actual) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver, initWithIoReactivexMaybeObserver_, actual)
}

IoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver *create_IoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver_initWithIoReactivexMaybeObserver_(id<IoReactivexMaybeObserver> actual) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver, initWithIoReactivexMaybeObserver_, actual)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeAmb_AmbMaybeObserver)
