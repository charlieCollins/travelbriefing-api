//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/maybe/MaybeSubscribeOn.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeSubscribeOn")
#ifdef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeSubscribeOn
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeSubscribeOn 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeSubscribeOn 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeSubscribeOn

#if !defined (IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeSubscribeOn || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeSubscribeOn))
#define IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_

#define RESTRICT_IoReactivexInternalOperatorsMaybeAbstractMaybeWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsMaybeAbstractMaybeWithUpstream 1
#include "io/reactivex/internal/operators/maybe/AbstractMaybeWithUpstream.h"

@class IoReactivexScheduler;
@protocol IoReactivexMaybeObserver;
@protocol IoReactivexMaybeSource;

@interface IoReactivexInternalOperatorsMaybeMaybeSubscribeOn : IoReactivexInternalOperatorsMaybeAbstractMaybeWithUpstream {
 @public
  IoReactivexScheduler *scheduler_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source
                      withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)observer;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeSubscribeOn)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeSubscribeOn, scheduler_, IoReactivexScheduler *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_initWithIoReactivexMaybeSource_withIoReactivexScheduler_(IoReactivexInternalOperatorsMaybeMaybeSubscribeOn *self, id<IoReactivexMaybeSource> source, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeSubscribeOn *new_IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_initWithIoReactivexMaybeSource_withIoReactivexScheduler_(id<IoReactivexMaybeSource> source, IoReactivexScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeSubscribeOn *create_IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_initWithIoReactivexMaybeSource_withIoReactivexScheduler_(id<IoReactivexMaybeSource> source, IoReactivexScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeSubscribeOn)

#endif

#if !defined (IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeTask_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeSubscribeOn || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeTask))
#define IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeTask_

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@protocol IoReactivexMaybeObserver;
@protocol IoReactivexMaybeSource;

@interface IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeTask : NSObject < JavaLangRunnable > {
 @public
  id<IoReactivexMaybeObserver> observer_;
  id<IoReactivexMaybeSource> source_;
}

#pragma mark Public

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)observer
                      withIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeTask)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeTask, observer_, id<IoReactivexMaybeObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeTask, source_, id<IoReactivexMaybeSource>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeTask_initWithIoReactivexMaybeObserver_withIoReactivexMaybeSource_(IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeTask *self, id<IoReactivexMaybeObserver> observer, id<IoReactivexMaybeSource> source);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeTask *new_IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeTask_initWithIoReactivexMaybeObserver_withIoReactivexMaybeSource_(id<IoReactivexMaybeObserver> observer, id<IoReactivexMaybeSource> source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeTask *create_IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeTask_initWithIoReactivexMaybeObserver_withIoReactivexMaybeSource_(id<IoReactivexMaybeObserver> observer, id<IoReactivexMaybeSource> source);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeTask)

#endif

#if !defined (IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeSubscribeOn || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver))
#define IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexMaybeObserver 1
#define INCLUDE_IoReactivexMaybeObserver 1
#include "io/reactivex/MaybeObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "io/reactivex/disposables/Disposable.h"

@class IoReactivexInternalDisposablesSequentialDisposable;

@interface IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexMaybeObserver, IoReactivexDisposablesDisposable > {
 @public
  IoReactivexInternalDisposablesSequentialDisposable *task_;
  id<IoReactivexMaybeObserver> actual_;
}

#pragma mark Public

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)actual;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver, task_, IoReactivexInternalDisposablesSequentialDisposable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver, actual_, id<IoReactivexMaybeObserver>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver_initWithIoReactivexMaybeObserver_(IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver *self, id<IoReactivexMaybeObserver> actual);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver *new_IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver_initWithIoReactivexMaybeObserver_(id<IoReactivexMaybeObserver> actual) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver *create_IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver_initWithIoReactivexMaybeObserver_(id<IoReactivexMaybeObserver> actual);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeSubscribeOn_SubscribeOnMaybeObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeSubscribeOn")
