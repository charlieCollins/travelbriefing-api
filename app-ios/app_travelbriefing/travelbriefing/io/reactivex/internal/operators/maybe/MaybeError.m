//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/maybe/MaybeError.java
//

#include "J2ObjC_source.h"
#include "io/reactivex/Maybe.h"
#include "io/reactivex/MaybeObserver.h"
#include "io/reactivex/disposables/Disposable.h"
#include "io/reactivex/disposables/Disposables.h"
#include "io/reactivex/internal/operators/maybe/MaybeError.h"

@implementation IoReactivexInternalOperatorsMaybeMaybeError

- (instancetype)initWithNSException:(NSException *)error {
  IoReactivexInternalOperatorsMaybeMaybeError_initWithNSException_(self, error);
  return self;
}

- (void)subscribeActualWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)observer {
  [((id<IoReactivexMaybeObserver>) nil_chk(observer)) onSubscribeWithIoReactivexDisposablesDisposable:IoReactivexDisposablesDisposables_disposed()];
  [observer onErrorWithNSException:error_];
}

- (void)dealloc {
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSException:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexMaybeObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "error_", "LNSException;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSException;", "subscribeActual", "LIoReactivexMaybeObserver;", "(Lio/reactivex/MaybeObserver<-TT;>;)V", "<T:Ljava/lang/Object;>Lio/reactivex/Maybe<TT;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsMaybeMaybeError = { "MaybeError", "io.reactivex.internal.operators.maybe", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, -1, -1, 4, -1 };
  return &_IoReactivexInternalOperatorsMaybeMaybeError;
}

@end

void IoReactivexInternalOperatorsMaybeMaybeError_initWithNSException_(IoReactivexInternalOperatorsMaybeMaybeError *self, NSException *error) {
  IoReactivexMaybe_init(self);
  JreStrongAssign(&self->error_, error);
}

IoReactivexInternalOperatorsMaybeMaybeError *new_IoReactivexInternalOperatorsMaybeMaybeError_initWithNSException_(NSException *error) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsMaybeMaybeError, initWithNSException_, error)
}

IoReactivexInternalOperatorsMaybeMaybeError *create_IoReactivexInternalOperatorsMaybeMaybeError_initWithNSException_(NSException *error) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsMaybeMaybeError, initWithNSException_, error)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsMaybeMaybeError)
