//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/maybe/MaybeDelay.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeDelay")
#ifdef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeDelay
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeDelay 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeDelay 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeDelay

#if !defined (IoReactivexInternalOperatorsMaybeMaybeDelay_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeDelay || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeDelay))
#define IoReactivexInternalOperatorsMaybeMaybeDelay_

#define RESTRICT_IoReactivexInternalOperatorsMaybeAbstractMaybeWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsMaybeAbstractMaybeWithUpstream 1
#include "io/reactivex/internal/operators/maybe/AbstractMaybeWithUpstream.h"

@class IoReactivexScheduler;
@class JavaUtilConcurrentTimeUnit;
@protocol IoReactivexMaybeObserver;
@protocol IoReactivexMaybeSource;

@interface IoReactivexInternalOperatorsMaybeMaybeDelay : IoReactivexInternalOperatorsMaybeAbstractMaybeWithUpstream {
 @public
  jlong delay_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler *scheduler_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source
                                      withLong:(jlong)delay
                withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                      withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)observer;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeDelay)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeDelay, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeDelay, scheduler_, IoReactivexScheduler *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeDelay_initWithIoReactivexMaybeSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(IoReactivexInternalOperatorsMaybeMaybeDelay *self, id<IoReactivexMaybeSource> source, jlong delay, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeDelay *new_IoReactivexInternalOperatorsMaybeMaybeDelay_initWithIoReactivexMaybeSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<IoReactivexMaybeSource> source, jlong delay, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeDelay *create_IoReactivexInternalOperatorsMaybeMaybeDelay_initWithIoReactivexMaybeSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<IoReactivexMaybeSource> source, jlong delay, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeDelay)

#endif

#if !defined (IoReactivexInternalOperatorsMaybeMaybeDelay_DelayMaybeObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeDelay || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeDelay_DelayMaybeObserver))
#define IoReactivexInternalOperatorsMaybeMaybeDelay_DelayMaybeObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexMaybeObserver 1
#define INCLUDE_IoReactivexMaybeObserver 1
#include "io/reactivex/MaybeObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "io/reactivex/disposables/Disposable.h"

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class IoReactivexScheduler;
@class JavaUtilConcurrentTimeUnit;

@interface IoReactivexInternalOperatorsMaybeMaybeDelay_DelayMaybeObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexMaybeObserver, IoReactivexDisposablesDisposable, JavaLangRunnable > {
 @public
  id<IoReactivexMaybeObserver> actual_;
  jlong delay_;
  JavaUtilConcurrentTimeUnit *unit_;
  IoReactivexScheduler *scheduler_;
  id value_DelayMaybeObserver_;
  NSException *error_;
}

#pragma mark Public

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)actual
                                        withLong:(jlong)delay
                  withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                        withIoReactivexScheduler:(IoReactivexScheduler *)scheduler;

- (void)schedule;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeDelay_DelayMaybeObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeDelay_DelayMaybeObserver, actual_, id<IoReactivexMaybeObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeDelay_DelayMaybeObserver, unit_, JavaUtilConcurrentTimeUnit *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeDelay_DelayMaybeObserver, scheduler_, IoReactivexScheduler *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeDelay_DelayMaybeObserver, value_DelayMaybeObserver_, id)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeDelay_DelayMaybeObserver, error_, NSException *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeDelay_DelayMaybeObserver_initWithIoReactivexMaybeObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(IoReactivexInternalOperatorsMaybeMaybeDelay_DelayMaybeObserver *self, id<IoReactivexMaybeObserver> actual, jlong delay, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeDelay_DelayMaybeObserver *new_IoReactivexInternalOperatorsMaybeMaybeDelay_DelayMaybeObserver_initWithIoReactivexMaybeObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<IoReactivexMaybeObserver> actual, jlong delay, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeDelay_DelayMaybeObserver *create_IoReactivexInternalOperatorsMaybeMaybeDelay_DelayMaybeObserver_initWithIoReactivexMaybeObserver_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_(id<IoReactivexMaybeObserver> actual, jlong delay, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeDelay_DelayMaybeObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeDelay")
