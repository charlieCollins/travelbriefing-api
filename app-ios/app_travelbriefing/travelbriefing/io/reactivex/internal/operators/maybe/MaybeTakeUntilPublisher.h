//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher")
#ifdef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher

#if !defined (IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher))
#define IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_

#define RESTRICT_IoReactivexInternalOperatorsMaybeAbstractMaybeWithUpstream 1
#define INCLUDE_IoReactivexInternalOperatorsMaybeAbstractMaybeWithUpstream 1
#include "io/reactivex/internal/operators/maybe/AbstractMaybeWithUpstream.h"

@protocol IoReactivexMaybeObserver;
@protocol IoReactivexMaybeSource;
@protocol OrgReactivestreamsPublisher;

@interface IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher : IoReactivexInternalOperatorsMaybeAbstractMaybeWithUpstream {
 @public
  id<OrgReactivestreamsPublisher> other_;
}

#pragma mark Public

- (instancetype)initWithIoReactivexMaybeSource:(id<IoReactivexMaybeSource>)source
               withOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)other;

#pragma mark Protected

- (void)subscribeActualWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)observer;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher, other_, id<OrgReactivestreamsPublisher>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_initWithIoReactivexMaybeSource_withOrgReactivestreamsPublisher_(IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher *self, id<IoReactivexMaybeSource> source, id<OrgReactivestreamsPublisher> other);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher *new_IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_initWithIoReactivexMaybeSource_withOrgReactivestreamsPublisher_(id<IoReactivexMaybeSource> source, id<OrgReactivestreamsPublisher> other) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher *create_IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_initWithIoReactivexMaybeSource_withOrgReactivestreamsPublisher_(id<IoReactivexMaybeSource> source, id<OrgReactivestreamsPublisher> other);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher)

#endif

#if !defined (IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver))
#define IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexMaybeObserver 1
#define INCLUDE_IoReactivexMaybeObserver 1
#include "io/reactivex/MaybeObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "io/reactivex/disposables/Disposable.h"

@class IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver_TakeUntilOtherMaybeObserver;

@interface IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexMaybeObserver, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexMaybeObserver> actual_;
  IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver_TakeUntilOtherMaybeObserver *other_;
}

#pragma mark Public

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onSuccessWithId:(id)value;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexMaybeObserver:(id<IoReactivexMaybeObserver>)actual;

- (void)otherComplete;

- (void)otherErrorWithNSException:(NSException *)e;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver, actual_, id<IoReactivexMaybeObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver, other_, IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver_TakeUntilOtherMaybeObserver *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver_initWithIoReactivexMaybeObserver_(IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver *self, id<IoReactivexMaybeObserver> actual);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver *new_IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver_initWithIoReactivexMaybeObserver_(id<IoReactivexMaybeObserver> actual) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver *create_IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver_initWithIoReactivexMaybeObserver_(id<IoReactivexMaybeObserver> actual);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver)

#endif

#if !defined (IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver_TakeUntilOtherMaybeObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher || defined(INCLUDE_IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver_TakeUntilOtherMaybeObserver))
#define IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver_TakeUntilOtherMaybeObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_OrgReactivestreamsSubscriber 1
#define INCLUDE_OrgReactivestreamsSubscriber 1
#include "org/reactivestreams/Subscriber.h"

@class IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver_TakeUntilOtherMaybeObserver : JavaUtilConcurrentAtomicAtomicReference < OrgReactivestreamsSubscriber > {
 @public
  IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver *parent_;
}

#pragma mark Public

- (id<OrgReactivestreamsSubscription>)get;

- (id<OrgReactivestreamsSubscription>)getAndSetWithId:(id<OrgReactivestreamsSubscription>)arg0;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onNextWithId:(id)value;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver:(IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver *)parent;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver_TakeUntilOtherMaybeObserver)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver_TakeUntilOtherMaybeObserver, parent_, IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver *)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver_TakeUntilOtherMaybeObserver_initWithIoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver_(IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver_TakeUntilOtherMaybeObserver *self, IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver *parent);

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver_TakeUntilOtherMaybeObserver *new_IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver_TakeUntilOtherMaybeObserver_initWithIoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver_(IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver *parent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver_TakeUntilOtherMaybeObserver *create_IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver_TakeUntilOtherMaybeObserver_initWithIoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver_(IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver *parent);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher_TakeUntilMainMaybeObserver_TakeUntilOtherMaybeObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsMaybeMaybeTakeUntilPublisher")
