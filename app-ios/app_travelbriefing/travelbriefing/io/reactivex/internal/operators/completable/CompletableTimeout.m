//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/completable/CompletableTimeout.java
//

#include "J2ObjC_source.h"
#include "io/reactivex/Completable.h"
#include "io/reactivex/CompletableObserver.h"
#include "io/reactivex/CompletableSource.h"
#include "io/reactivex/Scheduler.h"
#include "io/reactivex/disposables/CompositeDisposable.h"
#include "io/reactivex/disposables/Disposable.h"
#include "io/reactivex/internal/operators/completable/CompletableTimeout.h"
#include "io/reactivex/plugins/RxJavaPlugins.h"
#include "java/lang/Runnable.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/TimeoutException.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"

@interface IoReactivexInternalOperatorsCompletableCompletableTimeout_1 : NSObject < JavaLangRunnable > {
 @public
  IoReactivexInternalOperatorsCompletableCompletableTimeout *this$0_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$once_;
  IoReactivexDisposablesCompositeDisposable *val$set_;
  id<IoReactivexCompletableObserver> val$s_;
}

- (instancetype)initWithIoReactivexInternalOperatorsCompletableCompletableTimeout:(IoReactivexInternalOperatorsCompletableCompletableTimeout *)outer$
                                        withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                                    withIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)capture$1
                                               withIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)capture$2;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsCompletableCompletableTimeout_1)

__attribute__((unused)) static void IoReactivexInternalOperatorsCompletableCompletableTimeout_1_initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexCompletableObserver_(IoReactivexInternalOperatorsCompletableCompletableTimeout_1 *self, IoReactivexInternalOperatorsCompletableCompletableTimeout *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, IoReactivexDisposablesCompositeDisposable *capture$1, id<IoReactivexCompletableObserver> capture$2);

__attribute__((unused)) static IoReactivexInternalOperatorsCompletableCompletableTimeout_1 *new_IoReactivexInternalOperatorsCompletableCompletableTimeout_1_initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexCompletableObserver_(IoReactivexInternalOperatorsCompletableCompletableTimeout *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, IoReactivexDisposablesCompositeDisposable *capture$1, id<IoReactivexCompletableObserver> capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalOperatorsCompletableCompletableTimeout_1 *create_IoReactivexInternalOperatorsCompletableCompletableTimeout_1_initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexCompletableObserver_(IoReactivexInternalOperatorsCompletableCompletableTimeout *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, IoReactivexDisposablesCompositeDisposable *capture$1, id<IoReactivexCompletableObserver> capture$2);

@interface IoReactivexInternalOperatorsCompletableCompletableTimeout_1_1 : NSObject < IoReactivexCompletableObserver > {
 @public
  IoReactivexInternalOperatorsCompletableCompletableTimeout_1 *this$0_;
}

- (instancetype)initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_1:(IoReactivexInternalOperatorsCompletableCompletableTimeout_1 *)outer$;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onComplete;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsCompletableCompletableTimeout_1_1)

__attribute__((unused)) static void IoReactivexInternalOperatorsCompletableCompletableTimeout_1_1_initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_1_(IoReactivexInternalOperatorsCompletableCompletableTimeout_1_1 *self, IoReactivexInternalOperatorsCompletableCompletableTimeout_1 *outer$);

__attribute__((unused)) static IoReactivexInternalOperatorsCompletableCompletableTimeout_1_1 *new_IoReactivexInternalOperatorsCompletableCompletableTimeout_1_1_initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_1_(IoReactivexInternalOperatorsCompletableCompletableTimeout_1 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalOperatorsCompletableCompletableTimeout_1_1 *create_IoReactivexInternalOperatorsCompletableCompletableTimeout_1_1_initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_1_(IoReactivexInternalOperatorsCompletableCompletableTimeout_1 *outer$);

@interface IoReactivexInternalOperatorsCompletableCompletableTimeout_2 : NSObject < IoReactivexCompletableObserver > {
 @public
  IoReactivexDisposablesCompositeDisposable *val$set_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$once_;
  id<IoReactivexCompletableObserver> val$s_;
}

- (instancetype)initWithIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)capture$0
                        withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1
                               withIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)capture$2;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onComplete;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsCompletableCompletableTimeout_2)

__attribute__((unused)) static void IoReactivexInternalOperatorsCompletableCompletableTimeout_2_initWithIoReactivexDisposablesCompositeDisposable_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexCompletableObserver_(IoReactivexInternalOperatorsCompletableCompletableTimeout_2 *self, IoReactivexDisposablesCompositeDisposable *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, id<IoReactivexCompletableObserver> capture$2);

__attribute__((unused)) static IoReactivexInternalOperatorsCompletableCompletableTimeout_2 *new_IoReactivexInternalOperatorsCompletableCompletableTimeout_2_initWithIoReactivexDisposablesCompositeDisposable_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexCompletableObserver_(IoReactivexDisposablesCompositeDisposable *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, id<IoReactivexCompletableObserver> capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalOperatorsCompletableCompletableTimeout_2 *create_IoReactivexInternalOperatorsCompletableCompletableTimeout_2_initWithIoReactivexDisposablesCompositeDisposable_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexCompletableObserver_(IoReactivexDisposablesCompositeDisposable *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, id<IoReactivexCompletableObserver> capture$2);

@implementation IoReactivexInternalOperatorsCompletableCompletableTimeout

- (instancetype)initWithIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)source
                                            withLong:(jlong)timeout
                      withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)unit
                            withIoReactivexScheduler:(IoReactivexScheduler *)scheduler
                    withIoReactivexCompletableSource:(id<IoReactivexCompletableSource>)other {
  IoReactivexInternalOperatorsCompletableCompletableTimeout_initWithIoReactivexCompletableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexCompletableSource_(self, source, timeout, unit, scheduler, other);
  return self;
}

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s {
  IoReactivexDisposablesCompositeDisposable *set = create_IoReactivexDisposablesCompositeDisposable_init();
  [((id<IoReactivexCompletableObserver>) nil_chk(s)) onSubscribeWithIoReactivexDisposablesDisposable:set];
  JavaUtilConcurrentAtomicAtomicBoolean *once = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  id<IoReactivexDisposablesDisposable> timer = [((IoReactivexScheduler *) nil_chk(scheduler_)) scheduleDirectWithJavaLangRunnable:create_IoReactivexInternalOperatorsCompletableCompletableTimeout_1_initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexCompletableObserver_(self, once, set, s) withLong:timeout_ withJavaUtilConcurrentTimeUnit:unit_];
  [set addWithIoReactivexDisposablesDisposable:timer];
  [((id<IoReactivexCompletableSource>) nil_chk(source_)) subscribeWithIoReactivexCompletableObserver:create_IoReactivexInternalOperatorsCompletableCompletableTimeout_2_initWithIoReactivexDisposablesCompositeDisposable_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexCompletableObserver_(set, once, s)];
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(unit_);
  RELEASE_(scheduler_);
  RELEASE_(other_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexCompletableSource:withLong:withJavaUtilConcurrentTimeUnit:withIoReactivexScheduler:withIoReactivexCompletableSource:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexCompletableObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "source_", "LIoReactivexCompletableSource;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "timeout_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "unit_", "LJavaUtilConcurrentTimeUnit;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "scheduler_", "LIoReactivexScheduler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "other_", "LIoReactivexCompletableSource;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexCompletableSource;JLJavaUtilConcurrentTimeUnit;LIoReactivexScheduler;LIoReactivexCompletableSource;", "subscribeActual", "LIoReactivexCompletableObserver;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableTimeout = { "CompletableTimeout", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x11, 2, 5, -1, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableTimeout;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableTimeout_initWithIoReactivexCompletableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexCompletableSource_(IoReactivexInternalOperatorsCompletableCompletableTimeout *self, id<IoReactivexCompletableSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<IoReactivexCompletableSource> other) {
  IoReactivexCompletable_init(self);
  JreStrongAssign(&self->source_, source);
  self->timeout_ = timeout;
  JreStrongAssign(&self->unit_, unit);
  JreStrongAssign(&self->scheduler_, scheduler);
  JreStrongAssign(&self->other_, other);
}

IoReactivexInternalOperatorsCompletableCompletableTimeout *new_IoReactivexInternalOperatorsCompletableCompletableTimeout_initWithIoReactivexCompletableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexCompletableSource_(id<IoReactivexCompletableSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<IoReactivexCompletableSource> other) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableTimeout, initWithIoReactivexCompletableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexCompletableSource_, source, timeout, unit, scheduler, other)
}

IoReactivexInternalOperatorsCompletableCompletableTimeout *create_IoReactivexInternalOperatorsCompletableCompletableTimeout_initWithIoReactivexCompletableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexCompletableSource_(id<IoReactivexCompletableSource> source, jlong timeout, JavaUtilConcurrentTimeUnit *unit, IoReactivexScheduler *scheduler, id<IoReactivexCompletableSource> other) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableTimeout, initWithIoReactivexCompletableSource_withLong_withJavaUtilConcurrentTimeUnit_withIoReactivexScheduler_withIoReactivexCompletableSource_, source, timeout, unit, scheduler, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableTimeout)

@implementation IoReactivexInternalOperatorsCompletableCompletableTimeout_1

- (instancetype)initWithIoReactivexInternalOperatorsCompletableCompletableTimeout:(IoReactivexInternalOperatorsCompletableCompletableTimeout *)outer$
                                        withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                                    withIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)capture$1
                                               withIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)capture$2 {
  IoReactivexInternalOperatorsCompletableCompletableTimeout_1_initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexCompletableObserver_(self, outer$, capture$0, capture$1, capture$2);
  return self;
}

- (void)run {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [((IoReactivexDisposablesCompositeDisposable *) nil_chk(val$set_)) clear];
    if (this$0_->other_ == nil) {
      [((id<IoReactivexCompletableObserver>) nil_chk(val$s_)) onErrorWithNSException:create_JavaUtilConcurrentTimeoutException_init()];
    }
    else {
      [this$0_->other_ subscribeWithIoReactivexCompletableObserver:create_IoReactivexInternalOperatorsCompletableCompletableTimeout_1_1_initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_1_(self)];
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$once_);
  RELEASE_(val$set_);
  RELEASE_(val$s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsCompletableCompletableTimeout:withJavaUtilConcurrentAtomicAtomicBoolean:withIoReactivexDisposablesCompositeDisposable:withIoReactivexCompletableObserver:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsCompletableCompletableTimeout;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$once_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$set_", "LIoReactivexDisposablesCompositeDisposable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$s_", "LIoReactivexCompletableObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoReactivexInternalOperatorsCompletableCompletableTimeout;", "subscribeActualWithIoReactivexCompletableObserver:" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableTimeout_1 = { "", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x8018, 2, 4, 0, -1, 1, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableTimeout_1;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableTimeout_1_initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexCompletableObserver_(IoReactivexInternalOperatorsCompletableCompletableTimeout_1 *self, IoReactivexInternalOperatorsCompletableCompletableTimeout *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, IoReactivexDisposablesCompositeDisposable *capture$1, id<IoReactivexCompletableObserver> capture$2) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$once_, capture$0);
  JreStrongAssign(&self->val$set_, capture$1);
  JreStrongAssign(&self->val$s_, capture$2);
  NSObject_init(self);
}

IoReactivexInternalOperatorsCompletableCompletableTimeout_1 *new_IoReactivexInternalOperatorsCompletableCompletableTimeout_1_initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexCompletableObserver_(IoReactivexInternalOperatorsCompletableCompletableTimeout *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, IoReactivexDisposablesCompositeDisposable *capture$1, id<IoReactivexCompletableObserver> capture$2) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableTimeout_1, initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexCompletableObserver_, outer$, capture$0, capture$1, capture$2)
}

IoReactivexInternalOperatorsCompletableCompletableTimeout_1 *create_IoReactivexInternalOperatorsCompletableCompletableTimeout_1_initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexCompletableObserver_(IoReactivexInternalOperatorsCompletableCompletableTimeout *outer$, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, IoReactivexDisposablesCompositeDisposable *capture$1, id<IoReactivexCompletableObserver> capture$2) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableTimeout_1, initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexCompletableObserver_, outer$, capture$0, capture$1, capture$2)
}

@implementation IoReactivexInternalOperatorsCompletableCompletableTimeout_1_1

- (instancetype)initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_1:(IoReactivexInternalOperatorsCompletableCompletableTimeout_1 *)outer$ {
  IoReactivexInternalOperatorsCompletableCompletableTimeout_1_1_initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_1_(self, outer$);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(this$0_->val$set_)) addWithIoReactivexDisposablesDisposable:d];
}

- (void)onErrorWithNSException:(NSException *)e {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(this$0_->val$set_)) dispose];
  [((id<IoReactivexCompletableObserver>) nil_chk(this$0_->val$s_)) onErrorWithNSException:e];
}

- (void)onComplete {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(this$0_->val$set_)) dispose];
  [((id<IoReactivexCompletableObserver>) nil_chk(this$0_->val$s_)) onComplete];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_1:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoReactivexInternalOperatorsCompletableCompletableTimeout_1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LIoReactivexDisposablesDisposable;", "onError", "LNSException;", "LIoReactivexInternalOperatorsCompletableCompletableTimeout_1;", "run" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableTimeout_1_1 = { "", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x8018, 4, 1, 4, -1, 5, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableTimeout_1_1;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableTimeout_1_1_initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_1_(IoReactivexInternalOperatorsCompletableCompletableTimeout_1_1 *self, IoReactivexInternalOperatorsCompletableCompletableTimeout_1 *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

IoReactivexInternalOperatorsCompletableCompletableTimeout_1_1 *new_IoReactivexInternalOperatorsCompletableCompletableTimeout_1_1_initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_1_(IoReactivexInternalOperatorsCompletableCompletableTimeout_1 *outer$) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableTimeout_1_1, initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_1_, outer$)
}

IoReactivexInternalOperatorsCompletableCompletableTimeout_1_1 *create_IoReactivexInternalOperatorsCompletableCompletableTimeout_1_1_initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_1_(IoReactivexInternalOperatorsCompletableCompletableTimeout_1 *outer$) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableTimeout_1_1, initWithIoReactivexInternalOperatorsCompletableCompletableTimeout_1_, outer$)
}

@implementation IoReactivexInternalOperatorsCompletableCompletableTimeout_2

- (instancetype)initWithIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)capture$0
                        withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$1
                               withIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)capture$2 {
  IoReactivexInternalOperatorsCompletableCompletableTimeout_2_initWithIoReactivexDisposablesCompositeDisposable_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexCompletableObserver_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(val$set_)) addWithIoReactivexDisposablesDisposable:d];
}

- (void)onErrorWithNSException:(NSException *)e {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [((IoReactivexDisposablesCompositeDisposable *) nil_chk(val$set_)) dispose];
    [((id<IoReactivexCompletableObserver>) nil_chk(val$s_)) onErrorWithNSException:e];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_(e);
  }
}

- (void)onComplete {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [((IoReactivexDisposablesCompositeDisposable *) nil_chk(val$set_)) dispose];
    [((id<IoReactivexCompletableObserver>) nil_chk(val$s_)) onComplete];
  }
}

- (void)dealloc {
  RELEASE_(val$set_);
  RELEASE_(val$once_);
  RELEASE_(val$s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexDisposablesCompositeDisposable:withJavaUtilConcurrentAtomicAtomicBoolean:withIoReactivexCompletableObserver:);
  methods[1].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$set_", "LIoReactivexDisposablesCompositeDisposable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$once_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$s_", "LIoReactivexCompletableObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onSubscribe", "LIoReactivexDisposablesDisposable;", "onError", "LNSException;", "LIoReactivexInternalOperatorsCompletableCompletableTimeout;", "subscribeActualWithIoReactivexCompletableObserver:" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableTimeout_2 = { "", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x8018, 4, 3, 4, -1, 5, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableTimeout_2;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableTimeout_2_initWithIoReactivexDisposablesCompositeDisposable_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexCompletableObserver_(IoReactivexInternalOperatorsCompletableCompletableTimeout_2 *self, IoReactivexDisposablesCompositeDisposable *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, id<IoReactivexCompletableObserver> capture$2) {
  JreStrongAssign(&self->val$set_, capture$0);
  JreStrongAssign(&self->val$once_, capture$1);
  JreStrongAssign(&self->val$s_, capture$2);
  NSObject_init(self);
}

IoReactivexInternalOperatorsCompletableCompletableTimeout_2 *new_IoReactivexInternalOperatorsCompletableCompletableTimeout_2_initWithIoReactivexDisposablesCompositeDisposable_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexCompletableObserver_(IoReactivexDisposablesCompositeDisposable *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, id<IoReactivexCompletableObserver> capture$2) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableTimeout_2, initWithIoReactivexDisposablesCompositeDisposable_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexCompletableObserver_, capture$0, capture$1, capture$2)
}

IoReactivexInternalOperatorsCompletableCompletableTimeout_2 *create_IoReactivexInternalOperatorsCompletableCompletableTimeout_2_initWithIoReactivexDisposablesCompositeDisposable_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexCompletableObserver_(IoReactivexDisposablesCompositeDisposable *capture$0, JavaUtilConcurrentAtomicAtomicBoolean *capture$1, id<IoReactivexCompletableObserver> capture$2) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableTimeout_2, initWithIoReactivexDisposablesCompositeDisposable_withJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexCompletableObserver_, capture$0, capture$1, capture$2)
}
