//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/completable/CompletableMerge.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableMerge")
#ifdef RESTRICT_IoReactivexInternalOperatorsCompletableCompletableMerge
#define INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableMerge 0
#else
#define INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableMerge 1
#endif
#undef RESTRICT_IoReactivexInternalOperatorsCompletableCompletableMerge

#if !defined (IoReactivexInternalOperatorsCompletableCompletableMerge_) && (INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableMerge || defined(INCLUDE_IoReactivexInternalOperatorsCompletableCompletableMerge))
#define IoReactivexInternalOperatorsCompletableCompletableMerge_

#define RESTRICT_IoReactivexCompletable 1
#define INCLUDE_IoReactivexCompletable 1
#include "io/reactivex/Completable.h"

@protocol IoReactivexCompletableObserver;
@protocol OrgReactivestreamsPublisher;

@interface IoReactivexInternalOperatorsCompletableCompletableMerge : IoReactivexCompletable {
 @public
  id<OrgReactivestreamsPublisher> source_;
  jint maxConcurrency_;
  jboolean delayErrors_;
}

#pragma mark Public

- (instancetype)initWithOrgReactivestreamsPublisher:(id<OrgReactivestreamsPublisher>)source
                                            withInt:(jint)maxConcurrency
                                        withBoolean:(jboolean)delayErrors;

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsCompletableCompletableMerge)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableMerge, source_, id<OrgReactivestreamsPublisher>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsCompletableCompletableMerge_initWithOrgReactivestreamsPublisher_withInt_withBoolean_(IoReactivexInternalOperatorsCompletableCompletableMerge *self, id<OrgReactivestreamsPublisher> source, jint maxConcurrency, jboolean delayErrors);

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableMerge *new_IoReactivexInternalOperatorsCompletableCompletableMerge_initWithOrgReactivestreamsPublisher_withInt_withBoolean_(id<OrgReactivestreamsPublisher> source, jint maxConcurrency, jboolean delayErrors) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableMerge *create_IoReactivexInternalOperatorsCompletableCompletableMerge_initWithOrgReactivestreamsPublisher_withInt_withBoolean_(id<OrgReactivestreamsPublisher> source, jint maxConcurrency, jboolean delayErrors);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsCompletableCompletableMerge)

#endif

#if !defined (IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber_) && (INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableMerge || defined(INCLUDE_IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber))
#define IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicInteger 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicInteger 1
#include "java/util/concurrent/atomic/AtomicInteger.h"

#define RESTRICT_OrgReactivestreamsSubscriber 1
#define INCLUDE_OrgReactivestreamsSubscriber 1
#include "org/reactivestreams/Subscriber.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "io/reactivex/disposables/Disposable.h"

@class IoReactivexDisposablesCompositeDisposable;
@class IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber_MergeInnerObserver;
@class IoReactivexInternalUtilAtomicThrowable;
@protocol IoReactivexCompletableObserver;
@protocol IoReactivexCompletableSource;
@protocol OrgReactivestreamsSubscription;

@interface IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber : JavaUtilConcurrentAtomicAtomicInteger < OrgReactivestreamsSubscriber, IoReactivexDisposablesDisposable > {
 @public
  id<IoReactivexCompletableObserver> actual_;
  jint maxConcurrency_;
  jboolean delayErrors_;
  IoReactivexInternalUtilAtomicThrowable *error_;
  IoReactivexDisposablesCompositeDisposable *set_;
  id<OrgReactivestreamsSubscription> s_;
}

#pragma mark Public

- (void)dispose;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)t;

- (void)onNextWithId:(id<IoReactivexCompletableSource>)t;

- (void)onSubscribeWithOrgReactivestreamsSubscription:(id<OrgReactivestreamsSubscription>)s;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)actual
                                               withInt:(jint)maxConcurrency
                                           withBoolean:(jboolean)delayErrors;

- (void)innerCompleteWithIoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber_MergeInnerObserver:(IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber_MergeInnerObserver *)inner;

- (void)innerErrorWithIoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber_MergeInnerObserver:(IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber_MergeInnerObserver *)inner
                                                                                                            withNSException:(NSException *)t;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber)

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber, actual_, id<IoReactivexCompletableObserver>)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber, error_, IoReactivexInternalUtilAtomicThrowable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber, set_, IoReactivexDisposablesCompositeDisposable *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber, s_, id<OrgReactivestreamsSubscription>)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber_initWithIoReactivexCompletableObserver_withInt_withBoolean_(IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber *self, id<IoReactivexCompletableObserver> actual, jint maxConcurrency, jboolean delayErrors);

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber *new_IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber_initWithIoReactivexCompletableObserver_withInt_withBoolean_(id<IoReactivexCompletableObserver> actual, jint maxConcurrency, jboolean delayErrors) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber *create_IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber_initWithIoReactivexCompletableObserver_withInt_withBoolean_(id<IoReactivexCompletableObserver> actual, jint maxConcurrency, jboolean delayErrors);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber)

#endif

#if !defined (IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber_MergeInnerObserver_) && (INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableMerge || defined(INCLUDE_IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber_MergeInnerObserver))
#define IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber_MergeInnerObserver_

#define RESTRICT_JavaUtilConcurrentAtomicAtomicReference 1
#define INCLUDE_JavaUtilConcurrentAtomicAtomicReference 1
#include "java/util/concurrent/atomic/AtomicReference.h"

#define RESTRICT_IoReactivexCompletableObserver 1
#define INCLUDE_IoReactivexCompletableObserver 1
#include "io/reactivex/CompletableObserver.h"

#define RESTRICT_IoReactivexDisposablesDisposable 1
#define INCLUDE_IoReactivexDisposablesDisposable 1
#include "io/reactivex/disposables/Disposable.h"

@class IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber;

@interface IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber_MergeInnerObserver : JavaUtilConcurrentAtomicAtomicReference < IoReactivexCompletableObserver, IoReactivexDisposablesDisposable >

#pragma mark Public

- (void)dispose;

- (id<IoReactivexDisposablesDisposable>)get;

- (id<IoReactivexDisposablesDisposable>)getAndSetWithId:(id<IoReactivexDisposablesDisposable>)arg0;

- (jboolean)isDisposed;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

#pragma mark Package-Private

- (instancetype)initWithIoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber:(IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber_MergeInnerObserver)

FOUNDATION_EXPORT void IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber_MergeInnerObserver_initWithIoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber_(IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber_MergeInnerObserver *self, IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber *outer$);

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber_MergeInnerObserver *new_IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber_MergeInnerObserver_initWithIoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber_(IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber_MergeInnerObserver *create_IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber_MergeInnerObserver_initWithIoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber_(IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber *outer$);

J2OBJC_TYPE_LITERAL_HEADER(IoReactivexInternalOperatorsCompletableCompletableMerge_CompletableMergeSubscriber_MergeInnerObserver)

#endif

#pragma pop_macro("INCLUDE_ALL_IoReactivexInternalOperatorsCompletableCompletableMerge")
