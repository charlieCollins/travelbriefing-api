//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/io/reactivex/internal/operators/completable/CompletableAmb.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "io/reactivex/Completable.h"
#include "io/reactivex/CompletableObserver.h"
#include "io/reactivex/CompletableSource.h"
#include "io/reactivex/disposables/CompositeDisposable.h"
#include "io/reactivex/disposables/Disposable.h"
#include "io/reactivex/exceptions/Exceptions.h"
#include "io/reactivex/internal/disposables/EmptyDisposable.h"
#include "io/reactivex/internal/operators/completable/CompletableAmb.h"
#include "io/reactivex/plugins/RxJavaPlugins.h"
#include "java/lang/Iterable.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"

@interface IoReactivexInternalOperatorsCompletableCompletableAmb () {
 @public
  IOSObjectArray *sources_;
  id<JavaLangIterable> sourcesIterable_;
}

@end

J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableAmb, sources_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(IoReactivexInternalOperatorsCompletableCompletableAmb, sourcesIterable_, id<JavaLangIterable>)

@interface IoReactivexInternalOperatorsCompletableCompletableAmb_1 : NSObject < IoReactivexCompletableObserver > {
 @public
  JavaUtilConcurrentAtomicAtomicBoolean *val$once_;
  IoReactivexDisposablesCompositeDisposable *val$set_;
  id<IoReactivexCompletableObserver> val$s_;
}

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                withIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)capture$1
                           withIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)capture$2;

- (void)onComplete;

- (void)onErrorWithNSException:(NSException *)e;

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d;

@end

J2OBJC_EMPTY_STATIC_INIT(IoReactivexInternalOperatorsCompletableCompletableAmb_1)

__attribute__((unused)) static void IoReactivexInternalOperatorsCompletableCompletableAmb_1_initWithJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexCompletableObserver_(IoReactivexInternalOperatorsCompletableCompletableAmb_1 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, IoReactivexDisposablesCompositeDisposable *capture$1, id<IoReactivexCompletableObserver> capture$2);

__attribute__((unused)) static IoReactivexInternalOperatorsCompletableCompletableAmb_1 *new_IoReactivexInternalOperatorsCompletableCompletableAmb_1_initWithJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexCompletableObserver_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, IoReactivexDisposablesCompositeDisposable *capture$1, id<IoReactivexCompletableObserver> capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoReactivexInternalOperatorsCompletableCompletableAmb_1 *create_IoReactivexInternalOperatorsCompletableCompletableAmb_1_initWithJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexCompletableObserver_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, IoReactivexDisposablesCompositeDisposable *capture$1, id<IoReactivexCompletableObserver> capture$2);

@implementation IoReactivexInternalOperatorsCompletableCompletableAmb

- (instancetype)initWithIoReactivexCompletableSourceArray:(IOSObjectArray *)sources
                                     withJavaLangIterable:(id<JavaLangIterable>)sourcesIterable {
  IoReactivexInternalOperatorsCompletableCompletableAmb_initWithIoReactivexCompletableSourceArray_withJavaLangIterable_(self, sources, sourcesIterable);
  return self;
}

- (void)subscribeActualWithIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)s {
  IOSObjectArray *sources = self->sources_;
  jint count = 0;
  if (sources == nil) {
    sources = [IOSObjectArray arrayWithLength:8 type:IoReactivexCompletableSource_class_()];
    @try {
      for (id<IoReactivexCompletableSource> __strong element in nil_chk(sourcesIterable_)) {
        if (element == nil) {
          IoReactivexInternalDisposablesEmptyDisposable_errorWithNSException_withIoReactivexCompletableObserver_(create_JavaLangNullPointerException_initWithNSString_(@"One of the sources is null"), s);
          return;
        }
        if (count == sources->size_) {
          IOSObjectArray *b = [IOSObjectArray arrayWithLength:count + (JreRShift32(count, 2)) type:IoReactivexCompletableSource_class_()];
          JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sources, 0, b, 0, count);
          sources = b;
        }
        IOSObjectArray_Set(sources, count++, element);
      }
      ;
    }
    @catch (NSException *e) {
      IoReactivexExceptionsExceptions_throwIfFatalWithNSException_(e);
      IoReactivexInternalDisposablesEmptyDisposable_errorWithNSException_withIoReactivexCompletableObserver_(e, s);
      return;
    }
  }
  else {
    count = sources->size_;
  }
  IoReactivexDisposablesCompositeDisposable *set = create_IoReactivexDisposablesCompositeDisposable_init();
  [((id<IoReactivexCompletableObserver>) nil_chk(s)) onSubscribeWithIoReactivexDisposablesDisposable:set];
  JavaUtilConcurrentAtomicAtomicBoolean *once = create_JavaUtilConcurrentAtomicAtomicBoolean_init();
  id<IoReactivexCompletableObserver> inner = create_IoReactivexInternalOperatorsCompletableCompletableAmb_1_initWithJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexCompletableObserver_(once, set, s);
  for (jint i = 0; i < count; i++) {
    id<IoReactivexCompletableSource> c = IOSObjectArray_Get(sources, i);
    if ([set isDisposed]) {
      return;
    }
    if (c == nil) {
      JavaLangNullPointerException *npe = create_JavaLangNullPointerException_initWithNSString_(@"One of the sources is null");
      if ([once compareAndSetWithBoolean:false withBoolean:true]) {
        [set dispose];
        [s onErrorWithNSException:npe];
      }
      else {
        IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_(npe);
      }
      return;
    }
    [c subscribeWithIoReactivexCompletableObserver:inner];
  }
  if (count == 0) {
    [s onComplete];
  }
}

- (void)dealloc {
  RELEASE_(sources_);
  RELEASE_(sourcesIterable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIoReactivexCompletableSourceArray:withJavaLangIterable:);
  methods[1].selector = @selector(subscribeActualWithIoReactivexCompletableObserver:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sources_", "[LIoReactivexCompletableSource;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "sourcesIterable_", "LJavaLangIterable;", .constantValue.asLong = 0, 0x12, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "[LIoReactivexCompletableSource;LJavaLangIterable;", "([Lio/reactivex/CompletableSource;Ljava/lang/Iterable<+Lio/reactivex/CompletableSource;>;)V", "subscribeActual", "LIoReactivexCompletableObserver;", "Ljava/lang/Iterable<+Lio/reactivex/CompletableSource;>;" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableAmb = { "CompletableAmb", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, -1, -1, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableAmb;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableAmb_initWithIoReactivexCompletableSourceArray_withJavaLangIterable_(IoReactivexInternalOperatorsCompletableCompletableAmb *self, IOSObjectArray *sources, id<JavaLangIterable> sourcesIterable) {
  IoReactivexCompletable_init(self);
  JreStrongAssign(&self->sources_, sources);
  JreStrongAssign(&self->sourcesIterable_, sourcesIterable);
}

IoReactivexInternalOperatorsCompletableCompletableAmb *new_IoReactivexInternalOperatorsCompletableCompletableAmb_initWithIoReactivexCompletableSourceArray_withJavaLangIterable_(IOSObjectArray *sources, id<JavaLangIterable> sourcesIterable) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableAmb, initWithIoReactivexCompletableSourceArray_withJavaLangIterable_, sources, sourcesIterable)
}

IoReactivexInternalOperatorsCompletableCompletableAmb *create_IoReactivexInternalOperatorsCompletableCompletableAmb_initWithIoReactivexCompletableSourceArray_withJavaLangIterable_(IOSObjectArray *sources, id<JavaLangIterable> sourcesIterable) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableAmb, initWithIoReactivexCompletableSourceArray_withJavaLangIterable_, sources, sourcesIterable)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoReactivexInternalOperatorsCompletableCompletableAmb)

@implementation IoReactivexInternalOperatorsCompletableCompletableAmb_1

- (instancetype)initWithJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$0
                withIoReactivexDisposablesCompositeDisposable:(IoReactivexDisposablesCompositeDisposable *)capture$1
                           withIoReactivexCompletableObserver:(id<IoReactivexCompletableObserver>)capture$2 {
  IoReactivexInternalOperatorsCompletableCompletableAmb_1_initWithJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexCompletableObserver_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)onComplete {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [((IoReactivexDisposablesCompositeDisposable *) nil_chk(val$set_)) dispose];
    [((id<IoReactivexCompletableObserver>) nil_chk(val$s_)) onComplete];
  }
}

- (void)onErrorWithNSException:(NSException *)e {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(val$once_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [((IoReactivexDisposablesCompositeDisposable *) nil_chk(val$set_)) dispose];
    [((id<IoReactivexCompletableObserver>) nil_chk(val$s_)) onErrorWithNSException:e];
  }
  else {
    IoReactivexPluginsRxJavaPlugins_onErrorWithNSException_(e);
  }
}

- (void)onSubscribeWithIoReactivexDisposablesDisposable:(id<IoReactivexDisposablesDisposable>)d {
  [((IoReactivexDisposablesCompositeDisposable *) nil_chk(val$set_)) addWithIoReactivexDisposablesDisposable:d];
}

- (void)dealloc {
  RELEASE_(val$once_);
  RELEASE_(val$set_);
  RELEASE_(val$s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentAtomicAtomicBoolean:withIoReactivexDisposablesCompositeDisposable:withIoReactivexCompletableObserver:);
  methods[1].selector = @selector(onComplete);
  methods[2].selector = @selector(onErrorWithNSException:);
  methods[3].selector = @selector(onSubscribeWithIoReactivexDisposablesDisposable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$once_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$set_", "LIoReactivexDisposablesCompositeDisposable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$s_", "LIoReactivexCompletableObserver;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onError", "LNSException;", "onSubscribe", "LIoReactivexDisposablesDisposable;", "LIoReactivexInternalOperatorsCompletableCompletableAmb;", "subscribeActualWithIoReactivexCompletableObserver:" };
  static const J2ObjcClassInfo _IoReactivexInternalOperatorsCompletableCompletableAmb_1 = { "", "io.reactivex.internal.operators.completable", ptrTable, methods, fields, 7, 0x8018, 4, 3, 4, -1, 5, -1, -1 };
  return &_IoReactivexInternalOperatorsCompletableCompletableAmb_1;
}

@end

void IoReactivexInternalOperatorsCompletableCompletableAmb_1_initWithJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexCompletableObserver_(IoReactivexInternalOperatorsCompletableCompletableAmb_1 *self, JavaUtilConcurrentAtomicAtomicBoolean *capture$0, IoReactivexDisposablesCompositeDisposable *capture$1, id<IoReactivexCompletableObserver> capture$2) {
  JreStrongAssign(&self->val$once_, capture$0);
  JreStrongAssign(&self->val$set_, capture$1);
  JreStrongAssign(&self->val$s_, capture$2);
  NSObject_init(self);
}

IoReactivexInternalOperatorsCompletableCompletableAmb_1 *new_IoReactivexInternalOperatorsCompletableCompletableAmb_1_initWithJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexCompletableObserver_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, IoReactivexDisposablesCompositeDisposable *capture$1, id<IoReactivexCompletableObserver> capture$2) {
  J2OBJC_NEW_IMPL(IoReactivexInternalOperatorsCompletableCompletableAmb_1, initWithJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexCompletableObserver_, capture$0, capture$1, capture$2)
}

IoReactivexInternalOperatorsCompletableCompletableAmb_1 *create_IoReactivexInternalOperatorsCompletableCompletableAmb_1_initWithJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexCompletableObserver_(JavaUtilConcurrentAtomicAtomicBoolean *capture$0, IoReactivexDisposablesCompositeDisposable *capture$1, id<IoReactivexCompletableObserver> capture$2) {
  J2OBJC_CREATE_IMPL(IoReactivexInternalOperatorsCompletableCompletableAmb_1, initWithJavaUtilConcurrentAtomicAtomicBoolean_withIoReactivexDisposablesCompositeDisposable_withIoReactivexCompletableObserver_, capture$0, capture$1, capture$2)
}
