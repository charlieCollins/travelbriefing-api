//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/com/google/common/io/CharSink.java
//

#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/io/CharSink.h"
#include "com/google/common/io/CharStreams.h"
#include "com/google/common/io/Closer.h"
#include "java/io/BufferedWriter.h"
#include "java/io/Writer.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Iterable.h"
#include "java/lang/Readable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"

@implementation ComGoogleCommonIoCharSink

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComGoogleCommonIoCharSink_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaIoWriter *)openStream {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaIoWriter *)openBufferedStream {
  JavaIoWriter *writer = [self openStream];
  return ([writer isKindOfClass:[JavaIoBufferedWriter class]]) ? (JavaIoBufferedWriter *) cast_chk(writer, [JavaIoBufferedWriter class]) : create_JavaIoBufferedWriter_initWithJavaIoWriter_(writer);
}

- (void)writeWithJavaLangCharSequence:(id<JavaLangCharSequence>)charSequence {
  ComGoogleCommonBasePreconditions_checkNotNullWithId_(charSequence);
  ComGoogleCommonIoCloser *closer = ComGoogleCommonIoCloser_create();
  @try {
    JavaIoWriter *out = ((JavaIoWriter *) [((ComGoogleCommonIoCloser *) nil_chk(closer)) register__WithJavaIoCloseable:[self openStream]]);
    [((JavaIoWriter *) nil_chk(out)) appendWithJavaLangCharSequence:charSequence];
    [out flush];
  }
  @catch (NSException *e) {
    @throw [closer rethrowWithNSException:e];
  }
  @finally {
    [closer close];
  }
}

- (void)writeLinesWithJavaLangIterable:(id<JavaLangIterable>)lines {
  [self writeLinesWithJavaLangIterable:lines withNSString:JavaLangSystem_getPropertyWithNSString_(@"line.separator")];
}

- (void)writeLinesWithJavaLangIterable:(id<JavaLangIterable>)lines
                          withNSString:(NSString *)lineSeparator {
  ComGoogleCommonBasePreconditions_checkNotNullWithId_(lines);
  ComGoogleCommonBasePreconditions_checkNotNullWithId_(lineSeparator);
  ComGoogleCommonIoCloser *closer = ComGoogleCommonIoCloser_create();
  @try {
    JavaIoWriter *out = ((JavaIoWriter *) [((ComGoogleCommonIoCloser *) nil_chk(closer)) register__WithJavaIoCloseable:[self openBufferedStream]]);
    for (id<JavaLangCharSequence> __strong line in nil_chk(lines)) {
      [((JavaIoWriter *) nil_chk([((JavaIoWriter *) nil_chk(out)) appendWithJavaLangCharSequence:line])) appendWithJavaLangCharSequence:lineSeparator];
    }
    [((JavaIoWriter *) nil_chk(out)) flush];
  }
  @catch (NSException *e) {
    @throw [closer rethrowWithNSException:e];
  }
  @finally {
    [closer close];
  }
}

- (jlong)writeFromWithJavaLangReadable:(id<JavaLangReadable>)readable {
  ComGoogleCommonBasePreconditions_checkNotNullWithId_(readable);
  ComGoogleCommonIoCloser *closer = ComGoogleCommonIoCloser_create();
  @try {
    JavaIoWriter *out = ((JavaIoWriter *) [((ComGoogleCommonIoCloser *) nil_chk(closer)) register__WithJavaIoCloseable:[self openStream]]);
    jlong written = ComGoogleCommonIoCharStreams_copy__WithJavaLangReadable_withJavaLangAppendable_(readable, out);
    [((JavaIoWriter *) nil_chk(out)) flush];
    return written;
  }
  @catch (NSException *e) {
    @throw [closer rethrowWithNSException:e];
  }
  @finally {
    [closer close];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoWriter;", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "LJavaIoWriter;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 0, 5, -1, -1 },
    { NULL, "V", 0x1, 3, 6, 0, 7, -1, -1 },
    { NULL, "J", 0x1, 8, 9, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(openStream);
  methods[2].selector = @selector(openBufferedStream);
  methods[3].selector = @selector(writeWithJavaLangCharSequence:);
  methods[4].selector = @selector(writeLinesWithJavaLangIterable:);
  methods[5].selector = @selector(writeLinesWithJavaLangIterable:withNSString:);
  methods[6].selector = @selector(writeFromWithJavaLangReadable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaIoIOException;", "write", "LJavaLangCharSequence;", "writeLines", "LJavaLangIterable;", "(Ljava/lang/Iterable<+Ljava/lang/CharSequence;>;)V", "LJavaLangIterable;LNSString;", "(Ljava/lang/Iterable<+Ljava/lang/CharSequence;>;Ljava/lang/String;)V", "writeFrom", "LJavaLangReadable;" };
  static const J2ObjcClassInfo _ComGoogleCommonIoCharSink = { "CharSink", "com.google.common.io", ptrTable, methods, NULL, 7, 0x401, 7, 0, -1, -1, -1, -1, -1 };
  return &_ComGoogleCommonIoCharSink;
}

@end

void ComGoogleCommonIoCharSink_init(ComGoogleCommonIoCharSink *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonIoCharSink)
