//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/rules/TemporaryFolder.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalStateException.h"
#include "org/junit/rules/ExternalResource.h"
#include "org/junit/rules/TemporaryFolder.h"

@interface OrgJunitRulesTemporaryFolder () {
 @public
  JavaIoFile *parentFolder_;
  JavaIoFile *folder_;
}

- (void)validateFolderNameWithNSString:(NSString *)folderName;

- (jboolean)isLastElementInArrayWithInt:(jint)index
                      withNSStringArray:(IOSObjectArray *)array;

- (JavaIoFile *)createTemporaryFolderInWithJavaIoFile:(JavaIoFile *)parentFolder;

- (void)recursiveDeleteWithJavaIoFile:(JavaIoFile *)file;

@end

J2OBJC_FIELD_SETTER(OrgJunitRulesTemporaryFolder, parentFolder_, JavaIoFile *)
J2OBJC_FIELD_SETTER(OrgJunitRulesTemporaryFolder, folder_, JavaIoFile *)

__attribute__((unused)) static void OrgJunitRulesTemporaryFolder_validateFolderNameWithNSString_(OrgJunitRulesTemporaryFolder *self, NSString *folderName);

__attribute__((unused)) static jboolean OrgJunitRulesTemporaryFolder_isLastElementInArrayWithInt_withNSStringArray_(OrgJunitRulesTemporaryFolder *self, jint index, IOSObjectArray *array);

__attribute__((unused)) static JavaIoFile *OrgJunitRulesTemporaryFolder_createTemporaryFolderInWithJavaIoFile_(OrgJunitRulesTemporaryFolder *self, JavaIoFile *parentFolder);

__attribute__((unused)) static void OrgJunitRulesTemporaryFolder_recursiveDeleteWithJavaIoFile_(OrgJunitRulesTemporaryFolder *self, JavaIoFile *file);

@implementation OrgJunitRulesTemporaryFolder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJunitRulesTemporaryFolder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaIoFile:(JavaIoFile *)parentFolder {
  OrgJunitRulesTemporaryFolder_initWithJavaIoFile_(self, parentFolder);
  return self;
}

- (void)before {
  [self create];
}

- (void)after {
  [self delete__];
}

- (void)create {
  JreStrongAssign(&folder_, OrgJunitRulesTemporaryFolder_createTemporaryFolderInWithJavaIoFile_(self, parentFolder_));
}

- (JavaIoFile *)newFileWithNSString:(NSString *)fileName {
  JavaIoFile *file = create_JavaIoFile_initWithJavaIoFile_withNSString_([self getRoot], fileName);
  if (![file createNewFile]) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$$", @"a file with the name '", fileName, @"' already exists in the test folder"));
  }
  return file;
}

- (JavaIoFile *)newFile {
  return JavaIoFile_createTempFileWithNSString_withNSString_withJavaIoFile_(@"junit", nil, [self getRoot]);
}

- (JavaIoFile *)newFolderWithNSString:(NSString *)folder {
  return [self newFolderWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ folder } count:1 type:NSString_class_()]];
}

- (JavaIoFile *)newFolderWithNSStringArray:(IOSObjectArray *)folderNames {
  JavaIoFile *file = [self getRoot];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(folderNames))->size_; i++) {
    NSString *folderName = IOSObjectArray_Get(folderNames, i);
    OrgJunitRulesTemporaryFolder_validateFolderNameWithNSString_(self, folderName);
    file = create_JavaIoFile_initWithJavaIoFile_withNSString_(file, folderName);
    if (![file mkdir] && OrgJunitRulesTemporaryFolder_isLastElementInArrayWithInt_withNSStringArray_(self, i, folderNames)) {
      @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$$", @"a folder with the name '", folderName, @"' already exists"));
    }
  }
  return file;
}

- (void)validateFolderNameWithNSString:(NSString *)folderName {
  OrgJunitRulesTemporaryFolder_validateFolderNameWithNSString_(self, folderName);
}

- (jboolean)isLastElementInArrayWithInt:(jint)index
                      withNSStringArray:(IOSObjectArray *)array {
  return OrgJunitRulesTemporaryFolder_isLastElementInArrayWithInt_withNSStringArray_(self, index, array);
}

- (JavaIoFile *)newFolder {
  return OrgJunitRulesTemporaryFolder_createTemporaryFolderInWithJavaIoFile_(self, [self getRoot]);
}

- (JavaIoFile *)createTemporaryFolderInWithJavaIoFile:(JavaIoFile *)parentFolder {
  return OrgJunitRulesTemporaryFolder_createTemporaryFolderInWithJavaIoFile_(self, parentFolder);
}

- (JavaIoFile *)getRoot {
  if (folder_ == nil) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"the temporary folder has not yet been created");
  }
  return folder_;
}

- (void)delete__ {
  if (folder_ != nil) {
    OrgJunitRulesTemporaryFolder_recursiveDeleteWithJavaIoFile_(self, folder_);
  }
}

- (void)recursiveDeleteWithJavaIoFile:(JavaIoFile *)file {
  OrgJunitRulesTemporaryFolder_recursiveDeleteWithJavaIoFile_(self, file);
}

- (void)dealloc {
  RELEASE_(parentFolder_);
  RELEASE_(folder_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, 3, 4, 2, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, 5, 4, 2, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x81, 5, 6, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 4, 2, -1, -1, -1 },
    { NULL, "Z", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x2, 10, 0, 2, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaIoFile:);
  methods[2].selector = @selector(before);
  methods[3].selector = @selector(after);
  methods[4].selector = @selector(create);
  methods[5].selector = @selector(newFileWithNSString:);
  methods[6].selector = @selector(newFile);
  methods[7].selector = @selector(newFolderWithNSString:);
  methods[8].selector = @selector(newFolderWithNSStringArray:);
  methods[9].selector = @selector(validateFolderNameWithNSString:);
  methods[10].selector = @selector(isLastElementInArrayWithInt:withNSStringArray:);
  methods[11].selector = @selector(newFolder);
  methods[12].selector = @selector(createTemporaryFolderInWithJavaIoFile:);
  methods[13].selector = @selector(getRoot);
  methods[14].selector = @selector(delete__);
  methods[15].selector = @selector(recursiveDeleteWithJavaIoFile:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parentFolder_", "LJavaIoFile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "folder_", "LJavaIoFile;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoFile;", "LNSException;", "LJavaIoIOException;", "newFile", "LNSString;", "newFolder", "[LNSString;", "validateFolderName", "isLastElementInArray", "I[LNSString;", "createTemporaryFolderIn", "delete", "recursiveDelete" };
  static const J2ObjcClassInfo _OrgJunitRulesTemporaryFolder = { "TemporaryFolder", "org.junit.rules", ptrTable, methods, fields, 7, 0x1, 16, 2, -1, -1, -1, -1, -1 };
  return &_OrgJunitRulesTemporaryFolder;
}

@end

void OrgJunitRulesTemporaryFolder_init(OrgJunitRulesTemporaryFolder *self) {
  OrgJunitRulesTemporaryFolder_initWithJavaIoFile_(self, nil);
}

OrgJunitRulesTemporaryFolder *new_OrgJunitRulesTemporaryFolder_init() {
  J2OBJC_NEW_IMPL(OrgJunitRulesTemporaryFolder, init)
}

OrgJunitRulesTemporaryFolder *create_OrgJunitRulesTemporaryFolder_init() {
  J2OBJC_CREATE_IMPL(OrgJunitRulesTemporaryFolder, init)
}

void OrgJunitRulesTemporaryFolder_initWithJavaIoFile_(OrgJunitRulesTemporaryFolder *self, JavaIoFile *parentFolder) {
  OrgJunitRulesExternalResource_init(self);
  JreStrongAssign(&self->parentFolder_, parentFolder);
}

OrgJunitRulesTemporaryFolder *new_OrgJunitRulesTemporaryFolder_initWithJavaIoFile_(JavaIoFile *parentFolder) {
  J2OBJC_NEW_IMPL(OrgJunitRulesTemporaryFolder, initWithJavaIoFile_, parentFolder)
}

OrgJunitRulesTemporaryFolder *create_OrgJunitRulesTemporaryFolder_initWithJavaIoFile_(JavaIoFile *parentFolder) {
  J2OBJC_CREATE_IMPL(OrgJunitRulesTemporaryFolder, initWithJavaIoFile_, parentFolder)
}

void OrgJunitRulesTemporaryFolder_validateFolderNameWithNSString_(OrgJunitRulesTemporaryFolder *self, NSString *folderName) {
  JavaIoFile *tempFile = create_JavaIoFile_initWithNSString_(folderName);
  if ([tempFile getParent] != nil) {
    NSString *errorMsg = @"Folder name cannot consist of multiple path components separated by a file separator. Please use newFolder('MyParentFolder','MyFolder') to create hierarchies of folders";
    @throw create_JavaIoIOException_initWithNSString_(errorMsg);
  }
}

jboolean OrgJunitRulesTemporaryFolder_isLastElementInArrayWithInt_withNSStringArray_(OrgJunitRulesTemporaryFolder *self, jint index, IOSObjectArray *array) {
  return index == ((IOSObjectArray *) nil_chk(array))->size_ - 1;
}

JavaIoFile *OrgJunitRulesTemporaryFolder_createTemporaryFolderInWithJavaIoFile_(OrgJunitRulesTemporaryFolder *self, JavaIoFile *parentFolder) {
  JavaIoFile *createdFolder = JavaIoFile_createTempFileWithNSString_withNSString_withJavaIoFile_(@"junit", @"", parentFolder);
  [((JavaIoFile *) nil_chk(createdFolder)) delete__];
  [createdFolder mkdir];
  return createdFolder;
}

void OrgJunitRulesTemporaryFolder_recursiveDeleteWithJavaIoFile_(OrgJunitRulesTemporaryFolder *self, JavaIoFile *file) {
  IOSObjectArray *files = [((JavaIoFile *) nil_chk(file)) listFiles];
  if (files != nil) {
    {
      IOSObjectArray *a__ = files;
      JavaIoFile * const *b__ = a__->buffer_;
      JavaIoFile * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaIoFile *each = *b__++;
        OrgJunitRulesTemporaryFolder_recursiveDeleteWithJavaIoFile_(self, each);
      }
    }
  }
  [file delete__];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitRulesTemporaryFolder)
