//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/rules/ErrorCollector.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJunitRulesErrorCollector")
#ifdef RESTRICT_OrgJunitRulesErrorCollector
#define INCLUDE_ALL_OrgJunitRulesErrorCollector 0
#else
#define INCLUDE_ALL_OrgJunitRulesErrorCollector 1
#endif
#undef RESTRICT_OrgJunitRulesErrorCollector

#if !defined (OrgJunitRulesErrorCollector_) && (INCLUDE_ALL_OrgJunitRulesErrorCollector || defined(INCLUDE_OrgJunitRulesErrorCollector))
#define OrgJunitRulesErrorCollector_

#define RESTRICT_OrgJunitRulesVerifier 1
#define INCLUDE_OrgJunitRulesVerifier 1
#include "org/junit/rules/Verifier.h"

@protocol JavaUtilConcurrentCallable;
@protocol OrgHamcrestMatcher;

@interface OrgJunitRulesErrorCollector : OrgJunitRulesVerifier

#pragma mark Public

- (instancetype)init;

- (void)addErrorWithNSException:(NSException *)error;

- (id)checkSucceedsWithJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)callable;

- (void)checkThatWithNSString:(NSString *)reason
                       withId:(id)value
       withOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher;

- (void)checkThatWithId:(id)value
 withOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher;

#pragma mark Protected

- (void)verify;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitRulesErrorCollector)

FOUNDATION_EXPORT void OrgJunitRulesErrorCollector_init(OrgJunitRulesErrorCollector *self);

FOUNDATION_EXPORT OrgJunitRulesErrorCollector *new_OrgJunitRulesErrorCollector_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJunitRulesErrorCollector *create_OrgJunitRulesErrorCollector_init();

J2OBJC_TYPE_LITERAL_HEADER(OrgJunitRulesErrorCollector)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgJunitRulesErrorCollector")
