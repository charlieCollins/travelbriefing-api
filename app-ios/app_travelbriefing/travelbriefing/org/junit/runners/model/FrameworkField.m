//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/runners/model/FrameworkField.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Field.h"
#include "org/junit/runners/model/FrameworkField.h"
#include "org/junit/runners/model/FrameworkMember.h"

@interface OrgJunitRunnersModelFrameworkField () {
 @public
  JavaLangReflectField *field_;
}

@end

J2OBJC_FIELD_SETTER(OrgJunitRunnersModelFrameworkField, field_, JavaLangReflectField *)

@implementation OrgJunitRunnersModelFrameworkField

- (instancetype)initWithJavaLangReflectField:(JavaLangReflectField *)field {
  OrgJunitRunnersModelFrameworkField_initWithJavaLangReflectField_(self, field);
  return self;
}

- (NSString *)getName {
  return [((JavaLangReflectField *) nil_chk([self getField])) getName];
}

- (IOSObjectArray *)getAnnotations {
  return [((JavaLangReflectField *) nil_chk(field_)) getAnnotations];
}

- (id<JavaLangAnnotationAnnotation>)getAnnotationWithIOSClass:(IOSClass *)annotationType {
  return [((JavaLangReflectField *) nil_chk(field_)) getAnnotationWithIOSClass:annotationType];
}

- (jboolean)isShadowedByWithOrgJunitRunnersModelFrameworkMember:(OrgJunitRunnersModelFrameworkField *)otherMember {
  return [((NSString *) nil_chk([((OrgJunitRunnersModelFrameworkField *) nil_chk(otherMember)) getName])) isEqual:[self getName]];
}

- (jint)getModifiers {
  return [((JavaLangReflectField *) nil_chk(field_)) getModifiers];
}

- (JavaLangReflectField *)getField {
  return field_;
}

- (IOSClass *)getType {
  return [((JavaLangReflectField *) nil_chk(field_)) getType];
}

- (IOSClass *)getDeclaringClass {
  return [((JavaLangReflectField *) nil_chk(field_)) getDeclaringClass];
}

- (id)getWithId:(id)target {
  return [((JavaLangReflectField *) nil_chk(field_)) getWithId:target];
}

- (NSString *)description {
  return [((JavaLangReflectField *) nil_chk(field_)) description];
}

- (void)dealloc {
  RELEASE_(field_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaLangAnnotationAnnotation;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangAnnotationAnnotation;", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectField;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "LNSObject;", 0x1, 7, 8, 9, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangReflectField:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(getAnnotations);
  methods[3].selector = @selector(getAnnotationWithIOSClass:);
  methods[4].selector = @selector(isShadowedByWithOrgJunitRunnersModelFrameworkMember:);
  methods[5].selector = @selector(getModifiers);
  methods[6].selector = @selector(getField);
  methods[7].selector = @selector(getType);
  methods[8].selector = @selector(getDeclaringClass);
  methods[9].selector = @selector(getWithId:);
  methods[10].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "field_", "LJavaLangReflectField;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangReflectField;", "getAnnotation", "LIOSClass;", "<T::Ljava/lang/annotation/Annotation;>(Ljava/lang/Class<TT;>;)TT;", "isShadowedBy", "LOrgJunitRunnersModelFrameworkField;", "()Ljava/lang/Class<*>;", "get", "LNSObject;", "LJavaLangIllegalArgumentException;LJavaLangIllegalAccessException;", "toString", "Lorg/junit/runners/model/FrameworkMember<Lorg/junit/runners/model/FrameworkField;>;" };
  static const J2ObjcClassInfo _OrgJunitRunnersModelFrameworkField = { "FrameworkField", "org.junit.runners.model", ptrTable, methods, fields, 7, 0x1, 11, 1, -1, -1, -1, 11, -1 };
  return &_OrgJunitRunnersModelFrameworkField;
}

@end

void OrgJunitRunnersModelFrameworkField_initWithJavaLangReflectField_(OrgJunitRunnersModelFrameworkField *self, JavaLangReflectField *field) {
  OrgJunitRunnersModelFrameworkMember_init(self);
  if (field == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"FrameworkField cannot be created without an underlying field.");
  }
  JreStrongAssign(&self->field_, field);
}

OrgJunitRunnersModelFrameworkField *new_OrgJunitRunnersModelFrameworkField_initWithJavaLangReflectField_(JavaLangReflectField *field) {
  J2OBJC_NEW_IMPL(OrgJunitRunnersModelFrameworkField, initWithJavaLangReflectField_, field)
}

OrgJunitRunnersModelFrameworkField *create_OrgJunitRunnersModelFrameworkField_initWithJavaLangReflectField_(JavaLangReflectField *field) {
  J2OBJC_CREATE_IMPL(OrgJunitRunnersModelFrameworkField, initWithJavaLangReflectField_, field)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitRunnersModelFrameworkField)
