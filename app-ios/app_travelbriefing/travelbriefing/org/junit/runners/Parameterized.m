//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/runners/Parameterized.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/annotation/ElementType.h"
#include "java/lang/annotation/Inherited.h"
#include "java/lang/annotation/Retention.h"
#include "java/lang/annotation/RetentionPolicy.h"
#include "java/lang/annotation/Target.h"
#include "java/text/MessageFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "org/junit/runner/Runner.h"
#include "org/junit/runners/Parameterized.h"
#include "org/junit/runners/Suite.h"
#include "org/junit/runners/model/FrameworkMethod.h"
#include "org/junit/runners/model/TestClass.h"
#include "org/junit/runners/parameterized/BlockJUnit4ClassRunnerWithParametersFactory.h"
#include "org/junit/runners/parameterized/ParametersRunnerFactory.h"
#include "org/junit/runners/parameterized/TestWithParameters.h"

@interface OrgJunitRunnersParameterized () {
 @public
  id<JavaUtilList> runners_Parameterized_;
}

- (id<OrgJunitRunnersParameterizedParametersRunnerFactory>)getParametersRunnerFactoryWithIOSClass:(IOSClass *)klass;

- (OrgJunitRunnersParameterizedTestWithParameters *)createTestWithNotNormalizedParametersWithNSString:(NSString *)pattern
                                                                                              withInt:(jint)index
                                                                                               withId:(id)parametersOrSingleParameter;

- (id<JavaLangIterable>)allParameters;

- (OrgJunitRunnersModelFrameworkMethod *)getParametersMethod;

- (id<JavaUtilList>)createRunnersForParametersWithJavaLangIterable:(id<JavaLangIterable>)allParameters
                                                      withNSString:(NSString *)namePattern
           withOrgJunitRunnersParameterizedParametersRunnerFactory:(id<OrgJunitRunnersParameterizedParametersRunnerFactory>)runnerFactory;

- (id<JavaUtilList>)createTestsForParametersWithJavaLangIterable:(id<JavaLangIterable>)allParameters
                                                    withNSString:(NSString *)namePattern;

- (JavaLangException *)parametersMethodReturnedWrongType;

+ (OrgJunitRunnersParameterizedTestWithParameters *)createTestWithParametersWithOrgJunitRunnersModelTestClass:(OrgJunitRunnersModelTestClass *)testClass
                                                                                                 withNSString:(NSString *)pattern
                                                                                                      withInt:(jint)index
                                                                                            withNSObjectArray:(IOSObjectArray *)parameters;

@end

J2OBJC_FIELD_SETTER(OrgJunitRunnersParameterized, runners_Parameterized_, id<JavaUtilList>)

inline id<OrgJunitRunnersParameterizedParametersRunnerFactory> OrgJunitRunnersParameterized_get_DEFAULT_FACTORY();
static id<OrgJunitRunnersParameterizedParametersRunnerFactory> OrgJunitRunnersParameterized_DEFAULT_FACTORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJunitRunnersParameterized, DEFAULT_FACTORY, id<OrgJunitRunnersParameterizedParametersRunnerFactory>)

inline id<JavaUtilList> OrgJunitRunnersParameterized_get_NO_RUNNERS();
static id<JavaUtilList> OrgJunitRunnersParameterized_NO_RUNNERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJunitRunnersParameterized, NO_RUNNERS, id<JavaUtilList>)

__attribute__((unused)) static id<OrgJunitRunnersParameterizedParametersRunnerFactory> OrgJunitRunnersParameterized_getParametersRunnerFactoryWithIOSClass_(OrgJunitRunnersParameterized *self, IOSClass *klass);

__attribute__((unused)) static OrgJunitRunnersParameterizedTestWithParameters *OrgJunitRunnersParameterized_createTestWithNotNormalizedParametersWithNSString_withInt_withId_(OrgJunitRunnersParameterized *self, NSString *pattern, jint index, id parametersOrSingleParameter);

__attribute__((unused)) static id<JavaLangIterable> OrgJunitRunnersParameterized_allParameters(OrgJunitRunnersParameterized *self);

__attribute__((unused)) static OrgJunitRunnersModelFrameworkMethod *OrgJunitRunnersParameterized_getParametersMethod(OrgJunitRunnersParameterized *self);

__attribute__((unused)) static id<JavaUtilList> OrgJunitRunnersParameterized_createRunnersForParametersWithJavaLangIterable_withNSString_withOrgJunitRunnersParameterizedParametersRunnerFactory_(OrgJunitRunnersParameterized *self, id<JavaLangIterable> allParameters, NSString *namePattern, id<OrgJunitRunnersParameterizedParametersRunnerFactory> runnerFactory);

__attribute__((unused)) static id<JavaUtilList> OrgJunitRunnersParameterized_createTestsForParametersWithJavaLangIterable_withNSString_(OrgJunitRunnersParameterized *self, id<JavaLangIterable> allParameters, NSString *namePattern);

__attribute__((unused)) static JavaLangException *OrgJunitRunnersParameterized_parametersMethodReturnedWrongType(OrgJunitRunnersParameterized *self);

__attribute__((unused)) static OrgJunitRunnersParameterizedTestWithParameters *OrgJunitRunnersParameterized_createTestWithParametersWithOrgJunitRunnersModelTestClass_withNSString_withInt_withNSObjectArray_(OrgJunitRunnersModelTestClass *testClass, NSString *pattern, jint index, IOSObjectArray *parameters);

__attribute__((unused)) static IOSObjectArray *OrgJunitRunnersParameterized_Parameters__Annotations$0();

__attribute__((unused)) static IOSObjectArray *OrgJunitRunnersParameterized_Parameter__Annotations$0();

__attribute__((unused)) static IOSObjectArray *OrgJunitRunnersParameterized_UseParametersRunnerFactory__Annotations$0();

J2OBJC_INITIALIZED_DEFN(OrgJunitRunnersParameterized)

@implementation OrgJunitRunnersParameterized

- (instancetype)initWithIOSClass:(IOSClass *)klass {
  OrgJunitRunnersParameterized_initWithIOSClass_(self, klass);
  return self;
}

- (id<OrgJunitRunnersParameterizedParametersRunnerFactory>)getParametersRunnerFactoryWithIOSClass:(IOSClass *)klass {
  return OrgJunitRunnersParameterized_getParametersRunnerFactoryWithIOSClass_(self, klass);
}

- (id<JavaUtilList>)getChildren {
  return runners_Parameterized_;
}

- (OrgJunitRunnersParameterizedTestWithParameters *)createTestWithNotNormalizedParametersWithNSString:(NSString *)pattern
                                                                                              withInt:(jint)index
                                                                                               withId:(id)parametersOrSingleParameter {
  return OrgJunitRunnersParameterized_createTestWithNotNormalizedParametersWithNSString_withInt_withId_(self, pattern, index, parametersOrSingleParameter);
}

- (id<JavaLangIterable>)allParameters {
  return OrgJunitRunnersParameterized_allParameters(self);
}

- (OrgJunitRunnersModelFrameworkMethod *)getParametersMethod {
  return OrgJunitRunnersParameterized_getParametersMethod(self);
}

- (id<JavaUtilList>)createRunnersForParametersWithJavaLangIterable:(id<JavaLangIterable>)allParameters
                                                      withNSString:(NSString *)namePattern
           withOrgJunitRunnersParameterizedParametersRunnerFactory:(id<OrgJunitRunnersParameterizedParametersRunnerFactory>)runnerFactory {
  return OrgJunitRunnersParameterized_createRunnersForParametersWithJavaLangIterable_withNSString_withOrgJunitRunnersParameterizedParametersRunnerFactory_(self, allParameters, namePattern, runnerFactory);
}

- (id<JavaUtilList>)createTestsForParametersWithJavaLangIterable:(id<JavaLangIterable>)allParameters
                                                    withNSString:(NSString *)namePattern {
  return OrgJunitRunnersParameterized_createTestsForParametersWithJavaLangIterable_withNSString_(self, allParameters, namePattern);
}

- (JavaLangException *)parametersMethodReturnedWrongType {
  return OrgJunitRunnersParameterized_parametersMethodReturnedWrongType(self);
}

+ (OrgJunitRunnersParameterizedTestWithParameters *)createTestWithParametersWithOrgJunitRunnersModelTestClass:(OrgJunitRunnersModelTestClass *)testClass
                                                                                                 withNSString:(NSString *)pattern
                                                                                                      withInt:(jint)index
                                                                                            withNSObjectArray:(IOSObjectArray *)parameters {
  return OrgJunitRunnersParameterized_createTestWithParametersWithOrgJunitRunnersModelTestClass_withNSString_withInt_withNSObjectArray_(testClass, pattern, index, parameters);
}

- (void)dealloc {
  RELEASE_(runners_Parameterized_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, 2, -1, -1 },
    { NULL, "LOrgJunitRunnersParameterizedParametersRunnerFactory;", 0x2, 3, 0, 4, 5, -1, -1 },
    { NULL, "LJavaUtilList;", 0x4, -1, -1, -1, 6, -1, -1 },
    { NULL, "LOrgJunitRunnersParameterizedTestWithParameters;", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x2, -1, -1, 1, 9, -1, -1 },
    { NULL, "LOrgJunitRunnersModelFrameworkMethod;", 0x2, -1, -1, 10, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 11, 12, 13, 14, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 15, 16, 10, 17, -1, -1 },
    { NULL, "LJavaLangException;", 0x2, -1, -1, 10, -1, -1, -1 },
    { NULL, "LOrgJunitRunnersParameterizedTestWithParameters;", 0xa, 18, 19, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIOSClass:);
  methods[1].selector = @selector(getParametersRunnerFactoryWithIOSClass:);
  methods[2].selector = @selector(getChildren);
  methods[3].selector = @selector(createTestWithNotNormalizedParametersWithNSString:withInt:withId:);
  methods[4].selector = @selector(allParameters);
  methods[5].selector = @selector(getParametersMethod);
  methods[6].selector = @selector(createRunnersForParametersWithJavaLangIterable:withNSString:withOrgJunitRunnersParameterizedParametersRunnerFactory:);
  methods[7].selector = @selector(createTestsForParametersWithJavaLangIterable:withNSString:);
  methods[8].selector = @selector(parametersMethodReturnedWrongType);
  methods[9].selector = @selector(createTestWithParametersWithOrgJunitRunnersModelTestClass:withNSString:withInt:withNSObjectArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_FACTORY", "LOrgJunitRunnersParameterizedParametersRunnerFactory;", .constantValue.asLong = 0, 0x1a, -1, 20, -1, -1 },
    { "NO_RUNNERS", "LJavaUtilList;", .constantValue.asLong = 0, 0x1a, -1, 21, 22, -1 },
    { "runners_Parameterized_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, 23, -1, 22, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;", "LNSException;", "(Ljava/lang/Class<*>;)V", "getParametersRunnerFactory", "LJavaLangInstantiationException;LJavaLangIllegalAccessException;", "(Ljava/lang/Class<*>;)Lorg/junit/runners/parameterized/ParametersRunnerFactory;", "()Ljava/util/List<Lorg/junit/runner/Runner;>;", "createTestWithNotNormalizedParameters", "LNSString;ILNSObject;", "()Ljava/lang/Iterable<Ljava/lang/Object;>;", "LJavaLangException;", "createRunnersForParameters", "LJavaLangIterable;LNSString;LOrgJunitRunnersParameterizedParametersRunnerFactory;", "LOrgJunitRunnersModelInitializationError;LJavaLangException;", "(Ljava/lang/Iterable<Ljava/lang/Object;>;Ljava/lang/String;Lorg/junit/runners/parameterized/ParametersRunnerFactory;)Ljava/util/List<Lorg/junit/runner/Runner;>;", "createTestsForParameters", "LJavaLangIterable;LNSString;", "(Ljava/lang/Iterable<Ljava/lang/Object;>;Ljava/lang/String;)Ljava/util/List<Lorg/junit/runners/parameterized/TestWithParameters;>;", "createTestWithParameters", "LOrgJunitRunnersModelTestClass;LNSString;I[LNSObject;", &OrgJunitRunnersParameterized_DEFAULT_FACTORY, &OrgJunitRunnersParameterized_NO_RUNNERS, "Ljava/util/List<Lorg/junit/runner/Runner;>;", "runners", "LOrgJunitRunnersParameterized_Parameters;LOrgJunitRunnersParameterized_Parameter;LOrgJunitRunnersParameterized_UseParametersRunnerFactory;" };
  static const J2ObjcClassInfo _OrgJunitRunnersParameterized = { "Parameterized", "org.junit.runners", ptrTable, methods, fields, 7, 0x1, 10, 3, -1, 24, -1, -1, -1 };
  return &_OrgJunitRunnersParameterized;
}

+ (void)initialize {
  if (self == [OrgJunitRunnersParameterized class]) {
    JreStrongAssignAndConsume(&OrgJunitRunnersParameterized_DEFAULT_FACTORY, new_OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParametersFactory_init());
    JreStrongAssign(&OrgJunitRunnersParameterized_NO_RUNNERS, JavaUtilCollections_emptyList());
    J2OBJC_SET_INITIALIZED(OrgJunitRunnersParameterized)
  }
}

@end

void OrgJunitRunnersParameterized_initWithIOSClass_(OrgJunitRunnersParameterized *self, IOSClass *klass) {
  OrgJunitRunnersSuite_initWithIOSClass_withJavaUtilList_(self, klass, OrgJunitRunnersParameterized_NO_RUNNERS);
  id<OrgJunitRunnersParameterizedParametersRunnerFactory> runnerFactory = OrgJunitRunnersParameterized_getParametersRunnerFactoryWithIOSClass_(self, klass);
  id<OrgJunitRunnersParameterized_Parameters> parameters = ((id<OrgJunitRunnersParameterized_Parameters>) [((OrgJunitRunnersModelFrameworkMethod *) nil_chk(OrgJunitRunnersParameterized_getParametersMethod(self))) getAnnotationWithIOSClass:OrgJunitRunnersParameterized_Parameters_class_()]);
  JreStrongAssign(&self->runners_Parameterized_, JavaUtilCollections_unmodifiableListWithJavaUtilList_(OrgJunitRunnersParameterized_createRunnersForParametersWithJavaLangIterable_withNSString_withOrgJunitRunnersParameterizedParametersRunnerFactory_(self, OrgJunitRunnersParameterized_allParameters(self), [((id<OrgJunitRunnersParameterized_Parameters>) nil_chk(parameters)) name], runnerFactory)));
}

OrgJunitRunnersParameterized *new_OrgJunitRunnersParameterized_initWithIOSClass_(IOSClass *klass) {
  J2OBJC_NEW_IMPL(OrgJunitRunnersParameterized, initWithIOSClass_, klass)
}

OrgJunitRunnersParameterized *create_OrgJunitRunnersParameterized_initWithIOSClass_(IOSClass *klass) {
  J2OBJC_CREATE_IMPL(OrgJunitRunnersParameterized, initWithIOSClass_, klass)
}

id<OrgJunitRunnersParameterizedParametersRunnerFactory> OrgJunitRunnersParameterized_getParametersRunnerFactoryWithIOSClass_(OrgJunitRunnersParameterized *self, IOSClass *klass) {
  id<OrgJunitRunnersParameterized_UseParametersRunnerFactory> annotation = ((id<OrgJunitRunnersParameterized_UseParametersRunnerFactory>) [((IOSClass *) nil_chk(klass)) getAnnotationWithIOSClass:OrgJunitRunnersParameterized_UseParametersRunnerFactory_class_()]);
  if (annotation == nil) {
    return OrgJunitRunnersParameterized_DEFAULT_FACTORY;
  }
  else {
    IOSClass *factoryClass = [annotation value];
    return [((IOSClass *) nil_chk(factoryClass)) newInstance];
  }
}

OrgJunitRunnersParameterizedTestWithParameters *OrgJunitRunnersParameterized_createTestWithNotNormalizedParametersWithNSString_withInt_withId_(OrgJunitRunnersParameterized *self, NSString *pattern, jint index, id parametersOrSingleParameter) {
  IOSObjectArray *parameters = ([IOSClass_arrayType(NSObject_class_(), 1) isInstance:parametersOrSingleParameter]) ? (IOSObjectArray *) cast_check(parametersOrSingleParameter, IOSClass_arrayType(NSObject_class_(), 1)) : [IOSObjectArray arrayWithObjects:(id[]){ parametersOrSingleParameter } count:1 type:NSObject_class_()];
  return OrgJunitRunnersParameterized_createTestWithParametersWithOrgJunitRunnersModelTestClass_withNSString_withInt_withNSObjectArray_([self getTestClass], pattern, index, parameters);
}

id<JavaLangIterable> OrgJunitRunnersParameterized_allParameters(OrgJunitRunnersParameterized *self) {
  id parameters = [((OrgJunitRunnersModelFrameworkMethod *) nil_chk(OrgJunitRunnersParameterized_getParametersMethod(self))) invokeExplosivelyWithId:nil withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]];
  if ([JavaLangIterable_class_() isInstance:parameters]) {
    return (id<JavaLangIterable>) cast_check(parameters, JavaLangIterable_class_());
  }
  else if ([IOSClass_arrayType(NSObject_class_(), 1) isInstance:parameters]) {
    return JavaUtilArrays_asListWithNSObjectArray_((IOSObjectArray *) cast_check(parameters, IOSClass_arrayType(NSObject_class_(), 1)));
  }
  else {
    @throw OrgJunitRunnersParameterized_parametersMethodReturnedWrongType(self);
  }
}

OrgJunitRunnersModelFrameworkMethod *OrgJunitRunnersParameterized_getParametersMethod(OrgJunitRunnersParameterized *self) {
  id<JavaUtilList> methods = [((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) getAnnotatedMethodsWithIOSClass:OrgJunitRunnersParameterized_Parameters_class_()];
  for (OrgJunitRunnersModelFrameworkMethod * __strong each in nil_chk(methods)) {
    if ([((OrgJunitRunnersModelFrameworkMethod *) nil_chk(each)) isStatic] && [each isPublic]) {
      return each;
    }
  }
  @throw create_JavaLangException_initWithNSString_(JreStrcat("$$", @"No public static parameters method on class ", [((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) getName]));
}

id<JavaUtilList> OrgJunitRunnersParameterized_createRunnersForParametersWithJavaLangIterable_withNSString_withOrgJunitRunnersParameterizedParametersRunnerFactory_(OrgJunitRunnersParameterized *self, id<JavaLangIterable> allParameters, NSString *namePattern, id<OrgJunitRunnersParameterizedParametersRunnerFactory> runnerFactory) {
  @try {
    id<JavaUtilList> tests = OrgJunitRunnersParameterized_createTestsForParametersWithJavaLangIterable_withNSString_(self, allParameters, namePattern);
    id<JavaUtilList> runners = create_JavaUtilArrayList_init();
    for (OrgJunitRunnersParameterizedTestWithParameters * __strong test in nil_chk(tests)) {
      [runners addWithId:[((id<OrgJunitRunnersParameterizedParametersRunnerFactory>) nil_chk(runnerFactory)) createRunnerForTestWithParametersWithOrgJunitRunnersParameterizedTestWithParameters:test]];
    }
    return runners;
  }
  @catch (JavaLangClassCastException *e) {
    @throw OrgJunitRunnersParameterized_parametersMethodReturnedWrongType(self);
  }
}

id<JavaUtilList> OrgJunitRunnersParameterized_createTestsForParametersWithJavaLangIterable_withNSString_(OrgJunitRunnersParameterized *self, id<JavaLangIterable> allParameters, NSString *namePattern) {
  jint i = 0;
  id<JavaUtilList> children = create_JavaUtilArrayList_init();
  for (id __strong parametersOfSingleTest in nil_chk(allParameters)) {
    [children addWithId:OrgJunitRunnersParameterized_createTestWithNotNormalizedParametersWithNSString_withInt_withId_(self, namePattern, i++, parametersOfSingleTest)];
  }
  return children;
}

JavaLangException *OrgJunitRunnersParameterized_parametersMethodReturnedWrongType(OrgJunitRunnersParameterized *self) {
  NSString *className_ = [((OrgJunitRunnersModelTestClass *) nil_chk([self getTestClass])) getName];
  NSString *methodName = [((OrgJunitRunnersModelFrameworkMethod *) nil_chk(OrgJunitRunnersParameterized_getParametersMethod(self))) getName];
  NSString *message = JavaTextMessageFormat_formatWithNSString_withNSObjectArray_(@"{0}.{1}() must return an Iterable of arrays.", [IOSObjectArray arrayWithObjects:(id[]){ className_, methodName } count:2 type:NSObject_class_()]);
  return create_JavaLangException_initWithNSString_(message);
}

OrgJunitRunnersParameterizedTestWithParameters *OrgJunitRunnersParameterized_createTestWithParametersWithOrgJunitRunnersModelTestClass_withNSString_withInt_withNSObjectArray_(OrgJunitRunnersModelTestClass *testClass, NSString *pattern, jint index, IOSObjectArray *parameters) {
  OrgJunitRunnersParameterized_initialize();
  NSString *finalPattern = [((NSString *) nil_chk(pattern)) java_replaceAll:@"\\{index\\}" withReplacement:JavaLangInteger_toStringWithInt_(index)];
  NSString *name = JavaTextMessageFormat_formatWithNSString_withNSObjectArray_(finalPattern, parameters);
  return create_OrgJunitRunnersParameterizedTestWithParameters_initWithNSString_withOrgJunitRunnersModelTestClass_withJavaUtilList_(JreStrcat("C$C", '[', name, ']'), testClass, JavaUtilArrays_asListWithNSObjectArray_(parameters));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitRunnersParameterized)

@implementation OrgJunitRunnersParameterized_Parameters

@synthesize name = name_;

+ (NSString *)nameDefault {
  return @"{index}";
}

- (IOSClass *)annotationType {
  return OrgJunitRunnersParameterized_Parameters_class_();
}

- (NSString *)description {
  return @"@org.junit.runners.Parameterized$Parameters()";
}

- (void)dealloc {
  RELEASE_(name_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(name);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJunitRunnersParameterized;", (void *)&OrgJunitRunnersParameterized_Parameters__Annotations$0 };
  static const J2ObjcClassInfo _OrgJunitRunnersParameterized_Parameters = { "Parameters", "org.junit.runners", ptrTable, methods, fields, 7, 0x2609, 1, 1, 0, -1, -1, -1, 1 };
  return &_OrgJunitRunnersParameterized_Parameters;
}

@end

id<OrgJunitRunnersParameterized_Parameters> create_OrgJunitRunnersParameterized_Parameters(NSString *name) {
  OrgJunitRunnersParameterized_Parameters *self = AUTORELEASE([[OrgJunitRunnersParameterized_Parameters alloc] init]);
  self->name_ = RETAIN_(name);
  return self;
}

IOSObjectArray *OrgJunitRunnersParameterized_Parameters__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)), create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, METHOD) } count:1 type:JavaLangAnnotationElementType_class_()]) } count:2 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgJunitRunnersParameterized_Parameters)

@implementation OrgJunitRunnersParameterized_Parameter

@synthesize value = value_;

+ (jint)valueDefault {
  return 0;
}

- (IOSClass *)annotationType {
  return OrgJunitRunnersParameterized_Parameter_class_();
}

- (NSString *)description {
  return @"@org.junit.runners.Parameterized$Parameter()";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(value);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "I", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJunitRunnersParameterized;", (void *)&OrgJunitRunnersParameterized_Parameter__Annotations$0 };
  static const J2ObjcClassInfo _OrgJunitRunnersParameterized_Parameter = { "Parameter", "org.junit.runners", ptrTable, methods, fields, 7, 0x2609, 1, 1, 0, -1, -1, -1, 1 };
  return &_OrgJunitRunnersParameterized_Parameter;
}

@end

id<OrgJunitRunnersParameterized_Parameter> create_OrgJunitRunnersParameterized_Parameter(jint value) {
  OrgJunitRunnersParameterized_Parameter *self = AUTORELEASE([[OrgJunitRunnersParameterized_Parameter alloc] init]);
  self->value_ = value;
  return self;
}

IOSObjectArray *OrgJunitRunnersParameterized_Parameter__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)), create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, FIELD) } count:1 type:JavaLangAnnotationElementType_class_()]) } count:2 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgJunitRunnersParameterized_Parameter)

@implementation OrgJunitRunnersParameterized_UseParametersRunnerFactory

@synthesize value = value_;

+ (IOSClass *)valueDefault {
  return OrgJunitRunnersParameterizedBlockJUnit4ClassRunnerWithParametersFactory_class_();
}

- (IOSClass *)annotationType {
  return OrgJunitRunnersParameterized_UseParametersRunnerFactory_class_();
}

- (NSString *)description {
  return @"@org.junit.runners.Parameterized$UseParametersRunnerFactory()";
}

- (void)dealloc {
  RELEASE_(value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LIOSClass;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(value);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "LIOSClass;", .constantValue.asLong = 0, 0x1000, -1, -1, 0, -1 },
  };
  static const void *ptrTable[] = { "Ljava/lang/Class<+Lorg/junit/runners/parameterized/ParametersRunnerFactory;>;", "LOrgJunitRunnersParameterized;", (void *)&OrgJunitRunnersParameterized_UseParametersRunnerFactory__Annotations$0 };
  static const J2ObjcClassInfo _OrgJunitRunnersParameterized_UseParametersRunnerFactory = { "UseParametersRunnerFactory", "org.junit.runners", ptrTable, methods, fields, 7, 0x2609, 1, 1, 1, -1, -1, -1, 2 };
  return &_OrgJunitRunnersParameterized_UseParametersRunnerFactory;
}

@end

id<OrgJunitRunnersParameterized_UseParametersRunnerFactory> create_OrgJunitRunnersParameterized_UseParametersRunnerFactory(IOSClass *value) {
  OrgJunitRunnersParameterized_UseParametersRunnerFactory *self = AUTORELEASE([[OrgJunitRunnersParameterized_UseParametersRunnerFactory alloc] init]);
  self->value_ = RETAIN_(value);
  return self;
}

IOSObjectArray *OrgJunitRunnersParameterized_UseParametersRunnerFactory__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)), create_JavaLangAnnotationInherited(), create_JavaLangAnnotationTarget([IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, TYPE) } count:1 type:JavaLangAnnotationElementType_class_()]) } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgJunitRunnersParameterized_UseParametersRunnerFactory)
