//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/experimental/results/FailureList.java
//

#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/util/List.h"
#include "org/junit/experimental/results/FailureList.h"
#include "org/junit/runner/Result.h"
#include "org/junit/runner/notification/Failure.h"
#include "org/junit/runner/notification/RunListener.h"

@interface OrgJunitExperimentalResultsFailureList () {
 @public
  id<JavaUtilList> failures_;
}

@end

J2OBJC_FIELD_SETTER(OrgJunitExperimentalResultsFailureList, failures_, id<JavaUtilList>)

@implementation OrgJunitExperimentalResultsFailureList

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)failures {
  OrgJunitExperimentalResultsFailureList_initWithJavaUtilList_(self, failures);
  return self;
}

- (OrgJunitRunnerResult *)result {
  OrgJunitRunnerResult *result = create_OrgJunitRunnerResult_init();
  OrgJunitRunnerNotificationRunListener *listener = [result createListener];
  for (OrgJunitRunnerNotificationFailure * __strong failure in nil_chk(failures_)) {
    @try {
      [((OrgJunitRunnerNotificationRunListener *) nil_chk(listener)) testFailureWithOrgJunitRunnerNotificationFailure:failure];
    }
    @catch (JavaLangException *e) {
      @throw create_JavaLangRuntimeException_initWithNSString_(@"I can't believe this happened");
    }
  }
  return result;
}

- (void)dealloc {
  RELEASE_(failures_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LOrgJunitRunnerResult;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilList:);
  methods[1].selector = @selector(result);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "failures_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Lorg/junit/runner/notification/Failure;>;)V", "Ljava/util/List<Lorg/junit/runner/notification/Failure;>;" };
  static const J2ObjcClassInfo _OrgJunitExperimentalResultsFailureList = { "FailureList", "org.junit.experimental.results", ptrTable, methods, fields, 7, 0x0, 2, 1, -1, -1, -1, -1, -1 };
  return &_OrgJunitExperimentalResultsFailureList;
}

@end

void OrgJunitExperimentalResultsFailureList_initWithJavaUtilList_(OrgJunitExperimentalResultsFailureList *self, id<JavaUtilList> failures) {
  NSObject_init(self);
  JreStrongAssign(&self->failures_, failures);
}

OrgJunitExperimentalResultsFailureList *new_OrgJunitExperimentalResultsFailureList_initWithJavaUtilList_(id<JavaUtilList> failures) {
  J2OBJC_NEW_IMPL(OrgJunitExperimentalResultsFailureList, initWithJavaUtilList_, failures)
}

OrgJunitExperimentalResultsFailureList *create_OrgJunitExperimentalResultsFailureList_initWithJavaUtilList_(id<JavaUtilList> failures) {
  J2OBJC_CREATE_IMPL(OrgJunitExperimentalResultsFailureList, initWithJavaUtilList_, failures)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitExperimentalResultsFailureList)
