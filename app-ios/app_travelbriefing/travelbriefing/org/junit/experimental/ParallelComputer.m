//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/experimental/ParallelComputer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/Runnable.h"
#include "java/lang/System.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/TimeUnit.h"
#include "org/junit/experimental/ParallelComputer.h"
#include "org/junit/runner/Computer.h"
#include "org/junit/runner/Runner.h"
#include "org/junit/runners/ParentRunner.h"
#include "org/junit/runners/model/RunnerBuilder.h"
#include "org/junit/runners/model/RunnerScheduler.h"

@interface OrgJunitExperimentalParallelComputer () {
 @public
  jboolean classes_;
  jboolean methods_;
}

+ (OrgJunitRunnerRunner *)parallelizeWithOrgJunitRunnerRunner:(OrgJunitRunnerRunner *)runner;

@end

__attribute__((unused)) static OrgJunitRunnerRunner *OrgJunitExperimentalParallelComputer_parallelizeWithOrgJunitRunnerRunner_(OrgJunitRunnerRunner *runner);

@interface OrgJunitExperimentalParallelComputer_1 : NSObject < OrgJunitRunnersModelRunnerScheduler > {
 @public
  id<JavaUtilConcurrentExecutorService> fService_;
}

- (instancetype)init;

- (void)scheduleWithJavaLangRunnable:(id<JavaLangRunnable>)childStatement;

- (void)finished;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJunitExperimentalParallelComputer_1)

J2OBJC_FIELD_SETTER(OrgJunitExperimentalParallelComputer_1, fService_, id<JavaUtilConcurrentExecutorService>)

__attribute__((unused)) static void OrgJunitExperimentalParallelComputer_1_init(OrgJunitExperimentalParallelComputer_1 *self);

__attribute__((unused)) static OrgJunitExperimentalParallelComputer_1 *new_OrgJunitExperimentalParallelComputer_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJunitExperimentalParallelComputer_1 *create_OrgJunitExperimentalParallelComputer_1_init();

@implementation OrgJunitExperimentalParallelComputer

- (instancetype)initWithBoolean:(jboolean)classes
                    withBoolean:(jboolean)methods {
  OrgJunitExperimentalParallelComputer_initWithBoolean_withBoolean_(self, classes, methods);
  return self;
}

+ (OrgJunitRunnerComputer *)classes {
  return OrgJunitExperimentalParallelComputer_classes();
}

+ (OrgJunitRunnerComputer *)methods {
  return OrgJunitExperimentalParallelComputer_methods();
}

+ (OrgJunitRunnerRunner *)parallelizeWithOrgJunitRunnerRunner:(OrgJunitRunnerRunner *)runner {
  return OrgJunitExperimentalParallelComputer_parallelizeWithOrgJunitRunnerRunner_(runner);
}

- (OrgJunitRunnerRunner *)getSuiteWithOrgJunitRunnersModelRunnerBuilder:(OrgJunitRunnersModelRunnerBuilder *)builder
                                                      withIOSClassArray:(IOSObjectArray *)classes {
  OrgJunitRunnerRunner *suite = [super getSuiteWithOrgJunitRunnersModelRunnerBuilder:builder withIOSClassArray:classes];
  return self->classes_ ? OrgJunitExperimentalParallelComputer_parallelizeWithOrgJunitRunnerRunner_(suite) : suite;
}

- (OrgJunitRunnerRunner *)getRunnerWithOrgJunitRunnersModelRunnerBuilder:(OrgJunitRunnersModelRunnerBuilder *)builder
                                                            withIOSClass:(IOSClass *)testClass {
  OrgJunitRunnerRunner *runner = [super getRunnerWithOrgJunitRunnersModelRunnerBuilder:builder withIOSClass:testClass];
  return methods_ ? OrgJunitExperimentalParallelComputer_parallelizeWithOrgJunitRunnerRunner_(runner) : runner;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgJunitRunnerComputer;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJunitRunnerComputer;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJunitRunnerRunner;", 0xa, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgJunitRunnerRunner;", 0x1, 3, 4, 5, 6, -1, -1 },
    { NULL, "LOrgJunitRunnerRunner;", 0x4, 7, 8, 9, 10, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithBoolean:withBoolean:);
  methods[1].selector = @selector(classes);
  methods[2].selector = @selector(methods);
  methods[3].selector = @selector(parallelizeWithOrgJunitRunnerRunner:);
  methods[4].selector = @selector(getSuiteWithOrgJunitRunnersModelRunnerBuilder:withIOSClassArray:);
  methods[5].selector = @selector(getRunnerWithOrgJunitRunnersModelRunnerBuilder:withIOSClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "classes_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "methods_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ZZ", "parallelize", "LOrgJunitRunnerRunner;", "getSuite", "LOrgJunitRunnersModelRunnerBuilder;[LIOSClass;", "LOrgJunitRunnersModelInitializationError;", "(Lorg/junit/runners/model/RunnerBuilder;[Ljava/lang/Class<*>;)Lorg/junit/runner/Runner;", "getRunner", "LOrgJunitRunnersModelRunnerBuilder;LIOSClass;", "LNSException;", "(Lorg/junit/runners/model/RunnerBuilder;Ljava/lang/Class<*>;)Lorg/junit/runner/Runner;" };
  static const J2ObjcClassInfo _OrgJunitExperimentalParallelComputer = { "ParallelComputer", "org.junit.experimental", ptrTable, methods, fields, 7, 0x1, 6, 2, -1, -1, -1, -1, -1 };
  return &_OrgJunitExperimentalParallelComputer;
}

@end

void OrgJunitExperimentalParallelComputer_initWithBoolean_withBoolean_(OrgJunitExperimentalParallelComputer *self, jboolean classes, jboolean methods) {
  OrgJunitRunnerComputer_init(self);
  self->classes_ = classes;
  self->methods_ = methods;
}

OrgJunitExperimentalParallelComputer *new_OrgJunitExperimentalParallelComputer_initWithBoolean_withBoolean_(jboolean classes, jboolean methods) {
  J2OBJC_NEW_IMPL(OrgJunitExperimentalParallelComputer, initWithBoolean_withBoolean_, classes, methods)
}

OrgJunitExperimentalParallelComputer *create_OrgJunitExperimentalParallelComputer_initWithBoolean_withBoolean_(jboolean classes, jboolean methods) {
  J2OBJC_CREATE_IMPL(OrgJunitExperimentalParallelComputer, initWithBoolean_withBoolean_, classes, methods)
}

OrgJunitRunnerComputer *OrgJunitExperimentalParallelComputer_classes() {
  OrgJunitExperimentalParallelComputer_initialize();
  return create_OrgJunitExperimentalParallelComputer_initWithBoolean_withBoolean_(true, false);
}

OrgJunitRunnerComputer *OrgJunitExperimentalParallelComputer_methods() {
  OrgJunitExperimentalParallelComputer_initialize();
  return create_OrgJunitExperimentalParallelComputer_initWithBoolean_withBoolean_(false, true);
}

OrgJunitRunnerRunner *OrgJunitExperimentalParallelComputer_parallelizeWithOrgJunitRunnerRunner_(OrgJunitRunnerRunner *runner) {
  OrgJunitExperimentalParallelComputer_initialize();
  if ([runner isKindOfClass:[OrgJunitRunnersParentRunner class]]) {
    [((OrgJunitRunnersParentRunner *) nil_chk(((OrgJunitRunnersParentRunner *) cast_chk(runner, [OrgJunitRunnersParentRunner class])))) setSchedulerWithOrgJunitRunnersModelRunnerScheduler:create_OrgJunitExperimentalParallelComputer_1_init()];
  }
  return runner;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitExperimentalParallelComputer)

@implementation OrgJunitExperimentalParallelComputer_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJunitExperimentalParallelComputer_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)scheduleWithJavaLangRunnable:(id<JavaLangRunnable>)childStatement {
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(fService_)) submitWithJavaLangRunnable:childStatement];
}

- (void)finished {
  @try {
    [((id<JavaUtilConcurrentExecutorService>) nil_chk(fService_)) shutdown];
    [fService_ awaitTerminationWithLong:JavaLangLong_MAX_VALUE withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, NANOSECONDS)];
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangInterruptedException *) nil_chk(e)) printStackTraceWithJavaIoPrintStream:JreLoadStatic(JavaLangSystem, err)];
  }
}

- (void)dealloc {
  RELEASE_(fService_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(scheduleWithJavaLangRunnable:);
  methods[2].selector = @selector(finished);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "fService_", "LJavaUtilConcurrentExecutorService;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "schedule", "LJavaLangRunnable;", "LOrgJunitExperimentalParallelComputer;", "parallelizeWithOrgJunitRunnerRunner:" };
  static const J2ObjcClassInfo _OrgJunitExperimentalParallelComputer_1 = { "", "org.junit.experimental", ptrTable, methods, fields, 7, 0x8018, 3, 1, 2, -1, 3, -1, -1 };
  return &_OrgJunitExperimentalParallelComputer_1;
}

@end

void OrgJunitExperimentalParallelComputer_1_init(OrgJunitExperimentalParallelComputer_1 *self) {
  NSObject_init(self);
  JreStrongAssign(&self->fService_, JavaUtilConcurrentExecutors_newCachedThreadPool());
}

OrgJunitExperimentalParallelComputer_1 *new_OrgJunitExperimentalParallelComputer_1_init() {
  J2OBJC_NEW_IMPL(OrgJunitExperimentalParallelComputer_1, init)
}

OrgJunitExperimentalParallelComputer_1 *create_OrgJunitExperimentalParallelComputer_1_init() {
  J2OBJC_CREATE_IMPL(OrgJunitExperimentalParallelComputer_1, init)
}
