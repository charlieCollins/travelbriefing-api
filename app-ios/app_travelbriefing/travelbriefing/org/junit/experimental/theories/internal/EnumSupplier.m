//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/experimental/theories/internal/EnumSupplier.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "org/junit/experimental/theories/ParameterSignature.h"
#include "org/junit/experimental/theories/ParameterSupplier.h"
#include "org/junit/experimental/theories/PotentialAssignment.h"
#include "org/junit/experimental/theories/internal/EnumSupplier.h"

@interface OrgJunitExperimentalTheoriesInternalEnumSupplier () {
 @public
  IOSClass *enumType_;
}

@end

J2OBJC_FIELD_SETTER(OrgJunitExperimentalTheoriesInternalEnumSupplier, enumType_, IOSClass *)

@implementation OrgJunitExperimentalTheoriesInternalEnumSupplier

- (instancetype)initWithIOSClass:(IOSClass *)enumType {
  OrgJunitExperimentalTheoriesInternalEnumSupplier_initWithIOSClass_(self, enumType);
  return self;
}

- (id<JavaUtilList>)getValueSourcesWithOrgJunitExperimentalTheoriesParameterSignature:(OrgJunitExperimentalTheoriesParameterSignature *)sig {
  IOSObjectArray *enumValues = [((IOSClass *) nil_chk(enumType_)) getEnumConstants];
  id<JavaUtilList> assignments = create_JavaUtilArrayList_init();
  {
    IOSObjectArray *a__ = enumValues;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id value = *b__++;
      [assignments addWithId:OrgJunitExperimentalTheoriesPotentialAssignment_forValueWithNSString_withId_([nil_chk(value) description], value)];
    }
  }
  return assignments;
}

- (void)dealloc {
  RELEASE_(enumType_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIOSClass:);
  methods[1].selector = @selector(getValueSourcesWithOrgJunitExperimentalTheoriesParameterSignature:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "enumType_", "LIOSClass;", .constantValue.asLong = 0, 0x2, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;", "(Ljava/lang/Class<*>;)V", "getValueSources", "LOrgJunitExperimentalTheoriesParameterSignature;", "(Lorg/junit/experimental/theories/ParameterSignature;)Ljava/util/List<Lorg/junit/experimental/theories/PotentialAssignment;>;", "Ljava/lang/Class<*>;" };
  static const J2ObjcClassInfo _OrgJunitExperimentalTheoriesInternalEnumSupplier = { "EnumSupplier", "org.junit.experimental.theories.internal", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_OrgJunitExperimentalTheoriesInternalEnumSupplier;
}

@end

void OrgJunitExperimentalTheoriesInternalEnumSupplier_initWithIOSClass_(OrgJunitExperimentalTheoriesInternalEnumSupplier *self, IOSClass *enumType) {
  OrgJunitExperimentalTheoriesParameterSupplier_init(self);
  JreStrongAssign(&self->enumType_, enumType);
}

OrgJunitExperimentalTheoriesInternalEnumSupplier *new_OrgJunitExperimentalTheoriesInternalEnumSupplier_initWithIOSClass_(IOSClass *enumType) {
  J2OBJC_NEW_IMPL(OrgJunitExperimentalTheoriesInternalEnumSupplier, initWithIOSClass_, enumType)
}

OrgJunitExperimentalTheoriesInternalEnumSupplier *create_OrgJunitExperimentalTheoriesInternalEnumSupplier_initWithIOSClass_(IOSClass *enumType) {
  J2OBJC_CREATE_IMPL(OrgJunitExperimentalTheoriesInternalEnumSupplier, initWithIOSClass_, enumType)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitExperimentalTheoriesInternalEnumSupplier)
