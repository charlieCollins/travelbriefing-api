//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/experimental/theories/internal/SpecificDataPointsSupplier.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/reflect/Field.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "org/junit/experimental/theories/DataPoint.h"
#include "org/junit/experimental/theories/DataPoints.h"
#include "org/junit/experimental/theories/FromDataPoints.h"
#include "org/junit/experimental/theories/ParameterSignature.h"
#include "org/junit/experimental/theories/internal/AllMembersSupplier.h"
#include "org/junit/experimental/theories/internal/SpecificDataPointsSupplier.h"
#include "org/junit/runners/model/FrameworkMethod.h"
#include "org/junit/runners/model/TestClass.h"

@implementation OrgJunitExperimentalTheoriesInternalSpecificDataPointsSupplier

- (instancetype)initWithOrgJunitRunnersModelTestClass:(OrgJunitRunnersModelTestClass *)testClass {
  OrgJunitExperimentalTheoriesInternalSpecificDataPointsSupplier_initWithOrgJunitRunnersModelTestClass_(self, testClass);
  return self;
}

- (id<JavaUtilCollection>)getSingleDataPointFieldsWithOrgJunitExperimentalTheoriesParameterSignature:(OrgJunitExperimentalTheoriesParameterSignature *)sig {
  id<JavaUtilCollection> fields = [super getSingleDataPointFieldsWithOrgJunitExperimentalTheoriesParameterSignature:sig];
  NSString *requestedName = [((id<OrgJunitExperimentalTheoriesFromDataPoints>) nil_chk([((OrgJunitExperimentalTheoriesParameterSignature *) nil_chk(sig)) getAnnotationWithIOSClass:OrgJunitExperimentalTheoriesFromDataPoints_class_()])) value];
  id<JavaUtilList> fieldsWithMatchingNames = create_JavaUtilArrayList_init();
  for (JavaLangReflectField * __strong field in nil_chk(fields)) {
    IOSObjectArray *fieldNames = [((id<OrgJunitExperimentalTheoriesDataPoint>) nil_chk([((JavaLangReflectField *) nil_chk(field)) getAnnotationWithIOSClass:OrgJunitExperimentalTheoriesDataPoint_class_()])) value];
    if ([((id<JavaUtilList>) nil_chk(JavaUtilArrays_asListWithNSObjectArray_(fieldNames))) containsWithId:requestedName]) {
      [fieldsWithMatchingNames addWithId:field];
    }
  }
  return fieldsWithMatchingNames;
}

- (id<JavaUtilCollection>)getDataPointsFieldsWithOrgJunitExperimentalTheoriesParameterSignature:(OrgJunitExperimentalTheoriesParameterSignature *)sig {
  id<JavaUtilCollection> fields = [super getDataPointsFieldsWithOrgJunitExperimentalTheoriesParameterSignature:sig];
  NSString *requestedName = [((id<OrgJunitExperimentalTheoriesFromDataPoints>) nil_chk([((OrgJunitExperimentalTheoriesParameterSignature *) nil_chk(sig)) getAnnotationWithIOSClass:OrgJunitExperimentalTheoriesFromDataPoints_class_()])) value];
  id<JavaUtilList> fieldsWithMatchingNames = create_JavaUtilArrayList_init();
  for (JavaLangReflectField * __strong field in nil_chk(fields)) {
    IOSObjectArray *fieldNames = [((id<OrgJunitExperimentalTheoriesDataPoints>) nil_chk([((JavaLangReflectField *) nil_chk(field)) getAnnotationWithIOSClass:OrgJunitExperimentalTheoriesDataPoints_class_()])) value];
    if ([((id<JavaUtilList>) nil_chk(JavaUtilArrays_asListWithNSObjectArray_(fieldNames))) containsWithId:requestedName]) {
      [fieldsWithMatchingNames addWithId:field];
    }
  }
  return fieldsWithMatchingNames;
}

- (id<JavaUtilCollection>)getSingleDataPointMethodsWithOrgJunitExperimentalTheoriesParameterSignature:(OrgJunitExperimentalTheoriesParameterSignature *)sig {
  id<JavaUtilCollection> methods = [super getSingleDataPointMethodsWithOrgJunitExperimentalTheoriesParameterSignature:sig];
  NSString *requestedName = [((id<OrgJunitExperimentalTheoriesFromDataPoints>) nil_chk([((OrgJunitExperimentalTheoriesParameterSignature *) nil_chk(sig)) getAnnotationWithIOSClass:OrgJunitExperimentalTheoriesFromDataPoints_class_()])) value];
  id<JavaUtilList> methodsWithMatchingNames = create_JavaUtilArrayList_init();
  for (OrgJunitRunnersModelFrameworkMethod * __strong method in nil_chk(methods)) {
    IOSObjectArray *methodNames = [((id<OrgJunitExperimentalTheoriesDataPoint>) nil_chk([((OrgJunitRunnersModelFrameworkMethod *) nil_chk(method)) getAnnotationWithIOSClass:OrgJunitExperimentalTheoriesDataPoint_class_()])) value];
    if ([((id<JavaUtilList>) nil_chk(JavaUtilArrays_asListWithNSObjectArray_(methodNames))) containsWithId:requestedName]) {
      [methodsWithMatchingNames addWithId:method];
    }
  }
  return methodsWithMatchingNames;
}

- (id<JavaUtilCollection>)getDataPointsMethodsWithOrgJunitExperimentalTheoriesParameterSignature:(OrgJunitExperimentalTheoriesParameterSignature *)sig {
  id<JavaUtilCollection> methods = [super getDataPointsMethodsWithOrgJunitExperimentalTheoriesParameterSignature:sig];
  NSString *requestedName = [((id<OrgJunitExperimentalTheoriesFromDataPoints>) nil_chk([((OrgJunitExperimentalTheoriesParameterSignature *) nil_chk(sig)) getAnnotationWithIOSClass:OrgJunitExperimentalTheoriesFromDataPoints_class_()])) value];
  id<JavaUtilList> methodsWithMatchingNames = create_JavaUtilArrayList_init();
  for (OrgJunitRunnersModelFrameworkMethod * __strong method in nil_chk(methods)) {
    IOSObjectArray *methodNames = [((id<OrgJunitExperimentalTheoriesDataPoints>) nil_chk([((OrgJunitRunnersModelFrameworkMethod *) nil_chk(method)) getAnnotationWithIOSClass:OrgJunitExperimentalTheoriesDataPoints_class_()])) value];
    if ([((id<JavaUtilList>) nil_chk(JavaUtilArrays_asListWithNSObjectArray_(methodNames))) containsWithId:requestedName]) {
      [methodsWithMatchingNames addWithId:method];
    }
  }
  return methodsWithMatchingNames;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x4, 1, 2, -1, 3, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x4, 4, 2, -1, 3, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x4, 5, 2, -1, 6, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x4, 7, 2, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJunitRunnersModelTestClass:);
  methods[1].selector = @selector(getSingleDataPointFieldsWithOrgJunitExperimentalTheoriesParameterSignature:);
  methods[2].selector = @selector(getDataPointsFieldsWithOrgJunitExperimentalTheoriesParameterSignature:);
  methods[3].selector = @selector(getSingleDataPointMethodsWithOrgJunitExperimentalTheoriesParameterSignature:);
  methods[4].selector = @selector(getDataPointsMethodsWithOrgJunitExperimentalTheoriesParameterSignature:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgJunitRunnersModelTestClass;", "getSingleDataPointFields", "LOrgJunitExperimentalTheoriesParameterSignature;", "(Lorg/junit/experimental/theories/ParameterSignature;)Ljava/util/Collection<Ljava/lang/reflect/Field;>;", "getDataPointsFields", "getSingleDataPointMethods", "(Lorg/junit/experimental/theories/ParameterSignature;)Ljava/util/Collection<Lorg/junit/runners/model/FrameworkMethod;>;", "getDataPointsMethods" };
  static const J2ObjcClassInfo _OrgJunitExperimentalTheoriesInternalSpecificDataPointsSupplier = { "SpecificDataPointsSupplier", "org.junit.experimental.theories.internal", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, -1, -1, -1, -1 };
  return &_OrgJunitExperimentalTheoriesInternalSpecificDataPointsSupplier;
}

@end

void OrgJunitExperimentalTheoriesInternalSpecificDataPointsSupplier_initWithOrgJunitRunnersModelTestClass_(OrgJunitExperimentalTheoriesInternalSpecificDataPointsSupplier *self, OrgJunitRunnersModelTestClass *testClass) {
  OrgJunitExperimentalTheoriesInternalAllMembersSupplier_initWithOrgJunitRunnersModelTestClass_(self, testClass);
}

OrgJunitExperimentalTheoriesInternalSpecificDataPointsSupplier *new_OrgJunitExperimentalTheoriesInternalSpecificDataPointsSupplier_initWithOrgJunitRunnersModelTestClass_(OrgJunitRunnersModelTestClass *testClass) {
  J2OBJC_NEW_IMPL(OrgJunitExperimentalTheoriesInternalSpecificDataPointsSupplier, initWithOrgJunitRunnersModelTestClass_, testClass)
}

OrgJunitExperimentalTheoriesInternalSpecificDataPointsSupplier *create_OrgJunitExperimentalTheoriesInternalSpecificDataPointsSupplier_initWithOrgJunitRunnersModelTestClass_(OrgJunitRunnersModelTestClass *testClass) {
  J2OBJC_CREATE_IMPL(OrgJunitExperimentalTheoriesInternalSpecificDataPointsSupplier, initWithOrgJunitRunnersModelTestClass_, testClass)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitExperimentalTheoriesInternalSpecificDataPointsSupplier)
