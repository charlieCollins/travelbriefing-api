//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/Assert.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/annotation/Annotation.h"
#include "org/hamcrest/Matcher.h"
#include "org/hamcrest/MatcherAssert.h"
#include "org/junit/Assert.h"
#include "org/junit/ComparisonFailure.h"
#include "org/junit/internal/ExactComparisonCriteria.h"
#include "org/junit/internal/InexactComparisonCriteria.h"

@interface OrgJunitAssert ()

+ (jboolean)equalsRegardingNullWithId:(id)expected
                               withId:(id)actual;

+ (jboolean)isEqualsWithId:(id)expected
                    withId:(id)actual;

+ (void)failEqualsWithNSString:(NSString *)message
                        withId:(id)actual;

+ (void)internalArrayEqualsWithNSString:(NSString *)message
                                 withId:(id)expecteds
                                 withId:(id)actuals;

+ (jboolean)doubleIsDifferentWithDouble:(jdouble)d1
                             withDouble:(jdouble)d2
                             withDouble:(jdouble)delta;

+ (jboolean)floatIsDifferentWithFloat:(jfloat)f1
                            withFloat:(jfloat)f2
                            withFloat:(jfloat)delta;

+ (void)failNotNullWithNSString:(NSString *)message
                         withId:(id)actual;

+ (void)failSameWithNSString:(NSString *)message;

+ (void)failNotSameWithNSString:(NSString *)message
                         withId:(id)expected
                         withId:(id)actual;

+ (void)failNotEqualsWithNSString:(NSString *)message
                           withId:(id)expected
                           withId:(id)actual;

+ (NSString *)formatClassAndValueWithId:(id)value
                           withNSString:(NSString *)valueString;

@end

__attribute__((unused)) static jboolean OrgJunitAssert_equalsRegardingNullWithId_withId_(id expected, id actual);

__attribute__((unused)) static jboolean OrgJunitAssert_isEqualsWithId_withId_(id expected, id actual);

__attribute__((unused)) static void OrgJunitAssert_failEqualsWithNSString_withId_(NSString *message, id actual);

__attribute__((unused)) static void OrgJunitAssert_internalArrayEqualsWithNSString_withId_withId_(NSString *message, id expecteds, id actuals);

__attribute__((unused)) static jboolean OrgJunitAssert_doubleIsDifferentWithDouble_withDouble_withDouble_(jdouble d1, jdouble d2, jdouble delta);

__attribute__((unused)) static jboolean OrgJunitAssert_floatIsDifferentWithFloat_withFloat_withFloat_(jfloat f1, jfloat f2, jfloat delta);

__attribute__((unused)) static void OrgJunitAssert_failNotNullWithNSString_withId_(NSString *message, id actual);

__attribute__((unused)) static void OrgJunitAssert_failSameWithNSString_(NSString *message);

__attribute__((unused)) static void OrgJunitAssert_failNotSameWithNSString_withId_withId_(NSString *message, id expected, id actual);

__attribute__((unused)) static void OrgJunitAssert_failNotEqualsWithNSString_withId_withId_(NSString *message, id expected, id actual);

__attribute__((unused)) static NSString *OrgJunitAssert_formatClassAndValueWithId_withNSString_(id value, NSString *valueString);

__attribute__((unused)) static IOSObjectArray *OrgJunitAssert__Annotations$0();

__attribute__((unused)) static IOSObjectArray *OrgJunitAssert__Annotations$1();

__attribute__((unused)) static IOSObjectArray *OrgJunitAssert__Annotations$2();

__attribute__((unused)) static IOSObjectArray *OrgJunitAssert__Annotations$3();

@implementation OrgJunitAssert

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJunitAssert_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)assertTrueWithNSString:(NSString *)message
                   withBoolean:(jboolean)condition {
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(message, condition);
}

+ (void)assertTrueWithBoolean:(jboolean)condition {
  OrgJunitAssert_assertTrueWithBoolean_(condition);
}

+ (void)assertFalseWithNSString:(NSString *)message
                    withBoolean:(jboolean)condition {
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(message, condition);
}

+ (void)assertFalseWithBoolean:(jboolean)condition {
  OrgJunitAssert_assertFalseWithBoolean_(condition);
}

+ (void)failWithNSString:(NSString *)message {
  OrgJunitAssert_failWithNSString_(message);
}

+ (void)fail {
  OrgJunitAssert_fail();
}

+ (void)assertEqualsWithNSString:(NSString *)message
                          withId:(id)expected
                          withId:(id)actual {
  OrgJunitAssert_assertEqualsWithNSString_withId_withId_(message, expected, actual);
}

+ (jboolean)equalsRegardingNullWithId:(id)expected
                               withId:(id)actual {
  return OrgJunitAssert_equalsRegardingNullWithId_withId_(expected, actual);
}

+ (jboolean)isEqualsWithId:(id)expected
                    withId:(id)actual {
  return OrgJunitAssert_isEqualsWithId_withId_(expected, actual);
}

+ (void)assertEqualsWithId:(id)expected
                    withId:(id)actual {
  OrgJunitAssert_assertEqualsWithId_withId_(expected, actual);
}

+ (void)assertNotEqualsWithNSString:(NSString *)message
                             withId:(id)unexpected
                             withId:(id)actual {
  OrgJunitAssert_assertNotEqualsWithNSString_withId_withId_(message, unexpected, actual);
}

+ (void)assertNotEqualsWithId:(id)unexpected
                       withId:(id)actual {
  OrgJunitAssert_assertNotEqualsWithId_withId_(unexpected, actual);
}

+ (void)failEqualsWithNSString:(NSString *)message
                        withId:(id)actual {
  OrgJunitAssert_failEqualsWithNSString_withId_(message, actual);
}

+ (void)assertNotEqualsWithNSString:(NSString *)message
                           withLong:(jlong)unexpected
                           withLong:(jlong)actual {
  OrgJunitAssert_assertNotEqualsWithNSString_withLong_withLong_(message, unexpected, actual);
}

+ (void)assertNotEqualsWithLong:(jlong)unexpected
                       withLong:(jlong)actual {
  OrgJunitAssert_assertNotEqualsWithLong_withLong_(unexpected, actual);
}

+ (void)assertNotEqualsWithNSString:(NSString *)message
                         withDouble:(jdouble)unexpected
                         withDouble:(jdouble)actual
                         withDouble:(jdouble)delta {
  OrgJunitAssert_assertNotEqualsWithNSString_withDouble_withDouble_withDouble_(message, unexpected, actual, delta);
}

+ (void)assertNotEqualsWithDouble:(jdouble)unexpected
                       withDouble:(jdouble)actual
                       withDouble:(jdouble)delta {
  OrgJunitAssert_assertNotEqualsWithDouble_withDouble_withDouble_(unexpected, actual, delta);
}

+ (void)assertNotEqualsWithFloat:(jfloat)unexpected
                       withFloat:(jfloat)actual
                       withFloat:(jfloat)delta {
  OrgJunitAssert_assertNotEqualsWithFloat_withFloat_withFloat_(unexpected, actual, delta);
}

+ (void)assertArrayEqualsWithNSString:(NSString *)message
                    withNSObjectArray:(IOSObjectArray *)expecteds
                    withNSObjectArray:(IOSObjectArray *)actuals {
  OrgJunitAssert_assertArrayEqualsWithNSString_withNSObjectArray_withNSObjectArray_(message, expecteds, actuals);
}

+ (void)assertArrayEqualsWithNSObjectArray:(IOSObjectArray *)expecteds
                         withNSObjectArray:(IOSObjectArray *)actuals {
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_(expecteds, actuals);
}

+ (void)assertArrayEqualsWithNSString:(NSString *)message
                     withBooleanArray:(IOSBooleanArray *)expecteds
                     withBooleanArray:(IOSBooleanArray *)actuals {
  OrgJunitAssert_assertArrayEqualsWithNSString_withBooleanArray_withBooleanArray_(message, expecteds, actuals);
}

+ (void)assertArrayEqualsWithBooleanArray:(IOSBooleanArray *)expecteds
                         withBooleanArray:(IOSBooleanArray *)actuals {
  OrgJunitAssert_assertArrayEqualsWithBooleanArray_withBooleanArray_(expecteds, actuals);
}

+ (void)assertArrayEqualsWithNSString:(NSString *)message
                        withByteArray:(IOSByteArray *)expecteds
                        withByteArray:(IOSByteArray *)actuals {
  OrgJunitAssert_assertArrayEqualsWithNSString_withByteArray_withByteArray_(message, expecteds, actuals);
}

+ (void)assertArrayEqualsWithByteArray:(IOSByteArray *)expecteds
                         withByteArray:(IOSByteArray *)actuals {
  OrgJunitAssert_assertArrayEqualsWithByteArray_withByteArray_(expecteds, actuals);
}

+ (void)assertArrayEqualsWithNSString:(NSString *)message
                        withCharArray:(IOSCharArray *)expecteds
                        withCharArray:(IOSCharArray *)actuals {
  OrgJunitAssert_assertArrayEqualsWithNSString_withCharArray_withCharArray_(message, expecteds, actuals);
}

+ (void)assertArrayEqualsWithCharArray:(IOSCharArray *)expecteds
                         withCharArray:(IOSCharArray *)actuals {
  OrgJunitAssert_assertArrayEqualsWithCharArray_withCharArray_(expecteds, actuals);
}

+ (void)assertArrayEqualsWithNSString:(NSString *)message
                       withShortArray:(IOSShortArray *)expecteds
                       withShortArray:(IOSShortArray *)actuals {
  OrgJunitAssert_assertArrayEqualsWithNSString_withShortArray_withShortArray_(message, expecteds, actuals);
}

+ (void)assertArrayEqualsWithShortArray:(IOSShortArray *)expecteds
                         withShortArray:(IOSShortArray *)actuals {
  OrgJunitAssert_assertArrayEqualsWithShortArray_withShortArray_(expecteds, actuals);
}

+ (void)assertArrayEqualsWithNSString:(NSString *)message
                         withIntArray:(IOSIntArray *)expecteds
                         withIntArray:(IOSIntArray *)actuals {
  OrgJunitAssert_assertArrayEqualsWithNSString_withIntArray_withIntArray_(message, expecteds, actuals);
}

+ (void)assertArrayEqualsWithIntArray:(IOSIntArray *)expecteds
                         withIntArray:(IOSIntArray *)actuals {
  OrgJunitAssert_assertArrayEqualsWithIntArray_withIntArray_(expecteds, actuals);
}

+ (void)assertArrayEqualsWithNSString:(NSString *)message
                        withLongArray:(IOSLongArray *)expecteds
                        withLongArray:(IOSLongArray *)actuals {
  OrgJunitAssert_assertArrayEqualsWithNSString_withLongArray_withLongArray_(message, expecteds, actuals);
}

+ (void)assertArrayEqualsWithLongArray:(IOSLongArray *)expecteds
                         withLongArray:(IOSLongArray *)actuals {
  OrgJunitAssert_assertArrayEqualsWithLongArray_withLongArray_(expecteds, actuals);
}

+ (void)assertArrayEqualsWithNSString:(NSString *)message
                      withDoubleArray:(IOSDoubleArray *)expecteds
                      withDoubleArray:(IOSDoubleArray *)actuals
                           withDouble:(jdouble)delta {
  OrgJunitAssert_assertArrayEqualsWithNSString_withDoubleArray_withDoubleArray_withDouble_(message, expecteds, actuals, delta);
}

+ (void)assertArrayEqualsWithDoubleArray:(IOSDoubleArray *)expecteds
                         withDoubleArray:(IOSDoubleArray *)actuals
                              withDouble:(jdouble)delta {
  OrgJunitAssert_assertArrayEqualsWithDoubleArray_withDoubleArray_withDouble_(expecteds, actuals, delta);
}

+ (void)assertArrayEqualsWithNSString:(NSString *)message
                       withFloatArray:(IOSFloatArray *)expecteds
                       withFloatArray:(IOSFloatArray *)actuals
                            withFloat:(jfloat)delta {
  OrgJunitAssert_assertArrayEqualsWithNSString_withFloatArray_withFloatArray_withFloat_(message, expecteds, actuals, delta);
}

+ (void)assertArrayEqualsWithFloatArray:(IOSFloatArray *)expecteds
                         withFloatArray:(IOSFloatArray *)actuals
                              withFloat:(jfloat)delta {
  OrgJunitAssert_assertArrayEqualsWithFloatArray_withFloatArray_withFloat_(expecteds, actuals, delta);
}

+ (void)internalArrayEqualsWithNSString:(NSString *)message
                                 withId:(id)expecteds
                                 withId:(id)actuals {
  OrgJunitAssert_internalArrayEqualsWithNSString_withId_withId_(message, expecteds, actuals);
}

+ (void)assertEqualsWithNSString:(NSString *)message
                      withDouble:(jdouble)expected
                      withDouble:(jdouble)actual
                      withDouble:(jdouble)delta {
  OrgJunitAssert_assertEqualsWithNSString_withDouble_withDouble_withDouble_(message, expected, actual, delta);
}

+ (void)assertEqualsWithNSString:(NSString *)message
                       withFloat:(jfloat)expected
                       withFloat:(jfloat)actual
                       withFloat:(jfloat)delta {
  OrgJunitAssert_assertEqualsWithNSString_withFloat_withFloat_withFloat_(message, expected, actual, delta);
}

+ (void)assertNotEqualsWithNSString:(NSString *)message
                          withFloat:(jfloat)unexpected
                          withFloat:(jfloat)actual
                          withFloat:(jfloat)delta {
  OrgJunitAssert_assertNotEqualsWithNSString_withFloat_withFloat_withFloat_(message, unexpected, actual, delta);
}

+ (jboolean)doubleIsDifferentWithDouble:(jdouble)d1
                             withDouble:(jdouble)d2
                             withDouble:(jdouble)delta {
  return OrgJunitAssert_doubleIsDifferentWithDouble_withDouble_withDouble_(d1, d2, delta);
}

+ (jboolean)floatIsDifferentWithFloat:(jfloat)f1
                            withFloat:(jfloat)f2
                            withFloat:(jfloat)delta {
  return OrgJunitAssert_floatIsDifferentWithFloat_withFloat_withFloat_(f1, f2, delta);
}

+ (void)assertEqualsWithLong:(jlong)expected
                    withLong:(jlong)actual {
  OrgJunitAssert_assertEqualsWithLong_withLong_(expected, actual);
}

+ (void)assertEqualsWithNSString:(NSString *)message
                        withLong:(jlong)expected
                        withLong:(jlong)actual {
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(message, expected, actual);
}

+ (void)assertEqualsWithDouble:(jdouble)expected
                    withDouble:(jdouble)actual {
  OrgJunitAssert_assertEqualsWithDouble_withDouble_(expected, actual);
}

+ (void)assertEqualsWithNSString:(NSString *)message
                      withDouble:(jdouble)expected
                      withDouble:(jdouble)actual {
  OrgJunitAssert_assertEqualsWithNSString_withDouble_withDouble_(message, expected, actual);
}

+ (void)assertEqualsWithDouble:(jdouble)expected
                    withDouble:(jdouble)actual
                    withDouble:(jdouble)delta {
  OrgJunitAssert_assertEqualsWithDouble_withDouble_withDouble_(expected, actual, delta);
}

+ (void)assertEqualsWithFloat:(jfloat)expected
                    withFloat:(jfloat)actual
                    withFloat:(jfloat)delta {
  OrgJunitAssert_assertEqualsWithFloat_withFloat_withFloat_(expected, actual, delta);
}

+ (void)assertNotNullWithNSString:(NSString *)message
                           withId:(id)object {
  OrgJunitAssert_assertNotNullWithNSString_withId_(message, object);
}

+ (void)assertNotNullWithId:(id)object {
  OrgJunitAssert_assertNotNullWithId_(object);
}

+ (void)assertNullWithNSString:(NSString *)message
                        withId:(id)object {
  OrgJunitAssert_assertNullWithNSString_withId_(message, object);
}

+ (void)assertNullWithId:(id)object {
  OrgJunitAssert_assertNullWithId_(object);
}

+ (void)failNotNullWithNSString:(NSString *)message
                         withId:(id)actual {
  OrgJunitAssert_failNotNullWithNSString_withId_(message, actual);
}

+ (void)assertSameWithNSString:(NSString *)message
                        withId:(id)expected
                        withId:(id)actual {
  OrgJunitAssert_assertSameWithNSString_withId_withId_(message, expected, actual);
}

+ (void)assertSameWithId:(id)expected
                  withId:(id)actual {
  OrgJunitAssert_assertSameWithId_withId_(expected, actual);
}

+ (void)assertNotSameWithNSString:(NSString *)message
                           withId:(id)unexpected
                           withId:(id)actual {
  OrgJunitAssert_assertNotSameWithNSString_withId_withId_(message, unexpected, actual);
}

+ (void)assertNotSameWithId:(id)unexpected
                     withId:(id)actual {
  OrgJunitAssert_assertNotSameWithId_withId_(unexpected, actual);
}

+ (void)failSameWithNSString:(NSString *)message {
  OrgJunitAssert_failSameWithNSString_(message);
}

+ (void)failNotSameWithNSString:(NSString *)message
                         withId:(id)expected
                         withId:(id)actual {
  OrgJunitAssert_failNotSameWithNSString_withId_withId_(message, expected, actual);
}

+ (void)failNotEqualsWithNSString:(NSString *)message
                           withId:(id)expected
                           withId:(id)actual {
  OrgJunitAssert_failNotEqualsWithNSString_withId_withId_(message, expected, actual);
}

+ (NSString *)formatWithNSString:(NSString *)message
                          withId:(id)expected
                          withId:(id)actual {
  return OrgJunitAssert_formatWithNSString_withId_withId_(message, expected, actual);
}

+ (NSString *)formatClassAndValueWithId:(id)value
                           withNSString:(NSString *)valueString {
  return OrgJunitAssert_formatClassAndValueWithId_withNSString_(value, valueString);
}

+ (void)assertEqualsWithNSString:(NSString *)message
               withNSObjectArray:(IOSObjectArray *)expecteds
               withNSObjectArray:(IOSObjectArray *)actuals {
  OrgJunitAssert_assertEqualsWithNSString_withNSObjectArray_withNSObjectArray_(message, expecteds, actuals);
}

+ (void)assertEqualsWithNSObjectArray:(IOSObjectArray *)expecteds
                    withNSObjectArray:(IOSObjectArray *)actuals {
  OrgJunitAssert_assertEqualsWithNSObjectArray_withNSObjectArray_(expecteds, actuals);
}

+ (void)assertThatWithId:(id)actual
  withOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher {
  OrgJunitAssert_assertThatWithId_withOrgHamcrestMatcher_(actual, matcher);
}

+ (void)assertThatWithNSString:(NSString *)reason
                        withId:(id)actual
        withOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher {
  OrgJunitAssert_assertThatWithNSString_withId_withOrgHamcrestMatcher_(reason, actual, matcher);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 3, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 10, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 11, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 11, 9, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 11, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 11, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 11, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 11, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 11, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 19, 20, 21, -1, -1, -1 },
    { NULL, "V", 0x9, 19, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 19, 23, 21, -1, -1, -1 },
    { NULL, "V", 0x9, 19, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 19, 25, 21, -1, -1, -1 },
    { NULL, "V", 0x9, 19, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 19, 27, 21, -1, -1, -1 },
    { NULL, "V", 0x9, 19, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 19, 29, 21, -1, -1, -1 },
    { NULL, "V", 0x9, 19, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 19, 31, 21, -1, -1, -1 },
    { NULL, "V", 0x9, 19, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 19, 33, 21, -1, -1, -1 },
    { NULL, "V", 0x9, 19, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 19, 35, 21, -1, -1, -1 },
    { NULL, "V", 0x9, 19, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 19, 37, 21, -1, -1, -1 },
    { NULL, "V", 0x9, 19, 38, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 39, 7, 21, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 11, 40, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 41, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 42, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 43, -1, -1, 44, -1 },
    { NULL, "V", 0x9, 6, 45, -1, -1, 46, -1 },
    { NULL, "V", 0x9, 6, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 47, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 47, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 49, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 49, 48, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 50, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 51, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 51, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 52, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 52, 9, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 53, 5, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 54, 7, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 55, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 56, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 57, 58, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 20, -1, -1, 59, -1 },
    { NULL, "V", 0x9, 6, 22, -1, -1, 60, -1 },
    { NULL, "V", 0x9, 61, 62, -1, 63, -1, -1 },
    { NULL, "V", 0x9, 61, 64, -1, 65, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(assertTrueWithNSString:withBoolean:);
  methods[2].selector = @selector(assertTrueWithBoolean:);
  methods[3].selector = @selector(assertFalseWithNSString:withBoolean:);
  methods[4].selector = @selector(assertFalseWithBoolean:);
  methods[5].selector = @selector(failWithNSString:);
  methods[6].selector = @selector(fail);
  methods[7].selector = @selector(assertEqualsWithNSString:withId:withId:);
  methods[8].selector = @selector(equalsRegardingNullWithId:withId:);
  methods[9].selector = @selector(isEqualsWithId:withId:);
  methods[10].selector = @selector(assertEqualsWithId:withId:);
  methods[11].selector = @selector(assertNotEqualsWithNSString:withId:withId:);
  methods[12].selector = @selector(assertNotEqualsWithId:withId:);
  methods[13].selector = @selector(failEqualsWithNSString:withId:);
  methods[14].selector = @selector(assertNotEqualsWithNSString:withLong:withLong:);
  methods[15].selector = @selector(assertNotEqualsWithLong:withLong:);
  methods[16].selector = @selector(assertNotEqualsWithNSString:withDouble:withDouble:withDouble:);
  methods[17].selector = @selector(assertNotEqualsWithDouble:withDouble:withDouble:);
  methods[18].selector = @selector(assertNotEqualsWithFloat:withFloat:withFloat:);
  methods[19].selector = @selector(assertArrayEqualsWithNSString:withNSObjectArray:withNSObjectArray:);
  methods[20].selector = @selector(assertArrayEqualsWithNSObjectArray:withNSObjectArray:);
  methods[21].selector = @selector(assertArrayEqualsWithNSString:withBooleanArray:withBooleanArray:);
  methods[22].selector = @selector(assertArrayEqualsWithBooleanArray:withBooleanArray:);
  methods[23].selector = @selector(assertArrayEqualsWithNSString:withByteArray:withByteArray:);
  methods[24].selector = @selector(assertArrayEqualsWithByteArray:withByteArray:);
  methods[25].selector = @selector(assertArrayEqualsWithNSString:withCharArray:withCharArray:);
  methods[26].selector = @selector(assertArrayEqualsWithCharArray:withCharArray:);
  methods[27].selector = @selector(assertArrayEqualsWithNSString:withShortArray:withShortArray:);
  methods[28].selector = @selector(assertArrayEqualsWithShortArray:withShortArray:);
  methods[29].selector = @selector(assertArrayEqualsWithNSString:withIntArray:withIntArray:);
  methods[30].selector = @selector(assertArrayEqualsWithIntArray:withIntArray:);
  methods[31].selector = @selector(assertArrayEqualsWithNSString:withLongArray:withLongArray:);
  methods[32].selector = @selector(assertArrayEqualsWithLongArray:withLongArray:);
  methods[33].selector = @selector(assertArrayEqualsWithNSString:withDoubleArray:withDoubleArray:withDouble:);
  methods[34].selector = @selector(assertArrayEqualsWithDoubleArray:withDoubleArray:withDouble:);
  methods[35].selector = @selector(assertArrayEqualsWithNSString:withFloatArray:withFloatArray:withFloat:);
  methods[36].selector = @selector(assertArrayEqualsWithFloatArray:withFloatArray:withFloat:);
  methods[37].selector = @selector(internalArrayEqualsWithNSString:withId:withId:);
  methods[38].selector = @selector(assertEqualsWithNSString:withDouble:withDouble:withDouble:);
  methods[39].selector = @selector(assertEqualsWithNSString:withFloat:withFloat:withFloat:);
  methods[40].selector = @selector(assertNotEqualsWithNSString:withFloat:withFloat:withFloat:);
  methods[41].selector = @selector(doubleIsDifferentWithDouble:withDouble:withDouble:);
  methods[42].selector = @selector(floatIsDifferentWithFloat:withFloat:withFloat:);
  methods[43].selector = @selector(assertEqualsWithLong:withLong:);
  methods[44].selector = @selector(assertEqualsWithNSString:withLong:withLong:);
  methods[45].selector = @selector(assertEqualsWithDouble:withDouble:);
  methods[46].selector = @selector(assertEqualsWithNSString:withDouble:withDouble:);
  methods[47].selector = @selector(assertEqualsWithDouble:withDouble:withDouble:);
  methods[48].selector = @selector(assertEqualsWithFloat:withFloat:withFloat:);
  methods[49].selector = @selector(assertNotNullWithNSString:withId:);
  methods[50].selector = @selector(assertNotNullWithId:);
  methods[51].selector = @selector(assertNullWithNSString:withId:);
  methods[52].selector = @selector(assertNullWithId:);
  methods[53].selector = @selector(failNotNullWithNSString:withId:);
  methods[54].selector = @selector(assertSameWithNSString:withId:withId:);
  methods[55].selector = @selector(assertSameWithId:withId:);
  methods[56].selector = @selector(assertNotSameWithNSString:withId:withId:);
  methods[57].selector = @selector(assertNotSameWithId:withId:);
  methods[58].selector = @selector(failSameWithNSString:);
  methods[59].selector = @selector(failNotSameWithNSString:withId:withId:);
  methods[60].selector = @selector(failNotEqualsWithNSString:withId:withId:);
  methods[61].selector = @selector(formatWithNSString:withId:withId:);
  methods[62].selector = @selector(formatClassAndValueWithId:withNSString:);
  methods[63].selector = @selector(assertEqualsWithNSString:withNSObjectArray:withNSObjectArray:);
  methods[64].selector = @selector(assertEqualsWithNSObjectArray:withNSObjectArray:);
  methods[65].selector = @selector(assertThatWithId:withOrgHamcrestMatcher:);
  methods[66].selector = @selector(assertThatWithNSString:withId:withOrgHamcrestMatcher:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "assertTrue", "LNSString;Z", "Z", "assertFalse", "fail", "LNSString;", "assertEquals", "LNSString;LNSObject;LNSObject;", "equalsRegardingNull", "LNSObject;LNSObject;", "isEquals", "assertNotEquals", "failEquals", "LNSString;LNSObject;", "LNSString;JJ", "JJ", "LNSString;DDD", "DDD", "FFF", "assertArrayEquals", "LNSString;[LNSObject;[LNSObject;", "LOrgJunitInternalArrayComparisonFailure;", "[LNSObject;[LNSObject;", "LNSString;[Z[Z", "[Z[Z", "LNSString;[B[B", "[B[B", "LNSString;[C[C", "[C[C", "LNSString;[S[S", "[S[S", "LNSString;[I[I", "[I[I", "LNSString;[J[J", "[J[J", "LNSString;[D[DD", "[D[DD", "LNSString;[F[FF", "[F[FF", "internalArrayEquals", "LNSString;FFF", "doubleIsDifferent", "floatIsDifferent", "DD", (void *)&OrgJunitAssert__Annotations$0, "LNSString;DD", (void *)&OrgJunitAssert__Annotations$1, "assertNotNull", "LNSObject;", "assertNull", "failNotNull", "assertSame", "assertNotSame", "failSame", "failNotSame", "failNotEquals", "format", "formatClassAndValue", "LNSObject;LNSString;", (void *)&OrgJunitAssert__Annotations$2, (void *)&OrgJunitAssert__Annotations$3, "assertThat", "LNSObject;LOrgHamcrestMatcher;", "<T:Ljava/lang/Object;>(TT;Lorg/hamcrest/Matcher<-TT;>;)V", "LNSString;LNSObject;LOrgHamcrestMatcher;", "<T:Ljava/lang/Object;>(Ljava/lang/String;TT;Lorg/hamcrest/Matcher<-TT;>;)V" };
  static const J2ObjcClassInfo _OrgJunitAssert = { "Assert", "org.junit", ptrTable, methods, NULL, 7, 0x1, 67, 0, -1, -1, -1, -1, -1 };
  return &_OrgJunitAssert;
}

@end

void OrgJunitAssert_init(OrgJunitAssert *self) {
  NSObject_init(self);
}

OrgJunitAssert *new_OrgJunitAssert_init() {
  J2OBJC_NEW_IMPL(OrgJunitAssert, init)
}

OrgJunitAssert *create_OrgJunitAssert_init() {
  J2OBJC_CREATE_IMPL(OrgJunitAssert, init)
}

void OrgJunitAssert_assertTrueWithNSString_withBoolean_(NSString *message, jboolean condition) {
  OrgJunitAssert_initialize();
  if (!condition) {
    OrgJunitAssert_failWithNSString_(message);
  }
}

void OrgJunitAssert_assertTrueWithBoolean_(jboolean condition) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(nil, condition);
}

void OrgJunitAssert_assertFalseWithNSString_withBoolean_(NSString *message, jboolean condition) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(message, !condition);
}

void OrgJunitAssert_assertFalseWithBoolean_(jboolean condition) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_assertFalseWithNSString_withBoolean_(nil, condition);
}

void OrgJunitAssert_failWithNSString_(NSString *message) {
  OrgJunitAssert_initialize();
  if (message == nil) {
    @throw create_JavaLangAssertionError_init();
  }
  @throw create_JavaLangAssertionError_initWithId_(message);
}

void OrgJunitAssert_fail() {
  OrgJunitAssert_initialize();
  OrgJunitAssert_failWithNSString_(nil);
}

void OrgJunitAssert_assertEqualsWithNSString_withId_withId_(NSString *message, id expected, id actual) {
  OrgJunitAssert_initialize();
  if (OrgJunitAssert_equalsRegardingNullWithId_withId_(expected, actual)) {
    return;
  }
  else if ([expected isKindOfClass:[NSString class]] && [actual isKindOfClass:[NSString class]]) {
    NSString *cleanMessage = message == nil ? @"" : message;
    @throw create_OrgJunitComparisonFailure_initWithNSString_withNSString_withNSString_(cleanMessage, (NSString *) cast_chk(expected, [NSString class]), (NSString *) cast_chk(actual, [NSString class]));
  }
  else {
    OrgJunitAssert_failNotEqualsWithNSString_withId_withId_(message, expected, actual);
  }
}

jboolean OrgJunitAssert_equalsRegardingNullWithId_withId_(id expected, id actual) {
  OrgJunitAssert_initialize();
  if (expected == nil) {
    return actual == nil;
  }
  return OrgJunitAssert_isEqualsWithId_withId_(expected, actual);
}

jboolean OrgJunitAssert_isEqualsWithId_withId_(id expected, id actual) {
  OrgJunitAssert_initialize();
  return [nil_chk(expected) isEqual:actual];
}

void OrgJunitAssert_assertEqualsWithId_withId_(id expected, id actual) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_assertEqualsWithNSString_withId_withId_(nil, expected, actual);
}

void OrgJunitAssert_assertNotEqualsWithNSString_withId_withId_(NSString *message, id unexpected, id actual) {
  OrgJunitAssert_initialize();
  if (OrgJunitAssert_equalsRegardingNullWithId_withId_(unexpected, actual)) {
    OrgJunitAssert_failEqualsWithNSString_withId_(message, actual);
  }
}

void OrgJunitAssert_assertNotEqualsWithId_withId_(id unexpected, id actual) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_assertNotEqualsWithNSString_withId_withId_(nil, unexpected, actual);
}

void OrgJunitAssert_failEqualsWithNSString_withId_(NSString *message, id actual) {
  OrgJunitAssert_initialize();
  NSString *formatted = @"Values should be different. ";
  if (message != nil) {
    formatted = JreStrcat("$$", message, @". ");
  }
  JreStrAppend(&formatted, "$@", @"Actual: ", actual);
  OrgJunitAssert_failWithNSString_(formatted);
}

void OrgJunitAssert_assertNotEqualsWithNSString_withLong_withLong_(NSString *message, jlong unexpected, jlong actual) {
  OrgJunitAssert_initialize();
  if (unexpected == actual) {
    OrgJunitAssert_failEqualsWithNSString_withId_(message, JavaLangLong_valueOfWithLong_(actual));
  }
}

void OrgJunitAssert_assertNotEqualsWithLong_withLong_(jlong unexpected, jlong actual) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_assertNotEqualsWithNSString_withLong_withLong_(nil, unexpected, actual);
}

void OrgJunitAssert_assertNotEqualsWithNSString_withDouble_withDouble_withDouble_(NSString *message, jdouble unexpected, jdouble actual, jdouble delta) {
  OrgJunitAssert_initialize();
  if (!OrgJunitAssert_doubleIsDifferentWithDouble_withDouble_withDouble_(unexpected, actual, delta)) {
    OrgJunitAssert_failEqualsWithNSString_withId_(message, JavaLangDouble_valueOfWithDouble_(actual));
  }
}

void OrgJunitAssert_assertNotEqualsWithDouble_withDouble_withDouble_(jdouble unexpected, jdouble actual, jdouble delta) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_assertNotEqualsWithNSString_withDouble_withDouble_withDouble_(nil, unexpected, actual, delta);
}

void OrgJunitAssert_assertNotEqualsWithFloat_withFloat_withFloat_(jfloat unexpected, jfloat actual, jfloat delta) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_assertNotEqualsWithNSString_withFloat_withFloat_withFloat_(nil, unexpected, actual, delta);
}

void OrgJunitAssert_assertArrayEqualsWithNSString_withNSObjectArray_withNSObjectArray_(NSString *message, IOSObjectArray *expecteds, IOSObjectArray *actuals) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_internalArrayEqualsWithNSString_withId_withId_(message, expecteds, actuals);
}

void OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_(IOSObjectArray *expecteds, IOSObjectArray *actuals) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_assertArrayEqualsWithNSString_withNSObjectArray_withNSObjectArray_(nil, expecteds, actuals);
}

void OrgJunitAssert_assertArrayEqualsWithNSString_withBooleanArray_withBooleanArray_(NSString *message, IOSBooleanArray *expecteds, IOSBooleanArray *actuals) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_internalArrayEqualsWithNSString_withId_withId_(message, expecteds, actuals);
}

void OrgJunitAssert_assertArrayEqualsWithBooleanArray_withBooleanArray_(IOSBooleanArray *expecteds, IOSBooleanArray *actuals) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_assertArrayEqualsWithNSString_withBooleanArray_withBooleanArray_(nil, expecteds, actuals);
}

void OrgJunitAssert_assertArrayEqualsWithNSString_withByteArray_withByteArray_(NSString *message, IOSByteArray *expecteds, IOSByteArray *actuals) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_internalArrayEqualsWithNSString_withId_withId_(message, expecteds, actuals);
}

void OrgJunitAssert_assertArrayEqualsWithByteArray_withByteArray_(IOSByteArray *expecteds, IOSByteArray *actuals) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_assertArrayEqualsWithNSString_withByteArray_withByteArray_(nil, expecteds, actuals);
}

void OrgJunitAssert_assertArrayEqualsWithNSString_withCharArray_withCharArray_(NSString *message, IOSCharArray *expecteds, IOSCharArray *actuals) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_internalArrayEqualsWithNSString_withId_withId_(message, expecteds, actuals);
}

void OrgJunitAssert_assertArrayEqualsWithCharArray_withCharArray_(IOSCharArray *expecteds, IOSCharArray *actuals) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_assertArrayEqualsWithNSString_withCharArray_withCharArray_(nil, expecteds, actuals);
}

void OrgJunitAssert_assertArrayEqualsWithNSString_withShortArray_withShortArray_(NSString *message, IOSShortArray *expecteds, IOSShortArray *actuals) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_internalArrayEqualsWithNSString_withId_withId_(message, expecteds, actuals);
}

void OrgJunitAssert_assertArrayEqualsWithShortArray_withShortArray_(IOSShortArray *expecteds, IOSShortArray *actuals) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_assertArrayEqualsWithNSString_withShortArray_withShortArray_(nil, expecteds, actuals);
}

void OrgJunitAssert_assertArrayEqualsWithNSString_withIntArray_withIntArray_(NSString *message, IOSIntArray *expecteds, IOSIntArray *actuals) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_internalArrayEqualsWithNSString_withId_withId_(message, expecteds, actuals);
}

void OrgJunitAssert_assertArrayEqualsWithIntArray_withIntArray_(IOSIntArray *expecteds, IOSIntArray *actuals) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_assertArrayEqualsWithNSString_withIntArray_withIntArray_(nil, expecteds, actuals);
}

void OrgJunitAssert_assertArrayEqualsWithNSString_withLongArray_withLongArray_(NSString *message, IOSLongArray *expecteds, IOSLongArray *actuals) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_internalArrayEqualsWithNSString_withId_withId_(message, expecteds, actuals);
}

void OrgJunitAssert_assertArrayEqualsWithLongArray_withLongArray_(IOSLongArray *expecteds, IOSLongArray *actuals) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_assertArrayEqualsWithNSString_withLongArray_withLongArray_(nil, expecteds, actuals);
}

void OrgJunitAssert_assertArrayEqualsWithNSString_withDoubleArray_withDoubleArray_withDouble_(NSString *message, IOSDoubleArray *expecteds, IOSDoubleArray *actuals, jdouble delta) {
  OrgJunitAssert_initialize();
  [create_OrgJunitInternalInexactComparisonCriteria_initWithDouble_(delta) arrayEqualsWithNSString:message withId:expecteds withId:actuals];
}

void OrgJunitAssert_assertArrayEqualsWithDoubleArray_withDoubleArray_withDouble_(IOSDoubleArray *expecteds, IOSDoubleArray *actuals, jdouble delta) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_assertArrayEqualsWithNSString_withDoubleArray_withDoubleArray_withDouble_(nil, expecteds, actuals, delta);
}

void OrgJunitAssert_assertArrayEqualsWithNSString_withFloatArray_withFloatArray_withFloat_(NSString *message, IOSFloatArray *expecteds, IOSFloatArray *actuals, jfloat delta) {
  OrgJunitAssert_initialize();
  [create_OrgJunitInternalInexactComparisonCriteria_initWithFloat_(delta) arrayEqualsWithNSString:message withId:expecteds withId:actuals];
}

void OrgJunitAssert_assertArrayEqualsWithFloatArray_withFloatArray_withFloat_(IOSFloatArray *expecteds, IOSFloatArray *actuals, jfloat delta) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_assertArrayEqualsWithNSString_withFloatArray_withFloatArray_withFloat_(nil, expecteds, actuals, delta);
}

void OrgJunitAssert_internalArrayEqualsWithNSString_withId_withId_(NSString *message, id expecteds, id actuals) {
  OrgJunitAssert_initialize();
  [create_OrgJunitInternalExactComparisonCriteria_init() arrayEqualsWithNSString:message withId:expecteds withId:actuals];
}

void OrgJunitAssert_assertEqualsWithNSString_withDouble_withDouble_withDouble_(NSString *message, jdouble expected, jdouble actual, jdouble delta) {
  OrgJunitAssert_initialize();
  if (OrgJunitAssert_doubleIsDifferentWithDouble_withDouble_withDouble_(expected, actual, delta)) {
    OrgJunitAssert_failNotEqualsWithNSString_withId_withId_(message, JavaLangDouble_valueOfWithDouble_(expected), JavaLangDouble_valueOfWithDouble_(actual));
  }
}

void OrgJunitAssert_assertEqualsWithNSString_withFloat_withFloat_withFloat_(NSString *message, jfloat expected, jfloat actual, jfloat delta) {
  OrgJunitAssert_initialize();
  if (OrgJunitAssert_floatIsDifferentWithFloat_withFloat_withFloat_(expected, actual, delta)) {
    OrgJunitAssert_failNotEqualsWithNSString_withId_withId_(message, JavaLangFloat_valueOfWithFloat_(expected), JavaLangFloat_valueOfWithFloat_(actual));
  }
}

void OrgJunitAssert_assertNotEqualsWithNSString_withFloat_withFloat_withFloat_(NSString *message, jfloat unexpected, jfloat actual, jfloat delta) {
  OrgJunitAssert_initialize();
  if (!OrgJunitAssert_floatIsDifferentWithFloat_withFloat_withFloat_(unexpected, actual, delta)) {
    OrgJunitAssert_failEqualsWithNSString_withId_(message, JavaLangFloat_valueOfWithFloat_(actual));
  }
}

jboolean OrgJunitAssert_doubleIsDifferentWithDouble_withDouble_withDouble_(jdouble d1, jdouble d2, jdouble delta) {
  OrgJunitAssert_initialize();
  if (JavaLangDouble_compareWithDouble_withDouble_(d1, d2) == 0) {
    return false;
  }
  if ((JavaLangMath_absWithDouble_(d1 - d2) <= delta)) {
    return false;
  }
  return true;
}

jboolean OrgJunitAssert_floatIsDifferentWithFloat_withFloat_withFloat_(jfloat f1, jfloat f2, jfloat delta) {
  OrgJunitAssert_initialize();
  if (JavaLangFloat_compareWithFloat_withFloat_(f1, f2) == 0) {
    return false;
  }
  if ((JavaLangMath_absWithFloat_(f1 - f2) <= delta)) {
    return false;
  }
  return true;
}

void OrgJunitAssert_assertEqualsWithLong_withLong_(jlong expected, jlong actual) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(nil, expected, actual);
}

void OrgJunitAssert_assertEqualsWithNSString_withLong_withLong_(NSString *message, jlong expected, jlong actual) {
  OrgJunitAssert_initialize();
  if (expected != actual) {
    OrgJunitAssert_failNotEqualsWithNSString_withId_withId_(message, JavaLangLong_valueOfWithLong_(expected), JavaLangLong_valueOfWithLong_(actual));
  }
}

void OrgJunitAssert_assertEqualsWithDouble_withDouble_(jdouble expected, jdouble actual) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_assertEqualsWithNSString_withDouble_withDouble_(nil, expected, actual);
}

void OrgJunitAssert_assertEqualsWithNSString_withDouble_withDouble_(NSString *message, jdouble expected, jdouble actual) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_failWithNSString_(@"Use assertEquals(expected, actual, delta) to compare floating-point numbers");
}

void OrgJunitAssert_assertEqualsWithDouble_withDouble_withDouble_(jdouble expected, jdouble actual, jdouble delta) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_assertEqualsWithNSString_withDouble_withDouble_withDouble_(nil, expected, actual, delta);
}

void OrgJunitAssert_assertEqualsWithFloat_withFloat_withFloat_(jfloat expected, jfloat actual, jfloat delta) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_assertEqualsWithNSString_withFloat_withFloat_withFloat_(nil, expected, actual, delta);
}

void OrgJunitAssert_assertNotNullWithNSString_withId_(NSString *message, id object) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_assertTrueWithNSString_withBoolean_(message, object != nil);
}

void OrgJunitAssert_assertNotNullWithId_(id object) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_assertNotNullWithNSString_withId_(nil, object);
}

void OrgJunitAssert_assertNullWithNSString_withId_(NSString *message, id object) {
  OrgJunitAssert_initialize();
  if (object == nil) {
    return;
  }
  OrgJunitAssert_failNotNullWithNSString_withId_(message, object);
}

void OrgJunitAssert_assertNullWithId_(id object) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_assertNullWithNSString_withId_(nil, object);
}

void OrgJunitAssert_failNotNullWithNSString_withId_(NSString *message, id actual) {
  OrgJunitAssert_initialize();
  NSString *formatted = @"";
  if (message != nil) {
    formatted = JreStrcat("$C", message, ' ');
  }
  OrgJunitAssert_failWithNSString_(JreStrcat("$$@C", formatted, @"expected null, but was:<", actual, '>'));
}

void OrgJunitAssert_assertSameWithNSString_withId_withId_(NSString *message, id expected, id actual) {
  OrgJunitAssert_initialize();
  if (expected == actual) {
    return;
  }
  OrgJunitAssert_failNotSameWithNSString_withId_withId_(message, expected, actual);
}

void OrgJunitAssert_assertSameWithId_withId_(id expected, id actual) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_assertSameWithNSString_withId_withId_(nil, expected, actual);
}

void OrgJunitAssert_assertNotSameWithNSString_withId_withId_(NSString *message, id unexpected, id actual) {
  OrgJunitAssert_initialize();
  if (unexpected == actual) {
    OrgJunitAssert_failSameWithNSString_(message);
  }
}

void OrgJunitAssert_assertNotSameWithId_withId_(id unexpected, id actual) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_assertNotSameWithNSString_withId_withId_(nil, unexpected, actual);
}

void OrgJunitAssert_failSameWithNSString_(NSString *message) {
  OrgJunitAssert_initialize();
  NSString *formatted = @"";
  if (message != nil) {
    formatted = JreStrcat("$C", message, ' ');
  }
  OrgJunitAssert_failWithNSString_(JreStrcat("$$", formatted, @"expected not same"));
}

void OrgJunitAssert_failNotSameWithNSString_withId_withId_(NSString *message, id expected, id actual) {
  OrgJunitAssert_initialize();
  NSString *formatted = @"";
  if (message != nil) {
    formatted = JreStrcat("$C", message, ' ');
  }
  OrgJunitAssert_failWithNSString_(JreStrcat("$$@$@C", formatted, @"expected same:<", expected, @"> was not:<", actual, '>'));
}

void OrgJunitAssert_failNotEqualsWithNSString_withId_withId_(NSString *message, id expected, id actual) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_failWithNSString_(OrgJunitAssert_formatWithNSString_withId_withId_(message, expected, actual));
}

NSString *OrgJunitAssert_formatWithNSString_withId_withId_(NSString *message, id expected, id actual) {
  OrgJunitAssert_initialize();
  NSString *formatted = @"";
  if (message != nil && ![message isEqual:@""]) {
    formatted = JreStrcat("$C", message, ' ');
  }
  NSString *expectedString = NSString_java_valueOf_(expected);
  NSString *actualString = NSString_java_valueOf_(actual);
  if ([((NSString *) nil_chk(expectedString)) isEqual:actualString]) {
    return JreStrcat("$$$$$", formatted, @"expected: ", OrgJunitAssert_formatClassAndValueWithId_withNSString_(expected, expectedString), @" but was: ", OrgJunitAssert_formatClassAndValueWithId_withNSString_(actual, actualString));
  }
  else {
    return JreStrcat("$$$$$C", formatted, @"expected:<", expectedString, @"> but was:<", actualString, '>');
  }
}

NSString *OrgJunitAssert_formatClassAndValueWithId_withNSString_(id value, NSString *valueString) {
  OrgJunitAssert_initialize();
  NSString *className_ = value == nil ? @"null" : [[value java_getClass] getName];
  return JreStrcat("$C$C", className_, '<', valueString, '>');
}

void OrgJunitAssert_assertEqualsWithNSString_withNSObjectArray_withNSObjectArray_(NSString *message, IOSObjectArray *expecteds, IOSObjectArray *actuals) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_assertArrayEqualsWithNSString_withNSObjectArray_withNSObjectArray_(message, expecteds, actuals);
}

void OrgJunitAssert_assertEqualsWithNSObjectArray_withNSObjectArray_(IOSObjectArray *expecteds, IOSObjectArray *actuals) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_assertArrayEqualsWithNSObjectArray_withNSObjectArray_(expecteds, actuals);
}

void OrgJunitAssert_assertThatWithId_withOrgHamcrestMatcher_(id actual, id<OrgHamcrestMatcher> matcher) {
  OrgJunitAssert_initialize();
  OrgJunitAssert_assertThatWithNSString_withId_withOrgHamcrestMatcher_(@"", actual, matcher);
}

void OrgJunitAssert_assertThatWithNSString_withId_withOrgHamcrestMatcher_(NSString *reason, id actual, id<OrgHamcrestMatcher> matcher) {
  OrgJunitAssert_initialize();
  OrgHamcrestMatcherAssert_assertThatWithNSString_withId_withOrgHamcrestMatcher_(reason, actual, matcher);
}

IOSObjectArray *OrgJunitAssert__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgJunitAssert__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgJunitAssert__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgJunitAssert__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitAssert)
