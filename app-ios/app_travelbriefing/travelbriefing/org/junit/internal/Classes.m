//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/internal/Classes.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Thread.h"
#include "org/junit/internal/Classes.h"

@implementation OrgJunitInternalClasses

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJunitInternalClasses_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSClass *)getClassWithNSString:(NSString *)className_ {
  return OrgJunitInternalClasses_getClassWithNSString_(className_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x9, 0, 1, 2, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getClassWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getClass", "LNSString;", "LJavaLangClassNotFoundException;", "(Ljava/lang/String;)Ljava/lang/Class<*>;" };
  static const J2ObjcClassInfo _OrgJunitInternalClasses = { "Classes", "org.junit.internal", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgJunitInternalClasses;
}

@end

void OrgJunitInternalClasses_init(OrgJunitInternalClasses *self) {
  NSObject_init(self);
}

OrgJunitInternalClasses *new_OrgJunitInternalClasses_init() {
  J2OBJC_NEW_IMPL(OrgJunitInternalClasses, init)
}

OrgJunitInternalClasses *create_OrgJunitInternalClasses_init() {
  J2OBJC_CREATE_IMPL(OrgJunitInternalClasses, init)
}

IOSClass *OrgJunitInternalClasses_getClassWithNSString_(NSString *className_) {
  OrgJunitInternalClasses_initialize();
  return IOSClass_forName_initialize_classLoader_(className_, true, [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getContextClassLoader]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitInternalClasses)
