//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/internal/runners/TestMethod.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Method.h"
#include "java/util/List.h"
#include "org/junit/After.h"
#include "org/junit/Before.h"
#include "org/junit/Ignore.h"
#include "org/junit/Test.h"
#include "org/junit/internal/runners/TestClass.h"
#include "org/junit/internal/runners/TestMethod.h"

@interface OrgJunitInternalRunnersTestMethod () {
 @public
  JavaLangReflectMethod *method_;
  OrgJunitInternalRunnersTestClass *testClass_;
}

@end

J2OBJC_FIELD_SETTER(OrgJunitInternalRunnersTestMethod, method_, JavaLangReflectMethod *)
J2OBJC_FIELD_SETTER(OrgJunitInternalRunnersTestMethod, testClass_, OrgJunitInternalRunnersTestClass *)

__attribute__((unused)) static IOSObjectArray *OrgJunitInternalRunnersTestMethod__Annotations$0();

@implementation OrgJunitInternalRunnersTestMethod

- (instancetype)initWithJavaLangReflectMethod:(JavaLangReflectMethod *)method
         withOrgJunitInternalRunnersTestClass:(OrgJunitInternalRunnersTestClass *)testClass {
  OrgJunitInternalRunnersTestMethod_initWithJavaLangReflectMethod_withOrgJunitInternalRunnersTestClass_(self, method, testClass);
  return self;
}

- (jboolean)isIgnored {
  return [((JavaLangReflectMethod *) nil_chk(method_)) getAnnotationWithIOSClass:OrgJunitIgnore_class_()] != nil;
}

- (jlong)getTimeout {
  id<OrgJunitTest> annotation = ((id<OrgJunitTest>) [((JavaLangReflectMethod *) nil_chk(method_)) getAnnotationWithIOSClass:OrgJunitTest_class_()]);
  if (annotation == nil) {
    return 0;
  }
  jlong timeout = [annotation timeout];
  return timeout;
}

- (IOSClass *)getExpectedException {
  id<OrgJunitTest> annotation = ((id<OrgJunitTest>) [((JavaLangReflectMethod *) nil_chk(method_)) getAnnotationWithIOSClass:OrgJunitTest_class_()]);
  if (annotation == nil || [annotation expected] == OrgJunitTest_None_class_()) {
    return nil;
  }
  else {
    return [annotation expected];
  }
}

- (jboolean)isUnexpectedWithNSException:(NSException *)exception {
  return ![((IOSClass *) nil_chk([self getExpectedException])) isAssignableFrom:[((NSException *) nil_chk(exception)) java_getClass]];
}

- (jboolean)expectsException {
  return [self getExpectedException] != nil;
}

- (id<JavaUtilList>)getBefores {
  return [((OrgJunitInternalRunnersTestClass *) nil_chk(testClass_)) getAnnotatedMethodsWithIOSClass:OrgJunitBefore_class_()];
}

- (id<JavaUtilList>)getAfters {
  return [((OrgJunitInternalRunnersTestClass *) nil_chk(testClass_)) getAnnotatedMethodsWithIOSClass:OrgJunitAfter_class_()];
}

- (void)invokeWithId:(id)test {
  [((JavaLangReflectMethod *) nil_chk(method_)) invokeWithId:test withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]];
}

- (void)dealloc {
  RELEASE_(method_);
  RELEASE_(testClass_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x4, -1, -1, -1, 1, -1, -1 },
    { NULL, "Z", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, -1, -1, -1, 4, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, -1, -1, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 7, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangReflectMethod:withOrgJunitInternalRunnersTestClass:);
  methods[1].selector = @selector(isIgnored);
  methods[2].selector = @selector(getTimeout);
  methods[3].selector = @selector(getExpectedException);
  methods[4].selector = @selector(isUnexpectedWithNSException:);
  methods[5].selector = @selector(expectsException);
  methods[6].selector = @selector(getBefores);
  methods[7].selector = @selector(getAfters);
  methods[8].selector = @selector(invokeWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "method_", "LJavaLangReflectMethod;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "testClass_", "LOrgJunitInternalRunnersTestClass;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangReflectMethod;LOrgJunitInternalRunnersTestClass;", "()Ljava/lang/Class<+Ljava/lang/Throwable;>;", "isUnexpected", "LNSException;", "()Ljava/util/List<Ljava/lang/reflect/Method;>;", "invoke", "LNSObject;", "LJavaLangIllegalArgumentException;LJavaLangIllegalAccessException;LJavaLangReflectInvocationTargetException;", (void *)&OrgJunitInternalRunnersTestMethod__Annotations$0 };
  static const J2ObjcClassInfo _OrgJunitInternalRunnersTestMethod = { "TestMethod", "org.junit.internal.runners", ptrTable, methods, fields, 7, 0x1, 9, 2, -1, -1, -1, -1, 8 };
  return &_OrgJunitInternalRunnersTestMethod;
}

@end

void OrgJunitInternalRunnersTestMethod_initWithJavaLangReflectMethod_withOrgJunitInternalRunnersTestClass_(OrgJunitInternalRunnersTestMethod *self, JavaLangReflectMethod *method, OrgJunitInternalRunnersTestClass *testClass) {
  NSObject_init(self);
  JreStrongAssign(&self->method_, method);
  JreStrongAssign(&self->testClass_, testClass);
}

OrgJunitInternalRunnersTestMethod *new_OrgJunitInternalRunnersTestMethod_initWithJavaLangReflectMethod_withOrgJunitInternalRunnersTestClass_(JavaLangReflectMethod *method, OrgJunitInternalRunnersTestClass *testClass) {
  J2OBJC_NEW_IMPL(OrgJunitInternalRunnersTestMethod, initWithJavaLangReflectMethod_withOrgJunitInternalRunnersTestClass_, method, testClass)
}

OrgJunitInternalRunnersTestMethod *create_OrgJunitInternalRunnersTestMethod_initWithJavaLangReflectMethod_withOrgJunitInternalRunnersTestClass_(JavaLangReflectMethod *method, OrgJunitInternalRunnersTestClass *testClass) {
  J2OBJC_CREATE_IMPL(OrgJunitInternalRunnersTestMethod, initWithJavaLangReflectMethod_withOrgJunitInternalRunnersTestClass_, method, testClass)
}

IOSObjectArray *OrgJunitInternalRunnersTestMethod__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitInternalRunnersTestMethod)
