//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/internal/runners/model/ReflectiveCallable.java
//

#include "J2ObjC_source.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "org/junit/internal/runners/model/ReflectiveCallable.h"

@implementation OrgJunitInternalRunnersModelReflectiveCallable

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJunitInternalRunnersModelReflectiveCallable_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)run {
  @try {
    return [self runReflectiveCall];
  }
  @catch (JavaLangReflectInvocationTargetException *e) {
    @throw [((JavaLangReflectInvocationTargetException *) nil_chk(e)) getTargetException];
  }
}

- (id)runReflectiveCall {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "LNSObject;", 0x404, -1, -1, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(run);
  methods[2].selector = @selector(runReflectiveCall);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSException;" };
  static const J2ObjcClassInfo _OrgJunitInternalRunnersModelReflectiveCallable = { "ReflectiveCallable", "org.junit.internal.runners.model", ptrTable, methods, NULL, 7, 0x401, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgJunitInternalRunnersModelReflectiveCallable;
}

@end

void OrgJunitInternalRunnersModelReflectiveCallable_init(OrgJunitInternalRunnersModelReflectiveCallable *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitInternalRunnersModelReflectiveCallable)
