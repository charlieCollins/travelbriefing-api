//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/junit/internal/ComparisonCriteria.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/AssertionError.h"
#include "java/lang/reflect/Array.h"
#include "java/util/Arrays.h"
#include "org/junit/Assert.h"
#include "org/junit/internal/ArrayComparisonFailure.h"
#include "org/junit/internal/ComparisonCriteria.h"

@interface OrgJunitInternalComparisonCriteria ()

- (jboolean)isArrayWithId:(id)expected;

- (jint)assertArraysAreSameLengthWithId:(id)expecteds
                                 withId:(id)actuals
                           withNSString:(NSString *)header;

@end

__attribute__((unused)) static jboolean OrgJunitInternalComparisonCriteria_isArrayWithId_(OrgJunitInternalComparisonCriteria *self, id expected);

__attribute__((unused)) static jint OrgJunitInternalComparisonCriteria_assertArraysAreSameLengthWithId_withId_withNSString_(OrgJunitInternalComparisonCriteria *self, id expecteds, id actuals, NSString *header);

@implementation OrgJunitInternalComparisonCriteria

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJunitInternalComparisonCriteria_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)arrayEqualsWithNSString:(NSString *)message
                         withId:(id)expecteds
                         withId:(id)actuals {
  if (expecteds == actuals || JavaUtilArrays_deepEqualsWithNSObjectArray_withNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ expecteds } count:1 type:NSObject_class_()], [IOSObjectArray arrayWithObjects:(id[]){ actuals } count:1 type:NSObject_class_()])) {
    return;
  }
  NSString *header = message == nil ? @"" : JreStrcat("$$", message, @": ");
  jint expectedsLength = OrgJunitInternalComparisonCriteria_assertArraysAreSameLengthWithId_withId_withNSString_(self, expecteds, actuals, header);
  for (jint i = 0; i < expectedsLength; i++) {
    id expected = JavaLangReflectArray_getWithId_withInt_(expecteds, i);
    id actual = JavaLangReflectArray_getWithId_withInt_(actuals, i);
    if (OrgJunitInternalComparisonCriteria_isArrayWithId_(self, expected) && OrgJunitInternalComparisonCriteria_isArrayWithId_(self, actual)) {
      @try {
        [self arrayEqualsWithNSString:message withId:expected withId:actual];
      }
      @catch (OrgJunitInternalArrayComparisonFailure *e) {
        [((OrgJunitInternalArrayComparisonFailure *) nil_chk(e)) addDimensionWithInt:i];
        @throw e;
      }
    }
    else {
      @try {
        [self assertElementsEqualWithId:expected withId:actual];
      }
      @catch (JavaLangAssertionError *e) {
        @throw create_OrgJunitInternalArrayComparisonFailure_initWithNSString_withJavaLangAssertionError_withInt_(header, e, i);
      }
    }
  }
}

- (jboolean)isArrayWithId:(id)expected {
  return OrgJunitInternalComparisonCriteria_isArrayWithId_(self, expected);
}

- (jint)assertArraysAreSameLengthWithId:(id)expecteds
                                 withId:(id)actuals
                           withNSString:(NSString *)header {
  return OrgJunitInternalComparisonCriteria_assertArraysAreSameLengthWithId_withId_withNSString_(self, expecteds, actuals, header);
}

- (void)assertElementsEqualWithId:(id)expected
                           withId:(id)actual {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "Z", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x404, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(arrayEqualsWithNSString:withId:withId:);
  methods[2].selector = @selector(isArrayWithId:);
  methods[3].selector = @selector(assertArraysAreSameLengthWithId:withId:withNSString:);
  methods[4].selector = @selector(assertElementsEqualWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "arrayEquals", "LNSString;LNSObject;LNSObject;", "LOrgJunitInternalArrayComparisonFailure;", "isArray", "LNSObject;", "assertArraysAreSameLength", "LNSObject;LNSObject;LNSString;", "assertElementsEqual", "LNSObject;LNSObject;" };
  static const J2ObjcClassInfo _OrgJunitInternalComparisonCriteria = { "ComparisonCriteria", "org.junit.internal", ptrTable, methods, NULL, 7, 0x401, 5, 0, -1, -1, -1, -1, -1 };
  return &_OrgJunitInternalComparisonCriteria;
}

@end

void OrgJunitInternalComparisonCriteria_init(OrgJunitInternalComparisonCriteria *self) {
  NSObject_init(self);
}

jboolean OrgJunitInternalComparisonCriteria_isArrayWithId_(OrgJunitInternalComparisonCriteria *self, id expected) {
  return expected != nil && [[expected java_getClass] isArray];
}

jint OrgJunitInternalComparisonCriteria_assertArraysAreSameLengthWithId_withId_withNSString_(OrgJunitInternalComparisonCriteria *self, id expecteds, id actuals, NSString *header) {
  if (expecteds == nil) {
    OrgJunitAssert_failWithNSString_(JreStrcat("$$", header, @"expected array was null"));
  }
  if (actuals == nil) {
    OrgJunitAssert_failWithNSString_(JreStrcat("$$", header, @"actual array was null"));
  }
  jint actualsLength = JavaLangReflectArray_getLengthWithId_(actuals);
  jint expectedsLength = JavaLangReflectArray_getLengthWithId_(expecteds);
  if (actualsLength != expectedsLength) {
    OrgJunitAssert_failWithNSString_(JreStrcat("$$I$I", header, @"array lengths differed, expected.length=", expectedsLength, @" actual.length=", actualsLength));
  }
  return expectedsLength;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJunitInternalComparisonCriteria)
