//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/hamcrest/core/SubstringMatcher.java
//

#include "J2ObjC_source.h"
#include "org/hamcrest/Description.h"
#include "org/hamcrest/TypeSafeMatcher.h"
#include "org/hamcrest/core/SubstringMatcher.h"

@implementation OrgHamcrestCoreSubstringMatcher

- (instancetype)initWithNSString:(NSString *)substring {
  OrgHamcrestCoreSubstringMatcher_initWithNSString_(self, substring);
  return self;
}

- (jboolean)matchesSafelyWithId:(NSString *)item {
  return [self evalSubstringOfWithNSString:item];
}

- (void)describeMismatchSafelyWithId:(NSString *)item
          withOrgHamcrestDescription:(id<OrgHamcrestDescription>)mismatchDescription {
  [((id<OrgHamcrestDescription>) nil_chk([((id<OrgHamcrestDescription>) nil_chk([((id<OrgHamcrestDescription>) nil_chk(mismatchDescription)) appendTextWithNSString:@"was \""])) appendTextWithNSString:item])) appendTextWithNSString:@"\""];
}

- (void)describeToWithOrgHamcrestDescription:(id<OrgHamcrestDescription>)description_ {
  [((id<OrgHamcrestDescription>) nil_chk([((id<OrgHamcrestDescription>) nil_chk([((id<OrgHamcrestDescription>) nil_chk([((id<OrgHamcrestDescription>) nil_chk(description_)) appendTextWithNSString:@"a string "])) appendTextWithNSString:[self relationship]])) appendTextWithNSString:@" "])) appendValueWithId:substring_];
}

- (jboolean)evalSubstringOfWithNSString:(NSString *)string {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)relationship {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)dealloc {
  RELEASE_(substring_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x404, 6, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x404, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(matchesSafelyWithId:);
  methods[2].selector = @selector(describeMismatchSafelyWithId:withOrgHamcrestDescription:);
  methods[3].selector = @selector(describeToWithOrgHamcrestDescription:);
  methods[4].selector = @selector(evalSubstringOfWithNSString:);
  methods[5].selector = @selector(relationship);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "substring_", "LNSString;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "matchesSafely", "describeMismatchSafely", "LNSString;LOrgHamcrestDescription;", "describeTo", "LOrgHamcrestDescription;", "evalSubstringOf", "Lorg/hamcrest/TypeSafeMatcher<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _OrgHamcrestCoreSubstringMatcher = { "SubstringMatcher", "org.hamcrest.core", ptrTable, methods, fields, 7, 0x401, 6, 1, -1, -1, -1, 7, -1 };
  return &_OrgHamcrestCoreSubstringMatcher;
}

@end

void OrgHamcrestCoreSubstringMatcher_initWithNSString_(OrgHamcrestCoreSubstringMatcher *self, NSString *substring) {
  OrgHamcrestTypeSafeMatcher_init(self);
  JreStrongAssign(&self->substring_, substring);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgHamcrestCoreSubstringMatcher)
