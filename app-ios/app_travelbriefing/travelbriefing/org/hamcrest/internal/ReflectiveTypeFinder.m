//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/hamcrest/internal/ReflectiveTypeFinder.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Error.h"
#include "java/lang/reflect/Method.h"
#include "org/hamcrest/internal/ReflectiveTypeFinder.h"

@interface OrgHamcrestInternalReflectiveTypeFinder () {
 @public
  NSString *methodName_;
  jint expectedNumberOfParameters_;
  jint typedParameter_;
}

@end

J2OBJC_FIELD_SETTER(OrgHamcrestInternalReflectiveTypeFinder, methodName_, NSString *)

@implementation OrgHamcrestInternalReflectiveTypeFinder

- (instancetype)initWithNSString:(NSString *)methodName
                         withInt:(jint)expectedNumberOfParameters
                         withInt:(jint)typedParameter {
  OrgHamcrestInternalReflectiveTypeFinder_initWithNSString_withInt_withInt_(self, methodName, expectedNumberOfParameters, typedParameter);
  return self;
}

- (IOSClass *)findExpectedTypeWithIOSClass:(IOSClass *)fromClass {
  for (IOSClass *c = fromClass; c != NSObject_class_(); c = [c getSuperclass]) {
    {
      IOSObjectArray *a__ = [((IOSClass *) nil_chk(c)) getDeclaredMethods];
      JavaLangReflectMethod * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      JavaLangReflectMethod * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaLangReflectMethod *method = *b__++;
        if ([self canObtainExpectedTypeFromWithJavaLangReflectMethod:method]) {
          return [self expectedTypeFromWithJavaLangReflectMethod:method];
        }
      }
    }
  }
  @throw create_JavaLangError_initWithNSString_(JreStrcat("$$$", @"Cannot determine correct type for ", methodName_, @"() method."));
}

- (jboolean)canObtainExpectedTypeFromWithJavaLangReflectMethod:(JavaLangReflectMethod *)method {
  return [((NSString *) nil_chk([((JavaLangReflectMethod *) nil_chk(method)) getName])) isEqual:methodName_] && ((IOSObjectArray *) nil_chk([method getParameterTypes]))->size_ == expectedNumberOfParameters_ && ![method isSynthetic];
}

- (IOSClass *)expectedTypeFromWithJavaLangReflectMethod:(JavaLangReflectMethod *)method {
  return IOSObjectArray_Get(nil_chk([((JavaLangReflectMethod *) nil_chk(method)) getParameterTypes]), typedParameter_);
}

- (void)dealloc {
  RELEASE_(methodName_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x4, 6, 5, -1, 7, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withInt:withInt:);
  methods[1].selector = @selector(findExpectedTypeWithIOSClass:);
  methods[2].selector = @selector(canObtainExpectedTypeFromWithJavaLangReflectMethod:);
  methods[3].selector = @selector(expectedTypeFromWithJavaLangReflectMethod:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "methodName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "expectedNumberOfParameters_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "typedParameter_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;II", "findExpectedType", "LIOSClass;", "(Ljava/lang/Class<*>;)Ljava/lang/Class<*>;", "canObtainExpectedTypeFrom", "LJavaLangReflectMethod;", "expectedTypeFrom", "(Ljava/lang/reflect/Method;)Ljava/lang/Class<*>;" };
  static const J2ObjcClassInfo _OrgHamcrestInternalReflectiveTypeFinder = { "ReflectiveTypeFinder", "org.hamcrest.internal", ptrTable, methods, fields, 7, 0x1, 4, 3, -1, -1, -1, -1, -1 };
  return &_OrgHamcrestInternalReflectiveTypeFinder;
}

@end

void OrgHamcrestInternalReflectiveTypeFinder_initWithNSString_withInt_withInt_(OrgHamcrestInternalReflectiveTypeFinder *self, NSString *methodName, jint expectedNumberOfParameters, jint typedParameter) {
  NSObject_init(self);
  JreStrongAssign(&self->methodName_, methodName);
  self->expectedNumberOfParameters_ = expectedNumberOfParameters;
  self->typedParameter_ = typedParameter;
}

OrgHamcrestInternalReflectiveTypeFinder *new_OrgHamcrestInternalReflectiveTypeFinder_initWithNSString_withInt_withInt_(NSString *methodName, jint expectedNumberOfParameters, jint typedParameter) {
  J2OBJC_NEW_IMPL(OrgHamcrestInternalReflectiveTypeFinder, initWithNSString_withInt_withInt_, methodName, expectedNumberOfParameters, typedParameter)
}

OrgHamcrestInternalReflectiveTypeFinder *create_OrgHamcrestInternalReflectiveTypeFinder_initWithNSString_withInt_withInt_(NSString *methodName, jint expectedNumberOfParameters, jint typedParameter) {
  J2OBJC_CREATE_IMPL(OrgHamcrestInternalReflectiveTypeFinder, initWithNSString_withInt_withInt_, methodName, expectedNumberOfParameters, typedParameter)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgHamcrestInternalReflectiveTypeFinder)
