//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/hamcrest/TypeSafeDiagnosingMatcher.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "org/hamcrest/BaseMatcher.h"
#include "org/hamcrest/Description.h"
#include "org/hamcrest/TypeSafeDiagnosingMatcher.h"
#include "org/hamcrest/internal/ReflectiveTypeFinder.h"

@interface OrgHamcrestTypeSafeDiagnosingMatcher () {
 @public
  IOSClass *expectedType_;
}

@end

J2OBJC_FIELD_SETTER(OrgHamcrestTypeSafeDiagnosingMatcher, expectedType_, IOSClass *)

inline OrgHamcrestInternalReflectiveTypeFinder *OrgHamcrestTypeSafeDiagnosingMatcher_get_TYPE_FINDER();
static OrgHamcrestInternalReflectiveTypeFinder *OrgHamcrestTypeSafeDiagnosingMatcher_TYPE_FINDER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgHamcrestTypeSafeDiagnosingMatcher, TYPE_FINDER, OrgHamcrestInternalReflectiveTypeFinder *)

J2OBJC_INITIALIZED_DEFN(OrgHamcrestTypeSafeDiagnosingMatcher)

@implementation OrgHamcrestTypeSafeDiagnosingMatcher

- (jboolean)matchesSafelyWithId:(id)item
     withOrgHamcrestDescription:(id<OrgHamcrestDescription>)mismatchDescription {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (instancetype)initWithIOSClass:(IOSClass *)expectedType {
  OrgHamcrestTypeSafeDiagnosingMatcher_initWithIOSClass_(self, expectedType);
  return self;
}

- (instancetype)initWithOrgHamcrestInternalReflectiveTypeFinder:(OrgHamcrestInternalReflectiveTypeFinder *)typeFinder {
  OrgHamcrestTypeSafeDiagnosingMatcher_initWithOrgHamcrestInternalReflectiveTypeFinder_(self, typeFinder);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgHamcrestTypeSafeDiagnosingMatcher_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)matchesWithId:(id)item {
  return item != nil && [((IOSClass *) nil_chk(expectedType_)) isInstance:item] && [self matchesSafelyWithId:item withOrgHamcrestDescription:create_OrgHamcrestDescription_NullDescription_init()];
}

- (void)describeMismatchWithId:(id)item
    withOrgHamcrestDescription:(id<OrgHamcrestDescription>)mismatchDescription {
  if (item == nil || ![((IOSClass *) nil_chk(expectedType_)) isInstance:item]) {
    [super describeMismatchWithId:item withOrgHamcrestDescription:mismatchDescription];
  }
  else {
    [self matchesSafelyWithId:item withOrgHamcrestDescription:mismatchDescription];
  }
}

- (void)dealloc {
  RELEASE_(expectedType_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x404, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x4, -1, 3, -1, 4, -1, -1 },
    { NULL, NULL, 0x4, -1, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 8, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(matchesSafelyWithId:withOrgHamcrestDescription:);
  methods[1].selector = @selector(initWithIOSClass:);
  methods[2].selector = @selector(initWithOrgHamcrestInternalReflectiveTypeFinder:);
  methods[3].selector = @selector(init);
  methods[4].selector = @selector(matchesWithId:);
  methods[5].selector = @selector(describeMismatchWithId:withOrgHamcrestDescription:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE_FINDER", "LOrgHamcrestInternalReflectiveTypeFinder;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "expectedType_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "matchesSafely", "LNSObject;LOrgHamcrestDescription;", "(TT;Lorg/hamcrest/Description;)Z", "LIOSClass;", "(Ljava/lang/Class<*>;)V", "LOrgHamcrestInternalReflectiveTypeFinder;", "matches", "LNSObject;", "describeMismatch", &OrgHamcrestTypeSafeDiagnosingMatcher_TYPE_FINDER, "Ljava/lang/Class<*>;", "<T:Ljava/lang/Object;>Lorg/hamcrest/BaseMatcher<TT;>;" };
  static const J2ObjcClassInfo _OrgHamcrestTypeSafeDiagnosingMatcher = { "TypeSafeDiagnosingMatcher", "org.hamcrest", ptrTable, methods, fields, 7, 0x401, 6, 2, -1, -1, -1, 11, -1 };
  return &_OrgHamcrestTypeSafeDiagnosingMatcher;
}

+ (void)initialize {
  if (self == [OrgHamcrestTypeSafeDiagnosingMatcher class]) {
    JreStrongAssignAndConsume(&OrgHamcrestTypeSafeDiagnosingMatcher_TYPE_FINDER, new_OrgHamcrestInternalReflectiveTypeFinder_initWithNSString_withInt_withInt_(@"matchesSafely", 2, 0));
    J2OBJC_SET_INITIALIZED(OrgHamcrestTypeSafeDiagnosingMatcher)
  }
}

@end

void OrgHamcrestTypeSafeDiagnosingMatcher_initWithIOSClass_(OrgHamcrestTypeSafeDiagnosingMatcher *self, IOSClass *expectedType) {
  OrgHamcrestBaseMatcher_init(self);
  JreStrongAssign(&self->expectedType_, expectedType);
}

void OrgHamcrestTypeSafeDiagnosingMatcher_initWithOrgHamcrestInternalReflectiveTypeFinder_(OrgHamcrestTypeSafeDiagnosingMatcher *self, OrgHamcrestInternalReflectiveTypeFinder *typeFinder) {
  OrgHamcrestBaseMatcher_init(self);
  JreStrongAssign(&self->expectedType_, [((OrgHamcrestInternalReflectiveTypeFinder *) nil_chk(typeFinder)) findExpectedTypeWithIOSClass:[self java_getClass]]);
}

void OrgHamcrestTypeSafeDiagnosingMatcher_init(OrgHamcrestTypeSafeDiagnosingMatcher *self) {
  OrgHamcrestTypeSafeDiagnosingMatcher_initWithOrgHamcrestInternalReflectiveTypeFinder_(self, OrgHamcrestTypeSafeDiagnosingMatcher_TYPE_FINDER);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgHamcrestTypeSafeDiagnosingMatcher)
