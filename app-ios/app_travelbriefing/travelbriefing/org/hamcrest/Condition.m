//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/hamcrest/Condition.java
//

#include "J2ObjC_source.h"
#include "org/hamcrest/Condition.h"
#include "org/hamcrest/Description.h"
#include "org/hamcrest/Matcher.h"

@interface OrgHamcrestCondition ()

- (instancetype)init;

@end

__attribute__((unused)) static void OrgHamcrestCondition_init(OrgHamcrestCondition *self);

@interface OrgHamcrestCondition_Step : NSObject

@end

@interface OrgHamcrestCondition_Matched : OrgHamcrestCondition {
 @public
  id theValue_;
  id<OrgHamcrestDescription> mismatch_;
}

- (instancetype)initWithId:(id)theValue
withOrgHamcrestDescription:(id<OrgHamcrestDescription>)mismatch;

- (jboolean)matchingWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher
                              withNSString:(NSString *)message;

- (OrgHamcrestCondition *)and__WithOrgHamcrestCondition_Step:(id<OrgHamcrestCondition_Step>)next;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgHamcrestCondition_Matched)

J2OBJC_FIELD_SETTER(OrgHamcrestCondition_Matched, theValue_, id)
J2OBJC_FIELD_SETTER(OrgHamcrestCondition_Matched, mismatch_, id<OrgHamcrestDescription>)

__attribute__((unused)) static void OrgHamcrestCondition_Matched_initWithId_withOrgHamcrestDescription_(OrgHamcrestCondition_Matched *self, id theValue, id<OrgHamcrestDescription> mismatch);

__attribute__((unused)) static OrgHamcrestCondition_Matched *new_OrgHamcrestCondition_Matched_initWithId_withOrgHamcrestDescription_(id theValue, id<OrgHamcrestDescription> mismatch) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgHamcrestCondition_Matched *create_OrgHamcrestCondition_Matched_initWithId_withOrgHamcrestDescription_(id theValue, id<OrgHamcrestDescription> mismatch);

J2OBJC_TYPE_LITERAL_HEADER(OrgHamcrestCondition_Matched)

@interface OrgHamcrestCondition_NotMatched ()

- (instancetype)init;

@end

__attribute__((unused)) static void OrgHamcrestCondition_NotMatched_init(OrgHamcrestCondition_NotMatched *self);

__attribute__((unused)) static OrgHamcrestCondition_NotMatched *new_OrgHamcrestCondition_NotMatched_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgHamcrestCondition_NotMatched *create_OrgHamcrestCondition_NotMatched_init();

J2OBJC_INITIALIZED_DEFN(OrgHamcrestCondition)

OrgHamcrestCondition_NotMatched *OrgHamcrestCondition_NOT_MATCHED;

@implementation OrgHamcrestCondition

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgHamcrestCondition_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)matchingWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)match
                              withNSString:(NSString *)message {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgHamcrestCondition *)and__WithOrgHamcrestCondition_Step:(id<OrgHamcrestCondition_Step>)mapping {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)matchingWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)match {
  return [self matchingWithOrgHamcrestMatcher:match withNSString:@""];
}

- (OrgHamcrestCondition *)thenWithOrgHamcrestCondition_Step:(id<OrgHamcrestCondition_Step>)mapping {
  return [self and__WithOrgHamcrestCondition_Step:mapping];
}

+ (OrgHamcrestCondition *)notMatched {
  return OrgHamcrestCondition_notMatched();
}

+ (OrgHamcrestCondition *)matchedWithId:(id)theValue
             withOrgHamcrestDescription:(id<OrgHamcrestDescription>)mismatch {
  return OrgHamcrestCondition_matchedWithId_withOrgHamcrestDescription_(theValue, mismatch);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 0, 1, -1, 2, -1, -1 },
    { NULL, "LOrgHamcrestCondition;", 0x401, 3, 4, -1, 5, -1, -1 },
    { NULL, "Z", 0x11, 0, 6, -1, 7, -1, -1 },
    { NULL, "LOrgHamcrestCondition;", 0x11, 8, 4, -1, 5, -1, -1 },
    { NULL, "LOrgHamcrestCondition;", 0x9, -1, -1, -1, 9, -1, -1 },
    { NULL, "LOrgHamcrestCondition;", 0x9, 10, 11, -1, 12, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(matchingWithOrgHamcrestMatcher:withNSString:);
  methods[2].selector = @selector(and__WithOrgHamcrestCondition_Step:);
  methods[3].selector = @selector(matchingWithOrgHamcrestMatcher:);
  methods[4].selector = @selector(thenWithOrgHamcrestCondition_Step:);
  methods[5].selector = @selector(notMatched);
  methods[6].selector = @selector(matchedWithId:withOrgHamcrestDescription:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NOT_MATCHED", "LOrgHamcrestCondition_NotMatched;", .constantValue.asLong = 0, 0x19, -1, 13, 14, -1 },
  };
  static const void *ptrTable[] = { "matching", "LOrgHamcrestMatcher;LNSString;", "(Lorg/hamcrest/Matcher<TT;>;Ljava/lang/String;)Z", "and", "LOrgHamcrestCondition_Step;", "<U:Ljava/lang/Object;>(Lorg/hamcrest/Condition$Step<-TT;TU;>;)Lorg/hamcrest/Condition<TU;>;", "LOrgHamcrestMatcher;", "(Lorg/hamcrest/Matcher<TT;>;)Z", "then", "<T:Ljava/lang/Object;>()Lorg/hamcrest/Condition<TT;>;", "matched", "LNSObject;LOrgHamcrestDescription;", "<T:Ljava/lang/Object;>(TT;Lorg/hamcrest/Description;)Lorg/hamcrest/Condition<TT;>;", &OrgHamcrestCondition_NOT_MATCHED, "Lorg/hamcrest/Condition$NotMatched<Ljava/lang/Object;>;", "LOrgHamcrestCondition_Step;LOrgHamcrestCondition_Matched;LOrgHamcrestCondition_NotMatched;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _OrgHamcrestCondition = { "Condition", "org.hamcrest", ptrTable, methods, fields, 7, 0x401, 7, 1, -1, 15, -1, 16, -1 };
  return &_OrgHamcrestCondition;
}

+ (void)initialize {
  if (self == [OrgHamcrestCondition class]) {
    JreStrongAssignAndConsume(&OrgHamcrestCondition_NOT_MATCHED, new_OrgHamcrestCondition_NotMatched_init());
    J2OBJC_SET_INITIALIZED(OrgHamcrestCondition)
  }
}

@end

void OrgHamcrestCondition_init(OrgHamcrestCondition *self) {
  NSObject_init(self);
}

OrgHamcrestCondition *OrgHamcrestCondition_notMatched() {
  OrgHamcrestCondition_initialize();
  return OrgHamcrestCondition_NOT_MATCHED;
}

OrgHamcrestCondition *OrgHamcrestCondition_matchedWithId_withOrgHamcrestDescription_(id theValue, id<OrgHamcrestDescription> mismatch) {
  OrgHamcrestCondition_initialize();
  return create_OrgHamcrestCondition_Matched_initWithId_withOrgHamcrestDescription_(theValue, mismatch);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgHamcrestCondition)

@implementation OrgHamcrestCondition_Step

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgHamcrestCondition;", 0x401, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(applyWithId:withOrgHamcrestDescription:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "apply", "LNSObject;LOrgHamcrestDescription;", "(TI;Lorg/hamcrest/Description;)Lorg/hamcrest/Condition<TO;>;", "LOrgHamcrestCondition;", "<I:Ljava/lang/Object;O:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _OrgHamcrestCondition_Step = { "Step", "org.hamcrest", ptrTable, methods, NULL, 7, 0x609, 1, 0, 3, -1, -1, 4, -1 };
  return &_OrgHamcrestCondition_Step;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgHamcrestCondition_Step)

@implementation OrgHamcrestCondition_Matched

- (instancetype)initWithId:(id)theValue
withOrgHamcrestDescription:(id<OrgHamcrestDescription>)mismatch {
  OrgHamcrestCondition_Matched_initWithId_withOrgHamcrestDescription_(self, theValue, mismatch);
  return self;
}

- (jboolean)matchingWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher
                              withNSString:(NSString *)message {
  if ([((id<OrgHamcrestMatcher>) nil_chk(matcher)) matchesWithId:theValue_]) {
    return true;
  }
  [((id<OrgHamcrestDescription>) nil_chk(mismatch_)) appendTextWithNSString:message];
  [matcher describeMismatchWithId:theValue_ withOrgHamcrestDescription:mismatch_];
  return false;
}

- (OrgHamcrestCondition *)and__WithOrgHamcrestCondition_Step:(id<OrgHamcrestCondition_Step>)next {
  return [((id<OrgHamcrestCondition_Step>) nil_chk(next)) applyWithId:theValue_ withOrgHamcrestDescription:mismatch_];
}

- (void)dealloc {
  RELEASE_(theValue_);
  RELEASE_(mismatch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LOrgHamcrestCondition;", 0x1, 5, 6, -1, 7, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:withOrgHamcrestDescription:);
  methods[1].selector = @selector(matchingWithOrgHamcrestMatcher:withNSString:);
  methods[2].selector = @selector(and__WithOrgHamcrestCondition_Step:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "theValue_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
    { "mismatch_", "LOrgHamcrestDescription;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;LOrgHamcrestDescription;", "(TT;Lorg/hamcrest/Description;)V", "matching", "LOrgHamcrestMatcher;LNSString;", "(Lorg/hamcrest/Matcher<TT;>;Ljava/lang/String;)Z", "and", "LOrgHamcrestCondition_Step;", "<U:Ljava/lang/Object;>(Lorg/hamcrest/Condition$Step<-TT;TU;>;)Lorg/hamcrest/Condition<TU;>;", "TT;", "LOrgHamcrestCondition;", "<T:Ljava/lang/Object;>Lorg/hamcrest/Condition<TT;>;" };
  static const J2ObjcClassInfo _OrgHamcrestCondition_Matched = { "Matched", "org.hamcrest", ptrTable, methods, fields, 7, 0x1a, 3, 2, 9, -1, -1, 10, -1 };
  return &_OrgHamcrestCondition_Matched;
}

@end

void OrgHamcrestCondition_Matched_initWithId_withOrgHamcrestDescription_(OrgHamcrestCondition_Matched *self, id theValue, id<OrgHamcrestDescription> mismatch) {
  OrgHamcrestCondition_init(self);
  JreStrongAssign(&self->theValue_, theValue);
  JreStrongAssign(&self->mismatch_, mismatch);
}

OrgHamcrestCondition_Matched *new_OrgHamcrestCondition_Matched_initWithId_withOrgHamcrestDescription_(id theValue, id<OrgHamcrestDescription> mismatch) {
  J2OBJC_NEW_IMPL(OrgHamcrestCondition_Matched, initWithId_withOrgHamcrestDescription_, theValue, mismatch)
}

OrgHamcrestCondition_Matched *create_OrgHamcrestCondition_Matched_initWithId_withOrgHamcrestDescription_(id theValue, id<OrgHamcrestDescription> mismatch) {
  J2OBJC_CREATE_IMPL(OrgHamcrestCondition_Matched, initWithId_withOrgHamcrestDescription_, theValue, mismatch)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgHamcrestCondition_Matched)

@implementation OrgHamcrestCondition_NotMatched

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgHamcrestCondition_NotMatched_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)matchingWithOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)match
                              withNSString:(NSString *)message {
  return false;
}

- (OrgHamcrestCondition *)and__WithOrgHamcrestCondition_Step:(id<OrgHamcrestCondition_Step>)mapping {
  return OrgHamcrestCondition_notMatched();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LOrgHamcrestCondition;", 0x1, 3, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(matchingWithOrgHamcrestMatcher:withNSString:);
  methods[2].selector = @selector(and__WithOrgHamcrestCondition_Step:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "matching", "LOrgHamcrestMatcher;LNSString;", "(Lorg/hamcrest/Matcher<TT;>;Ljava/lang/String;)Z", "and", "LOrgHamcrestCondition_Step;", "<U:Ljava/lang/Object;>(Lorg/hamcrest/Condition$Step<-TT;TU;>;)Lorg/hamcrest/Condition<TU;>;", "LOrgHamcrestCondition;", "<T:Ljava/lang/Object;>Lorg/hamcrest/Condition<TT;>;" };
  static const J2ObjcClassInfo _OrgHamcrestCondition_NotMatched = { "NotMatched", "org.hamcrest", ptrTable, methods, NULL, 7, 0x1a, 3, 0, 6, -1, -1, 7, -1 };
  return &_OrgHamcrestCondition_NotMatched;
}

@end

void OrgHamcrestCondition_NotMatched_init(OrgHamcrestCondition_NotMatched *self) {
  OrgHamcrestCondition_init(self);
}

OrgHamcrestCondition_NotMatched *new_OrgHamcrestCondition_NotMatched_init() {
  J2OBJC_NEW_IMPL(OrgHamcrestCondition_NotMatched, init)
}

OrgHamcrestCondition_NotMatched *create_OrgHamcrestCondition_NotMatched_init() {
  J2OBJC_CREATE_IMPL(OrgHamcrestCondition_NotMatched, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgHamcrestCondition_NotMatched)
