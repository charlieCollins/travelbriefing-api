//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/org/hamcrest/MatcherAssert.java
//

#include "J2ObjC_source.h"
#include "java/lang/AssertionError.h"
#include "org/hamcrest/Description.h"
#include "org/hamcrest/Matcher.h"
#include "org/hamcrest/MatcherAssert.h"
#include "org/hamcrest/StringDescription.h"

@implementation OrgHamcrestMatcherAssert

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgHamcrestMatcherAssert_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)assertThatWithId:(id)actual
  withOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher {
  OrgHamcrestMatcherAssert_assertThatWithId_withOrgHamcrestMatcher_(actual, matcher);
}

+ (void)assertThatWithNSString:(NSString *)reason
                        withId:(id)actual
        withOrgHamcrestMatcher:(id<OrgHamcrestMatcher>)matcher {
  OrgHamcrestMatcherAssert_assertThatWithNSString_withId_withOrgHamcrestMatcher_(reason, actual, matcher);
}

+ (void)assertThatWithNSString:(NSString *)reason
                   withBoolean:(jboolean)assertion {
  OrgHamcrestMatcherAssert_assertThatWithNSString_withBoolean_(reason, assertion);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x9, 0, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x9, 0, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(assertThatWithId:withOrgHamcrestMatcher:);
  methods[2].selector = @selector(assertThatWithNSString:withId:withOrgHamcrestMatcher:);
  methods[3].selector = @selector(assertThatWithNSString:withBoolean:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "assertThat", "LNSObject;LOrgHamcrestMatcher;", "<T:Ljava/lang/Object;>(TT;Lorg/hamcrest/Matcher<-TT;>;)V", "LNSString;LNSObject;LOrgHamcrestMatcher;", "<T:Ljava/lang/Object;>(Ljava/lang/String;TT;Lorg/hamcrest/Matcher<-TT;>;)V", "LNSString;Z" };
  static const J2ObjcClassInfo _OrgHamcrestMatcherAssert = { "MatcherAssert", "org.hamcrest", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_OrgHamcrestMatcherAssert;
}

@end

void OrgHamcrestMatcherAssert_init(OrgHamcrestMatcherAssert *self) {
  NSObject_init(self);
}

OrgHamcrestMatcherAssert *new_OrgHamcrestMatcherAssert_init() {
  J2OBJC_NEW_IMPL(OrgHamcrestMatcherAssert, init)
}

OrgHamcrestMatcherAssert *create_OrgHamcrestMatcherAssert_init() {
  J2OBJC_CREATE_IMPL(OrgHamcrestMatcherAssert, init)
}

void OrgHamcrestMatcherAssert_assertThatWithId_withOrgHamcrestMatcher_(id actual, id<OrgHamcrestMatcher> matcher) {
  OrgHamcrestMatcherAssert_initialize();
  OrgHamcrestMatcherAssert_assertThatWithNSString_withId_withOrgHamcrestMatcher_(@"", actual, matcher);
}

void OrgHamcrestMatcherAssert_assertThatWithNSString_withId_withOrgHamcrestMatcher_(NSString *reason, id actual, id<OrgHamcrestMatcher> matcher) {
  OrgHamcrestMatcherAssert_initialize();
  if (![((id<OrgHamcrestMatcher>) nil_chk(matcher)) matchesWithId:actual]) {
    id<OrgHamcrestDescription> description_ = create_OrgHamcrestStringDescription_init();
    [((id<OrgHamcrestDescription>) nil_chk([((id<OrgHamcrestDescription>) nil_chk([((id<OrgHamcrestDescription>) nil_chk([description_ appendTextWithNSString:reason])) appendTextWithNSString:@"\nExpected: "])) appendDescriptionOfWithOrgHamcrestSelfDescribing:matcher])) appendTextWithNSString:@"\n     but: "];
    [matcher describeMismatchWithId:actual withOrgHamcrestDescription:description_];
    @throw create_JavaLangAssertionError_initWithId_([description_ description]);
  }
}

void OrgHamcrestMatcherAssert_assertThatWithNSString_withBoolean_(NSString *reason, jboolean assertion) {
  OrgHamcrestMatcherAssert_initialize();
  if (!assertion) {
    @throw create_JavaLangAssertionError_initWithId_(reason);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgHamcrestMatcherAssert)
