//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okhttp3/logging/HttpLoggingInterceptor.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Okhttp3LoggingHttpLoggingInterceptor")
#ifdef RESTRICT_Okhttp3LoggingHttpLoggingInterceptor
#define INCLUDE_ALL_Okhttp3LoggingHttpLoggingInterceptor 0
#else
#define INCLUDE_ALL_Okhttp3LoggingHttpLoggingInterceptor 1
#endif
#undef RESTRICT_Okhttp3LoggingHttpLoggingInterceptor

#if !defined (Okhttp3LoggingHttpLoggingInterceptor_) && (INCLUDE_ALL_Okhttp3LoggingHttpLoggingInterceptor || defined(INCLUDE_Okhttp3LoggingHttpLoggingInterceptor))
#define Okhttp3LoggingHttpLoggingInterceptor_

#define RESTRICT_Okhttp3Interceptor 1
#define INCLUDE_Okhttp3Interceptor 1

// TODO FIXME
#include "../Interceptor.h"

@class Okhttp3LoggingHttpLoggingInterceptor_Level;
@class Okhttp3Response;
@class OkioBuffer;
@protocol Okhttp3Interceptor_Chain;
@protocol Okhttp3LoggingHttpLoggingInterceptor_Logger;

@interface Okhttp3LoggingHttpLoggingInterceptor : NSObject < Okhttp3Interceptor >

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithOkhttp3LoggingHttpLoggingInterceptor_Logger:(id<Okhttp3LoggingHttpLoggingInterceptor_Logger>)logger;

- (Okhttp3LoggingHttpLoggingInterceptor_Level *)getLevel;

- (Okhttp3Response *)interceptWithOkhttp3Interceptor_Chain:(id<Okhttp3Interceptor_Chain>)chain;

- (Okhttp3LoggingHttpLoggingInterceptor *)setLevelWithOkhttp3LoggingHttpLoggingInterceptor_Level:(Okhttp3LoggingHttpLoggingInterceptor_Level *)level;

#pragma mark Package-Private

+ (jboolean)isPlaintextWithOkioBuffer:(OkioBuffer *)buffer;

@end

J2OBJC_STATIC_INIT(Okhttp3LoggingHttpLoggingInterceptor)

FOUNDATION_EXPORT void Okhttp3LoggingHttpLoggingInterceptor_init(Okhttp3LoggingHttpLoggingInterceptor *self);

FOUNDATION_EXPORT Okhttp3LoggingHttpLoggingInterceptor *new_Okhttp3LoggingHttpLoggingInterceptor_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3LoggingHttpLoggingInterceptor *create_Okhttp3LoggingHttpLoggingInterceptor_init();

FOUNDATION_EXPORT void Okhttp3LoggingHttpLoggingInterceptor_initWithOkhttp3LoggingHttpLoggingInterceptor_Logger_(Okhttp3LoggingHttpLoggingInterceptor *self, id<Okhttp3LoggingHttpLoggingInterceptor_Logger> logger);

FOUNDATION_EXPORT Okhttp3LoggingHttpLoggingInterceptor *new_Okhttp3LoggingHttpLoggingInterceptor_initWithOkhttp3LoggingHttpLoggingInterceptor_Logger_(id<Okhttp3LoggingHttpLoggingInterceptor_Logger> logger) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3LoggingHttpLoggingInterceptor *create_Okhttp3LoggingHttpLoggingInterceptor_initWithOkhttp3LoggingHttpLoggingInterceptor_Logger_(id<Okhttp3LoggingHttpLoggingInterceptor_Logger> logger);

FOUNDATION_EXPORT jboolean Okhttp3LoggingHttpLoggingInterceptor_isPlaintextWithOkioBuffer_(OkioBuffer *buffer);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3LoggingHttpLoggingInterceptor)

#endif

#if !defined (Okhttp3LoggingHttpLoggingInterceptor_Level_) && (INCLUDE_ALL_Okhttp3LoggingHttpLoggingInterceptor || defined(INCLUDE_Okhttp3LoggingHttpLoggingInterceptor_Level))
#define Okhttp3LoggingHttpLoggingInterceptor_Level_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, Okhttp3LoggingHttpLoggingInterceptor_Level_Enum) {
  Okhttp3LoggingHttpLoggingInterceptor_Level_Enum_NONE = 0,
  Okhttp3LoggingHttpLoggingInterceptor_Level_Enum_BASIC = 1,
  Okhttp3LoggingHttpLoggingInterceptor_Level_Enum_HEADERS = 2,
  Okhttp3LoggingHttpLoggingInterceptor_Level_Enum_BODY = 3,
};

@interface Okhttp3LoggingHttpLoggingInterceptor_Level : JavaLangEnum < NSCopying >

#pragma mark Public

+ (Okhttp3LoggingHttpLoggingInterceptor_Level *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(Okhttp3LoggingHttpLoggingInterceptor_Level)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT Okhttp3LoggingHttpLoggingInterceptor_Level *Okhttp3LoggingHttpLoggingInterceptor_Level_values_[];

inline Okhttp3LoggingHttpLoggingInterceptor_Level *Okhttp3LoggingHttpLoggingInterceptor_Level_get_NONE();
J2OBJC_ENUM_CONSTANT(Okhttp3LoggingHttpLoggingInterceptor_Level, NONE)

inline Okhttp3LoggingHttpLoggingInterceptor_Level *Okhttp3LoggingHttpLoggingInterceptor_Level_get_BASIC();
J2OBJC_ENUM_CONSTANT(Okhttp3LoggingHttpLoggingInterceptor_Level, BASIC)

inline Okhttp3LoggingHttpLoggingInterceptor_Level *Okhttp3LoggingHttpLoggingInterceptor_Level_get_HEADERS();
J2OBJC_ENUM_CONSTANT(Okhttp3LoggingHttpLoggingInterceptor_Level, HEADERS)

inline Okhttp3LoggingHttpLoggingInterceptor_Level *Okhttp3LoggingHttpLoggingInterceptor_Level_get_BODY();
J2OBJC_ENUM_CONSTANT(Okhttp3LoggingHttpLoggingInterceptor_Level, BODY)

FOUNDATION_EXPORT IOSObjectArray *Okhttp3LoggingHttpLoggingInterceptor_Level_values();

FOUNDATION_EXPORT Okhttp3LoggingHttpLoggingInterceptor_Level *Okhttp3LoggingHttpLoggingInterceptor_Level_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT Okhttp3LoggingHttpLoggingInterceptor_Level *Okhttp3LoggingHttpLoggingInterceptor_Level_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3LoggingHttpLoggingInterceptor_Level)

#endif

#if !defined (Okhttp3LoggingHttpLoggingInterceptor_Logger_) && (INCLUDE_ALL_Okhttp3LoggingHttpLoggingInterceptor || defined(INCLUDE_Okhttp3LoggingHttpLoggingInterceptor_Logger))
#define Okhttp3LoggingHttpLoggingInterceptor_Logger_

@protocol Okhttp3LoggingHttpLoggingInterceptor_Logger < JavaObject >

- (void)logWithNSString:(NSString *)message;

@end

@interface Okhttp3LoggingHttpLoggingInterceptor_Logger : NSObject

@end

J2OBJC_STATIC_INIT(Okhttp3LoggingHttpLoggingInterceptor_Logger)

inline id<Okhttp3LoggingHttpLoggingInterceptor_Logger> Okhttp3LoggingHttpLoggingInterceptor_Logger_get_DEFAULT();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<Okhttp3LoggingHttpLoggingInterceptor_Logger> Okhttp3LoggingHttpLoggingInterceptor_Logger_DEFAULT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3LoggingHttpLoggingInterceptor_Logger, DEFAULT, id<Okhttp3LoggingHttpLoggingInterceptor_Logger>)

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3LoggingHttpLoggingInterceptor_Logger)

#endif

#pragma pop_macro("INCLUDE_ALL_Okhttp3LoggingHttpLoggingInterceptor")
