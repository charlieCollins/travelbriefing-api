//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okhttp3/internal/http/CallServerInterceptor.java
//

#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/net/ProtocolException.h"
#include "okhttp3/Handshake.h"
#include "okhttp3/Interceptor.h"
#include "okhttp3/Request.h"
#include "okhttp3/RequestBody.h"
#include "okhttp3/Response.h"
#include "okhttp3/ResponseBody.h"
#include "okhttp3/internal/Util.h"
#include "okhttp3/internal/connection/RealConnection.h"
#include "okhttp3/internal/connection/StreamAllocation.h"
#include "okhttp3/internal/http/CallServerInterceptor.h"
#include "okhttp3/internal/http/HttpCodec.h"
#include "okhttp3/internal/http/HttpMethod.h"
#include "okhttp3/internal/http/RealInterceptorChain.h"
#include "okio/BufferedSink.h"
#include "okio/Okio.h"
#include "okio/Sink.h"

@interface Okhttp3InternalHttpCallServerInterceptor () {
 @public
  jboolean forWebSocket_;
}

@end

@implementation Okhttp3InternalHttpCallServerInterceptor

- (instancetype)initWithBoolean:(jboolean)forWebSocket {
  Okhttp3InternalHttpCallServerInterceptor_initWithBoolean_(self, forWebSocket);
  return self;
}

- (Okhttp3Response *)interceptWithOkhttp3Interceptor_Chain:(id<Okhttp3Interceptor_Chain>)chain {
  id<Okhttp3InternalHttpHttpCodec> httpCodec = [((Okhttp3InternalHttpRealInterceptorChain *) nil_chk(((Okhttp3InternalHttpRealInterceptorChain *) cast_chk(chain, [Okhttp3InternalHttpRealInterceptorChain class])))) httpStream];
  Okhttp3InternalConnectionStreamAllocation *streamAllocation = [((Okhttp3InternalHttpRealInterceptorChain *) nil_chk(((Okhttp3InternalHttpRealInterceptorChain *) cast_chk(chain, [Okhttp3InternalHttpRealInterceptorChain class])))) streamAllocation];
  Okhttp3Request *request = [((id<Okhttp3Interceptor_Chain>) nil_chk(chain)) request];
  jlong sentRequestMillis = JavaLangSystem_currentTimeMillis();
  [((id<Okhttp3InternalHttpHttpCodec>) nil_chk(httpCodec)) writeRequestHeadersWithOkhttp3Request:request];
  Okhttp3Response_Builder *responseBuilder = nil;
  if (Okhttp3InternalHttpHttpMethod_permitsRequestBodyWithNSString_([((Okhttp3Request *) nil_chk(request)) method]) && [request body] != nil) {
    if ([@"100-continue" java_equalsIgnoreCase:[request headerWithNSString:@"Expect"]]) {
      [httpCodec flushRequest];
      responseBuilder = [httpCodec readResponseHeadersWithBoolean:true];
    }
    if (responseBuilder == nil) {
      id<OkioSink> requestBodyOut = [httpCodec createRequestBodyWithOkhttp3Request:request withLong:[((Okhttp3RequestBody *) nil_chk([request body])) contentLength]];
      id<OkioBufferedSink> bufferedRequestBody = OkioOkio_bufferWithOkioSink_(requestBodyOut);
      [((Okhttp3RequestBody *) nil_chk([request body])) writeToWithOkioBufferedSink:bufferedRequestBody];
      [((id<OkioBufferedSink>) nil_chk(bufferedRequestBody)) close];
    }
  }
  [httpCodec finishRequest];
  if (responseBuilder == nil) {
    responseBuilder = [httpCodec readResponseHeadersWithBoolean:false];
  }
  Okhttp3Response *response = [((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk(responseBuilder)) requestWithOkhttp3Request:request])) handshakeWithOkhttp3Handshake:[((Okhttp3InternalConnectionRealConnection *) nil_chk([((Okhttp3InternalConnectionStreamAllocation *) nil_chk(streamAllocation)) connection])) handshake]])) sentRequestAtMillisWithLong:sentRequestMillis])) receivedResponseAtMillisWithLong:JavaLangSystem_currentTimeMillis()])) build];
  jint code = [((Okhttp3Response *) nil_chk(response)) code];
  if (forWebSocket_ && code == 101) {
    response = [((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([response newBuilder])) bodyWithOkhttp3ResponseBody:JreLoadStatic(Okhttp3InternalUtil, EMPTY_RESPONSE)])) build];
  }
  else {
    response = [((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([response newBuilder])) bodyWithOkhttp3ResponseBody:[httpCodec openResponseBodyWithOkhttp3Response:response]])) build];
  }
  if ([@"close" java_equalsIgnoreCase:[((Okhttp3Request *) nil_chk([((Okhttp3Response *) nil_chk(response)) request])) headerWithNSString:@"Connection"]] || [@"close" java_equalsIgnoreCase:[response headerWithNSString:@"Connection"]]) {
    [streamAllocation noNewStreams];
  }
  if ((code == 204 || code == 205) && [((Okhttp3ResponseBody *) nil_chk([response body])) contentLength] > 0) {
    @throw create_JavaNetProtocolException_initWithNSString_(JreStrcat("$I$J", @"HTTP ", code, @" had non-zero Content-Length: ", [((Okhttp3ResponseBody *) nil_chk([response body])) contentLength]));
  }
  return response;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Response;", 0x1, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithBoolean:);
  methods[1].selector = @selector(interceptWithOkhttp3Interceptor_Chain:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "forWebSocket_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Z", "intercept", "LOkhttp3Interceptor_Chain;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _Okhttp3InternalHttpCallServerInterceptor = { "CallServerInterceptor", "okhttp3.internal.http", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, -1, -1, -1, -1 };
  return &_Okhttp3InternalHttpCallServerInterceptor;
}

@end

void Okhttp3InternalHttpCallServerInterceptor_initWithBoolean_(Okhttp3InternalHttpCallServerInterceptor *self, jboolean forWebSocket) {
  NSObject_init(self);
  self->forWebSocket_ = forWebSocket;
}

Okhttp3InternalHttpCallServerInterceptor *new_Okhttp3InternalHttpCallServerInterceptor_initWithBoolean_(jboolean forWebSocket) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttpCallServerInterceptor, initWithBoolean_, forWebSocket)
}

Okhttp3InternalHttpCallServerInterceptor *create_Okhttp3InternalHttpCallServerInterceptor_initWithBoolean_(jboolean forWebSocket) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttpCallServerInterceptor, initWithBoolean_, forWebSocket)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalHttpCallServerInterceptor)
