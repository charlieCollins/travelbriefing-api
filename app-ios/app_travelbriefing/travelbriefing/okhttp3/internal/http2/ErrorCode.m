//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okhttp3/internal/http2/ErrorCode.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "okhttp3/internal/http2/ErrorCode.h"

__attribute__((unused)) static void Okhttp3InternalHttp2ErrorCode_initWithInt_withNSString_withInt_(Okhttp3InternalHttp2ErrorCode *self, jint httpCode, NSString *__name, jint __ordinal);

J2OBJC_INITIALIZED_DEFN(Okhttp3InternalHttp2ErrorCode)

Okhttp3InternalHttp2ErrorCode *Okhttp3InternalHttp2ErrorCode_values_[6];

@implementation Okhttp3InternalHttp2ErrorCode

+ (Okhttp3InternalHttp2ErrorCode *)fromHttp2WithInt:(jint)code {
  return Okhttp3InternalHttp2ErrorCode_fromHttp2WithInt_(code);
}

+ (IOSObjectArray *)values {
  return Okhttp3InternalHttp2ErrorCode_values();
}

+ (Okhttp3InternalHttp2ErrorCode *)valueOfWithNSString:(NSString *)name {
  return Okhttp3InternalHttp2ErrorCode_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOkhttp3InternalHttp2ErrorCode;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "[LOkhttp3InternalHttp2ErrorCode;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalHttp2ErrorCode;", 0x9, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(fromHttp2WithInt:);
  methods[1].selector = @selector(values);
  methods[2].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NO_ERROR", "LOkhttp3InternalHttp2ErrorCode;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "PROTOCOL_ERROR", "LOkhttp3InternalHttp2ErrorCode;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "INTERNAL_ERROR", "LOkhttp3InternalHttp2ErrorCode;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "FLOW_CONTROL_ERROR", "LOkhttp3InternalHttp2ErrorCode;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "REFUSED_STREAM", "LOkhttp3InternalHttp2ErrorCode;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "CANCEL", "LOkhttp3InternalHttp2ErrorCode;", .constantValue.asLong = 0, 0x4019, -1, 9, -1, -1 },
    { "httpCode_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "fromHttp2", "I", "valueOf", "LNSString;", &JreEnum(Okhttp3InternalHttp2ErrorCode, NO_ERROR), &JreEnum(Okhttp3InternalHttp2ErrorCode, PROTOCOL_ERROR), &JreEnum(Okhttp3InternalHttp2ErrorCode, INTERNAL_ERROR), &JreEnum(Okhttp3InternalHttp2ErrorCode, FLOW_CONTROL_ERROR), &JreEnum(Okhttp3InternalHttp2ErrorCode, REFUSED_STREAM), &JreEnum(Okhttp3InternalHttp2ErrorCode, CANCEL), "Ljava/lang/Enum<Lokhttp3/internal/http2/ErrorCode;>;" };
  static const J2ObjcClassInfo _Okhttp3InternalHttp2ErrorCode = { "ErrorCode", "okhttp3.internal.http2", ptrTable, methods, fields, 7, 0x4011, 3, 7, -1, -1, -1, 10, -1 };
  return &_Okhttp3InternalHttp2ErrorCode;
}

+ (void)initialize {
  if (self == [Okhttp3InternalHttp2ErrorCode class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 6 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    (JreEnum(Okhttp3InternalHttp2ErrorCode, NO_ERROR) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    Okhttp3InternalHttp2ErrorCode_initWithInt_withNSString_withInt_(e, 0, @"NO_ERROR", 0);
    (JreEnum(Okhttp3InternalHttp2ErrorCode, PROTOCOL_ERROR) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    Okhttp3InternalHttp2ErrorCode_initWithInt_withNSString_withInt_(e, 1, @"PROTOCOL_ERROR", 1);
    (JreEnum(Okhttp3InternalHttp2ErrorCode, INTERNAL_ERROR) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    Okhttp3InternalHttp2ErrorCode_initWithInt_withNSString_withInt_(e, 2, @"INTERNAL_ERROR", 2);
    (JreEnum(Okhttp3InternalHttp2ErrorCode, FLOW_CONTROL_ERROR) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    Okhttp3InternalHttp2ErrorCode_initWithInt_withNSString_withInt_(e, 3, @"FLOW_CONTROL_ERROR", 3);
    (JreEnum(Okhttp3InternalHttp2ErrorCode, REFUSED_STREAM) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    Okhttp3InternalHttp2ErrorCode_initWithInt_withNSString_withInt_(e, 7, @"REFUSED_STREAM", 4);
    (JreEnum(Okhttp3InternalHttp2ErrorCode, CANCEL) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    Okhttp3InternalHttp2ErrorCode_initWithInt_withNSString_withInt_(e, 8, @"CANCEL", 5);
    J2OBJC_SET_INITIALIZED(Okhttp3InternalHttp2ErrorCode)
  }
}

@end

void Okhttp3InternalHttp2ErrorCode_initWithInt_withNSString_withInt_(Okhttp3InternalHttp2ErrorCode *self, jint httpCode, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  self->httpCode_ = httpCode;
}

Okhttp3InternalHttp2ErrorCode *Okhttp3InternalHttp2ErrorCode_fromHttp2WithInt_(jint code) {
  Okhttp3InternalHttp2ErrorCode_initialize();
  {
    IOSObjectArray *a__ = Okhttp3InternalHttp2ErrorCode_values();
    Okhttp3InternalHttp2ErrorCode * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    Okhttp3InternalHttp2ErrorCode * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      Okhttp3InternalHttp2ErrorCode *errorCode = *b__++;
      if (((Okhttp3InternalHttp2ErrorCode *) nil_chk(errorCode))->httpCode_ == code) return errorCode;
    }
  }
  return nil;
}

IOSObjectArray *Okhttp3InternalHttp2ErrorCode_values() {
  Okhttp3InternalHttp2ErrorCode_initialize();
  return [IOSObjectArray arrayWithObjects:Okhttp3InternalHttp2ErrorCode_values_ count:6 type:Okhttp3InternalHttp2ErrorCode_class_()];
}

Okhttp3InternalHttp2ErrorCode *Okhttp3InternalHttp2ErrorCode_valueOfWithNSString_(NSString *name) {
  Okhttp3InternalHttp2ErrorCode_initialize();
  for (int i = 0; i < 6; i++) {
    Okhttp3InternalHttp2ErrorCode *e = Okhttp3InternalHttp2ErrorCode_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

Okhttp3InternalHttp2ErrorCode *Okhttp3InternalHttp2ErrorCode_fromOrdinal(NSUInteger ordinal) {
  Okhttp3InternalHttp2ErrorCode_initialize();
  if (ordinal >= 6) {
    return nil;
  }
  return Okhttp3InternalHttp2ErrorCode_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalHttp2ErrorCode)
