//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okhttp3/internal/http2/Http2Connection.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/InterruptedIOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Math.h"
#include "java/lang/Thread.h"
#include "java/net/InetSocketAddress.h"
#include "java/net/Socket.h"
#include "java/net/SocketAddress.h"
#include "java/util/Collection.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "java/util/concurrent/SynchronousQueue.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/util/concurrent/ThreadPoolExecutor.h"
#include "java/util/concurrent/TimeUnit.h"
#include "okhttp3/Protocol.h"
#include "okhttp3/internal/NamedRunnable.h"
#include "okhttp3/internal/Util.h"
#include "okhttp3/internal/http2/ConnectionShutdownException.h"
#include "okhttp3/internal/http2/ErrorCode.h"
#include "okhttp3/internal/http2/Http2.h"
#include "okhttp3/internal/http2/Http2Connection.h"
#include "okhttp3/internal/http2/Http2Reader.h"
#include "okhttp3/internal/http2/Http2Stream.h"
#include "okhttp3/internal/http2/Http2Writer.h"
#include "okhttp3/internal/http2/Ping.h"
#include "okhttp3/internal/http2/PushObserver.h"
#include "okhttp3/internal/http2/Settings.h"
#include "okhttp3/internal/platform/Platform.h"
#include "okio/Buffer.h"
#include "okio/BufferedSink.h"
#include "okio/BufferedSource.h"
#include "okio/ByteString.h"
#include "okio/Okio.h"
#include "okio/Sink.h"
#include "okio/Source.h"

@interface Okhttp3InternalHttp2Http2Connection () {
 @public
  id<JavaUtilConcurrentExecutorService> pushExecutor_;
  id<JavaUtilMap> pings_;
  jint nextPingId_;
}

- (Okhttp3InternalHttp2Http2Stream *)newStreamWithInt:(jint)associatedStreamId
                                     withJavaUtilList:(id<JavaUtilList>)requestHeaders
                                          withBoolean:(jboolean)outArg OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Http2Connection, pushExecutor_, id<JavaUtilConcurrentExecutorService>)
J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Http2Connection, pings_, id<JavaUtilMap>)

inline jint Okhttp3InternalHttp2Http2Connection_get_OKHTTP_CLIENT_WINDOW_SIZE();
#define Okhttp3InternalHttp2Http2Connection_OKHTTP_CLIENT_WINDOW_SIZE 16777216
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3InternalHttp2Http2Connection, OKHTTP_CLIENT_WINDOW_SIZE, jint)

__attribute__((unused)) static Okhttp3InternalHttp2Http2Stream *Okhttp3InternalHttp2Http2Connection_newStreamWithInt_withJavaUtilList_withBoolean_(Okhttp3InternalHttp2Http2Connection *self, jint associatedStreamId, id<JavaUtilList> requestHeaders, jboolean outArg);

@interface Okhttp3InternalHttp2Http2Connection_1 : Okhttp3InternalNamedRunnable {
 @public
  Okhttp3InternalHttp2Http2Connection *this$0_;
  jint val$streamId_;
  Okhttp3InternalHttp2ErrorCode *val$errorCode_;
}

- (instancetype)initWithOkhttp3InternalHttp2Http2Connection:(Okhttp3InternalHttp2Http2Connection *)outer$
                                                    withInt:(jint)capture$0
                          withOkhttp3InternalHttp2ErrorCode:(Okhttp3InternalHttp2ErrorCode *)capture$1
                                               withNSString:(NSString *)format
                                          withNSObjectArray:(IOSObjectArray *)args;

- (void)execute;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalHttp2Http2Connection_1)

__attribute__((unused)) static void Okhttp3InternalHttp2Http2Connection_1_initWithOkhttp3InternalHttp2Http2Connection_withInt_withOkhttp3InternalHttp2ErrorCode_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection_1 *self, Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, Okhttp3InternalHttp2ErrorCode *capture$1, NSString *format, IOSObjectArray *args);

__attribute__((unused)) static Okhttp3InternalHttp2Http2Connection_1 *new_Okhttp3InternalHttp2Http2Connection_1_initWithOkhttp3InternalHttp2Http2Connection_withInt_withOkhttp3InternalHttp2ErrorCode_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, Okhttp3InternalHttp2ErrorCode *capture$1, NSString *format, IOSObjectArray *args) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalHttp2Http2Connection_1 *create_Okhttp3InternalHttp2Http2Connection_1_initWithOkhttp3InternalHttp2Http2Connection_withInt_withOkhttp3InternalHttp2ErrorCode_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, Okhttp3InternalHttp2ErrorCode *capture$1, NSString *format, IOSObjectArray *args);

@interface Okhttp3InternalHttp2Http2Connection_2 : Okhttp3InternalNamedRunnable {
 @public
  Okhttp3InternalHttp2Http2Connection *this$0_;
  jint val$streamId_;
  jlong val$unacknowledgedBytesRead_;
}

- (instancetype)initWithOkhttp3InternalHttp2Http2Connection:(Okhttp3InternalHttp2Http2Connection *)outer$
                                                    withInt:(jint)capture$0
                                                   withLong:(jlong)capture$1
                                               withNSString:(NSString *)format
                                          withNSObjectArray:(IOSObjectArray *)args;

- (void)execute;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalHttp2Http2Connection_2)

__attribute__((unused)) static void Okhttp3InternalHttp2Http2Connection_2_initWithOkhttp3InternalHttp2Http2Connection_withInt_withLong_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection_2 *self, Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, jlong capture$1, NSString *format, IOSObjectArray *args);

__attribute__((unused)) static Okhttp3InternalHttp2Http2Connection_2 *new_Okhttp3InternalHttp2Http2Connection_2_initWithOkhttp3InternalHttp2Http2Connection_withInt_withLong_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, jlong capture$1, NSString *format, IOSObjectArray *args) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalHttp2Http2Connection_2 *create_Okhttp3InternalHttp2Http2Connection_2_initWithOkhttp3InternalHttp2Http2Connection_withInt_withLong_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, jlong capture$1, NSString *format, IOSObjectArray *args);

@interface Okhttp3InternalHttp2Http2Connection_3 : Okhttp3InternalNamedRunnable {
 @public
  Okhttp3InternalHttp2Http2Connection *this$0_;
  jboolean val$reply_;
  jint val$payload1_;
  jint val$payload2_;
  Okhttp3InternalHttp2Ping *val$ping_;
}

- (instancetype)initWithOkhttp3InternalHttp2Http2Connection:(Okhttp3InternalHttp2Http2Connection *)outer$
                                                withBoolean:(jboolean)capture$0
                                                    withInt:(jint)capture$1
                                                    withInt:(jint)capture$2
                               withOkhttp3InternalHttp2Ping:(Okhttp3InternalHttp2Ping *)capture$3
                                               withNSString:(NSString *)format
                                          withNSObjectArray:(IOSObjectArray *)args;

- (void)execute;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalHttp2Http2Connection_3)

__attribute__((unused)) static void Okhttp3InternalHttp2Http2Connection_3_initWithOkhttp3InternalHttp2Http2Connection_withBoolean_withInt_withInt_withOkhttp3InternalHttp2Ping_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection_3 *self, Okhttp3InternalHttp2Http2Connection *outer$, jboolean capture$0, jint capture$1, jint capture$2, Okhttp3InternalHttp2Ping *capture$3, NSString *format, IOSObjectArray *args);

__attribute__((unused)) static Okhttp3InternalHttp2Http2Connection_3 *new_Okhttp3InternalHttp2Http2Connection_3_initWithOkhttp3InternalHttp2Http2Connection_withBoolean_withInt_withInt_withOkhttp3InternalHttp2Ping_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection *outer$, jboolean capture$0, jint capture$1, jint capture$2, Okhttp3InternalHttp2Ping *capture$3, NSString *format, IOSObjectArray *args) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalHttp2Http2Connection_3 *create_Okhttp3InternalHttp2Http2Connection_3_initWithOkhttp3InternalHttp2Http2Connection_withBoolean_withInt_withInt_withOkhttp3InternalHttp2Ping_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection *outer$, jboolean capture$0, jint capture$1, jint capture$2, Okhttp3InternalHttp2Ping *capture$3, NSString *format, IOSObjectArray *args);

@interface Okhttp3InternalHttp2Http2Connection_ReaderRunnable () {
 @public
  Okhttp3InternalHttp2Http2Connection *this$0_;
}

- (void)applyAndAckSettingsWithOkhttp3InternalHttp2Settings:(Okhttp3InternalHttp2Settings *)peerSettings;

@end

__attribute__((unused)) static void Okhttp3InternalHttp2Http2Connection_ReaderRunnable_applyAndAckSettingsWithOkhttp3InternalHttp2Settings_(Okhttp3InternalHttp2Http2Connection_ReaderRunnable *self, Okhttp3InternalHttp2Settings *peerSettings);

@interface Okhttp3InternalHttp2Http2Connection_ReaderRunnable_1 : Okhttp3InternalNamedRunnable {
 @public
  Okhttp3InternalHttp2Http2Connection_ReaderRunnable *this$0_;
  Okhttp3InternalHttp2Http2Stream *val$newStream_;
}

- (instancetype)initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable:(Okhttp3InternalHttp2Http2Connection_ReaderRunnable *)outer$
                                       withOkhttp3InternalHttp2Http2Stream:(Okhttp3InternalHttp2Http2Stream *)capture$0
                                                              withNSString:(NSString *)format
                                                         withNSObjectArray:(IOSObjectArray *)args;

- (void)execute;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalHttp2Http2Connection_ReaderRunnable_1)

__attribute__((unused)) static void Okhttp3InternalHttp2Http2Connection_ReaderRunnable_1_initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable_withOkhttp3InternalHttp2Http2Stream_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection_ReaderRunnable_1 *self, Okhttp3InternalHttp2Http2Connection_ReaderRunnable *outer$, Okhttp3InternalHttp2Http2Stream *capture$0, NSString *format, IOSObjectArray *args);

__attribute__((unused)) static Okhttp3InternalHttp2Http2Connection_ReaderRunnable_1 *new_Okhttp3InternalHttp2Http2Connection_ReaderRunnable_1_initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable_withOkhttp3InternalHttp2Http2Stream_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection_ReaderRunnable *outer$, Okhttp3InternalHttp2Http2Stream *capture$0, NSString *format, IOSObjectArray *args) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalHttp2Http2Connection_ReaderRunnable_1 *create_Okhttp3InternalHttp2Http2Connection_ReaderRunnable_1_initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable_withOkhttp3InternalHttp2Http2Stream_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection_ReaderRunnable *outer$, Okhttp3InternalHttp2Http2Stream *capture$0, NSString *format, IOSObjectArray *args);

@interface Okhttp3InternalHttp2Http2Connection_ReaderRunnable_2 : Okhttp3InternalNamedRunnable {
 @public
  Okhttp3InternalHttp2Http2Connection_ReaderRunnable *this$0_;
}

- (instancetype)initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable:(Okhttp3InternalHttp2Http2Connection_ReaderRunnable *)outer$
                                                              withNSString:(NSString *)format
                                                         withNSObjectArray:(IOSObjectArray *)args;

- (void)execute;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalHttp2Http2Connection_ReaderRunnable_2)

__attribute__((unused)) static void Okhttp3InternalHttp2Http2Connection_ReaderRunnable_2_initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection_ReaderRunnable_2 *self, Okhttp3InternalHttp2Http2Connection_ReaderRunnable *outer$, NSString *format, IOSObjectArray *args);

__attribute__((unused)) static Okhttp3InternalHttp2Http2Connection_ReaderRunnable_2 *new_Okhttp3InternalHttp2Http2Connection_ReaderRunnable_2_initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection_ReaderRunnable *outer$, NSString *format, IOSObjectArray *args) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalHttp2Http2Connection_ReaderRunnable_2 *create_Okhttp3InternalHttp2Http2Connection_ReaderRunnable_2_initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection_ReaderRunnable *outer$, NSString *format, IOSObjectArray *args);

@interface Okhttp3InternalHttp2Http2Connection_ReaderRunnable_3 : Okhttp3InternalNamedRunnable {
 @public
  Okhttp3InternalHttp2Http2Connection_ReaderRunnable *this$0_;
  Okhttp3InternalHttp2Settings *val$peerSettings_;
}

- (instancetype)initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable:(Okhttp3InternalHttp2Http2Connection_ReaderRunnable *)outer$
                                          withOkhttp3InternalHttp2Settings:(Okhttp3InternalHttp2Settings *)capture$0
                                                              withNSString:(NSString *)format
                                                         withNSObjectArray:(IOSObjectArray *)args;

- (void)execute;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalHttp2Http2Connection_ReaderRunnable_3)

__attribute__((unused)) static void Okhttp3InternalHttp2Http2Connection_ReaderRunnable_3_initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable_withOkhttp3InternalHttp2Settings_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection_ReaderRunnable_3 *self, Okhttp3InternalHttp2Http2Connection_ReaderRunnable *outer$, Okhttp3InternalHttp2Settings *capture$0, NSString *format, IOSObjectArray *args);

__attribute__((unused)) static Okhttp3InternalHttp2Http2Connection_ReaderRunnable_3 *new_Okhttp3InternalHttp2Http2Connection_ReaderRunnable_3_initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable_withOkhttp3InternalHttp2Settings_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection_ReaderRunnable *outer$, Okhttp3InternalHttp2Settings *capture$0, NSString *format, IOSObjectArray *args) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalHttp2Http2Connection_ReaderRunnable_3 *create_Okhttp3InternalHttp2Http2Connection_ReaderRunnable_3_initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable_withOkhttp3InternalHttp2Settings_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection_ReaderRunnable *outer$, Okhttp3InternalHttp2Settings *capture$0, NSString *format, IOSObjectArray *args);

@interface Okhttp3InternalHttp2Http2Connection_4 : Okhttp3InternalNamedRunnable {
 @public
  Okhttp3InternalHttp2Http2Connection *this$0_;
  jint val$streamId_;
  id<JavaUtilList> val$requestHeaders_;
}

- (instancetype)initWithOkhttp3InternalHttp2Http2Connection:(Okhttp3InternalHttp2Http2Connection *)outer$
                                                    withInt:(jint)capture$0
                                           withJavaUtilList:(id<JavaUtilList>)capture$1
                                               withNSString:(NSString *)format
                                          withNSObjectArray:(IOSObjectArray *)args;

- (void)execute;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalHttp2Http2Connection_4)

__attribute__((unused)) static void Okhttp3InternalHttp2Http2Connection_4_initWithOkhttp3InternalHttp2Http2Connection_withInt_withJavaUtilList_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection_4 *self, Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, id<JavaUtilList> capture$1, NSString *format, IOSObjectArray *args);

__attribute__((unused)) static Okhttp3InternalHttp2Http2Connection_4 *new_Okhttp3InternalHttp2Http2Connection_4_initWithOkhttp3InternalHttp2Http2Connection_withInt_withJavaUtilList_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, id<JavaUtilList> capture$1, NSString *format, IOSObjectArray *args) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalHttp2Http2Connection_4 *create_Okhttp3InternalHttp2Http2Connection_4_initWithOkhttp3InternalHttp2Http2Connection_withInt_withJavaUtilList_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, id<JavaUtilList> capture$1, NSString *format, IOSObjectArray *args);

@interface Okhttp3InternalHttp2Http2Connection_5 : Okhttp3InternalNamedRunnable {
 @public
  Okhttp3InternalHttp2Http2Connection *this$0_;
  jint val$streamId_;
  id<JavaUtilList> val$requestHeaders_;
  jboolean val$inFinished_;
}

- (instancetype)initWithOkhttp3InternalHttp2Http2Connection:(Okhttp3InternalHttp2Http2Connection *)outer$
                                                    withInt:(jint)capture$0
                                           withJavaUtilList:(id<JavaUtilList>)capture$1
                                                withBoolean:(jboolean)capture$2
                                               withNSString:(NSString *)format
                                          withNSObjectArray:(IOSObjectArray *)args;

- (void)execute;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalHttp2Http2Connection_5)

__attribute__((unused)) static void Okhttp3InternalHttp2Http2Connection_5_initWithOkhttp3InternalHttp2Http2Connection_withInt_withJavaUtilList_withBoolean_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection_5 *self, Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, id<JavaUtilList> capture$1, jboolean capture$2, NSString *format, IOSObjectArray *args);

__attribute__((unused)) static Okhttp3InternalHttp2Http2Connection_5 *new_Okhttp3InternalHttp2Http2Connection_5_initWithOkhttp3InternalHttp2Http2Connection_withInt_withJavaUtilList_withBoolean_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, id<JavaUtilList> capture$1, jboolean capture$2, NSString *format, IOSObjectArray *args) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalHttp2Http2Connection_5 *create_Okhttp3InternalHttp2Http2Connection_5_initWithOkhttp3InternalHttp2Http2Connection_withInt_withJavaUtilList_withBoolean_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, id<JavaUtilList> capture$1, jboolean capture$2, NSString *format, IOSObjectArray *args);

@interface Okhttp3InternalHttp2Http2Connection_6 : Okhttp3InternalNamedRunnable {
 @public
  Okhttp3InternalHttp2Http2Connection *this$0_;
  jint val$streamId_;
  OkioBuffer *val$buffer_;
  jint val$byteCount_;
  jboolean val$inFinished_;
}

- (instancetype)initWithOkhttp3InternalHttp2Http2Connection:(Okhttp3InternalHttp2Http2Connection *)outer$
                                                    withInt:(jint)capture$0
                                             withOkioBuffer:(OkioBuffer *)capture$1
                                                    withInt:(jint)capture$2
                                                withBoolean:(jboolean)capture$3
                                               withNSString:(NSString *)format
                                          withNSObjectArray:(IOSObjectArray *)args;

- (void)execute;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalHttp2Http2Connection_6)

__attribute__((unused)) static void Okhttp3InternalHttp2Http2Connection_6_initWithOkhttp3InternalHttp2Http2Connection_withInt_withOkioBuffer_withInt_withBoolean_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection_6 *self, Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, OkioBuffer *capture$1, jint capture$2, jboolean capture$3, NSString *format, IOSObjectArray *args);

__attribute__((unused)) static Okhttp3InternalHttp2Http2Connection_6 *new_Okhttp3InternalHttp2Http2Connection_6_initWithOkhttp3InternalHttp2Http2Connection_withInt_withOkioBuffer_withInt_withBoolean_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, OkioBuffer *capture$1, jint capture$2, jboolean capture$3, NSString *format, IOSObjectArray *args) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalHttp2Http2Connection_6 *create_Okhttp3InternalHttp2Http2Connection_6_initWithOkhttp3InternalHttp2Http2Connection_withInt_withOkioBuffer_withInt_withBoolean_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, OkioBuffer *capture$1, jint capture$2, jboolean capture$3, NSString *format, IOSObjectArray *args);

@interface Okhttp3InternalHttp2Http2Connection_7 : Okhttp3InternalNamedRunnable {
 @public
  Okhttp3InternalHttp2Http2Connection *this$0_;
  jint val$streamId_;
  Okhttp3InternalHttp2ErrorCode *val$errorCode_;
}

- (instancetype)initWithOkhttp3InternalHttp2Http2Connection:(Okhttp3InternalHttp2Http2Connection *)outer$
                                                    withInt:(jint)capture$0
                          withOkhttp3InternalHttp2ErrorCode:(Okhttp3InternalHttp2ErrorCode *)capture$1
                                               withNSString:(NSString *)format
                                          withNSObjectArray:(IOSObjectArray *)args;

- (void)execute;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalHttp2Http2Connection_7)

__attribute__((unused)) static void Okhttp3InternalHttp2Http2Connection_7_initWithOkhttp3InternalHttp2Http2Connection_withInt_withOkhttp3InternalHttp2ErrorCode_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection_7 *self, Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, Okhttp3InternalHttp2ErrorCode *capture$1, NSString *format, IOSObjectArray *args);

__attribute__((unused)) static Okhttp3InternalHttp2Http2Connection_7 *new_Okhttp3InternalHttp2Http2Connection_7_initWithOkhttp3InternalHttp2Http2Connection_withInt_withOkhttp3InternalHttp2ErrorCode_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, Okhttp3InternalHttp2ErrorCode *capture$1, NSString *format, IOSObjectArray *args) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalHttp2Http2Connection_7 *create_Okhttp3InternalHttp2Http2Connection_7_initWithOkhttp3InternalHttp2Http2Connection_withInt_withOkhttp3InternalHttp2ErrorCode_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, Okhttp3InternalHttp2ErrorCode *capture$1, NSString *format, IOSObjectArray *args);

@interface Okhttp3InternalHttp2Http2Connection_Listener_1 : Okhttp3InternalHttp2Http2Connection_Listener

- (instancetype)init;

- (void)onStreamWithOkhttp3InternalHttp2Http2Stream:(Okhttp3InternalHttp2Http2Stream *)stream;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalHttp2Http2Connection_Listener_1)

__attribute__((unused)) static void Okhttp3InternalHttp2Http2Connection_Listener_1_init(Okhttp3InternalHttp2Http2Connection_Listener_1 *self);

__attribute__((unused)) static Okhttp3InternalHttp2Http2Connection_Listener_1 *new_Okhttp3InternalHttp2Http2Connection_Listener_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalHttp2Http2Connection_Listener_1 *create_Okhttp3InternalHttp2Http2Connection_Listener_1_init();

J2OBJC_INITIALIZED_DEFN(Okhttp3InternalHttp2Http2Connection)

id<JavaUtilConcurrentExecutorService> Okhttp3InternalHttp2Http2Connection_executor;

@implementation Okhttp3InternalHttp2Http2Connection

- (instancetype)initWithOkhttp3InternalHttp2Http2Connection_Builder:(Okhttp3InternalHttp2Http2Connection_Builder *)builder {
  Okhttp3InternalHttp2Http2Connection_initWithOkhttp3InternalHttp2Http2Connection_Builder_(self, builder);
  return self;
}

- (Okhttp3Protocol *)getProtocol {
  return JreLoadEnum(Okhttp3Protocol, HTTP_2);
}

- (jint)openStreamCount {
  @synchronized(self) {
    return [((id<JavaUtilMap>) nil_chk(streams_)) size];
  }
}

- (Okhttp3InternalHttp2Http2Stream *)getStreamWithInt:(jint)id_ {
  @synchronized(self) {
    return [((id<JavaUtilMap>) nil_chk(streams_)) getWithId:JavaLangInteger_valueOfWithInt_(id_)];
  }
}

- (Okhttp3InternalHttp2Http2Stream *)removeStreamWithInt:(jint)streamId {
  @synchronized(self) {
    Okhttp3InternalHttp2Http2Stream *stream = [((id<JavaUtilMap>) nil_chk(streams_)) removeWithId:JavaLangInteger_valueOfWithInt_(streamId)];
    [self java_notifyAll];
    return stream;
  }
}

- (jint)maxConcurrentStreams {
  @synchronized(self) {
    return [((Okhttp3InternalHttp2Settings *) nil_chk(peerSettings_)) getMaxConcurrentStreamsWithInt:JavaLangInteger_MAX_VALUE];
  }
}

- (Okhttp3InternalHttp2Http2Stream *)pushStreamWithInt:(jint)associatedStreamId
                                      withJavaUtilList:(id<JavaUtilList>)requestHeaders
                                           withBoolean:(jboolean)outArg {
  if (client_) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Client cannot push requests.");
  return Okhttp3InternalHttp2Http2Connection_newStreamWithInt_withJavaUtilList_withBoolean_(self, associatedStreamId, requestHeaders, outArg);
}

- (Okhttp3InternalHttp2Http2Stream *)newStreamWithJavaUtilList:(id<JavaUtilList>)requestHeaders
                                                   withBoolean:(jboolean)outArg {
  return Okhttp3InternalHttp2Http2Connection_newStreamWithInt_withJavaUtilList_withBoolean_(self, 0, requestHeaders, outArg);
}

- (Okhttp3InternalHttp2Http2Stream *)newStreamWithInt:(jint)associatedStreamId
                                     withJavaUtilList:(id<JavaUtilList>)requestHeaders
                                          withBoolean:(jboolean)outArg {
  return Okhttp3InternalHttp2Http2Connection_newStreamWithInt_withJavaUtilList_withBoolean_(self, associatedStreamId, requestHeaders, outArg);
}

- (void)writeSynReplyWithInt:(jint)streamId
                 withBoolean:(jboolean)outFinished
            withJavaUtilList:(id<JavaUtilList>)alternating {
  [((Okhttp3InternalHttp2Http2Writer *) nil_chk(writer_)) synReplyWithBoolean:outFinished withInt:streamId withJavaUtilList:alternating];
}

- (void)writeDataWithInt:(jint)streamId
             withBoolean:(jboolean)outFinished
          withOkioBuffer:(OkioBuffer *)buffer
                withLong:(jlong)byteCount {
  if (byteCount == 0) {
    [((Okhttp3InternalHttp2Http2Writer *) nil_chk(writer_)) dataWithBoolean:outFinished withInt:streamId withOkioBuffer:buffer withInt:0];
    return;
  }
  while (byteCount > 0) {
    jint toWrite;
    @synchronized(self) {
      @try {
        while (bytesLeftInWriteWindow_ <= 0) {
          if (![((id<JavaUtilMap>) nil_chk(streams_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(streamId)]) {
            @throw create_JavaIoIOException_initWithNSString_(@"stream closed");
          }
          [self java_wait];
        }
      }
      @catch (JavaLangInterruptedException *e) {
        @throw create_JavaIoInterruptedIOException_init();
      }
      toWrite = (jint) JavaLangMath_minWithLong_withLong_(byteCount, bytesLeftInWriteWindow_);
      toWrite = JavaLangMath_minWithInt_withInt_(toWrite, [((Okhttp3InternalHttp2Http2Writer *) nil_chk(writer_)) maxDataLength]);
      bytesLeftInWriteWindow_ -= toWrite;
    }
    byteCount -= toWrite;
    [writer_ dataWithBoolean:outFinished && byteCount == 0 withInt:streamId withOkioBuffer:buffer withInt:toWrite];
  }
}

- (void)addBytesToWriteWindowWithLong:(jlong)delta {
  bytesLeftInWriteWindow_ += delta;
  if (delta > 0) [self java_notifyAll];
}

- (void)writeSynResetLaterWithInt:(jint)streamId
withOkhttp3InternalHttp2ErrorCode:(Okhttp3InternalHttp2ErrorCode *)errorCode {
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(Okhttp3InternalHttp2Http2Connection_executor)) executeWithJavaLangRunnable:create_Okhttp3InternalHttp2Http2Connection_1_initWithOkhttp3InternalHttp2Http2Connection_withInt_withOkhttp3InternalHttp2ErrorCode_withNSString_withNSObjectArray_(self, streamId, errorCode, @"OkHttp %s stream %d", [IOSObjectArray arrayWithObjects:(id[]){ hostname_, JavaLangInteger_valueOfWithInt_(streamId) } count:2 type:NSObject_class_()])];
}

- (void)writeSynResetWithInt:(jint)streamId
withOkhttp3InternalHttp2ErrorCode:(Okhttp3InternalHttp2ErrorCode *)statusCode {
  [((Okhttp3InternalHttp2Http2Writer *) nil_chk(writer_)) rstStreamWithInt:streamId withOkhttp3InternalHttp2ErrorCode:statusCode];
}

- (void)writeWindowUpdateLaterWithInt:(jint)streamId
                             withLong:(jlong)unacknowledgedBytesRead {
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(Okhttp3InternalHttp2Http2Connection_executor)) executeWithJavaLangRunnable:create_Okhttp3InternalHttp2Http2Connection_2_initWithOkhttp3InternalHttp2Http2Connection_withInt_withLong_withNSString_withNSObjectArray_(self, streamId, unacknowledgedBytesRead, @"OkHttp Window Update %s stream %d", [IOSObjectArray arrayWithObjects:(id[]){ hostname_, JavaLangInteger_valueOfWithInt_(streamId) } count:2 type:NSObject_class_()])];
}

- (Okhttp3InternalHttp2Ping *)ping {
  Okhttp3InternalHttp2Ping *ping = create_Okhttp3InternalHttp2Ping_init();
  jint pingId;
  @synchronized(self) {
    if (shutdown_) {
      @throw create_Okhttp3InternalHttp2ConnectionShutdownException_init();
    }
    pingId = nextPingId_;
    nextPingId_ += 2;
    if (pings_ == nil) JreStrongAssignAndConsume(&pings_, new_JavaUtilLinkedHashMap_init());
    [pings_ putWithId:JavaLangInteger_valueOfWithInt_(pingId) withId:ping];
  }
  [self writePingWithBoolean:false withInt:pingId withInt:(jint) 0x4f4b6f6b withOkhttp3InternalHttp2Ping:ping];
  return ping;
}

- (void)writePingLaterWithBoolean:(jboolean)reply
                          withInt:(jint)payload1
                          withInt:(jint)payload2
     withOkhttp3InternalHttp2Ping:(Okhttp3InternalHttp2Ping *)ping {
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(Okhttp3InternalHttp2Http2Connection_executor)) executeWithJavaLangRunnable:create_Okhttp3InternalHttp2Http2Connection_3_initWithOkhttp3InternalHttp2Http2Connection_withBoolean_withInt_withInt_withOkhttp3InternalHttp2Ping_withNSString_withNSObjectArray_(self, reply, payload1, payload2, ping, @"OkHttp %s ping %08x%08x", [IOSObjectArray arrayWithObjects:(id[]){ hostname_, JavaLangInteger_valueOfWithInt_(payload1), JavaLangInteger_valueOfWithInt_(payload2) } count:3 type:NSObject_class_()])];
}

- (void)writePingWithBoolean:(jboolean)reply
                     withInt:(jint)payload1
                     withInt:(jint)payload2
withOkhttp3InternalHttp2Ping:(Okhttp3InternalHttp2Ping *)ping {
  @synchronized(writer_) {
    if (ping != nil) [ping send];
    [((Okhttp3InternalHttp2Http2Writer *) nil_chk(writer_)) pingWithBoolean:reply withInt:payload1 withInt:payload2];
  }
}

- (Okhttp3InternalHttp2Ping *)removePingWithInt:(jint)id_ {
  @synchronized(self) {
    return pings_ != nil ? [pings_ removeWithId:JavaLangInteger_valueOfWithInt_(id_)] : nil;
  }
}

- (void)flush {
  [((Okhttp3InternalHttp2Http2Writer *) nil_chk(writer_)) flush];
}

- (void)shutdownWithOkhttp3InternalHttp2ErrorCode:(Okhttp3InternalHttp2ErrorCode *)statusCode {
  @synchronized(writer_) {
    jint lastGoodStreamId;
    @synchronized(self) {
      if (shutdown_) {
        return;
      }
      shutdown_ = true;
      lastGoodStreamId = self->lastGoodStreamId_;
    }
    [((Okhttp3InternalHttp2Http2Writer *) nil_chk(writer_)) goAwayWithInt:lastGoodStreamId withOkhttp3InternalHttp2ErrorCode:statusCode withByteArray:JreLoadStatic(Okhttp3InternalUtil, EMPTY_BYTE_ARRAY)];
  }
}

- (void)close {
  [self closeWithOkhttp3InternalHttp2ErrorCode:JreLoadEnum(Okhttp3InternalHttp2ErrorCode, NO_ERROR) withOkhttp3InternalHttp2ErrorCode:JreLoadEnum(Okhttp3InternalHttp2ErrorCode, CANCEL)];
}

- (void)closeWithOkhttp3InternalHttp2ErrorCode:(Okhttp3InternalHttp2ErrorCode *)connectionCode
             withOkhttp3InternalHttp2ErrorCode:(Okhttp3InternalHttp2ErrorCode *)streamCode {
  JreAssert(((!JavaLangThread_holdsLockWithId_(self))), (@"okhttp3/internal/http2/Http2Connection.java:408 condition failed: assert (!Thread.holdsLock(this));"));
  JavaIoIOException *thrown = nil;
  @try {
    [self shutdownWithOkhttp3InternalHttp2ErrorCode:connectionCode];
  }
  @catch (JavaIoIOException *e) {
    thrown = e;
  }
  IOSObjectArray *streamsToClose = nil;
  IOSObjectArray *pingsToCancel = nil;
  @synchronized(self) {
    if (![((id<JavaUtilMap>) nil_chk(streams_)) isEmpty]) {
      streamsToClose = [((id<JavaUtilCollection>) nil_chk([streams_ values])) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[streams_ size] type:Okhttp3InternalHttp2Http2Stream_class_()]];
      [streams_ clear];
    }
    if (pings_ != nil) {
      pingsToCancel = [((id<JavaUtilCollection>) nil_chk([pings_ values])) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[((id<JavaUtilMap>) nil_chk(pings_)) size] type:Okhttp3InternalHttp2Ping_class_()]];
      JreStrongAssign(&pings_, nil);
    }
  }
  if (streamsToClose != nil) {
    {
      IOSObjectArray *a__ = streamsToClose;
      Okhttp3InternalHttp2Http2Stream * const *b__ = a__->buffer_;
      Okhttp3InternalHttp2Http2Stream * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        Okhttp3InternalHttp2Http2Stream *stream = *b__++;
        @try {
          [((Okhttp3InternalHttp2Http2Stream *) nil_chk(stream)) closeWithOkhttp3InternalHttp2ErrorCode:streamCode];
        }
        @catch (JavaIoIOException *e) {
          if (thrown != nil) thrown = e;
        }
      }
    }
  }
  if (pingsToCancel != nil) {
    {
      IOSObjectArray *a__ = pingsToCancel;
      Okhttp3InternalHttp2Ping * const *b__ = a__->buffer_;
      Okhttp3InternalHttp2Ping * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        Okhttp3InternalHttp2Ping *ping = *b__++;
        [((Okhttp3InternalHttp2Ping *) nil_chk(ping)) cancel];
      }
    }
  }
  @try {
    [((Okhttp3InternalHttp2Http2Writer *) nil_chk(writer_)) close];
  }
  @catch (JavaIoIOException *e) {
    if (thrown == nil) thrown = e;
  }
  @try {
    [((JavaNetSocket *) nil_chk(socket_)) close];
  }
  @catch (JavaIoIOException *e) {
    thrown = e;
  }
  if (thrown != nil) @throw thrown;
}

- (void)start {
  [self startWithBoolean:true];
}

- (void)startWithBoolean:(jboolean)sendConnectionPreface {
  if (sendConnectionPreface) {
    [((Okhttp3InternalHttp2Http2Writer *) nil_chk(writer_)) connectionPreface];
    [writer_ settingsWithOkhttp3InternalHttp2Settings:okHttpSettings_];
    jint windowSize = [((Okhttp3InternalHttp2Settings *) nil_chk(okHttpSettings_)) getInitialWindowSize];
    if (windowSize != Okhttp3InternalHttp2Settings_DEFAULT_INITIAL_WINDOW_SIZE) {
      [writer_ windowUpdateWithInt:0 withLong:windowSize - Okhttp3InternalHttp2Settings_DEFAULT_INITIAL_WINDOW_SIZE];
    }
  }
  [create_JavaLangThread_initWithJavaLangRunnable_(readerRunnable_) start];
}

- (void)setSettingsWithOkhttp3InternalHttp2Settings:(Okhttp3InternalHttp2Settings *)settings {
  @synchronized(writer_) {
    @synchronized(self) {
      if (shutdown_) {
        @throw create_Okhttp3InternalHttp2ConnectionShutdownException_init();
      }
      [((Okhttp3InternalHttp2Settings *) nil_chk(okHttpSettings_)) mergeWithOkhttp3InternalHttp2Settings:settings];
      [((Okhttp3InternalHttp2Http2Writer *) nil_chk(writer_)) settingsWithOkhttp3InternalHttp2Settings:settings];
    }
  }
}

- (jboolean)isShutdown {
  @synchronized(self) {
    return shutdown_;
  }
}

- (jboolean)pushedStreamWithInt:(jint)streamId {
  return streamId != 0 && (streamId & 1) == 0;
}

- (void)pushRequestLaterWithInt:(jint)streamId
               withJavaUtilList:(id<JavaUtilList>)requestHeaders {
  @synchronized(self) {
    if ([((id<JavaUtilSet>) nil_chk(currentPushRequests_)) containsWithId:JavaLangInteger_valueOfWithInt_(streamId)]) {
      [self writeSynResetLaterWithInt:streamId withOkhttp3InternalHttp2ErrorCode:JreLoadEnum(Okhttp3InternalHttp2ErrorCode, PROTOCOL_ERROR)];
      return;
    }
    [currentPushRequests_ addWithId:JavaLangInteger_valueOfWithInt_(streamId)];
  }
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(pushExecutor_)) executeWithJavaLangRunnable:create_Okhttp3InternalHttp2Http2Connection_4_initWithOkhttp3InternalHttp2Http2Connection_withInt_withJavaUtilList_withNSString_withNSObjectArray_(self, streamId, requestHeaders, @"OkHttp %s Push Request[%s]", [IOSObjectArray arrayWithObjects:(id[]){ hostname_, JavaLangInteger_valueOfWithInt_(streamId) } count:2 type:NSObject_class_()])];
}

- (void)pushHeadersLaterWithInt:(jint)streamId
               withJavaUtilList:(id<JavaUtilList>)requestHeaders
                    withBoolean:(jboolean)inFinished {
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(pushExecutor_)) executeWithJavaLangRunnable:create_Okhttp3InternalHttp2Http2Connection_5_initWithOkhttp3InternalHttp2Http2Connection_withInt_withJavaUtilList_withBoolean_withNSString_withNSObjectArray_(self, streamId, requestHeaders, inFinished, @"OkHttp %s Push Headers[%s]", [IOSObjectArray arrayWithObjects:(id[]){ hostname_, JavaLangInteger_valueOfWithInt_(streamId) } count:2 type:NSObject_class_()])];
}

- (void)pushDataLaterWithInt:(jint)streamId
      withOkioBufferedSource:(id<OkioBufferedSource>)source
                     withInt:(jint)byteCount
                 withBoolean:(jboolean)inFinished {
  OkioBuffer *buffer = create_OkioBuffer_init();
  [((id<OkioBufferedSource>) nil_chk(source)) requireWithLong:byteCount];
  [source readWithOkioBuffer:buffer withLong:byteCount];
  if ([buffer size] != byteCount) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("J$I", [buffer size], @" != ", byteCount));
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(pushExecutor_)) executeWithJavaLangRunnable:create_Okhttp3InternalHttp2Http2Connection_6_initWithOkhttp3InternalHttp2Http2Connection_withInt_withOkioBuffer_withInt_withBoolean_withNSString_withNSObjectArray_(self, streamId, buffer, byteCount, inFinished, @"OkHttp %s Push Data[%s]", [IOSObjectArray arrayWithObjects:(id[]){ hostname_, JavaLangInteger_valueOfWithInt_(streamId) } count:2 type:NSObject_class_()])];
}

- (void)pushResetLaterWithInt:(jint)streamId
withOkhttp3InternalHttp2ErrorCode:(Okhttp3InternalHttp2ErrorCode *)errorCode {
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(pushExecutor_)) executeWithJavaLangRunnable:create_Okhttp3InternalHttp2Http2Connection_7_initWithOkhttp3InternalHttp2Http2Connection_withInt_withOkhttp3InternalHttp2ErrorCode_withNSString_withNSObjectArray_(self, streamId, errorCode, @"OkHttp %s Push Reset[%s]", [IOSObjectArray arrayWithObjects:(id[]){ hostname_, JavaLangInteger_valueOfWithInt_(streamId) } count:2 type:NSObject_class_()])];
}

- (void)dealloc {
  RELEASE_(listener_);
  RELEASE_(streams_);
  RELEASE_(hostname_);
  RELEASE_(pushExecutor_);
  RELEASE_(pings_);
  RELEASE_(pushObserver_);
  RELEASE_(okHttpSettings_);
  RELEASE_(peerSettings_);
  RELEASE_(socket_);
  RELEASE_(writer_);
  RELEASE_(readerRunnable_);
  RELEASE_(currentPushRequests_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Protocol;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalHttp2Http2Stream;", 0x20, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalHttp2Http2Stream;", 0x20, 3, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalHttp2Http2Stream;", 0x1, 4, 5, 6, 7, -1, -1 },
    { NULL, "LOkhttp3InternalHttp2Http2Stream;", 0x1, 8, 9, 6, 10, -1, -1 },
    { NULL, "LOkhttp3InternalHttp2Http2Stream;", 0x2, 8, 5, 6, 7, -1, -1 },
    { NULL, "V", 0x0, 11, 12, 6, 13, -1, -1 },
    { NULL, "V", 0x1, 14, 15, 6, -1, -1, -1 },
    { NULL, "V", 0x0, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 20, 19, 6, -1, -1, -1 },
    { NULL, "V", 0x0, 21, 22, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalHttp2Ping;", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "V", 0x0, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 25, 24, 6, -1, -1, -1 },
    { NULL, "LOkhttp3InternalHttp2Ping;", 0x20, 26, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 28, 6, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "V", 0x0, 29, 30, 6, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "V", 0x0, 31, 32, 6, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 34, 6, -1, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 35, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 36, 37, -1, 38, -1, -1 },
    { NULL, "V", 0x0, 39, 5, -1, 40, -1, -1 },
    { NULL, "V", 0x0, 41, 42, 6, -1, -1, -1 },
    { NULL, "V", 0x0, 43, 19, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalHttp2Http2Connection_Builder:);
  methods[1].selector = @selector(getProtocol);
  methods[2].selector = @selector(openStreamCount);
  methods[3].selector = @selector(getStreamWithInt:);
  methods[4].selector = @selector(removeStreamWithInt:);
  methods[5].selector = @selector(maxConcurrentStreams);
  methods[6].selector = @selector(pushStreamWithInt:withJavaUtilList:withBoolean:);
  methods[7].selector = @selector(newStreamWithJavaUtilList:withBoolean:);
  methods[8].selector = @selector(newStreamWithInt:withJavaUtilList:withBoolean:);
  methods[9].selector = @selector(writeSynReplyWithInt:withBoolean:withJavaUtilList:);
  methods[10].selector = @selector(writeDataWithInt:withBoolean:withOkioBuffer:withLong:);
  methods[11].selector = @selector(addBytesToWriteWindowWithLong:);
  methods[12].selector = @selector(writeSynResetLaterWithInt:withOkhttp3InternalHttp2ErrorCode:);
  methods[13].selector = @selector(writeSynResetWithInt:withOkhttp3InternalHttp2ErrorCode:);
  methods[14].selector = @selector(writeWindowUpdateLaterWithInt:withLong:);
  methods[15].selector = @selector(ping);
  methods[16].selector = @selector(writePingLaterWithBoolean:withInt:withInt:withOkhttp3InternalHttp2Ping:);
  methods[17].selector = @selector(writePingWithBoolean:withInt:withInt:withOkhttp3InternalHttp2Ping:);
  methods[18].selector = @selector(removePingWithInt:);
  methods[19].selector = @selector(flush);
  methods[20].selector = @selector(shutdownWithOkhttp3InternalHttp2ErrorCode:);
  methods[21].selector = @selector(close);
  methods[22].selector = @selector(closeWithOkhttp3InternalHttp2ErrorCode:withOkhttp3InternalHttp2ErrorCode:);
  methods[23].selector = @selector(start);
  methods[24].selector = @selector(startWithBoolean:);
  methods[25].selector = @selector(setSettingsWithOkhttp3InternalHttp2Settings:);
  methods[26].selector = @selector(isShutdown);
  methods[27].selector = @selector(pushedStreamWithInt:);
  methods[28].selector = @selector(pushRequestLaterWithInt:withJavaUtilList:);
  methods[29].selector = @selector(pushHeadersLaterWithInt:withJavaUtilList:withBoolean:);
  methods[30].selector = @selector(pushDataLaterWithInt:withOkioBufferedSource:withInt:withBoolean:);
  methods[31].selector = @selector(pushResetLaterWithInt:withOkhttp3InternalHttp2ErrorCode:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "executor", "LJavaUtilConcurrentExecutorService;", .constantValue.asLong = 0, 0x18, -1, 44, -1, -1 },
    { "client_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "listener_", "LOkhttp3InternalHttp2Http2Connection_Listener;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "streams_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x10, -1, -1, 45, -1 },
    { "hostname_", "LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "lastGoodStreamId_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "nextStreamId_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "shutdown_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "pushExecutor_", "LJavaUtilConcurrentExecutorService;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "pings_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 46, -1 },
    { "pushObserver_", "LOkhttp3InternalHttp2PushObserver;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "nextPingId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "unacknowledgedBytesRead_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "bytesLeftInWriteWindow_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "okHttpSettings_", "LOkhttp3InternalHttp2Settings;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "OKHTTP_CLIENT_WINDOW_SIZE", "I", .constantValue.asInt = Okhttp3InternalHttp2Http2Connection_OKHTTP_CLIENT_WINDOW_SIZE, 0x1a, -1, -1, -1, -1 },
    { "peerSettings_", "LOkhttp3InternalHttp2Settings;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "receivedInitialPeerSettings_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "socket_", "LJavaNetSocket;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "writer_", "LOkhttp3InternalHttp2Http2Writer;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "readerRunnable_", "LOkhttp3InternalHttp2Http2Connection_ReaderRunnable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "currentPushRequests_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x10, -1, -1, 47, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3InternalHttp2Http2Connection_Builder;", "getStream", "I", "removeStream", "pushStream", "ILJavaUtilList;Z", "LJavaIoIOException;", "(ILjava/util/List<Lokhttp3/internal/http2/Header;>;Z)Lokhttp3/internal/http2/Http2Stream;", "newStream", "LJavaUtilList;Z", "(Ljava/util/List<Lokhttp3/internal/http2/Header;>;Z)Lokhttp3/internal/http2/Http2Stream;", "writeSynReply", "IZLJavaUtilList;", "(IZLjava/util/List<Lokhttp3/internal/http2/Header;>;)V", "writeData", "IZLOkioBuffer;J", "addBytesToWriteWindow", "J", "writeSynResetLater", "ILOkhttp3InternalHttp2ErrorCode;", "writeSynReset", "writeWindowUpdateLater", "IJ", "writePingLater", "ZIILOkhttp3InternalHttp2Ping;", "writePing", "removePing", "shutdown", "LOkhttp3InternalHttp2ErrorCode;", "close", "LOkhttp3InternalHttp2ErrorCode;LOkhttp3InternalHttp2ErrorCode;", "start", "Z", "setSettings", "LOkhttp3InternalHttp2Settings;", "pushedStream", "pushRequestLater", "ILJavaUtilList;", "(ILjava/util/List<Lokhttp3/internal/http2/Header;>;)V", "pushHeadersLater", "(ILjava/util/List<Lokhttp3/internal/http2/Header;>;Z)V", "pushDataLater", "ILOkioBufferedSource;IZ", "pushResetLater", &Okhttp3InternalHttp2Http2Connection_executor, "Ljava/util/Map<Ljava/lang/Integer;Lokhttp3/internal/http2/Http2Stream;>;", "Ljava/util/Map<Ljava/lang/Integer;Lokhttp3/internal/http2/Ping;>;", "Ljava/util/Set<Ljava/lang/Integer;>;", "LOkhttp3InternalHttp2Http2Connection_Builder;LOkhttp3InternalHttp2Http2Connection_ReaderRunnable;LOkhttp3InternalHttp2Http2Connection_Listener;" };
  static const J2ObjcClassInfo _Okhttp3InternalHttp2Http2Connection = { "Http2Connection", "okhttp3.internal.http2", ptrTable, methods, fields, 7, 0x11, 32, 22, -1, 48, -1, -1, -1 };
  return &_Okhttp3InternalHttp2Http2Connection;
}

+ (void)initialize {
  if (self == [Okhttp3InternalHttp2Http2Connection class]) {
    JreStrongAssignAndConsume(&Okhttp3InternalHttp2Http2Connection_executor, new_JavaUtilConcurrentThreadPoolExecutor_initWithInt_withInt_withLong_withJavaUtilConcurrentTimeUnit_withJavaUtilConcurrentBlockingQueue_withJavaUtilConcurrentThreadFactory_(0, JavaLangInteger_MAX_VALUE, 60, JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS), create_JavaUtilConcurrentSynchronousQueue_init(), Okhttp3InternalUtil_threadFactoryWithNSString_withBoolean_(@"OkHttp Http2Connection", true)));
    J2OBJC_SET_INITIALIZED(Okhttp3InternalHttp2Http2Connection)
  }
}

@end

void Okhttp3InternalHttp2Http2Connection_initWithOkhttp3InternalHttp2Http2Connection_Builder_(Okhttp3InternalHttp2Http2Connection *self, Okhttp3InternalHttp2Http2Connection_Builder *builder) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->streams_, new_JavaUtilLinkedHashMap_init());
  self->unacknowledgedBytesRead_ = 0;
  JreStrongAssignAndConsume(&self->okHttpSettings_, new_Okhttp3InternalHttp2Settings_init());
  JreStrongAssignAndConsume(&self->peerSettings_, new_Okhttp3InternalHttp2Settings_init());
  self->receivedInitialPeerSettings_ = false;
  JreStrongAssignAndConsume(&self->currentPushRequests_, new_JavaUtilLinkedHashSet_init());
  JreStrongAssign(&self->pushObserver_, ((Okhttp3InternalHttp2Http2Connection_Builder *) nil_chk(builder))->pushObserver_);
  self->client_ = builder->client_;
  JreStrongAssign(&self->listener_, builder->listener_);
  self->nextStreamId_ = builder->client_ ? 1 : 2;
  if (builder->client_) {
    self->nextStreamId_ += 2;
  }
  self->nextPingId_ = builder->client_ ? 1 : 2;
  if (builder->client_) {
    [((Okhttp3InternalHttp2Settings *) nil_chk(self->okHttpSettings_)) setWithInt:Okhttp3InternalHttp2Settings_INITIAL_WINDOW_SIZE withInt:Okhttp3InternalHttp2Http2Connection_OKHTTP_CLIENT_WINDOW_SIZE];
  }
  JreStrongAssign(&self->hostname_, builder->hostname_);
  JreStrongAssignAndConsume(&self->pushExecutor_, new_JavaUtilConcurrentThreadPoolExecutor_initWithInt_withInt_withLong_withJavaUtilConcurrentTimeUnit_withJavaUtilConcurrentBlockingQueue_withJavaUtilConcurrentThreadFactory_(0, 1, 60, JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS), create_JavaUtilConcurrentLinkedBlockingQueue_init(), Okhttp3InternalUtil_threadFactoryWithNSString_withBoolean_(Okhttp3InternalUtil_formatWithNSString_withNSObjectArray_(@"OkHttp %s Push Observer", [IOSObjectArray arrayWithObjects:(id[]){ self->hostname_ } count:1 type:NSObject_class_()]), true)));
  [self->peerSettings_ setWithInt:Okhttp3InternalHttp2Settings_INITIAL_WINDOW_SIZE withInt:Okhttp3InternalHttp2Settings_DEFAULT_INITIAL_WINDOW_SIZE];
  [self->peerSettings_ setWithInt:Okhttp3InternalHttp2Settings_MAX_FRAME_SIZE withInt:Okhttp3InternalHttp2Http2_INITIAL_MAX_FRAME_SIZE];
  self->bytesLeftInWriteWindow_ = [self->peerSettings_ getInitialWindowSize];
  JreStrongAssign(&self->socket_, builder->socket_);
  JreStrongAssignAndConsume(&self->writer_, new_Okhttp3InternalHttp2Http2Writer_initWithOkioBufferedSink_withBoolean_(builder->sink_, self->client_));
  JreStrongAssignAndConsume(&self->readerRunnable_, new_Okhttp3InternalHttp2Http2Connection_ReaderRunnable_initWithOkhttp3InternalHttp2Http2Connection_withOkhttp3InternalHttp2Http2Reader_(self, create_Okhttp3InternalHttp2Http2Reader_initWithOkioBufferedSource_withBoolean_(builder->source_, self->client_)));
}

Okhttp3InternalHttp2Http2Connection *new_Okhttp3InternalHttp2Http2Connection_initWithOkhttp3InternalHttp2Http2Connection_Builder_(Okhttp3InternalHttp2Http2Connection_Builder *builder) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttp2Http2Connection, initWithOkhttp3InternalHttp2Http2Connection_Builder_, builder)
}

Okhttp3InternalHttp2Http2Connection *create_Okhttp3InternalHttp2Http2Connection_initWithOkhttp3InternalHttp2Http2Connection_Builder_(Okhttp3InternalHttp2Http2Connection_Builder *builder) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttp2Http2Connection, initWithOkhttp3InternalHttp2Http2Connection_Builder_, builder)
}

Okhttp3InternalHttp2Http2Stream *Okhttp3InternalHttp2Http2Connection_newStreamWithInt_withJavaUtilList_withBoolean_(Okhttp3InternalHttp2Http2Connection *self, jint associatedStreamId, id<JavaUtilList> requestHeaders, jboolean outArg) {
  jboolean outFinished = !outArg;
  jboolean inFinished = false;
  jboolean flushHeaders;
  Okhttp3InternalHttp2Http2Stream *stream;
  jint streamId;
  @synchronized(self->writer_) {
    @synchronized(self) {
      if (self->shutdown_) {
        @throw create_Okhttp3InternalHttp2ConnectionShutdownException_init();
      }
      streamId = self->nextStreamId_;
      self->nextStreamId_ += 2;
      stream = create_Okhttp3InternalHttp2Http2Stream_initWithInt_withOkhttp3InternalHttp2Http2Connection_withBoolean_withBoolean_withJavaUtilList_(streamId, self, outFinished, inFinished, requestHeaders);
      flushHeaders = (!outArg || self->bytesLeftInWriteWindow_ == 0LL || stream->bytesLeftInWriteWindow_ == 0LL);
      if ([stream isOpen]) {
        [((id<JavaUtilMap>) nil_chk(self->streams_)) putWithId:JavaLangInteger_valueOfWithInt_(streamId) withId:stream];
      }
    }
    if (associatedStreamId == 0) {
      [((Okhttp3InternalHttp2Http2Writer *) nil_chk(self->writer_)) synStreamWithBoolean:outFinished withInt:streamId withInt:associatedStreamId withJavaUtilList:requestHeaders];
    }
    else if (self->client_) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"client streams shouldn't have associated stream IDs");
    }
    else {
      [((Okhttp3InternalHttp2Http2Writer *) nil_chk(self->writer_)) pushPromiseWithInt:associatedStreamId withInt:streamId withJavaUtilList:requestHeaders];
    }
  }
  if (flushHeaders) {
    [self->writer_ flush];
  }
  return stream;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalHttp2Http2Connection)

@implementation Okhttp3InternalHttp2Http2Connection_1

- (instancetype)initWithOkhttp3InternalHttp2Http2Connection:(Okhttp3InternalHttp2Http2Connection *)outer$
                                                    withInt:(jint)capture$0
                          withOkhttp3InternalHttp2ErrorCode:(Okhttp3InternalHttp2ErrorCode *)capture$1
                                               withNSString:(NSString *)format
                                          withNSObjectArray:(IOSObjectArray *)args {
  Okhttp3InternalHttp2Http2Connection_1_initWithOkhttp3InternalHttp2Http2Connection_withInt_withOkhttp3InternalHttp2ErrorCode_withNSString_withNSObjectArray_(self, outer$, capture$0, capture$1, format, args);
  return self;
}

- (void)execute {
  @try {
    [this$0_ writeSynResetWithInt:val$streamId_ withOkhttp3InternalHttp2ErrorCode:val$errorCode_];
  }
  @catch (JavaIoIOException *ignored) {
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$errorCode_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x80, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalHttp2Http2Connection:withInt:withOkhttp3InternalHttp2ErrorCode:withNSString:withNSObjectArray:);
  methods[1].selector = @selector(execute);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3InternalHttp2Http2Connection;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$streamId_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$errorCode_", "LOkhttp3InternalHttp2ErrorCode;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;[LNSObject;", "LOkhttp3InternalHttp2Http2Connection;", "writeSynResetLaterWithInt:withOkhttp3InternalHttp2ErrorCode:" };
  static const J2ObjcClassInfo _Okhttp3InternalHttp2Http2Connection_1 = { "", "okhttp3.internal.http2", ptrTable, methods, fields, 7, 0x8018, 2, 3, 1, -1, 2, -1, -1 };
  return &_Okhttp3InternalHttp2Http2Connection_1;
}

@end

void Okhttp3InternalHttp2Http2Connection_1_initWithOkhttp3InternalHttp2Http2Connection_withInt_withOkhttp3InternalHttp2ErrorCode_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection_1 *self, Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, Okhttp3InternalHttp2ErrorCode *capture$1, NSString *format, IOSObjectArray *args) {
  JreStrongAssign(&self->this$0_, outer$);
  self->val$streamId_ = capture$0;
  JreStrongAssign(&self->val$errorCode_, capture$1);
  Okhttp3InternalNamedRunnable_initWithNSString_withNSObjectArray_(self, format, args);
}

Okhttp3InternalHttp2Http2Connection_1 *new_Okhttp3InternalHttp2Http2Connection_1_initWithOkhttp3InternalHttp2Http2Connection_withInt_withOkhttp3InternalHttp2ErrorCode_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, Okhttp3InternalHttp2ErrorCode *capture$1, NSString *format, IOSObjectArray *args) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttp2Http2Connection_1, initWithOkhttp3InternalHttp2Http2Connection_withInt_withOkhttp3InternalHttp2ErrorCode_withNSString_withNSObjectArray_, outer$, capture$0, capture$1, format, args)
}

Okhttp3InternalHttp2Http2Connection_1 *create_Okhttp3InternalHttp2Http2Connection_1_initWithOkhttp3InternalHttp2Http2Connection_withInt_withOkhttp3InternalHttp2ErrorCode_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, Okhttp3InternalHttp2ErrorCode *capture$1, NSString *format, IOSObjectArray *args) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttp2Http2Connection_1, initWithOkhttp3InternalHttp2Http2Connection_withInt_withOkhttp3InternalHttp2ErrorCode_withNSString_withNSObjectArray_, outer$, capture$0, capture$1, format, args)
}

@implementation Okhttp3InternalHttp2Http2Connection_2

- (instancetype)initWithOkhttp3InternalHttp2Http2Connection:(Okhttp3InternalHttp2Http2Connection *)outer$
                                                    withInt:(jint)capture$0
                                                   withLong:(jlong)capture$1
                                               withNSString:(NSString *)format
                                          withNSObjectArray:(IOSObjectArray *)args {
  Okhttp3InternalHttp2Http2Connection_2_initWithOkhttp3InternalHttp2Http2Connection_withInt_withLong_withNSString_withNSObjectArray_(self, outer$, capture$0, capture$1, format, args);
  return self;
}

- (void)execute {
  @try {
    [((Okhttp3InternalHttp2Http2Writer *) nil_chk(this$0_->writer_)) windowUpdateWithInt:val$streamId_ withLong:val$unacknowledgedBytesRead_];
  }
  @catch (JavaIoIOException *ignored) {
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x80, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalHttp2Http2Connection:withInt:withLong:withNSString:withNSObjectArray:);
  methods[1].selector = @selector(execute);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3InternalHttp2Http2Connection;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$streamId_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$unacknowledgedBytesRead_", "J", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;[LNSObject;", "LOkhttp3InternalHttp2Http2Connection;", "writeWindowUpdateLaterWithInt:withLong:" };
  static const J2ObjcClassInfo _Okhttp3InternalHttp2Http2Connection_2 = { "", "okhttp3.internal.http2", ptrTable, methods, fields, 7, 0x8018, 2, 3, 1, -1, 2, -1, -1 };
  return &_Okhttp3InternalHttp2Http2Connection_2;
}

@end

void Okhttp3InternalHttp2Http2Connection_2_initWithOkhttp3InternalHttp2Http2Connection_withInt_withLong_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection_2 *self, Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, jlong capture$1, NSString *format, IOSObjectArray *args) {
  JreStrongAssign(&self->this$0_, outer$);
  self->val$streamId_ = capture$0;
  self->val$unacknowledgedBytesRead_ = capture$1;
  Okhttp3InternalNamedRunnable_initWithNSString_withNSObjectArray_(self, format, args);
}

Okhttp3InternalHttp2Http2Connection_2 *new_Okhttp3InternalHttp2Http2Connection_2_initWithOkhttp3InternalHttp2Http2Connection_withInt_withLong_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, jlong capture$1, NSString *format, IOSObjectArray *args) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttp2Http2Connection_2, initWithOkhttp3InternalHttp2Http2Connection_withInt_withLong_withNSString_withNSObjectArray_, outer$, capture$0, capture$1, format, args)
}

Okhttp3InternalHttp2Http2Connection_2 *create_Okhttp3InternalHttp2Http2Connection_2_initWithOkhttp3InternalHttp2Http2Connection_withInt_withLong_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, jlong capture$1, NSString *format, IOSObjectArray *args) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttp2Http2Connection_2, initWithOkhttp3InternalHttp2Http2Connection_withInt_withLong_withNSString_withNSObjectArray_, outer$, capture$0, capture$1, format, args)
}

@implementation Okhttp3InternalHttp2Http2Connection_3

- (instancetype)initWithOkhttp3InternalHttp2Http2Connection:(Okhttp3InternalHttp2Http2Connection *)outer$
                                                withBoolean:(jboolean)capture$0
                                                    withInt:(jint)capture$1
                                                    withInt:(jint)capture$2
                               withOkhttp3InternalHttp2Ping:(Okhttp3InternalHttp2Ping *)capture$3
                                               withNSString:(NSString *)format
                                          withNSObjectArray:(IOSObjectArray *)args {
  Okhttp3InternalHttp2Http2Connection_3_initWithOkhttp3InternalHttp2Http2Connection_withBoolean_withInt_withInt_withOkhttp3InternalHttp2Ping_withNSString_withNSObjectArray_(self, outer$, capture$0, capture$1, capture$2, capture$3, format, args);
  return self;
}

- (void)execute {
  @try {
    [this$0_ writePingWithBoolean:val$reply_ withInt:val$payload1_ withInt:val$payload2_ withOkhttp3InternalHttp2Ping:val$ping_];
  }
  @catch (JavaIoIOException *ignored) {
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$ping_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x80, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalHttp2Http2Connection:withBoolean:withInt:withInt:withOkhttp3InternalHttp2Ping:withNSString:withNSObjectArray:);
  methods[1].selector = @selector(execute);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3InternalHttp2Http2Connection;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$reply_", "Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$payload1_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$payload2_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$ping_", "LOkhttp3InternalHttp2Ping;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;[LNSObject;", "LOkhttp3InternalHttp2Http2Connection;", "writePingLaterWithBoolean:withInt:withInt:withOkhttp3InternalHttp2Ping:" };
  static const J2ObjcClassInfo _Okhttp3InternalHttp2Http2Connection_3 = { "", "okhttp3.internal.http2", ptrTable, methods, fields, 7, 0x8018, 2, 5, 1, -1, 2, -1, -1 };
  return &_Okhttp3InternalHttp2Http2Connection_3;
}

@end

void Okhttp3InternalHttp2Http2Connection_3_initWithOkhttp3InternalHttp2Http2Connection_withBoolean_withInt_withInt_withOkhttp3InternalHttp2Ping_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection_3 *self, Okhttp3InternalHttp2Http2Connection *outer$, jboolean capture$0, jint capture$1, jint capture$2, Okhttp3InternalHttp2Ping *capture$3, NSString *format, IOSObjectArray *args) {
  JreStrongAssign(&self->this$0_, outer$);
  self->val$reply_ = capture$0;
  self->val$payload1_ = capture$1;
  self->val$payload2_ = capture$2;
  JreStrongAssign(&self->val$ping_, capture$3);
  Okhttp3InternalNamedRunnable_initWithNSString_withNSObjectArray_(self, format, args);
}

Okhttp3InternalHttp2Http2Connection_3 *new_Okhttp3InternalHttp2Http2Connection_3_initWithOkhttp3InternalHttp2Http2Connection_withBoolean_withInt_withInt_withOkhttp3InternalHttp2Ping_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection *outer$, jboolean capture$0, jint capture$1, jint capture$2, Okhttp3InternalHttp2Ping *capture$3, NSString *format, IOSObjectArray *args) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttp2Http2Connection_3, initWithOkhttp3InternalHttp2Http2Connection_withBoolean_withInt_withInt_withOkhttp3InternalHttp2Ping_withNSString_withNSObjectArray_, outer$, capture$0, capture$1, capture$2, capture$3, format, args)
}

Okhttp3InternalHttp2Http2Connection_3 *create_Okhttp3InternalHttp2Http2Connection_3_initWithOkhttp3InternalHttp2Http2Connection_withBoolean_withInt_withInt_withOkhttp3InternalHttp2Ping_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection *outer$, jboolean capture$0, jint capture$1, jint capture$2, Okhttp3InternalHttp2Ping *capture$3, NSString *format, IOSObjectArray *args) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttp2Http2Connection_3, initWithOkhttp3InternalHttp2Http2Connection_withBoolean_withInt_withInt_withOkhttp3InternalHttp2Ping_withNSString_withNSObjectArray_, outer$, capture$0, capture$1, capture$2, capture$3, format, args)
}

@implementation Okhttp3InternalHttp2Http2Connection_Builder

- (instancetype)initWithBoolean:(jboolean)client {
  Okhttp3InternalHttp2Http2Connection_Builder_initWithBoolean_(self, client);
  return self;
}

- (Okhttp3InternalHttp2Http2Connection_Builder *)socketWithJavaNetSocket:(JavaNetSocket *)socket {
  return [self socketWithJavaNetSocket:socket withNSString:[((JavaNetInetSocketAddress *) nil_chk(((JavaNetInetSocketAddress *) cast_chk([((JavaNetSocket *) nil_chk(socket)) getRemoteSocketAddress], [JavaNetInetSocketAddress class])))) getHostName] withOkioBufferedSource:OkioOkio_bufferWithOkioSource_(OkioOkio_sourceWithJavaNetSocket_(socket)) withOkioBufferedSink:OkioOkio_bufferWithOkioSink_(OkioOkio_sinkWithJavaNetSocket_(socket))];
}

- (Okhttp3InternalHttp2Http2Connection_Builder *)socketWithJavaNetSocket:(JavaNetSocket *)socket
                                                            withNSString:(NSString *)hostname
                                                  withOkioBufferedSource:(id<OkioBufferedSource>)source
                                                    withOkioBufferedSink:(id<OkioBufferedSink>)sink {
  JreStrongAssign(&self->socket_, socket);
  JreStrongAssign(&self->hostname_, hostname);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->sink_, sink);
  return self;
}

- (Okhttp3InternalHttp2Http2Connection_Builder *)listenerWithOkhttp3InternalHttp2Http2Connection_Listener:(Okhttp3InternalHttp2Http2Connection_Listener *)listener {
  JreStrongAssign(&self->listener_, listener);
  return self;
}

- (Okhttp3InternalHttp2Http2Connection_Builder *)pushObserverWithOkhttp3InternalHttp2PushObserver:(id<Okhttp3InternalHttp2PushObserver>)pushObserver {
  JreStrongAssign(&self->pushObserver_, pushObserver);
  return self;
}

- (Okhttp3InternalHttp2Http2Connection *)build {
  return create_Okhttp3InternalHttp2Http2Connection_initWithOkhttp3InternalHttp2Http2Connection_Builder_(self);
}

- (void)dealloc {
  RELEASE_(socket_);
  RELEASE_(hostname_);
  RELEASE_(source_);
  RELEASE_(sink_);
  RELEASE_(listener_);
  RELEASE_(pushObserver_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalHttp2Http2Connection_Builder;", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LOkhttp3InternalHttp2Http2Connection_Builder;", 0x1, 1, 4, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalHttp2Http2Connection_Builder;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalHttp2Http2Connection_Builder;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalHttp2Http2Connection;", 0x1, -1, -1, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithBoolean:);
  methods[1].selector = @selector(socketWithJavaNetSocket:);
  methods[2].selector = @selector(socketWithJavaNetSocket:withNSString:withOkioBufferedSource:withOkioBufferedSink:);
  methods[3].selector = @selector(listenerWithOkhttp3InternalHttp2Http2Connection_Listener:);
  methods[4].selector = @selector(pushObserverWithOkhttp3InternalHttp2PushObserver:);
  methods[5].selector = @selector(build);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "socket_", "LJavaNetSocket;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "hostname_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "source_", "LOkioBufferedSource;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sink_", "LOkioBufferedSink;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "listener_", "LOkhttp3InternalHttp2Http2Connection_Listener;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "pushObserver_", "LOkhttp3InternalHttp2PushObserver;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "client_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Z", "socket", "LJavaNetSocket;", "LJavaIoIOException;", "LJavaNetSocket;LNSString;LOkioBufferedSource;LOkioBufferedSink;", "listener", "LOkhttp3InternalHttp2Http2Connection_Listener;", "pushObserver", "LOkhttp3InternalHttp2PushObserver;", "LOkhttp3InternalHttp2Http2Connection;" };
  static const J2ObjcClassInfo _Okhttp3InternalHttp2Http2Connection_Builder = { "Builder", "okhttp3.internal.http2", ptrTable, methods, fields, 7, 0x9, 6, 7, 9, -1, -1, -1, -1 };
  return &_Okhttp3InternalHttp2Http2Connection_Builder;
}

@end

void Okhttp3InternalHttp2Http2Connection_Builder_initWithBoolean_(Okhttp3InternalHttp2Http2Connection_Builder *self, jboolean client) {
  NSObject_init(self);
  JreStrongAssign(&self->listener_, JreLoadStatic(Okhttp3InternalHttp2Http2Connection_Listener, REFUSE_INCOMING_STREAMS));
  JreStrongAssign(&self->pushObserver_, JreLoadStatic(Okhttp3InternalHttp2PushObserver, CANCEL));
  self->client_ = client;
}

Okhttp3InternalHttp2Http2Connection_Builder *new_Okhttp3InternalHttp2Http2Connection_Builder_initWithBoolean_(jboolean client) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttp2Http2Connection_Builder, initWithBoolean_, client)
}

Okhttp3InternalHttp2Http2Connection_Builder *create_Okhttp3InternalHttp2Http2Connection_Builder_initWithBoolean_(jboolean client) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttp2Http2Connection_Builder, initWithBoolean_, client)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalHttp2Http2Connection_Builder)

@implementation Okhttp3InternalHttp2Http2Connection_ReaderRunnable

- (instancetype)initWithOkhttp3InternalHttp2Http2Connection:(Okhttp3InternalHttp2Http2Connection *)outer$
                        withOkhttp3InternalHttp2Http2Reader:(Okhttp3InternalHttp2Http2Reader *)reader {
  Okhttp3InternalHttp2Http2Connection_ReaderRunnable_initWithOkhttp3InternalHttp2Http2Connection_withOkhttp3InternalHttp2Http2Reader_(self, outer$, reader);
  return self;
}

- (void)execute {
  Okhttp3InternalHttp2ErrorCode *connectionErrorCode = JreLoadEnum(Okhttp3InternalHttp2ErrorCode, INTERNAL_ERROR);
  Okhttp3InternalHttp2ErrorCode *streamErrorCode = JreLoadEnum(Okhttp3InternalHttp2ErrorCode, INTERNAL_ERROR);
  @try {
    [((Okhttp3InternalHttp2Http2Reader *) nil_chk(reader_)) readConnectionPrefaceWithOkhttp3InternalHttp2Http2Reader_Handler:self];
    while ([reader_ nextFrameWithBoolean:false withOkhttp3InternalHttp2Http2Reader_Handler:self]) {
    }
    connectionErrorCode = JreLoadEnum(Okhttp3InternalHttp2ErrorCode, NO_ERROR);
    streamErrorCode = JreLoadEnum(Okhttp3InternalHttp2ErrorCode, CANCEL);
  }
  @catch (JavaIoIOException *e) {
    connectionErrorCode = JreLoadEnum(Okhttp3InternalHttp2ErrorCode, PROTOCOL_ERROR);
    streamErrorCode = JreLoadEnum(Okhttp3InternalHttp2ErrorCode, PROTOCOL_ERROR);
  }
  @finally {
    @try {
      [this$0_ closeWithOkhttp3InternalHttp2ErrorCode:connectionErrorCode withOkhttp3InternalHttp2ErrorCode:streamErrorCode];
    }
    @catch (JavaIoIOException *ignored) {
    }
    Okhttp3InternalUtil_closeQuietlyWithJavaIoCloseable_(reader_);
  }
}

- (void)dataWithBoolean:(jboolean)inFinished
                withInt:(jint)streamId
 withOkioBufferedSource:(id<OkioBufferedSource>)source
                withInt:(jint)length {
  if ([this$0_ pushedStreamWithInt:streamId]) {
    [this$0_ pushDataLaterWithInt:streamId withOkioBufferedSource:source withInt:length withBoolean:inFinished];
    return;
  }
  Okhttp3InternalHttp2Http2Stream *dataStream = [this$0_ getStreamWithInt:streamId];
  if (dataStream == nil) {
    [this$0_ writeSynResetLaterWithInt:streamId withOkhttp3InternalHttp2ErrorCode:JreLoadEnum(Okhttp3InternalHttp2ErrorCode, PROTOCOL_ERROR)];
    [((id<OkioBufferedSource>) nil_chk(source)) skipWithLong:length];
    return;
  }
  [dataStream receiveDataWithOkioBufferedSource:source withInt:length];
  if (inFinished) {
    [dataStream receiveFin];
  }
}

- (void)headersWithBoolean:(jboolean)inFinished
                   withInt:(jint)streamId
                   withInt:(jint)associatedStreamId
          withJavaUtilList:(id<JavaUtilList>)headerBlock {
  if ([this$0_ pushedStreamWithInt:streamId]) {
    [this$0_ pushHeadersLaterWithInt:streamId withJavaUtilList:headerBlock withBoolean:inFinished];
    return;
  }
  Okhttp3InternalHttp2Http2Stream *stream;
  @synchronized(this$0_) {
    if (this$0_->shutdown_) return;
    stream = [this$0_ getStreamWithInt:streamId];
    if (stream == nil) {
      if (streamId <= this$0_->lastGoodStreamId_) return;
      if (streamId % 2 == this$0_->nextStreamId_ % 2) return;
      Okhttp3InternalHttp2Http2Stream *newStream = create_Okhttp3InternalHttp2Http2Stream_initWithInt_withOkhttp3InternalHttp2Http2Connection_withBoolean_withBoolean_withJavaUtilList_(streamId, this$0_, false, inFinished, headerBlock);
      this$0_->lastGoodStreamId_ = streamId;
      [((id<JavaUtilMap>) nil_chk(this$0_->streams_)) putWithId:JavaLangInteger_valueOfWithInt_(streamId) withId:newStream];
      [((id<JavaUtilConcurrentExecutorService>) nil_chk(JreLoadStatic(Okhttp3InternalHttp2Http2Connection, executor))) executeWithJavaLangRunnable:create_Okhttp3InternalHttp2Http2Connection_ReaderRunnable_1_initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable_withOkhttp3InternalHttp2Http2Stream_withNSString_withNSObjectArray_(self, newStream, @"OkHttp %s stream %d", [IOSObjectArray arrayWithObjects:(id[]){ this$0_->hostname_, JavaLangInteger_valueOfWithInt_(streamId) } count:2 type:NSObject_class_()])];
      return;
    }
  }
  [stream receiveHeadersWithJavaUtilList:headerBlock];
  if (inFinished) [stream receiveFin];
}

- (void)rstStreamWithInt:(jint)streamId
withOkhttp3InternalHttp2ErrorCode:(Okhttp3InternalHttp2ErrorCode *)errorCode {
  if ([this$0_ pushedStreamWithInt:streamId]) {
    [this$0_ pushResetLaterWithInt:streamId withOkhttp3InternalHttp2ErrorCode:errorCode];
    return;
  }
  Okhttp3InternalHttp2Http2Stream *rstStream = [this$0_ removeStreamWithInt:streamId];
  if (rstStream != nil) {
    [rstStream receiveRstStreamWithOkhttp3InternalHttp2ErrorCode:errorCode];
  }
}

- (void)settingsWithBoolean:(jboolean)clearPrevious
withOkhttp3InternalHttp2Settings:(Okhttp3InternalHttp2Settings *)newSettings {
  jlong delta = 0;
  IOSObjectArray *streamsToNotify = nil;
  @synchronized(this$0_) {
    jint priorWriteWindowSize = [((Okhttp3InternalHttp2Settings *) nil_chk(this$0_->peerSettings_)) getInitialWindowSize];
    if (clearPrevious) [this$0_->peerSettings_ clear];
    [this$0_->peerSettings_ mergeWithOkhttp3InternalHttp2Settings:newSettings];
    Okhttp3InternalHttp2Http2Connection_ReaderRunnable_applyAndAckSettingsWithOkhttp3InternalHttp2Settings_(self, newSettings);
    jint peerInitialWindowSize = [this$0_->peerSettings_ getInitialWindowSize];
    if (peerInitialWindowSize != -1 && peerInitialWindowSize != priorWriteWindowSize) {
      delta = peerInitialWindowSize - priorWriteWindowSize;
      if (!this$0_->receivedInitialPeerSettings_) {
        [this$0_ addBytesToWriteWindowWithLong:delta];
        this$0_->receivedInitialPeerSettings_ = true;
      }
      if (![((id<JavaUtilMap>) nil_chk(this$0_->streams_)) isEmpty]) {
        streamsToNotify = [((id<JavaUtilCollection>) nil_chk([this$0_->streams_ values])) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[this$0_->streams_ size] type:Okhttp3InternalHttp2Http2Stream_class_()]];
      }
    }
    [((id<JavaUtilConcurrentExecutorService>) nil_chk(JreLoadStatic(Okhttp3InternalHttp2Http2Connection, executor))) executeWithJavaLangRunnable:create_Okhttp3InternalHttp2Http2Connection_ReaderRunnable_2_initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable_withNSString_withNSObjectArray_(self, @"OkHttp %s settings", [IOSObjectArray arrayWithObjects:(id[]){ this$0_->hostname_ } count:1 type:NSObject_class_()])];
  }
  if (streamsToNotify != nil && delta != 0) {
    {
      IOSObjectArray *a__ = streamsToNotify;
      Okhttp3InternalHttp2Http2Stream * const *b__ = a__->buffer_;
      Okhttp3InternalHttp2Http2Stream * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        Okhttp3InternalHttp2Http2Stream *stream = *b__++;
        @synchronized(stream) {
          [((Okhttp3InternalHttp2Http2Stream *) nil_chk(stream)) addBytesToWriteWindowWithLong:delta];
        }
      }
    }
  }
}

- (void)applyAndAckSettingsWithOkhttp3InternalHttp2Settings:(Okhttp3InternalHttp2Settings *)peerSettings {
  Okhttp3InternalHttp2Http2Connection_ReaderRunnable_applyAndAckSettingsWithOkhttp3InternalHttp2Settings_(self, peerSettings);
}

- (void)ackSettings {
}

- (void)pingWithBoolean:(jboolean)reply
                withInt:(jint)payload1
                withInt:(jint)payload2 {
  if (reply) {
    Okhttp3InternalHttp2Ping *ping = [this$0_ removePingWithInt:payload1];
    if (ping != nil) {
      [ping receive];
    }
  }
  else {
    [this$0_ writePingLaterWithBoolean:true withInt:payload1 withInt:payload2 withOkhttp3InternalHttp2Ping:nil];
  }
}

- (void)goAwayWithInt:(jint)lastGoodStreamId
withOkhttp3InternalHttp2ErrorCode:(Okhttp3InternalHttp2ErrorCode *)errorCode
   withOkioByteString:(OkioByteString *)debugData {
  if ([((OkioByteString *) nil_chk(debugData)) size] > 0) {
  }
  IOSObjectArray *streamsCopy;
  @synchronized(this$0_) {
    streamsCopy = [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(this$0_->streams_)) values])) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[this$0_->streams_ size] type:Okhttp3InternalHttp2Http2Stream_class_()]];
    this$0_->shutdown_ = true;
  }
  {
    IOSObjectArray *a__ = streamsCopy;
    Okhttp3InternalHttp2Http2Stream * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    Okhttp3InternalHttp2Http2Stream * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      Okhttp3InternalHttp2Http2Stream *http2Stream = *b__++;
      if ([((Okhttp3InternalHttp2Http2Stream *) nil_chk(http2Stream)) getId] > lastGoodStreamId && [http2Stream isLocallyInitiated]) {
        [http2Stream receiveRstStreamWithOkhttp3InternalHttp2ErrorCode:JreLoadEnum(Okhttp3InternalHttp2ErrorCode, REFUSED_STREAM)];
        [this$0_ removeStreamWithInt:[http2Stream getId]];
      }
    }
  }
}

- (void)windowUpdateWithInt:(jint)streamId
                   withLong:(jlong)windowSizeIncrement {
  if (streamId == 0) {
    @synchronized(this$0_) {
      this$0_->bytesLeftInWriteWindow_ += windowSizeIncrement;
      [this$0_ java_notifyAll];
    }
  }
  else {
    Okhttp3InternalHttp2Http2Stream *stream = [this$0_ getStreamWithInt:streamId];
    if (stream != nil) {
      @synchronized(stream) {
        [stream addBytesToWriteWindowWithLong:windowSizeIncrement];
      }
    }
  }
}

- (void)priorityWithInt:(jint)streamId
                withInt:(jint)streamDependency
                withInt:(jint)weight
            withBoolean:(jboolean)exclusive {
}

- (void)pushPromiseWithInt:(jint)streamId
                   withInt:(jint)promisedStreamId
          withJavaUtilList:(id<JavaUtilList>)requestHeaders {
  [this$0_ pushRequestLaterWithInt:promisedStreamId withJavaUtilList:requestHeaders];
}

- (void)alternateServiceWithInt:(jint)streamId
                   withNSString:(NSString *)origin
             withOkioByteString:(OkioByteString *)protocol
                   withNSString:(NSString *)host
                        withInt:(jint)port
                       withLong:(jlong)maxAge {
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(reader_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, 23, -1, -1 },
    { NULL, "V", 0x1, 24, 25, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalHttp2Http2Connection:withOkhttp3InternalHttp2Http2Reader:);
  methods[1].selector = @selector(execute);
  methods[2].selector = @selector(dataWithBoolean:withInt:withOkioBufferedSource:withInt:);
  methods[3].selector = @selector(headersWithBoolean:withInt:withInt:withJavaUtilList:);
  methods[4].selector = @selector(rstStreamWithInt:withOkhttp3InternalHttp2ErrorCode:);
  methods[5].selector = @selector(settingsWithBoolean:withOkhttp3InternalHttp2Settings:);
  methods[6].selector = @selector(applyAndAckSettingsWithOkhttp3InternalHttp2Settings:);
  methods[7].selector = @selector(ackSettings);
  methods[8].selector = @selector(pingWithBoolean:withInt:withInt:);
  methods[9].selector = @selector(goAwayWithInt:withOkhttp3InternalHttp2ErrorCode:withOkioByteString:);
  methods[10].selector = @selector(windowUpdateWithInt:withLong:);
  methods[11].selector = @selector(priorityWithInt:withInt:withInt:withBoolean:);
  methods[12].selector = @selector(pushPromiseWithInt:withInt:withJavaUtilList:);
  methods[13].selector = @selector(alternateServiceWithInt:withNSString:withOkioByteString:withNSString:withInt:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3InternalHttp2Http2Connection;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "reader_", "LOkhttp3InternalHttp2Http2Reader;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3InternalHttp2Http2Reader;", "data", "ZILOkioBufferedSource;I", "LJavaIoIOException;", "headers", "ZIILJavaUtilList;", "(ZIILjava/util/List<Lokhttp3/internal/http2/Header;>;)V", "rstStream", "ILOkhttp3InternalHttp2ErrorCode;", "settings", "ZLOkhttp3InternalHttp2Settings;", "applyAndAckSettings", "LOkhttp3InternalHttp2Settings;", "ping", "ZII", "goAway", "ILOkhttp3InternalHttp2ErrorCode;LOkioByteString;", "windowUpdate", "IJ", "priority", "IIIZ", "pushPromise", "IILJavaUtilList;", "(IILjava/util/List<Lokhttp3/internal/http2/Header;>;)V", "alternateService", "ILNSString;LOkioByteString;LNSString;IJ", "LOkhttp3InternalHttp2Http2Connection;" };
  static const J2ObjcClassInfo _Okhttp3InternalHttp2Http2Connection_ReaderRunnable = { "ReaderRunnable", "okhttp3.internal.http2", ptrTable, methods, fields, 7, 0x0, 14, 2, 26, -1, -1, -1, -1 };
  return &_Okhttp3InternalHttp2Http2Connection_ReaderRunnable;
}

@end

void Okhttp3InternalHttp2Http2Connection_ReaderRunnable_initWithOkhttp3InternalHttp2Http2Connection_withOkhttp3InternalHttp2Http2Reader_(Okhttp3InternalHttp2Http2Connection_ReaderRunnable *self, Okhttp3InternalHttp2Http2Connection *outer$, Okhttp3InternalHttp2Http2Reader *reader) {
  JreStrongAssign(&self->this$0_, outer$);
  Okhttp3InternalNamedRunnable_initWithNSString_withNSObjectArray_(self, @"OkHttp %s", [IOSObjectArray arrayWithObjects:(id[]){ outer$->hostname_ } count:1 type:NSObject_class_()]);
  JreStrongAssign(&self->reader_, reader);
}

Okhttp3InternalHttp2Http2Connection_ReaderRunnable *new_Okhttp3InternalHttp2Http2Connection_ReaderRunnable_initWithOkhttp3InternalHttp2Http2Connection_withOkhttp3InternalHttp2Http2Reader_(Okhttp3InternalHttp2Http2Connection *outer$, Okhttp3InternalHttp2Http2Reader *reader) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttp2Http2Connection_ReaderRunnable, initWithOkhttp3InternalHttp2Http2Connection_withOkhttp3InternalHttp2Http2Reader_, outer$, reader)
}

Okhttp3InternalHttp2Http2Connection_ReaderRunnable *create_Okhttp3InternalHttp2Http2Connection_ReaderRunnable_initWithOkhttp3InternalHttp2Http2Connection_withOkhttp3InternalHttp2Http2Reader_(Okhttp3InternalHttp2Http2Connection *outer$, Okhttp3InternalHttp2Http2Reader *reader) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttp2Http2Connection_ReaderRunnable, initWithOkhttp3InternalHttp2Http2Connection_withOkhttp3InternalHttp2Http2Reader_, outer$, reader)
}

void Okhttp3InternalHttp2Http2Connection_ReaderRunnable_applyAndAckSettingsWithOkhttp3InternalHttp2Settings_(Okhttp3InternalHttp2Http2Connection_ReaderRunnable *self, Okhttp3InternalHttp2Settings *peerSettings) {
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(JreLoadStatic(Okhttp3InternalHttp2Http2Connection, executor))) executeWithJavaLangRunnable:create_Okhttp3InternalHttp2Http2Connection_ReaderRunnable_3_initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable_withOkhttp3InternalHttp2Settings_withNSString_withNSObjectArray_(self, peerSettings, @"OkHttp %s ACK Settings", [IOSObjectArray arrayWithObjects:(id[]){ self->this$0_->hostname_ } count:1 type:NSObject_class_()])];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalHttp2Http2Connection_ReaderRunnable)

@implementation Okhttp3InternalHttp2Http2Connection_ReaderRunnable_1

- (instancetype)initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable:(Okhttp3InternalHttp2Http2Connection_ReaderRunnable *)outer$
                                       withOkhttp3InternalHttp2Http2Stream:(Okhttp3InternalHttp2Http2Stream *)capture$0
                                                              withNSString:(NSString *)format
                                                         withNSObjectArray:(IOSObjectArray *)args {
  Okhttp3InternalHttp2Http2Connection_ReaderRunnable_1_initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable_withOkhttp3InternalHttp2Http2Stream_withNSString_withNSObjectArray_(self, outer$, capture$0, format, args);
  return self;
}

- (void)execute {
  @try {
    [((Okhttp3InternalHttp2Http2Connection_Listener *) nil_chk(this$0_->this$0_->listener_)) onStreamWithOkhttp3InternalHttp2Http2Stream:val$newStream_];
  }
  @catch (JavaIoIOException *e) {
    [((Okhttp3InternalPlatformPlatform *) nil_chk(Okhttp3InternalPlatformPlatform_get())) logWithInt:Okhttp3InternalPlatformPlatform_INFO withNSString:JreStrcat("$$", @"Http2Connection.Listener failure for ", this$0_->this$0_->hostname_) withNSException:e];
    @try {
      [((Okhttp3InternalHttp2Http2Stream *) nil_chk(val$newStream_)) closeWithOkhttp3InternalHttp2ErrorCode:JreLoadEnum(Okhttp3InternalHttp2ErrorCode, PROTOCOL_ERROR)];
    }
    @catch (JavaIoIOException *ignored) {
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$newStream_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x80, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable:withOkhttp3InternalHttp2Http2Stream:withNSString:withNSObjectArray:);
  methods[1].selector = @selector(execute);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3InternalHttp2Http2Connection_ReaderRunnable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$newStream_", "LOkhttp3InternalHttp2Http2Stream;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;[LNSObject;", "LOkhttp3InternalHttp2Http2Connection_ReaderRunnable;", "headersWithBoolean:withInt:withInt:withJavaUtilList:" };
  static const J2ObjcClassInfo _Okhttp3InternalHttp2Http2Connection_ReaderRunnable_1 = { "", "okhttp3.internal.http2", ptrTable, methods, fields, 7, 0x8018, 2, 2, 1, -1, 2, -1, -1 };
  return &_Okhttp3InternalHttp2Http2Connection_ReaderRunnable_1;
}

@end

void Okhttp3InternalHttp2Http2Connection_ReaderRunnable_1_initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable_withOkhttp3InternalHttp2Http2Stream_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection_ReaderRunnable_1 *self, Okhttp3InternalHttp2Http2Connection_ReaderRunnable *outer$, Okhttp3InternalHttp2Http2Stream *capture$0, NSString *format, IOSObjectArray *args) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$newStream_, capture$0);
  Okhttp3InternalNamedRunnable_initWithNSString_withNSObjectArray_(self, format, args);
}

Okhttp3InternalHttp2Http2Connection_ReaderRunnable_1 *new_Okhttp3InternalHttp2Http2Connection_ReaderRunnable_1_initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable_withOkhttp3InternalHttp2Http2Stream_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection_ReaderRunnable *outer$, Okhttp3InternalHttp2Http2Stream *capture$0, NSString *format, IOSObjectArray *args) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttp2Http2Connection_ReaderRunnable_1, initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable_withOkhttp3InternalHttp2Http2Stream_withNSString_withNSObjectArray_, outer$, capture$0, format, args)
}

Okhttp3InternalHttp2Http2Connection_ReaderRunnable_1 *create_Okhttp3InternalHttp2Http2Connection_ReaderRunnable_1_initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable_withOkhttp3InternalHttp2Http2Stream_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection_ReaderRunnable *outer$, Okhttp3InternalHttp2Http2Stream *capture$0, NSString *format, IOSObjectArray *args) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttp2Http2Connection_ReaderRunnable_1, initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable_withOkhttp3InternalHttp2Http2Stream_withNSString_withNSObjectArray_, outer$, capture$0, format, args)
}

@implementation Okhttp3InternalHttp2Http2Connection_ReaderRunnable_2

- (instancetype)initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable:(Okhttp3InternalHttp2Http2Connection_ReaderRunnable *)outer$
                                                              withNSString:(NSString *)format
                                                         withNSObjectArray:(IOSObjectArray *)args {
  Okhttp3InternalHttp2Http2Connection_ReaderRunnable_2_initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable_withNSString_withNSObjectArray_(self, outer$, format, args);
  return self;
}

- (void)execute {
  [((Okhttp3InternalHttp2Http2Connection_Listener *) nil_chk(this$0_->this$0_->listener_)) onSettingsWithOkhttp3InternalHttp2Http2Connection:this$0_->this$0_];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x80, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable:withNSString:withNSObjectArray:);
  methods[1].selector = @selector(execute);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3InternalHttp2Http2Connection_ReaderRunnable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;[LNSObject;", "LOkhttp3InternalHttp2Http2Connection_ReaderRunnable;", "settingsWithBoolean:withOkhttp3InternalHttp2Settings:" };
  static const J2ObjcClassInfo _Okhttp3InternalHttp2Http2Connection_ReaderRunnable_2 = { "", "okhttp3.internal.http2", ptrTable, methods, fields, 7, 0x8018, 2, 1, 1, -1, 2, -1, -1 };
  return &_Okhttp3InternalHttp2Http2Connection_ReaderRunnable_2;
}

@end

void Okhttp3InternalHttp2Http2Connection_ReaderRunnable_2_initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection_ReaderRunnable_2 *self, Okhttp3InternalHttp2Http2Connection_ReaderRunnable *outer$, NSString *format, IOSObjectArray *args) {
  JreStrongAssign(&self->this$0_, outer$);
  Okhttp3InternalNamedRunnable_initWithNSString_withNSObjectArray_(self, format, args);
}

Okhttp3InternalHttp2Http2Connection_ReaderRunnable_2 *new_Okhttp3InternalHttp2Http2Connection_ReaderRunnable_2_initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection_ReaderRunnable *outer$, NSString *format, IOSObjectArray *args) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttp2Http2Connection_ReaderRunnable_2, initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable_withNSString_withNSObjectArray_, outer$, format, args)
}

Okhttp3InternalHttp2Http2Connection_ReaderRunnable_2 *create_Okhttp3InternalHttp2Http2Connection_ReaderRunnable_2_initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection_ReaderRunnable *outer$, NSString *format, IOSObjectArray *args) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttp2Http2Connection_ReaderRunnable_2, initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable_withNSString_withNSObjectArray_, outer$, format, args)
}

@implementation Okhttp3InternalHttp2Http2Connection_ReaderRunnable_3

- (instancetype)initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable:(Okhttp3InternalHttp2Http2Connection_ReaderRunnable *)outer$
                                          withOkhttp3InternalHttp2Settings:(Okhttp3InternalHttp2Settings *)capture$0
                                                              withNSString:(NSString *)format
                                                         withNSObjectArray:(IOSObjectArray *)args {
  Okhttp3InternalHttp2Http2Connection_ReaderRunnable_3_initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable_withOkhttp3InternalHttp2Settings_withNSString_withNSObjectArray_(self, outer$, capture$0, format, args);
  return self;
}

- (void)execute {
  @try {
    [((Okhttp3InternalHttp2Http2Writer *) nil_chk(this$0_->this$0_->writer_)) applyAndAckSettingsWithOkhttp3InternalHttp2Settings:val$peerSettings_];
  }
  @catch (JavaIoIOException *ignored) {
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$peerSettings_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x80, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable:withOkhttp3InternalHttp2Settings:withNSString:withNSObjectArray:);
  methods[1].selector = @selector(execute);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3InternalHttp2Http2Connection_ReaderRunnable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$peerSettings_", "LOkhttp3InternalHttp2Settings;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;[LNSObject;", "LOkhttp3InternalHttp2Http2Connection_ReaderRunnable;", "applyAndAckSettingsWithOkhttp3InternalHttp2Settings:" };
  static const J2ObjcClassInfo _Okhttp3InternalHttp2Http2Connection_ReaderRunnable_3 = { "", "okhttp3.internal.http2", ptrTable, methods, fields, 7, 0x8018, 2, 2, 1, -1, 2, -1, -1 };
  return &_Okhttp3InternalHttp2Http2Connection_ReaderRunnable_3;
}

@end

void Okhttp3InternalHttp2Http2Connection_ReaderRunnable_3_initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable_withOkhttp3InternalHttp2Settings_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection_ReaderRunnable_3 *self, Okhttp3InternalHttp2Http2Connection_ReaderRunnable *outer$, Okhttp3InternalHttp2Settings *capture$0, NSString *format, IOSObjectArray *args) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$peerSettings_, capture$0);
  Okhttp3InternalNamedRunnable_initWithNSString_withNSObjectArray_(self, format, args);
}

Okhttp3InternalHttp2Http2Connection_ReaderRunnable_3 *new_Okhttp3InternalHttp2Http2Connection_ReaderRunnable_3_initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable_withOkhttp3InternalHttp2Settings_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection_ReaderRunnable *outer$, Okhttp3InternalHttp2Settings *capture$0, NSString *format, IOSObjectArray *args) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttp2Http2Connection_ReaderRunnable_3, initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable_withOkhttp3InternalHttp2Settings_withNSString_withNSObjectArray_, outer$, capture$0, format, args)
}

Okhttp3InternalHttp2Http2Connection_ReaderRunnable_3 *create_Okhttp3InternalHttp2Http2Connection_ReaderRunnable_3_initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable_withOkhttp3InternalHttp2Settings_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection_ReaderRunnable *outer$, Okhttp3InternalHttp2Settings *capture$0, NSString *format, IOSObjectArray *args) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttp2Http2Connection_ReaderRunnable_3, initWithOkhttp3InternalHttp2Http2Connection_ReaderRunnable_withOkhttp3InternalHttp2Settings_withNSString_withNSObjectArray_, outer$, capture$0, format, args)
}

@implementation Okhttp3InternalHttp2Http2Connection_4

- (instancetype)initWithOkhttp3InternalHttp2Http2Connection:(Okhttp3InternalHttp2Http2Connection *)outer$
                                                    withInt:(jint)capture$0
                                           withJavaUtilList:(id<JavaUtilList>)capture$1
                                               withNSString:(NSString *)format
                                          withNSObjectArray:(IOSObjectArray *)args {
  Okhttp3InternalHttp2Http2Connection_4_initWithOkhttp3InternalHttp2Http2Connection_withInt_withJavaUtilList_withNSString_withNSObjectArray_(self, outer$, capture$0, capture$1, format, args);
  return self;
}

- (void)execute {
  jboolean cancel = [((id<Okhttp3InternalHttp2PushObserver>) nil_chk(this$0_->pushObserver_)) onRequestWithInt:val$streamId_ withJavaUtilList:val$requestHeaders_];
  @try {
    if (cancel) {
      [((Okhttp3InternalHttp2Http2Writer *) nil_chk(this$0_->writer_)) rstStreamWithInt:val$streamId_ withOkhttp3InternalHttp2ErrorCode:JreLoadEnum(Okhttp3InternalHttp2ErrorCode, CANCEL)];
      @synchronized(this$0_) {
        [((id<JavaUtilSet>) nil_chk(this$0_->currentPushRequests_)) removeWithId:JavaLangInteger_valueOfWithInt_(val$streamId_)];
      }
    }
  }
  @catch (JavaIoIOException *ignored) {
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$requestHeaders_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x80, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalHttp2Http2Connection:withInt:withJavaUtilList:withNSString:withNSObjectArray:);
  methods[1].selector = @selector(execute);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3InternalHttp2Http2Connection;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$streamId_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$requestHeaders_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;[LNSObject;", "Ljava/util/List<Lokhttp3/internal/http2/Header;>;", "LOkhttp3InternalHttp2Http2Connection;", "pushRequestLaterWithInt:withJavaUtilList:" };
  static const J2ObjcClassInfo _Okhttp3InternalHttp2Http2Connection_4 = { "", "okhttp3.internal.http2", ptrTable, methods, fields, 7, 0x8018, 2, 3, 2, -1, 3, -1, -1 };
  return &_Okhttp3InternalHttp2Http2Connection_4;
}

@end

void Okhttp3InternalHttp2Http2Connection_4_initWithOkhttp3InternalHttp2Http2Connection_withInt_withJavaUtilList_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection_4 *self, Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, id<JavaUtilList> capture$1, NSString *format, IOSObjectArray *args) {
  JreStrongAssign(&self->this$0_, outer$);
  self->val$streamId_ = capture$0;
  JreStrongAssign(&self->val$requestHeaders_, capture$1);
  Okhttp3InternalNamedRunnable_initWithNSString_withNSObjectArray_(self, format, args);
}

Okhttp3InternalHttp2Http2Connection_4 *new_Okhttp3InternalHttp2Http2Connection_4_initWithOkhttp3InternalHttp2Http2Connection_withInt_withJavaUtilList_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, id<JavaUtilList> capture$1, NSString *format, IOSObjectArray *args) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttp2Http2Connection_4, initWithOkhttp3InternalHttp2Http2Connection_withInt_withJavaUtilList_withNSString_withNSObjectArray_, outer$, capture$0, capture$1, format, args)
}

Okhttp3InternalHttp2Http2Connection_4 *create_Okhttp3InternalHttp2Http2Connection_4_initWithOkhttp3InternalHttp2Http2Connection_withInt_withJavaUtilList_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, id<JavaUtilList> capture$1, NSString *format, IOSObjectArray *args) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttp2Http2Connection_4, initWithOkhttp3InternalHttp2Http2Connection_withInt_withJavaUtilList_withNSString_withNSObjectArray_, outer$, capture$0, capture$1, format, args)
}

@implementation Okhttp3InternalHttp2Http2Connection_5

- (instancetype)initWithOkhttp3InternalHttp2Http2Connection:(Okhttp3InternalHttp2Http2Connection *)outer$
                                                    withInt:(jint)capture$0
                                           withJavaUtilList:(id<JavaUtilList>)capture$1
                                                withBoolean:(jboolean)capture$2
                                               withNSString:(NSString *)format
                                          withNSObjectArray:(IOSObjectArray *)args {
  Okhttp3InternalHttp2Http2Connection_5_initWithOkhttp3InternalHttp2Http2Connection_withInt_withJavaUtilList_withBoolean_withNSString_withNSObjectArray_(self, outer$, capture$0, capture$1, capture$2, format, args);
  return self;
}

- (void)execute {
  jboolean cancel = [((id<Okhttp3InternalHttp2PushObserver>) nil_chk(this$0_->pushObserver_)) onHeadersWithInt:val$streamId_ withJavaUtilList:val$requestHeaders_ withBoolean:val$inFinished_];
  @try {
    if (cancel) [((Okhttp3InternalHttp2Http2Writer *) nil_chk(this$0_->writer_)) rstStreamWithInt:val$streamId_ withOkhttp3InternalHttp2ErrorCode:JreLoadEnum(Okhttp3InternalHttp2ErrorCode, CANCEL)];
    if (cancel || val$inFinished_) {
      @synchronized(this$0_) {
        [((id<JavaUtilSet>) nil_chk(this$0_->currentPushRequests_)) removeWithId:JavaLangInteger_valueOfWithInt_(val$streamId_)];
      }
    }
  }
  @catch (JavaIoIOException *ignored) {
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$requestHeaders_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x80, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalHttp2Http2Connection:withInt:withJavaUtilList:withBoolean:withNSString:withNSObjectArray:);
  methods[1].selector = @selector(execute);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3InternalHttp2Http2Connection;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$streamId_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$requestHeaders_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1012, -1, -1, 1, -1 },
    { "val$inFinished_", "Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;[LNSObject;", "Ljava/util/List<Lokhttp3/internal/http2/Header;>;", "LOkhttp3InternalHttp2Http2Connection;", "pushHeadersLaterWithInt:withJavaUtilList:withBoolean:" };
  static const J2ObjcClassInfo _Okhttp3InternalHttp2Http2Connection_5 = { "", "okhttp3.internal.http2", ptrTable, methods, fields, 7, 0x8018, 2, 4, 2, -1, 3, -1, -1 };
  return &_Okhttp3InternalHttp2Http2Connection_5;
}

@end

void Okhttp3InternalHttp2Http2Connection_5_initWithOkhttp3InternalHttp2Http2Connection_withInt_withJavaUtilList_withBoolean_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection_5 *self, Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, id<JavaUtilList> capture$1, jboolean capture$2, NSString *format, IOSObjectArray *args) {
  JreStrongAssign(&self->this$0_, outer$);
  self->val$streamId_ = capture$0;
  JreStrongAssign(&self->val$requestHeaders_, capture$1);
  self->val$inFinished_ = capture$2;
  Okhttp3InternalNamedRunnable_initWithNSString_withNSObjectArray_(self, format, args);
}

Okhttp3InternalHttp2Http2Connection_5 *new_Okhttp3InternalHttp2Http2Connection_5_initWithOkhttp3InternalHttp2Http2Connection_withInt_withJavaUtilList_withBoolean_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, id<JavaUtilList> capture$1, jboolean capture$2, NSString *format, IOSObjectArray *args) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttp2Http2Connection_5, initWithOkhttp3InternalHttp2Http2Connection_withInt_withJavaUtilList_withBoolean_withNSString_withNSObjectArray_, outer$, capture$0, capture$1, capture$2, format, args)
}

Okhttp3InternalHttp2Http2Connection_5 *create_Okhttp3InternalHttp2Http2Connection_5_initWithOkhttp3InternalHttp2Http2Connection_withInt_withJavaUtilList_withBoolean_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, id<JavaUtilList> capture$1, jboolean capture$2, NSString *format, IOSObjectArray *args) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttp2Http2Connection_5, initWithOkhttp3InternalHttp2Http2Connection_withInt_withJavaUtilList_withBoolean_withNSString_withNSObjectArray_, outer$, capture$0, capture$1, capture$2, format, args)
}

@implementation Okhttp3InternalHttp2Http2Connection_6

- (instancetype)initWithOkhttp3InternalHttp2Http2Connection:(Okhttp3InternalHttp2Http2Connection *)outer$
                                                    withInt:(jint)capture$0
                                             withOkioBuffer:(OkioBuffer *)capture$1
                                                    withInt:(jint)capture$2
                                                withBoolean:(jboolean)capture$3
                                               withNSString:(NSString *)format
                                          withNSObjectArray:(IOSObjectArray *)args {
  Okhttp3InternalHttp2Http2Connection_6_initWithOkhttp3InternalHttp2Http2Connection_withInt_withOkioBuffer_withInt_withBoolean_withNSString_withNSObjectArray_(self, outer$, capture$0, capture$1, capture$2, capture$3, format, args);
  return self;
}

- (void)execute {
  @try {
    jboolean cancel = [((id<Okhttp3InternalHttp2PushObserver>) nil_chk(this$0_->pushObserver_)) onDataWithInt:val$streamId_ withOkioBufferedSource:val$buffer_ withInt:val$byteCount_ withBoolean:val$inFinished_];
    if (cancel) [((Okhttp3InternalHttp2Http2Writer *) nil_chk(this$0_->writer_)) rstStreamWithInt:val$streamId_ withOkhttp3InternalHttp2ErrorCode:JreLoadEnum(Okhttp3InternalHttp2ErrorCode, CANCEL)];
    if (cancel || val$inFinished_) {
      @synchronized(this$0_) {
        [((id<JavaUtilSet>) nil_chk(this$0_->currentPushRequests_)) removeWithId:JavaLangInteger_valueOfWithInt_(val$streamId_)];
      }
    }
  }
  @catch (JavaIoIOException *ignored) {
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$buffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x80, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalHttp2Http2Connection:withInt:withOkioBuffer:withInt:withBoolean:withNSString:withNSObjectArray:);
  methods[1].selector = @selector(execute);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3InternalHttp2Http2Connection;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$streamId_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$buffer_", "LOkioBuffer;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$byteCount_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$inFinished_", "Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;[LNSObject;", "LOkhttp3InternalHttp2Http2Connection;", "pushDataLaterWithInt:withOkioBufferedSource:withInt:withBoolean:" };
  static const J2ObjcClassInfo _Okhttp3InternalHttp2Http2Connection_6 = { "", "okhttp3.internal.http2", ptrTable, methods, fields, 7, 0x8018, 2, 5, 1, -1, 2, -1, -1 };
  return &_Okhttp3InternalHttp2Http2Connection_6;
}

@end

void Okhttp3InternalHttp2Http2Connection_6_initWithOkhttp3InternalHttp2Http2Connection_withInt_withOkioBuffer_withInt_withBoolean_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection_6 *self, Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, OkioBuffer *capture$1, jint capture$2, jboolean capture$3, NSString *format, IOSObjectArray *args) {
  JreStrongAssign(&self->this$0_, outer$);
  self->val$streamId_ = capture$0;
  JreStrongAssign(&self->val$buffer_, capture$1);
  self->val$byteCount_ = capture$2;
  self->val$inFinished_ = capture$3;
  Okhttp3InternalNamedRunnable_initWithNSString_withNSObjectArray_(self, format, args);
}

Okhttp3InternalHttp2Http2Connection_6 *new_Okhttp3InternalHttp2Http2Connection_6_initWithOkhttp3InternalHttp2Http2Connection_withInt_withOkioBuffer_withInt_withBoolean_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, OkioBuffer *capture$1, jint capture$2, jboolean capture$3, NSString *format, IOSObjectArray *args) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttp2Http2Connection_6, initWithOkhttp3InternalHttp2Http2Connection_withInt_withOkioBuffer_withInt_withBoolean_withNSString_withNSObjectArray_, outer$, capture$0, capture$1, capture$2, capture$3, format, args)
}

Okhttp3InternalHttp2Http2Connection_6 *create_Okhttp3InternalHttp2Http2Connection_6_initWithOkhttp3InternalHttp2Http2Connection_withInt_withOkioBuffer_withInt_withBoolean_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, OkioBuffer *capture$1, jint capture$2, jboolean capture$3, NSString *format, IOSObjectArray *args) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttp2Http2Connection_6, initWithOkhttp3InternalHttp2Http2Connection_withInt_withOkioBuffer_withInt_withBoolean_withNSString_withNSObjectArray_, outer$, capture$0, capture$1, capture$2, capture$3, format, args)
}

@implementation Okhttp3InternalHttp2Http2Connection_7

- (instancetype)initWithOkhttp3InternalHttp2Http2Connection:(Okhttp3InternalHttp2Http2Connection *)outer$
                                                    withInt:(jint)capture$0
                          withOkhttp3InternalHttp2ErrorCode:(Okhttp3InternalHttp2ErrorCode *)capture$1
                                               withNSString:(NSString *)format
                                          withNSObjectArray:(IOSObjectArray *)args {
  Okhttp3InternalHttp2Http2Connection_7_initWithOkhttp3InternalHttp2Http2Connection_withInt_withOkhttp3InternalHttp2ErrorCode_withNSString_withNSObjectArray_(self, outer$, capture$0, capture$1, format, args);
  return self;
}

- (void)execute {
  [((id<Okhttp3InternalHttp2PushObserver>) nil_chk(this$0_->pushObserver_)) onResetWithInt:val$streamId_ withOkhttp3InternalHttp2ErrorCode:val$errorCode_];
  @synchronized(this$0_) {
    [((id<JavaUtilSet>) nil_chk(this$0_->currentPushRequests_)) removeWithId:JavaLangInteger_valueOfWithInt_(val$streamId_)];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$errorCode_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x80, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalHttp2Http2Connection:withInt:withOkhttp3InternalHttp2ErrorCode:withNSString:withNSObjectArray:);
  methods[1].selector = @selector(execute);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3InternalHttp2Http2Connection;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$streamId_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$errorCode_", "LOkhttp3InternalHttp2ErrorCode;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;[LNSObject;", "LOkhttp3InternalHttp2Http2Connection;", "pushResetLaterWithInt:withOkhttp3InternalHttp2ErrorCode:" };
  static const J2ObjcClassInfo _Okhttp3InternalHttp2Http2Connection_7 = { "", "okhttp3.internal.http2", ptrTable, methods, fields, 7, 0x8018, 2, 3, 1, -1, 2, -1, -1 };
  return &_Okhttp3InternalHttp2Http2Connection_7;
}

@end

void Okhttp3InternalHttp2Http2Connection_7_initWithOkhttp3InternalHttp2Http2Connection_withInt_withOkhttp3InternalHttp2ErrorCode_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection_7 *self, Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, Okhttp3InternalHttp2ErrorCode *capture$1, NSString *format, IOSObjectArray *args) {
  JreStrongAssign(&self->this$0_, outer$);
  self->val$streamId_ = capture$0;
  JreStrongAssign(&self->val$errorCode_, capture$1);
  Okhttp3InternalNamedRunnable_initWithNSString_withNSObjectArray_(self, format, args);
}

Okhttp3InternalHttp2Http2Connection_7 *new_Okhttp3InternalHttp2Http2Connection_7_initWithOkhttp3InternalHttp2Http2Connection_withInt_withOkhttp3InternalHttp2ErrorCode_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, Okhttp3InternalHttp2ErrorCode *capture$1, NSString *format, IOSObjectArray *args) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttp2Http2Connection_7, initWithOkhttp3InternalHttp2Http2Connection_withInt_withOkhttp3InternalHttp2ErrorCode_withNSString_withNSObjectArray_, outer$, capture$0, capture$1, format, args)
}

Okhttp3InternalHttp2Http2Connection_7 *create_Okhttp3InternalHttp2Http2Connection_7_initWithOkhttp3InternalHttp2Http2Connection_withInt_withOkhttp3InternalHttp2ErrorCode_withNSString_withNSObjectArray_(Okhttp3InternalHttp2Http2Connection *outer$, jint capture$0, Okhttp3InternalHttp2ErrorCode *capture$1, NSString *format, IOSObjectArray *args) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttp2Http2Connection_7, initWithOkhttp3InternalHttp2Http2Connection_withInt_withOkhttp3InternalHttp2ErrorCode_withNSString_withNSObjectArray_, outer$, capture$0, capture$1, format, args)
}

J2OBJC_INITIALIZED_DEFN(Okhttp3InternalHttp2Http2Connection_Listener)

Okhttp3InternalHttp2Http2Connection_Listener *Okhttp3InternalHttp2Http2Connection_Listener_REFUSE_INCOMING_STREAMS;

@implementation Okhttp3InternalHttp2Http2Connection_Listener

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3InternalHttp2Http2Connection_Listener_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onStreamWithOkhttp3InternalHttp2Http2Stream:(Okhttp3InternalHttp2Http2Stream *)stream {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)onSettingsWithOkhttp3InternalHttp2Http2Connection:(Okhttp3InternalHttp2Http2Connection *)connection {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onStreamWithOkhttp3InternalHttp2Http2Stream:);
  methods[2].selector = @selector(onSettingsWithOkhttp3InternalHttp2Http2Connection:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "REFUSE_INCOMING_STREAMS", "LOkhttp3InternalHttp2Http2Connection_Listener;", .constantValue.asLong = 0, 0x19, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "onStream", "LOkhttp3InternalHttp2Http2Stream;", "LJavaIoIOException;", "onSettings", "LOkhttp3InternalHttp2Http2Connection;", &Okhttp3InternalHttp2Http2Connection_Listener_REFUSE_INCOMING_STREAMS };
  static const J2ObjcClassInfo _Okhttp3InternalHttp2Http2Connection_Listener = { "Listener", "okhttp3.internal.http2", ptrTable, methods, fields, 7, 0x409, 3, 1, 4, -1, -1, -1, -1 };
  return &_Okhttp3InternalHttp2Http2Connection_Listener;
}

+ (void)initialize {
  if (self == [Okhttp3InternalHttp2Http2Connection_Listener class]) {
    JreStrongAssignAndConsume(&Okhttp3InternalHttp2Http2Connection_Listener_REFUSE_INCOMING_STREAMS, new_Okhttp3InternalHttp2Http2Connection_Listener_1_init());
    J2OBJC_SET_INITIALIZED(Okhttp3InternalHttp2Http2Connection_Listener)
  }
}

@end

void Okhttp3InternalHttp2Http2Connection_Listener_init(Okhttp3InternalHttp2Http2Connection_Listener *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalHttp2Http2Connection_Listener)

@implementation Okhttp3InternalHttp2Http2Connection_Listener_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3InternalHttp2Http2Connection_Listener_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onStreamWithOkhttp3InternalHttp2Http2Stream:(Okhttp3InternalHttp2Http2Stream *)stream {
  [((Okhttp3InternalHttp2Http2Stream *) nil_chk(stream)) closeWithOkhttp3InternalHttp2ErrorCode:JreLoadEnum(Okhttp3InternalHttp2ErrorCode, REFUSED_STREAM)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onStreamWithOkhttp3InternalHttp2Http2Stream:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onStream", "LOkhttp3InternalHttp2Http2Stream;", "LJavaIoIOException;", "LOkhttp3InternalHttp2Http2Connection_Listener;" };
  static const J2ObjcClassInfo _Okhttp3InternalHttp2Http2Connection_Listener_1 = { "", "okhttp3.internal.http2", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 3, -1, -1, -1, -1 };
  return &_Okhttp3InternalHttp2Http2Connection_Listener_1;
}

@end

void Okhttp3InternalHttp2Http2Connection_Listener_1_init(Okhttp3InternalHttp2Http2Connection_Listener_1 *self) {
  Okhttp3InternalHttp2Http2Connection_Listener_init(self);
}

Okhttp3InternalHttp2Http2Connection_Listener_1 *new_Okhttp3InternalHttp2Http2Connection_Listener_1_init() {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttp2Http2Connection_Listener_1, init)
}

Okhttp3InternalHttp2Http2Connection_Listener_1 *create_Okhttp3InternalHttp2Http2Connection_Listener_1_init() {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttp2Http2Connection_Listener_1, init)
}
