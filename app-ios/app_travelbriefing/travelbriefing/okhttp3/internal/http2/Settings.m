//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okhttp3/internal/http2/Settings.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/util/Arrays.h"
#include "okhttp3/internal/http2/Settings.h"

@interface Okhttp3InternalHttp2Settings () {
 @public
  jint set_;
  IOSIntArray *values_;
}

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Settings, values_, IOSIntArray *)

@implementation Okhttp3InternalHttp2Settings

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3InternalHttp2Settings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)clear {
  set_ = 0;
  JavaUtilArrays_fillWithIntArray_withInt_(values_, 0);
}

- (Okhttp3InternalHttp2Settings *)setWithInt:(jint)id_
                                     withInt:(jint)value {
  if (id_ >= ((IOSIntArray *) nil_chk(values_))->size_) {
    return self;
  }
  jint bit = JreLShift32(1, id_);
  set_ |= bit;
  *IOSIntArray_GetRef(values_, id_) = value;
  return self;
}

- (jboolean)isSetWithInt:(jint)id_ {
  jint bit = JreLShift32(1, id_);
  return (set_ & bit) != 0;
}

- (jint)getWithInt:(jint)id_ {
  return IOSIntArray_Get(nil_chk(values_), id_);
}

- (jint)size {
  return JavaLangInteger_bitCountWithInt_(set_);
}

- (jint)getHeaderTableSize {
  jint bit = JreLShift32(1, Okhttp3InternalHttp2Settings_HEADER_TABLE_SIZE);
  return (bit & set_) != 0 ? IOSIntArray_Get(nil_chk(values_), Okhttp3InternalHttp2Settings_HEADER_TABLE_SIZE) : -1;
}

- (jboolean)getEnablePushWithBoolean:(jboolean)defaultValue {
  jint bit = JreLShift32(1, Okhttp3InternalHttp2Settings_ENABLE_PUSH);
  return ((bit & set_) != 0 ? IOSIntArray_Get(nil_chk(values_), Okhttp3InternalHttp2Settings_ENABLE_PUSH) : defaultValue ? 1 : 0) == 1;
}

- (jint)getMaxConcurrentStreamsWithInt:(jint)defaultValue {
  jint bit = JreLShift32(1, Okhttp3InternalHttp2Settings_MAX_CONCURRENT_STREAMS);
  return (bit & set_) != 0 ? IOSIntArray_Get(nil_chk(values_), Okhttp3InternalHttp2Settings_MAX_CONCURRENT_STREAMS) : defaultValue;
}

- (jint)getMaxFrameSizeWithInt:(jint)defaultValue {
  jint bit = JreLShift32(1, Okhttp3InternalHttp2Settings_MAX_FRAME_SIZE);
  return (bit & set_) != 0 ? IOSIntArray_Get(nil_chk(values_), Okhttp3InternalHttp2Settings_MAX_FRAME_SIZE) : defaultValue;
}

- (jint)getMaxHeaderListSizeWithInt:(jint)defaultValue {
  jint bit = JreLShift32(1, Okhttp3InternalHttp2Settings_MAX_HEADER_LIST_SIZE);
  return (bit & set_) != 0 ? IOSIntArray_Get(nil_chk(values_), Okhttp3InternalHttp2Settings_MAX_HEADER_LIST_SIZE) : defaultValue;
}

- (jint)getInitialWindowSize {
  jint bit = JreLShift32(1, Okhttp3InternalHttp2Settings_INITIAL_WINDOW_SIZE);
  return (bit & set_) != 0 ? IOSIntArray_Get(nil_chk(values_), Okhttp3InternalHttp2Settings_INITIAL_WINDOW_SIZE) : Okhttp3InternalHttp2Settings_DEFAULT_INITIAL_WINDOW_SIZE;
}

- (void)mergeWithOkhttp3InternalHttp2Settings:(Okhttp3InternalHttp2Settings *)other {
  for (jint i = 0; i < Okhttp3InternalHttp2Settings_COUNT; i++) {
    if (![((Okhttp3InternalHttp2Settings *) nil_chk(other)) isSetWithInt:i]) continue;
    [self setWithInt:i withInt:[other getWithInt:i]];
  }
}

- (void)dealloc {
  RELEASE_(values_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalHttp2Settings;", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 4, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 7, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 8, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 9, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(clear);
  methods[2].selector = @selector(setWithInt:withInt:);
  methods[3].selector = @selector(isSetWithInt:);
  methods[4].selector = @selector(getWithInt:);
  methods[5].selector = @selector(size);
  methods[6].selector = @selector(getHeaderTableSize);
  methods[7].selector = @selector(getEnablePushWithBoolean:);
  methods[8].selector = @selector(getMaxConcurrentStreamsWithInt:);
  methods[9].selector = @selector(getMaxFrameSizeWithInt:);
  methods[10].selector = @selector(getMaxHeaderListSizeWithInt:);
  methods[11].selector = @selector(getInitialWindowSize);
  methods[12].selector = @selector(mergeWithOkhttp3InternalHttp2Settings:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_INITIAL_WINDOW_SIZE", "I", .constantValue.asInt = Okhttp3InternalHttp2Settings_DEFAULT_INITIAL_WINDOW_SIZE, 0x18, -1, -1, -1, -1 },
    { "HEADER_TABLE_SIZE", "I", .constantValue.asInt = Okhttp3InternalHttp2Settings_HEADER_TABLE_SIZE, 0x18, -1, -1, -1, -1 },
    { "ENABLE_PUSH", "I", .constantValue.asInt = Okhttp3InternalHttp2Settings_ENABLE_PUSH, 0x18, -1, -1, -1, -1 },
    { "MAX_CONCURRENT_STREAMS", "I", .constantValue.asInt = Okhttp3InternalHttp2Settings_MAX_CONCURRENT_STREAMS, 0x18, -1, -1, -1, -1 },
    { "MAX_FRAME_SIZE", "I", .constantValue.asInt = Okhttp3InternalHttp2Settings_MAX_FRAME_SIZE, 0x18, -1, -1, -1, -1 },
    { "MAX_HEADER_LIST_SIZE", "I", .constantValue.asInt = Okhttp3InternalHttp2Settings_MAX_HEADER_LIST_SIZE, 0x18, -1, -1, -1, -1 },
    { "INITIAL_WINDOW_SIZE", "I", .constantValue.asInt = Okhttp3InternalHttp2Settings_INITIAL_WINDOW_SIZE, 0x18, -1, -1, -1, -1 },
    { "COUNT", "I", .constantValue.asInt = Okhttp3InternalHttp2Settings_COUNT, 0x18, -1, -1, -1, -1 },
    { "set_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "values_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "set", "II", "isSet", "I", "get", "getEnablePush", "Z", "getMaxConcurrentStreams", "getMaxFrameSize", "getMaxHeaderListSize", "merge", "LOkhttp3InternalHttp2Settings;" };
  static const J2ObjcClassInfo _Okhttp3InternalHttp2Settings = { "Settings", "okhttp3.internal.http2", ptrTable, methods, fields, 7, 0x11, 13, 10, -1, -1, -1, -1, -1 };
  return &_Okhttp3InternalHttp2Settings;
}

@end

void Okhttp3InternalHttp2Settings_init(Okhttp3InternalHttp2Settings *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->values_, [IOSIntArray newArrayWithLength:Okhttp3InternalHttp2Settings_COUNT]);
}

Okhttp3InternalHttp2Settings *new_Okhttp3InternalHttp2Settings_init() {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttp2Settings, init)
}

Okhttp3InternalHttp2Settings *create_Okhttp3InternalHttp2Settings_init() {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttp2Settings, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalHttp2Settings)
