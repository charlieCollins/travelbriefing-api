//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okhttp3/internal/http2/Http2Writer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/util/List.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "okhttp3/internal/Util.h"
#include "okhttp3/internal/http2/ErrorCode.h"
#include "okhttp3/internal/http2/Hpack.h"
#include "okhttp3/internal/http2/Http2.h"
#include "okhttp3/internal/http2/Http2Writer.h"
#include "okhttp3/internal/http2/Settings.h"
#include "okio/Buffer.h"
#include "okio/BufferedSink.h"
#include "okio/ByteString.h"

@interface Okhttp3InternalHttp2Http2Writer () {
 @public
  id<OkioBufferedSink> sink_;
  jboolean client_;
  OkioBuffer *hpackBuffer_;
  jint maxFrameSize_;
  jboolean closed_;
}

+ (void)writeMediumWithOkioBufferedSink:(id<OkioBufferedSink>)sink
                                withInt:(jint)i;

- (void)writeContinuationFramesWithInt:(jint)streamId
                              withLong:(jlong)byteCount;

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Http2Writer, sink_, id<OkioBufferedSink>)
J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Http2Writer, hpackBuffer_, OkioBuffer *)

inline JavaUtilLoggingLogger *Okhttp3InternalHttp2Http2Writer_get_logger();
static JavaUtilLoggingLogger *Okhttp3InternalHttp2Http2Writer_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalHttp2Http2Writer, logger, JavaUtilLoggingLogger *)

__attribute__((unused)) static void Okhttp3InternalHttp2Http2Writer_writeMediumWithOkioBufferedSink_withInt_(id<OkioBufferedSink> sink, jint i);

__attribute__((unused)) static void Okhttp3InternalHttp2Http2Writer_writeContinuationFramesWithInt_withLong_(Okhttp3InternalHttp2Http2Writer *self, jint streamId, jlong byteCount);

J2OBJC_INITIALIZED_DEFN(Okhttp3InternalHttp2Http2Writer)

@implementation Okhttp3InternalHttp2Http2Writer

- (instancetype)initWithOkioBufferedSink:(id<OkioBufferedSink>)sink
                             withBoolean:(jboolean)client {
  Okhttp3InternalHttp2Http2Writer_initWithOkioBufferedSink_withBoolean_(self, sink, client);
  return self;
}

- (void)connectionPreface {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    if (!client_) return;
    if ([((JavaUtilLoggingLogger *) nil_chk(Okhttp3InternalHttp2Http2Writer_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE)]) {
      [Okhttp3InternalHttp2Http2Writer_logger fineWithNSString:Okhttp3InternalUtil_formatWithNSString_withNSObjectArray_(@">> CONNECTION %s", [IOSObjectArray arrayWithObjects:(id[]){ [((OkioByteString *) nil_chk(JreLoadStatic(Okhttp3InternalHttp2Http2, CONNECTION_PREFACE))) hex] } count:1 type:NSObject_class_()])];
    }
    [((id<OkioBufferedSink>) nil_chk(sink_)) writeWithByteArray:[((OkioByteString *) nil_chk(JreLoadStatic(Okhttp3InternalHttp2Http2, CONNECTION_PREFACE))) toByteArray]];
    [sink_ flush];
  }
}

- (void)applyAndAckSettingsWithOkhttp3InternalHttp2Settings:(Okhttp3InternalHttp2Settings *)peerSettings {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    self->maxFrameSize_ = [((Okhttp3InternalHttp2Settings *) nil_chk(peerSettings)) getMaxFrameSizeWithInt:maxFrameSize_];
    if ([peerSettings getHeaderTableSize] != -1) {
      [((Okhttp3InternalHttp2Hpack_Writer *) nil_chk(hpackWriter_)) setHeaderTableSizeSettingWithInt:[peerSettings getHeaderTableSize]];
    }
    jint length = 0;
    jbyte type = Okhttp3InternalHttp2Http2_TYPE_SETTINGS;
    jbyte flags = Okhttp3InternalHttp2Http2_FLAG_ACK;
    jint streamId = 0;
    [self frameHeaderWithInt:streamId withInt:length withByte:type withByte:flags];
    [((id<OkioBufferedSink>) nil_chk(sink_)) flush];
  }
}

- (void)pushPromiseWithInt:(jint)streamId
                   withInt:(jint)promisedStreamId
          withJavaUtilList:(id<JavaUtilList>)requestHeaders {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    [((Okhttp3InternalHttp2Hpack_Writer *) nil_chk(hpackWriter_)) writeHeadersWithJavaUtilList:requestHeaders];
    jlong byteCount = [((OkioBuffer *) nil_chk(hpackBuffer_)) size];
    jint length = (jint) JavaLangMath_minWithLong_withLong_(maxFrameSize_ - 4, byteCount);
    jbyte type = Okhttp3InternalHttp2Http2_TYPE_PUSH_PROMISE;
    jbyte flags = byteCount == length ? Okhttp3InternalHttp2Http2_FLAG_END_HEADERS : 0;
    [self frameHeaderWithInt:streamId withInt:length + 4 withByte:type withByte:flags];
    [((id<OkioBufferedSink>) nil_chk(sink_)) writeIntWithInt:promisedStreamId & (jint) 0x7fffffff];
    [sink_ writeWithOkioBuffer:hpackBuffer_ withLong:length];
    if (byteCount > length) Okhttp3InternalHttp2Http2Writer_writeContinuationFramesWithInt_withLong_(self, streamId, byteCount - length);
  }
}

- (void)flush {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    [((id<OkioBufferedSink>) nil_chk(sink_)) flush];
  }
}

- (void)synStreamWithBoolean:(jboolean)outFinished
                     withInt:(jint)streamId
                     withInt:(jint)associatedStreamId
            withJavaUtilList:(id<JavaUtilList>)headerBlock {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    [self headersWithBoolean:outFinished withInt:streamId withJavaUtilList:headerBlock];
  }
}

- (void)synReplyWithBoolean:(jboolean)outFinished
                    withInt:(jint)streamId
           withJavaUtilList:(id<JavaUtilList>)headerBlock {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    [self headersWithBoolean:outFinished withInt:streamId withJavaUtilList:headerBlock];
  }
}

- (void)headersWithInt:(jint)streamId
      withJavaUtilList:(id<JavaUtilList>)headerBlock {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    [self headersWithBoolean:false withInt:streamId withJavaUtilList:headerBlock];
  }
}

- (void)rstStreamWithInt:(jint)streamId
withOkhttp3InternalHttp2ErrorCode:(Okhttp3InternalHttp2ErrorCode *)errorCode {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    if (((Okhttp3InternalHttp2ErrorCode *) nil_chk(errorCode))->httpCode_ == -1) @throw create_JavaLangIllegalArgumentException_init();
    jint length = 4;
    jbyte type = Okhttp3InternalHttp2Http2_TYPE_RST_STREAM;
    jbyte flags = Okhttp3InternalHttp2Http2_FLAG_NONE;
    [self frameHeaderWithInt:streamId withInt:length withByte:type withByte:flags];
    [((id<OkioBufferedSink>) nil_chk(sink_)) writeIntWithInt:errorCode->httpCode_];
    [sink_ flush];
  }
}

- (jint)maxDataLength {
  return maxFrameSize_;
}

- (void)dataWithBoolean:(jboolean)outFinished
                withInt:(jint)streamId
         withOkioBuffer:(OkioBuffer *)source
                withInt:(jint)byteCount {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    jbyte flags = Okhttp3InternalHttp2Http2_FLAG_NONE;
    if (outFinished) flags |= Okhttp3InternalHttp2Http2_FLAG_END_STREAM;
    [self dataFrameWithInt:streamId withByte:flags withOkioBuffer:source withInt:byteCount];
  }
}

- (void)dataFrameWithInt:(jint)streamId
                withByte:(jbyte)flags
          withOkioBuffer:(OkioBuffer *)buffer
                 withInt:(jint)byteCount {
  jbyte type = Okhttp3InternalHttp2Http2_TYPE_DATA;
  [self frameHeaderWithInt:streamId withInt:byteCount withByte:type withByte:flags];
  if (byteCount > 0) {
    [((id<OkioBufferedSink>) nil_chk(sink_)) writeWithOkioBuffer:buffer withLong:byteCount];
  }
}

- (void)settingsWithOkhttp3InternalHttp2Settings:(Okhttp3InternalHttp2Settings *)settings {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    jint length = [((Okhttp3InternalHttp2Settings *) nil_chk(settings)) size] * 6;
    jbyte type = Okhttp3InternalHttp2Http2_TYPE_SETTINGS;
    jbyte flags = Okhttp3InternalHttp2Http2_FLAG_NONE;
    jint streamId = 0;
    [self frameHeaderWithInt:streamId withInt:length withByte:type withByte:flags];
    for (jint i = 0; i < Okhttp3InternalHttp2Settings_COUNT; i++) {
      if (![settings isSetWithInt:i]) continue;
      jint id_ = i;
      if (id_ == 4) {
        id_ = 3;
      }
      else if (id_ == 7) {
        id_ = 4;
      }
      [((id<OkioBufferedSink>) nil_chk(sink_)) writeShortWithInt:id_];
      [sink_ writeIntWithInt:[settings getWithInt:i]];
    }
    [((id<OkioBufferedSink>) nil_chk(sink_)) flush];
  }
}

- (void)pingWithBoolean:(jboolean)ack
                withInt:(jint)payload1
                withInt:(jint)payload2 {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    jint length = 8;
    jbyte type = Okhttp3InternalHttp2Http2_TYPE_PING;
    jbyte flags = ack ? Okhttp3InternalHttp2Http2_FLAG_ACK : Okhttp3InternalHttp2Http2_FLAG_NONE;
    jint streamId = 0;
    [self frameHeaderWithInt:streamId withInt:length withByte:type withByte:flags];
    [((id<OkioBufferedSink>) nil_chk(sink_)) writeIntWithInt:payload1];
    [sink_ writeIntWithInt:payload2];
    [sink_ flush];
  }
}

- (void)goAwayWithInt:(jint)lastGoodStreamId
withOkhttp3InternalHttp2ErrorCode:(Okhttp3InternalHttp2ErrorCode *)errorCode
        withByteArray:(IOSByteArray *)debugData {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    if (((Okhttp3InternalHttp2ErrorCode *) nil_chk(errorCode))->httpCode_ == -1) @throw Okhttp3InternalHttp2Http2_illegalArgumentWithNSString_withNSObjectArray_(@"errorCode.httpCode == -1", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
    jint length = 8 + ((IOSByteArray *) nil_chk(debugData))->size_;
    jbyte type = Okhttp3InternalHttp2Http2_TYPE_GOAWAY;
    jbyte flags = Okhttp3InternalHttp2Http2_FLAG_NONE;
    jint streamId = 0;
    [self frameHeaderWithInt:streamId withInt:length withByte:type withByte:flags];
    [((id<OkioBufferedSink>) nil_chk(sink_)) writeIntWithInt:lastGoodStreamId];
    [sink_ writeIntWithInt:errorCode->httpCode_];
    if (debugData->size_ > 0) {
      [sink_ writeWithByteArray:debugData];
    }
    [sink_ flush];
  }
}

- (void)windowUpdateWithInt:(jint)streamId
                   withLong:(jlong)windowSizeIncrement {
  @synchronized(self) {
    if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
    if (windowSizeIncrement == 0 || windowSizeIncrement > (jlong) 0x7fffffffLL) {
      @throw Okhttp3InternalHttp2Http2_illegalArgumentWithNSString_withNSObjectArray_(@"windowSizeIncrement == 0 || windowSizeIncrement > 0x7fffffffL: %s", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(windowSizeIncrement) } count:1 type:NSObject_class_()]);
    }
    jint length = 4;
    jbyte type = Okhttp3InternalHttp2Http2_TYPE_WINDOW_UPDATE;
    jbyte flags = Okhttp3InternalHttp2Http2_FLAG_NONE;
    [self frameHeaderWithInt:streamId withInt:length withByte:type withByte:flags];
    [((id<OkioBufferedSink>) nil_chk(sink_)) writeIntWithInt:(jint) windowSizeIncrement];
    [sink_ flush];
  }
}

- (void)frameHeaderWithInt:(jint)streamId
                   withInt:(jint)length
                  withByte:(jbyte)type
                  withByte:(jbyte)flags {
  if ([((JavaUtilLoggingLogger *) nil_chk(Okhttp3InternalHttp2Http2Writer_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE)]) [Okhttp3InternalHttp2Http2Writer_logger fineWithNSString:Okhttp3InternalHttp2Http2_frameLogWithBoolean_withInt_withInt_withByte_withByte_(false, streamId, length, type, flags)];
  if (length > maxFrameSize_) {
    @throw Okhttp3InternalHttp2Http2_illegalArgumentWithNSString_withNSObjectArray_(@"FRAME_SIZE_ERROR length > %d: %d", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(maxFrameSize_), JavaLangInteger_valueOfWithInt_(length) } count:2 type:NSObject_class_()]);
  }
  if ((streamId & -0x7fffffff - 1) != 0) @throw Okhttp3InternalHttp2Http2_illegalArgumentWithNSString_withNSObjectArray_(@"reserved bit set: %s", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(streamId) } count:1 type:NSObject_class_()]);
  Okhttp3InternalHttp2Http2Writer_writeMediumWithOkioBufferedSink_withInt_(sink_, length);
  [((id<OkioBufferedSink>) nil_chk(sink_)) writeByteWithInt:type & (jint) 0xff];
  [sink_ writeByteWithInt:flags & (jint) 0xff];
  [sink_ writeIntWithInt:streamId & (jint) 0x7fffffff];
}

- (void)close {
  @synchronized(self) {
    closed_ = true;
    [((id<OkioBufferedSink>) nil_chk(sink_)) close];
  }
}

+ (void)writeMediumWithOkioBufferedSink:(id<OkioBufferedSink>)sink
                                withInt:(jint)i {
  Okhttp3InternalHttp2Http2Writer_writeMediumWithOkioBufferedSink_withInt_(sink, i);
}

- (void)writeContinuationFramesWithInt:(jint)streamId
                              withLong:(jlong)byteCount {
  Okhttp3InternalHttp2Http2Writer_writeContinuationFramesWithInt_withLong_(self, streamId, byteCount);
}

- (void)headersWithBoolean:(jboolean)outFinished
                   withInt:(jint)streamId
          withJavaUtilList:(id<JavaUtilList>)headerBlock {
  if (closed_) @throw create_JavaIoIOException_initWithNSString_(@"closed");
  [((Okhttp3InternalHttp2Hpack_Writer *) nil_chk(hpackWriter_)) writeHeadersWithJavaUtilList:headerBlock];
  jlong byteCount = [((OkioBuffer *) nil_chk(hpackBuffer_)) size];
  jint length = (jint) JavaLangMath_minWithLong_withLong_(maxFrameSize_, byteCount);
  jbyte type = Okhttp3InternalHttp2Http2_TYPE_HEADERS;
  jbyte flags = byteCount == length ? Okhttp3InternalHttp2Http2_FLAG_END_HEADERS : 0;
  if (outFinished) flags |= Okhttp3InternalHttp2Http2_FLAG_END_STREAM;
  [self frameHeaderWithInt:streamId withInt:length withByte:type withByte:flags];
  [((id<OkioBufferedSink>) nil_chk(sink_)) writeWithOkioBuffer:hpackBuffer_ withLong:length];
  if (byteCount > length) Okhttp3InternalHttp2Http2Writer_writeContinuationFramesWithInt_withLong_(self, streamId, byteCount - length);
}

- (void)dealloc {
  RELEASE_(sink_);
  RELEASE_(hpackBuffer_);
  RELEASE_(hpackWriter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x21, 2, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x21, 4, 5, 1, 6, -1, -1 },
    { NULL, "V", 0x21, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x21, 7, 8, 1, 9, -1, -1 },
    { NULL, "V", 0x21, 10, 11, 1, 12, -1, -1 },
    { NULL, "V", 0x21, 13, 14, 1, 15, -1, -1 },
    { NULL, "V", 0x21, 16, 17, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 18, 19, 1, -1, -1, -1 },
    { NULL, "V", 0x0, 20, 21, 1, -1, -1, -1 },
    { NULL, "V", 0x21, 22, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x21, 23, 24, 1, -1, -1, -1 },
    { NULL, "V", 0x21, 25, 26, 1, -1, -1, -1 },
    { NULL, "V", 0x21, 27, 28, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 30, 1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0xa, 31, 32, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 28, 1, -1, -1, -1 },
    { NULL, "V", 0x0, 13, 11, 1, 12, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkioBufferedSink:withBoolean:);
  methods[1].selector = @selector(connectionPreface);
  methods[2].selector = @selector(applyAndAckSettingsWithOkhttp3InternalHttp2Settings:);
  methods[3].selector = @selector(pushPromiseWithInt:withInt:withJavaUtilList:);
  methods[4].selector = @selector(flush);
  methods[5].selector = @selector(synStreamWithBoolean:withInt:withInt:withJavaUtilList:);
  methods[6].selector = @selector(synReplyWithBoolean:withInt:withJavaUtilList:);
  methods[7].selector = @selector(headersWithInt:withJavaUtilList:);
  methods[8].selector = @selector(rstStreamWithInt:withOkhttp3InternalHttp2ErrorCode:);
  methods[9].selector = @selector(maxDataLength);
  methods[10].selector = @selector(dataWithBoolean:withInt:withOkioBuffer:withInt:);
  methods[11].selector = @selector(dataFrameWithInt:withByte:withOkioBuffer:withInt:);
  methods[12].selector = @selector(settingsWithOkhttp3InternalHttp2Settings:);
  methods[13].selector = @selector(pingWithBoolean:withInt:withInt:);
  methods[14].selector = @selector(goAwayWithInt:withOkhttp3InternalHttp2ErrorCode:withByteArray:);
  methods[15].selector = @selector(windowUpdateWithInt:withLong:);
  methods[16].selector = @selector(frameHeaderWithInt:withInt:withByte:withByte:);
  methods[17].selector = @selector(close);
  methods[18].selector = @selector(writeMediumWithOkioBufferedSink:withInt:);
  methods[19].selector = @selector(writeContinuationFramesWithInt:withLong:);
  methods[20].selector = @selector(headersWithBoolean:withInt:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 34, -1, -1 },
    { "sink_", "LOkioBufferedSink;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "client_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "hpackBuffer_", "LOkioBuffer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "maxFrameSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "closed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hpackWriter_", "LOkhttp3InternalHttp2Hpack_Writer;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkioBufferedSink;Z", "LJavaIoIOException;", "applyAndAckSettings", "LOkhttp3InternalHttp2Settings;", "pushPromise", "IILJavaUtilList;", "(IILjava/util/List<Lokhttp3/internal/http2/Header;>;)V", "synStream", "ZIILJavaUtilList;", "(ZIILjava/util/List<Lokhttp3/internal/http2/Header;>;)V", "synReply", "ZILJavaUtilList;", "(ZILjava/util/List<Lokhttp3/internal/http2/Header;>;)V", "headers", "ILJavaUtilList;", "(ILjava/util/List<Lokhttp3/internal/http2/Header;>;)V", "rstStream", "ILOkhttp3InternalHttp2ErrorCode;", "data", "ZILOkioBuffer;I", "dataFrame", "IBLOkioBuffer;I", "settings", "ping", "ZII", "goAway", "ILOkhttp3InternalHttp2ErrorCode;[B", "windowUpdate", "IJ", "frameHeader", "IIBB", "writeMedium", "LOkioBufferedSink;I", "writeContinuationFrames", &Okhttp3InternalHttp2Http2Writer_logger };
  static const J2ObjcClassInfo _Okhttp3InternalHttp2Http2Writer = { "Http2Writer", "okhttp3.internal.http2", ptrTable, methods, fields, 7, 0x10, 21, 7, -1, -1, -1, -1, -1 };
  return &_Okhttp3InternalHttp2Http2Writer;
}

+ (void)initialize {
  if (self == [Okhttp3InternalHttp2Http2Writer class]) {
    JreStrongAssign(&Okhttp3InternalHttp2Http2Writer_logger, JavaUtilLoggingLogger_getLoggerWithNSString_([Okhttp3InternalHttp2Http2_class_() getName]));
    J2OBJC_SET_INITIALIZED(Okhttp3InternalHttp2Http2Writer)
  }
}

@end

void Okhttp3InternalHttp2Http2Writer_initWithOkioBufferedSink_withBoolean_(Okhttp3InternalHttp2Http2Writer *self, id<OkioBufferedSink> sink, jboolean client) {
  NSObject_init(self);
  JreStrongAssign(&self->sink_, sink);
  self->client_ = client;
  JreStrongAssignAndConsume(&self->hpackBuffer_, new_OkioBuffer_init());
  JreStrongAssignAndConsume(&self->hpackWriter_, new_Okhttp3InternalHttp2Hpack_Writer_initWithOkioBuffer_(self->hpackBuffer_));
  self->maxFrameSize_ = Okhttp3InternalHttp2Http2_INITIAL_MAX_FRAME_SIZE;
}

Okhttp3InternalHttp2Http2Writer *new_Okhttp3InternalHttp2Http2Writer_initWithOkioBufferedSink_withBoolean_(id<OkioBufferedSink> sink, jboolean client) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttp2Http2Writer, initWithOkioBufferedSink_withBoolean_, sink, client)
}

Okhttp3InternalHttp2Http2Writer *create_Okhttp3InternalHttp2Http2Writer_initWithOkioBufferedSink_withBoolean_(id<OkioBufferedSink> sink, jboolean client) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttp2Http2Writer, initWithOkioBufferedSink_withBoolean_, sink, client)
}

void Okhttp3InternalHttp2Http2Writer_writeMediumWithOkioBufferedSink_withInt_(id<OkioBufferedSink> sink, jint i) {
  Okhttp3InternalHttp2Http2Writer_initialize();
  [((id<OkioBufferedSink>) nil_chk(sink)) writeByteWithInt:(JreURShift32(i, 16)) & (jint) 0xff];
  [sink writeByteWithInt:(JreURShift32(i, 8)) & (jint) 0xff];
  [sink writeByteWithInt:i & (jint) 0xff];
}

void Okhttp3InternalHttp2Http2Writer_writeContinuationFramesWithInt_withLong_(Okhttp3InternalHttp2Http2Writer *self, jint streamId, jlong byteCount) {
  while (byteCount > 0) {
    jint length = (jint) JavaLangMath_minWithLong_withLong_(self->maxFrameSize_, byteCount);
    byteCount -= length;
    [self frameHeaderWithInt:streamId withInt:length withByte:Okhttp3InternalHttp2Http2_TYPE_CONTINUATION withByte:byteCount == 0 ? Okhttp3InternalHttp2Http2_FLAG_END_HEADERS : 0];
    [((id<OkioBufferedSink>) nil_chk(self->sink_)) writeWithOkioBuffer:self->hpackBuffer_ withLong:length];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalHttp2Http2Writer)
