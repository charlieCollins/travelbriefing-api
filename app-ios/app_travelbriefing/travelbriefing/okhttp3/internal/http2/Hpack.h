//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okhttp3/internal/http2/Hpack.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Okhttp3InternalHttp2Hpack")
#ifdef RESTRICT_Okhttp3InternalHttp2Hpack
#define INCLUDE_ALL_Okhttp3InternalHttp2Hpack 0
#else
#define INCLUDE_ALL_Okhttp3InternalHttp2Hpack 1
#endif
#undef RESTRICT_Okhttp3InternalHttp2Hpack

#if !defined (Okhttp3InternalHttp2Hpack_) && (INCLUDE_ALL_Okhttp3InternalHttp2Hpack || defined(INCLUDE_Okhttp3InternalHttp2Hpack))
#define Okhttp3InternalHttp2Hpack_

@class IOSObjectArray;
@class OkioByteString;
@protocol JavaUtilMap;

@interface Okhttp3InternalHttp2Hpack : NSObject

#pragma mark Package-Private

+ (OkioByteString *)checkLowercaseWithOkioByteString:(OkioByteString *)name;

@end

J2OBJC_STATIC_INIT(Okhttp3InternalHttp2Hpack)

inline IOSObjectArray *Okhttp3InternalHttp2Hpack_get_STATIC_HEADER_TABLE();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *Okhttp3InternalHttp2Hpack_STATIC_HEADER_TABLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalHttp2Hpack, STATIC_HEADER_TABLE, IOSObjectArray *)

inline id<JavaUtilMap> Okhttp3InternalHttp2Hpack_get_NAME_TO_FIRST_INDEX();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilMap> Okhttp3InternalHttp2Hpack_NAME_TO_FIRST_INDEX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalHttp2Hpack, NAME_TO_FIRST_INDEX, id<JavaUtilMap>)

FOUNDATION_EXPORT OkioByteString *Okhttp3InternalHttp2Hpack_checkLowercaseWithOkioByteString_(OkioByteString *name);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalHttp2Hpack)

#endif

#if !defined (Okhttp3InternalHttp2Hpack_Reader_) && (INCLUDE_ALL_Okhttp3InternalHttp2Hpack || defined(INCLUDE_Okhttp3InternalHttp2Hpack_Reader))
#define Okhttp3InternalHttp2Hpack_Reader_

@class IOSObjectArray;
@class OkioByteString;
@protocol JavaUtilList;
@protocol OkioSource;

@interface Okhttp3InternalHttp2Hpack_Reader : NSObject {
 @public
  IOSObjectArray *dynamicTable_;
  jint nextHeaderIndex_;
  jint headerCount_;
  jint dynamicTableByteCount_;
}

#pragma mark Public

- (id<JavaUtilList>)getAndResetHeaderList;

#pragma mark Package-Private

- (instancetype)initWithInt:(jint)headerTableSizeSetting
                    withInt:(jint)maxDynamicTableByteCount
             withOkioSource:(id<OkioSource>)source;

- (instancetype)initWithInt:(jint)headerTableSizeSetting
             withOkioSource:(id<OkioSource>)source;

- (jint)maxDynamicTableByteCount;

- (OkioByteString *)readByteString;

- (void)readHeaders;

- (jint)readIntWithInt:(jint)firstByte
               withInt:(jint)prefixMask;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalHttp2Hpack_Reader)

J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Hpack_Reader, dynamicTable_, IOSObjectArray *)

FOUNDATION_EXPORT void Okhttp3InternalHttp2Hpack_Reader_initWithInt_withOkioSource_(Okhttp3InternalHttp2Hpack_Reader *self, jint headerTableSizeSetting, id<OkioSource> source);

FOUNDATION_EXPORT Okhttp3InternalHttp2Hpack_Reader *new_Okhttp3InternalHttp2Hpack_Reader_initWithInt_withOkioSource_(jint headerTableSizeSetting, id<OkioSource> source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3InternalHttp2Hpack_Reader *create_Okhttp3InternalHttp2Hpack_Reader_initWithInt_withOkioSource_(jint headerTableSizeSetting, id<OkioSource> source);

FOUNDATION_EXPORT void Okhttp3InternalHttp2Hpack_Reader_initWithInt_withInt_withOkioSource_(Okhttp3InternalHttp2Hpack_Reader *self, jint headerTableSizeSetting, jint maxDynamicTableByteCount, id<OkioSource> source);

FOUNDATION_EXPORT Okhttp3InternalHttp2Hpack_Reader *new_Okhttp3InternalHttp2Hpack_Reader_initWithInt_withInt_withOkioSource_(jint headerTableSizeSetting, jint maxDynamicTableByteCount, id<OkioSource> source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3InternalHttp2Hpack_Reader *create_Okhttp3InternalHttp2Hpack_Reader_initWithInt_withInt_withOkioSource_(jint headerTableSizeSetting, jint maxDynamicTableByteCount, id<OkioSource> source);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalHttp2Hpack_Reader)

#endif

#if !defined (Okhttp3InternalHttp2Hpack_Writer_) && (INCLUDE_ALL_Okhttp3InternalHttp2Hpack || defined(INCLUDE_Okhttp3InternalHttp2Hpack_Writer))
#define Okhttp3InternalHttp2Hpack_Writer_

@class IOSObjectArray;
@class OkioBuffer;
@class OkioByteString;
@protocol JavaUtilList;

@interface Okhttp3InternalHttp2Hpack_Writer : NSObject {
 @public
  jint headerTableSizeSetting_;
  jint maxDynamicTableByteCount_;
  IOSObjectArray *dynamicTable_;
  jint nextHeaderIndex_;
  jint headerCount_;
  jint dynamicTableByteCount_;
}

#pragma mark Package-Private

- (instancetype)initWithOkioBuffer:(OkioBuffer *)outArg;

- (instancetype)initWithInt:(jint)headerTableSizeSetting
                withBoolean:(jboolean)useCompression
             withOkioBuffer:(OkioBuffer *)outArg;

- (void)setHeaderTableSizeSettingWithInt:(jint)headerTableSizeSetting;

- (void)writeByteStringWithOkioByteString:(OkioByteString *)data;

- (void)writeHeadersWithJavaUtilList:(id<JavaUtilList>)headerBlock;

- (void)writeIntWithInt:(jint)value
                withInt:(jint)prefixMask
                withInt:(jint)bits;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalHttp2Hpack_Writer)

J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Hpack_Writer, dynamicTable_, IOSObjectArray *)

FOUNDATION_EXPORT void Okhttp3InternalHttp2Hpack_Writer_initWithOkioBuffer_(Okhttp3InternalHttp2Hpack_Writer *self, OkioBuffer *outArg);

FOUNDATION_EXPORT Okhttp3InternalHttp2Hpack_Writer *new_Okhttp3InternalHttp2Hpack_Writer_initWithOkioBuffer_(OkioBuffer *outArg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3InternalHttp2Hpack_Writer *create_Okhttp3InternalHttp2Hpack_Writer_initWithOkioBuffer_(OkioBuffer *outArg);

FOUNDATION_EXPORT void Okhttp3InternalHttp2Hpack_Writer_initWithInt_withBoolean_withOkioBuffer_(Okhttp3InternalHttp2Hpack_Writer *self, jint headerTableSizeSetting, jboolean useCompression, OkioBuffer *outArg);

FOUNDATION_EXPORT Okhttp3InternalHttp2Hpack_Writer *new_Okhttp3InternalHttp2Hpack_Writer_initWithInt_withBoolean_withOkioBuffer_(jint headerTableSizeSetting, jboolean useCompression, OkioBuffer *outArg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3InternalHttp2Hpack_Writer *create_Okhttp3InternalHttp2Hpack_Writer_initWithInt_withBoolean_withOkioBuffer_(jint headerTableSizeSetting, jboolean useCompression, OkioBuffer *outArg);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalHttp2Hpack_Writer)

#endif

#pragma pop_macro("INCLUDE_ALL_Okhttp3InternalHttp2Hpack")
