//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okhttp3/internal/http2/Http2Reader.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Okhttp3InternalHttp2Http2Reader")
#ifdef RESTRICT_Okhttp3InternalHttp2Http2Reader
#define INCLUDE_ALL_Okhttp3InternalHttp2Http2Reader 0
#else
#define INCLUDE_ALL_Okhttp3InternalHttp2Http2Reader 1
#endif
#undef RESTRICT_Okhttp3InternalHttp2Http2Reader

#if !defined (Okhttp3InternalHttp2Http2Reader_) && (INCLUDE_ALL_Okhttp3InternalHttp2Http2Reader || defined(INCLUDE_Okhttp3InternalHttp2Http2Reader))
#define Okhttp3InternalHttp2Http2Reader_

#define RESTRICT_JavaIoCloseable 1
#define INCLUDE_JavaIoCloseable 1
#include "java/io/Closeable.h"

@class JavaUtilLoggingLogger;
@class Okhttp3InternalHttp2Hpack_Reader;
@protocol Okhttp3InternalHttp2Http2Reader_Handler;
@protocol OkioBufferedSource;

@interface Okhttp3InternalHttp2Http2Reader : NSObject < JavaIoCloseable > {
 @public
  Okhttp3InternalHttp2Hpack_Reader *hpackReader_;
}

#pragma mark Public

- (instancetype)initWithOkioBufferedSource:(id<OkioBufferedSource>)source
                               withBoolean:(jboolean)client;

- (void)close;

- (jboolean)nextFrameWithBoolean:(jboolean)requireSettings
withOkhttp3InternalHttp2Http2Reader_Handler:(id<Okhttp3InternalHttp2Http2Reader_Handler>)handler;

- (void)readConnectionPrefaceWithOkhttp3InternalHttp2Http2Reader_Handler:(id<Okhttp3InternalHttp2Http2Reader_Handler>)handler;

#pragma mark Package-Private

+ (jint)lengthWithoutPaddingWithInt:(jint)length
                           withByte:(jbyte)flags
                          withShort:(jshort)padding;

+ (jint)readMediumWithOkioBufferedSource:(id<OkioBufferedSource>)source;

@end

J2OBJC_STATIC_INIT(Okhttp3InternalHttp2Http2Reader)

J2OBJC_FIELD_SETTER(Okhttp3InternalHttp2Http2Reader, hpackReader_, Okhttp3InternalHttp2Hpack_Reader *)

inline JavaUtilLoggingLogger *Okhttp3InternalHttp2Http2Reader_get_logger();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilLoggingLogger *Okhttp3InternalHttp2Http2Reader_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalHttp2Http2Reader, logger, JavaUtilLoggingLogger *)

FOUNDATION_EXPORT void Okhttp3InternalHttp2Http2Reader_initWithOkioBufferedSource_withBoolean_(Okhttp3InternalHttp2Http2Reader *self, id<OkioBufferedSource> source, jboolean client);

FOUNDATION_EXPORT Okhttp3InternalHttp2Http2Reader *new_Okhttp3InternalHttp2Http2Reader_initWithOkioBufferedSource_withBoolean_(id<OkioBufferedSource> source, jboolean client) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3InternalHttp2Http2Reader *create_Okhttp3InternalHttp2Http2Reader_initWithOkioBufferedSource_withBoolean_(id<OkioBufferedSource> source, jboolean client);

FOUNDATION_EXPORT jint Okhttp3InternalHttp2Http2Reader_readMediumWithOkioBufferedSource_(id<OkioBufferedSource> source);

FOUNDATION_EXPORT jint Okhttp3InternalHttp2Http2Reader_lengthWithoutPaddingWithInt_withByte_withShort_(jint length, jbyte flags, jshort padding);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalHttp2Http2Reader)

#endif

#if !defined (Okhttp3InternalHttp2Http2Reader_ContinuationSource_) && (INCLUDE_ALL_Okhttp3InternalHttp2Http2Reader || defined(INCLUDE_Okhttp3InternalHttp2Http2Reader_ContinuationSource))
#define Okhttp3InternalHttp2Http2Reader_ContinuationSource_

#define RESTRICT_OkioSource 1
#define INCLUDE_OkioSource 1
#include "okio/Source.h"

@class OkioBuffer;
@class OkioTimeout;
@protocol OkioBufferedSource;

@interface Okhttp3InternalHttp2Http2Reader_ContinuationSource : NSObject < OkioSource > {
 @public
  jint length_;
  jbyte flags_;
  jint streamId_;
  jint left_;
  jshort padding_;
}

#pragma mark Public

- (instancetype)initWithOkioBufferedSource:(id<OkioBufferedSource>)source;

- (void)close;

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount;

- (OkioTimeout *)timeout;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalHttp2Http2Reader_ContinuationSource)

FOUNDATION_EXPORT void Okhttp3InternalHttp2Http2Reader_ContinuationSource_initWithOkioBufferedSource_(Okhttp3InternalHttp2Http2Reader_ContinuationSource *self, id<OkioBufferedSource> source);

FOUNDATION_EXPORT Okhttp3InternalHttp2Http2Reader_ContinuationSource *new_Okhttp3InternalHttp2Http2Reader_ContinuationSource_initWithOkioBufferedSource_(id<OkioBufferedSource> source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3InternalHttp2Http2Reader_ContinuationSource *create_Okhttp3InternalHttp2Http2Reader_ContinuationSource_initWithOkioBufferedSource_(id<OkioBufferedSource> source);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalHttp2Http2Reader_ContinuationSource)

#endif

#if !defined (Okhttp3InternalHttp2Http2Reader_Handler_) && (INCLUDE_ALL_Okhttp3InternalHttp2Http2Reader || defined(INCLUDE_Okhttp3InternalHttp2Http2Reader_Handler))
#define Okhttp3InternalHttp2Http2Reader_Handler_

@class Okhttp3InternalHttp2ErrorCode;
@class Okhttp3InternalHttp2Settings;
@class OkioByteString;
@protocol JavaUtilList;
@protocol OkioBufferedSource;

@protocol Okhttp3InternalHttp2Http2Reader_Handler < JavaObject >

- (void)dataWithBoolean:(jboolean)inFinished
                withInt:(jint)streamId
 withOkioBufferedSource:(id<OkioBufferedSource>)source
                withInt:(jint)length;

- (void)headersWithBoolean:(jboolean)inFinished
                   withInt:(jint)streamId
                   withInt:(jint)associatedStreamId
          withJavaUtilList:(id<JavaUtilList>)headerBlock;

- (void)rstStreamWithInt:(jint)streamId
withOkhttp3InternalHttp2ErrorCode:(Okhttp3InternalHttp2ErrorCode *)errorCode;

- (void)settingsWithBoolean:(jboolean)clearPrevious
withOkhttp3InternalHttp2Settings:(Okhttp3InternalHttp2Settings *)settings;

- (void)ackSettings;

- (void)pingWithBoolean:(jboolean)ack
                withInt:(jint)payload1
                withInt:(jint)payload2;

- (void)goAwayWithInt:(jint)lastGoodStreamId
withOkhttp3InternalHttp2ErrorCode:(Okhttp3InternalHttp2ErrorCode *)errorCode
   withOkioByteString:(OkioByteString *)debugData;

- (void)windowUpdateWithInt:(jint)streamId
                   withLong:(jlong)windowSizeIncrement;

- (void)priorityWithInt:(jint)streamId
                withInt:(jint)streamDependency
                withInt:(jint)weight
            withBoolean:(jboolean)exclusive;

- (void)pushPromiseWithInt:(jint)streamId
                   withInt:(jint)promisedStreamId
          withJavaUtilList:(id<JavaUtilList>)requestHeaders;

- (void)alternateServiceWithInt:(jint)streamId
                   withNSString:(NSString *)origin
             withOkioByteString:(OkioByteString *)protocol
                   withNSString:(NSString *)host
                        withInt:(jint)port
                       withLong:(jlong)maxAge;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalHttp2Http2Reader_Handler)

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalHttp2Http2Reader_Handler)

#endif

#pragma pop_macro("INCLUDE_ALL_Okhttp3InternalHttp2Http2Reader")
