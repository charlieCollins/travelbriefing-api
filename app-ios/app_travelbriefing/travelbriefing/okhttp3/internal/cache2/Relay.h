//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okhttp3/internal/cache2/Relay.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Okhttp3InternalCache2Relay")
#ifdef RESTRICT_Okhttp3InternalCache2Relay
#define INCLUDE_ALL_Okhttp3InternalCache2Relay 0
#else
#define INCLUDE_ALL_Okhttp3InternalCache2Relay 1
#endif
#undef RESTRICT_Okhttp3InternalCache2Relay

#if !defined (Okhttp3InternalCache2Relay_) && (INCLUDE_ALL_Okhttp3InternalCache2Relay || defined(INCLUDE_Okhttp3InternalCache2Relay))
#define Okhttp3InternalCache2Relay_

@class JavaIoFile;
@class JavaIoRandomAccessFile;
@class JavaLangThread;
@class OkioBuffer;
@class OkioByteString;
@protocol OkioSource;

@interface Okhttp3InternalCache2Relay : NSObject {
 @public
  JavaIoRandomAccessFile *file_;
  JavaLangThread *upstreamReader_;
  id<OkioSource> upstream_;
  OkioBuffer *upstreamBuffer_;
  jlong upstreamPos_;
  jboolean complete_;
  OkioBuffer *buffer_;
  jlong bufferMaxSize_;
  jint sourceCount_;
}

#pragma mark Public

+ (Okhttp3InternalCache2Relay *)editWithJavaIoFile:(JavaIoFile *)file
                                    withOkioSource:(id<OkioSource>)upstream
                                withOkioByteString:(OkioByteString *)metadata
                                          withLong:(jlong)bufferMaxSize;

- (OkioByteString *)metadata;

- (id<OkioSource>)newSource OBJC_METHOD_FAMILY_NONE;

+ (Okhttp3InternalCache2Relay *)readWithJavaIoFile:(JavaIoFile *)file;

#pragma mark Package-Private

- (void)commitWithLong:(jlong)upstreamSize;

- (jboolean)isClosed;

@end

J2OBJC_STATIC_INIT(Okhttp3InternalCache2Relay)

J2OBJC_FIELD_SETTER(Okhttp3InternalCache2Relay, file_, JavaIoRandomAccessFile *)
J2OBJC_FIELD_SETTER(Okhttp3InternalCache2Relay, upstreamReader_, JavaLangThread *)
J2OBJC_FIELD_SETTER(Okhttp3InternalCache2Relay, upstream_, id<OkioSource>)
J2OBJC_FIELD_SETTER(Okhttp3InternalCache2Relay, upstreamBuffer_, OkioBuffer *)
J2OBJC_FIELD_SETTER(Okhttp3InternalCache2Relay, buffer_, OkioBuffer *)

inline OkioByteString *Okhttp3InternalCache2Relay_get_PREFIX_CLEAN();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OkioByteString *Okhttp3InternalCache2Relay_PREFIX_CLEAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalCache2Relay, PREFIX_CLEAN, OkioByteString *)

inline OkioByteString *Okhttp3InternalCache2Relay_get_PREFIX_DIRTY();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OkioByteString *Okhttp3InternalCache2Relay_PREFIX_DIRTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalCache2Relay, PREFIX_DIRTY, OkioByteString *)

FOUNDATION_EXPORT Okhttp3InternalCache2Relay *Okhttp3InternalCache2Relay_editWithJavaIoFile_withOkioSource_withOkioByteString_withLong_(JavaIoFile *file, id<OkioSource> upstream, OkioByteString *metadata, jlong bufferMaxSize);

FOUNDATION_EXPORT Okhttp3InternalCache2Relay *Okhttp3InternalCache2Relay_readWithJavaIoFile_(JavaIoFile *file);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalCache2Relay)

#endif

#if !defined (Okhttp3InternalCache2Relay_RelaySource_) && (INCLUDE_ALL_Okhttp3InternalCache2Relay || defined(INCLUDE_Okhttp3InternalCache2Relay_RelaySource))
#define Okhttp3InternalCache2Relay_RelaySource_

#define RESTRICT_OkioSource 1
#define INCLUDE_OkioSource 1
#include "okio/Source.h"

@class Okhttp3InternalCache2Relay;
@class OkioBuffer;
@class OkioTimeout;

@interface Okhttp3InternalCache2Relay_RelaySource : NSObject < OkioSource >

#pragma mark Public

- (void)close;

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount;

- (OkioTimeout *)timeout;

#pragma mark Package-Private

- (instancetype)initWithOkhttp3InternalCache2Relay:(Okhttp3InternalCache2Relay *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalCache2Relay_RelaySource)

FOUNDATION_EXPORT void Okhttp3InternalCache2Relay_RelaySource_initWithOkhttp3InternalCache2Relay_(Okhttp3InternalCache2Relay_RelaySource *self, Okhttp3InternalCache2Relay *outer$);

FOUNDATION_EXPORT Okhttp3InternalCache2Relay_RelaySource *new_Okhttp3InternalCache2Relay_RelaySource_initWithOkhttp3InternalCache2Relay_(Okhttp3InternalCache2Relay *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3InternalCache2Relay_RelaySource *create_Okhttp3InternalCache2Relay_RelaySource_initWithOkhttp3InternalCache2Relay_(Okhttp3InternalCache2Relay *outer$);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalCache2Relay_RelaySource)

#endif

#pragma pop_macro("INCLUDE_ALL_Okhttp3InternalCache2Relay")
