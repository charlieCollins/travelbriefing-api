//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okhttp3/internal/platform/AndroidPlatform.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Okhttp3InternalPlatformAndroidPlatform")
#ifdef RESTRICT_Okhttp3InternalPlatformAndroidPlatform
#define INCLUDE_ALL_Okhttp3InternalPlatformAndroidPlatform 0
#else
#define INCLUDE_ALL_Okhttp3InternalPlatformAndroidPlatform 1
#endif
#undef RESTRICT_Okhttp3InternalPlatformAndroidPlatform

#if !defined (Okhttp3InternalPlatformAndroidPlatform_) && (INCLUDE_ALL_Okhttp3InternalPlatformAndroidPlatform || defined(INCLUDE_Okhttp3InternalPlatformAndroidPlatform))
#define Okhttp3InternalPlatformAndroidPlatform_

#define RESTRICT_Okhttp3InternalPlatformPlatform 1
#define INCLUDE_Okhttp3InternalPlatformPlatform 1
#include "okhttp3/internal/platform/Platform.h"

@class IOSClass;
@class JavaNetInetSocketAddress;
@class JavaNetSocket;
@class JavaxNetSslSSLSocket;
@class JavaxNetSslSSLSocketFactory;
@class Okhttp3InternalPlatformOptionalMethod;
@class Okhttp3InternalTlsCertificateChainCleaner;
@protocol JavaUtilList;
@protocol JavaxNetSslX509TrustManager;

@interface Okhttp3InternalPlatformAndroidPlatform : Okhttp3InternalPlatformPlatform

#pragma mark Public

- (instancetype)initWithIOSClass:(IOSClass *)sslParametersClass
withOkhttp3InternalPlatformOptionalMethod:(Okhttp3InternalPlatformOptionalMethod *)setUseSessionTickets
withOkhttp3InternalPlatformOptionalMethod:(Okhttp3InternalPlatformOptionalMethod *)setHostname
withOkhttp3InternalPlatformOptionalMethod:(Okhttp3InternalPlatformOptionalMethod *)getAlpnSelectedProtocol
withOkhttp3InternalPlatformOptionalMethod:(Okhttp3InternalPlatformOptionalMethod *)setAlpnProtocols;

- (Okhttp3InternalTlsCertificateChainCleaner *)buildCertificateChainCleanerWithJavaxNetSslX509TrustManager:(id<JavaxNetSslX509TrustManager>)trustManager;

+ (Okhttp3InternalPlatformPlatform *)buildIfSupported;

- (void)configureTlsExtensionsWithJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)sslSocket
                                          withNSString:(NSString *)hostname
                                      withJavaUtilList:(id<JavaUtilList>)protocols;

- (void)connectSocketWithJavaNetSocket:(JavaNetSocket *)socket
          withJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)address
                               withInt:(jint)connectTimeout;

- (NSString *)getSelectedProtocolWithJavaxNetSslSSLSocket:(JavaxNetSslSSLSocket *)socket;

- (id)getStackTraceForCloseableWithNSString:(NSString *)closer;

- (jboolean)isCleartextTrafficPermittedWithNSString:(NSString *)hostname;

- (void)logWithInt:(jint)level
      withNSString:(NSString *)message
   withNSException:(NSException *)t;

- (void)logCloseableLeakWithNSString:(NSString *)message
                              withId:(id)stackTrace;

- (id<JavaxNetSslX509TrustManager>)trustManagerWithJavaxNetSslSSLSocketFactory:(JavaxNetSslSSLSocketFactory *)sslSocketFactory;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalPlatformAndroidPlatform)

FOUNDATION_EXPORT void Okhttp3InternalPlatformAndroidPlatform_initWithIOSClass_withOkhttp3InternalPlatformOptionalMethod_withOkhttp3InternalPlatformOptionalMethod_withOkhttp3InternalPlatformOptionalMethod_withOkhttp3InternalPlatformOptionalMethod_(Okhttp3InternalPlatformAndroidPlatform *self, IOSClass *sslParametersClass, Okhttp3InternalPlatformOptionalMethod *setUseSessionTickets, Okhttp3InternalPlatformOptionalMethod *setHostname, Okhttp3InternalPlatformOptionalMethod *getAlpnSelectedProtocol, Okhttp3InternalPlatformOptionalMethod *setAlpnProtocols);

FOUNDATION_EXPORT Okhttp3InternalPlatformAndroidPlatform *new_Okhttp3InternalPlatformAndroidPlatform_initWithIOSClass_withOkhttp3InternalPlatformOptionalMethod_withOkhttp3InternalPlatformOptionalMethod_withOkhttp3InternalPlatformOptionalMethod_withOkhttp3InternalPlatformOptionalMethod_(IOSClass *sslParametersClass, Okhttp3InternalPlatformOptionalMethod *setUseSessionTickets, Okhttp3InternalPlatformOptionalMethod *setHostname, Okhttp3InternalPlatformOptionalMethod *getAlpnSelectedProtocol, Okhttp3InternalPlatformOptionalMethod *setAlpnProtocols) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3InternalPlatformAndroidPlatform *create_Okhttp3InternalPlatformAndroidPlatform_initWithIOSClass_withOkhttp3InternalPlatformOptionalMethod_withOkhttp3InternalPlatformOptionalMethod_withOkhttp3InternalPlatformOptionalMethod_withOkhttp3InternalPlatformOptionalMethod_(IOSClass *sslParametersClass, Okhttp3InternalPlatformOptionalMethod *setUseSessionTickets, Okhttp3InternalPlatformOptionalMethod *setHostname, Okhttp3InternalPlatformOptionalMethod *getAlpnSelectedProtocol, Okhttp3InternalPlatformOptionalMethod *setAlpnProtocols);

FOUNDATION_EXPORT Okhttp3InternalPlatformPlatform *Okhttp3InternalPlatformAndroidPlatform_buildIfSupported();

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalPlatformAndroidPlatform)

#endif

#if !defined (Okhttp3InternalPlatformAndroidPlatform_AndroidCertificateChainCleaner_) && (INCLUDE_ALL_Okhttp3InternalPlatformAndroidPlatform || defined(INCLUDE_Okhttp3InternalPlatformAndroidPlatform_AndroidCertificateChainCleaner))
#define Okhttp3InternalPlatformAndroidPlatform_AndroidCertificateChainCleaner_

#define RESTRICT_Okhttp3InternalTlsCertificateChainCleaner 1
#define INCLUDE_Okhttp3InternalTlsCertificateChainCleaner 1
#include "okhttp3/internal/tls/CertificateChainCleaner.h"

@class JavaLangReflectMethod;
@protocol JavaUtilList;

@interface Okhttp3InternalPlatformAndroidPlatform_AndroidCertificateChainCleaner : Okhttp3InternalTlsCertificateChainCleaner

#pragma mark Public

- (id<JavaUtilList>)cleanWithJavaUtilList:(id<JavaUtilList>)chain
                             withNSString:(NSString *)hostname;

- (jboolean)isEqual:(id)other;

- (NSUInteger)hash;

#pragma mark Package-Private

- (instancetype)initWithId:(id)x509TrustManagerExtensions
 withJavaLangReflectMethod:(JavaLangReflectMethod *)checkServerTrusted;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalPlatformAndroidPlatform_AndroidCertificateChainCleaner)

FOUNDATION_EXPORT void Okhttp3InternalPlatformAndroidPlatform_AndroidCertificateChainCleaner_initWithId_withJavaLangReflectMethod_(Okhttp3InternalPlatformAndroidPlatform_AndroidCertificateChainCleaner *self, id x509TrustManagerExtensions, JavaLangReflectMethod *checkServerTrusted);

FOUNDATION_EXPORT Okhttp3InternalPlatformAndroidPlatform_AndroidCertificateChainCleaner *new_Okhttp3InternalPlatformAndroidPlatform_AndroidCertificateChainCleaner_initWithId_withJavaLangReflectMethod_(id x509TrustManagerExtensions, JavaLangReflectMethod *checkServerTrusted) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3InternalPlatformAndroidPlatform_AndroidCertificateChainCleaner *create_Okhttp3InternalPlatformAndroidPlatform_AndroidCertificateChainCleaner_initWithId_withJavaLangReflectMethod_(id x509TrustManagerExtensions, JavaLangReflectMethod *checkServerTrusted);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalPlatformAndroidPlatform_AndroidCertificateChainCleaner)

#endif

#if !defined (Okhttp3InternalPlatformAndroidPlatform_CloseGuard_) && (INCLUDE_ALL_Okhttp3InternalPlatformAndroidPlatform || defined(INCLUDE_Okhttp3InternalPlatformAndroidPlatform_CloseGuard))
#define Okhttp3InternalPlatformAndroidPlatform_CloseGuard_

@class JavaLangReflectMethod;

@interface Okhttp3InternalPlatformAndroidPlatform_CloseGuard : NSObject

#pragma mark Package-Private

- (instancetype)initWithJavaLangReflectMethod:(JavaLangReflectMethod *)getMethod
                    withJavaLangReflectMethod:(JavaLangReflectMethod *)openMethod
                    withJavaLangReflectMethod:(JavaLangReflectMethod *)warnIfOpenMethod;

- (id)createAndOpenWithNSString:(NSString *)closer;

+ (Okhttp3InternalPlatformAndroidPlatform_CloseGuard *)get;

- (jboolean)warnIfOpenWithId:(id)closeGuardInstance;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalPlatformAndroidPlatform_CloseGuard)

FOUNDATION_EXPORT void Okhttp3InternalPlatformAndroidPlatform_CloseGuard_initWithJavaLangReflectMethod_withJavaLangReflectMethod_withJavaLangReflectMethod_(Okhttp3InternalPlatformAndroidPlatform_CloseGuard *self, JavaLangReflectMethod *getMethod, JavaLangReflectMethod *openMethod, JavaLangReflectMethod *warnIfOpenMethod);

FOUNDATION_EXPORT Okhttp3InternalPlatformAndroidPlatform_CloseGuard *new_Okhttp3InternalPlatformAndroidPlatform_CloseGuard_initWithJavaLangReflectMethod_withJavaLangReflectMethod_withJavaLangReflectMethod_(JavaLangReflectMethod *getMethod, JavaLangReflectMethod *openMethod, JavaLangReflectMethod *warnIfOpenMethod) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3InternalPlatformAndroidPlatform_CloseGuard *create_Okhttp3InternalPlatformAndroidPlatform_CloseGuard_initWithJavaLangReflectMethod_withJavaLangReflectMethod_withJavaLangReflectMethod_(JavaLangReflectMethod *getMethod, JavaLangReflectMethod *openMethod, JavaLangReflectMethod *warnIfOpenMethod);

FOUNDATION_EXPORT Okhttp3InternalPlatformAndroidPlatform_CloseGuard *Okhttp3InternalPlatformAndroidPlatform_CloseGuard_get();

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalPlatformAndroidPlatform_CloseGuard)

#endif

#pragma pop_macro("INCLUDE_ALL_Okhttp3InternalPlatformAndroidPlatform")
