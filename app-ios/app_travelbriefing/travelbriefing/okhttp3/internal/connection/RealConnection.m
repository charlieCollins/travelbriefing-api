//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okhttp3/internal/connection/RealConnection.java
//

#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/net/ConnectException.h"
#include "java/net/HttpURLConnection.h"
#include "java/net/InetSocketAddress.h"
#include "java/net/ProtocolException.h"
#include "java/net/Proxy.h"
#include "java/net/Socket.h"
#include "java/net/SocketTimeoutException.h"
#include "java/net/UnknownServiceException.h"
#include "java/security/Principal.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/concurrent/TimeUnit.h"
#include "javax/net/SocketFactory.h"
#include "javax/net/ssl/HostnameVerifier.h"
#include "javax/net/ssl/SSLPeerUnverifiedException.h"
#include "javax/net/ssl/SSLSession.h"
#include "javax/net/ssl/SSLSocket.h"
#include "javax/net/ssl/SSLSocketFactory.h"
#include "okhttp3/Address.h"
#include "okhttp3/Authenticator.h"
#include "okhttp3/CertificatePinner.h"
#include "okhttp3/CipherSuite.h"
#include "okhttp3/ConnectionPool.h"
#include "okhttp3/ConnectionSpec.h"
#include "okhttp3/Handshake.h"
#include "okhttp3/Headers.h"
#include "okhttp3/HttpUrl.h"
#include "okhttp3/OkHttpClient.h"
#include "okhttp3/Protocol.h"
#include "okhttp3/Request.h"
#include "okhttp3/Response.h"
#include "okhttp3/Route.h"
#include "okhttp3/internal/Util.h"
#include "okhttp3/internal/Version.h"
#include "okhttp3/internal/connection/ConnectionSpecSelector.h"
#include "okhttp3/internal/connection/RealConnection.h"
#include "okhttp3/internal/connection/RouteException.h"
#include "okhttp3/internal/connection/StreamAllocation.h"
#include "okhttp3/internal/http/HttpCodec.h"
#include "okhttp3/internal/http/HttpHeaders.h"
#include "okhttp3/internal/http1/Http1Codec.h"
#include "okhttp3/internal/http2/ErrorCode.h"
#include "okhttp3/internal/http2/Http2Codec.h"
#include "okhttp3/internal/http2/Http2Connection.h"
#include "okhttp3/internal/http2/Http2Stream.h"
#include "okhttp3/internal/platform/Platform.h"
#include "okhttp3/internal/tls/OkHostnameVerifier.h"
#include "okhttp3/internal/ws/RealWebSocket.h"
#include "okio/Buffer.h"
#include "okio/BufferedSink.h"
#include "okio/BufferedSource.h"
#include "okio/Okio.h"
#include "okio/Sink.h"
#include "okio/Source.h"
#include "okio/Timeout.h"

@interface Okhttp3InternalConnectionRealConnection () {
 @public
  Okhttp3ConnectionPool *connectionPool_;
  Okhttp3Route *route_;
  JavaNetSocket *rawSocket_;
  JavaNetSocket *socket_;
  Okhttp3Handshake *handshake_;
  Okhttp3Protocol *protocol_;
  Okhttp3InternalHttp2Http2Connection *http2Connection_;
  id<OkioBufferedSource> source_;
  id<OkioBufferedSink> sink_;
}

- (void)connectTunnelWithInt:(jint)connectTimeout
                     withInt:(jint)readTimeout
                     withInt:(jint)writeTimeout;

- (void)connectSocketWithInt:(jint)connectTimeout
                     withInt:(jint)readTimeout;

- (void)establishProtocolWithOkhttp3InternalConnectionConnectionSpecSelector:(Okhttp3InternalConnectionConnectionSpecSelector *)connectionSpecSelector;

- (void)connectTlsWithOkhttp3InternalConnectionConnectionSpecSelector:(Okhttp3InternalConnectionConnectionSpecSelector *)connectionSpecSelector;

- (Okhttp3Request *)createTunnelWithInt:(jint)readTimeout
                                withInt:(jint)writeTimeout
                     withOkhttp3Request:(Okhttp3Request *)tunnelRequest
                     withOkhttp3HttpUrl:(Okhttp3HttpUrl *)url;

- (Okhttp3Request *)createTunnelRequest;

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionRealConnection, connectionPool_, Okhttp3ConnectionPool *)
J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionRealConnection, route_, Okhttp3Route *)
J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionRealConnection, rawSocket_, JavaNetSocket *)
J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionRealConnection, socket_, JavaNetSocket *)
J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionRealConnection, handshake_, Okhttp3Handshake *)
J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionRealConnection, protocol_, Okhttp3Protocol *)
J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionRealConnection, http2Connection_, Okhttp3InternalHttp2Http2Connection *)
J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionRealConnection, source_, id<OkioBufferedSource>)
J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionRealConnection, sink_, id<OkioBufferedSink>)

__attribute__((unused)) static void Okhttp3InternalConnectionRealConnection_connectTunnelWithInt_withInt_withInt_(Okhttp3InternalConnectionRealConnection *self, jint connectTimeout, jint readTimeout, jint writeTimeout);

__attribute__((unused)) static void Okhttp3InternalConnectionRealConnection_connectSocketWithInt_withInt_(Okhttp3InternalConnectionRealConnection *self, jint connectTimeout, jint readTimeout);

__attribute__((unused)) static void Okhttp3InternalConnectionRealConnection_establishProtocolWithOkhttp3InternalConnectionConnectionSpecSelector_(Okhttp3InternalConnectionRealConnection *self, Okhttp3InternalConnectionConnectionSpecSelector *connectionSpecSelector);

__attribute__((unused)) static void Okhttp3InternalConnectionRealConnection_connectTlsWithOkhttp3InternalConnectionConnectionSpecSelector_(Okhttp3InternalConnectionRealConnection *self, Okhttp3InternalConnectionConnectionSpecSelector *connectionSpecSelector);

__attribute__((unused)) static Okhttp3Request *Okhttp3InternalConnectionRealConnection_createTunnelWithInt_withInt_withOkhttp3Request_withOkhttp3HttpUrl_(Okhttp3InternalConnectionRealConnection *self, jint readTimeout, jint writeTimeout, Okhttp3Request *tunnelRequest, Okhttp3HttpUrl *url);

__attribute__((unused)) static Okhttp3Request *Okhttp3InternalConnectionRealConnection_createTunnelRequest(Okhttp3InternalConnectionRealConnection *self);

@interface Okhttp3InternalConnectionRealConnection_1 : Okhttp3InternalWsRealWebSocket_Streams {
 @public
  Okhttp3InternalConnectionStreamAllocation *val$streamAllocation_;
}

- (instancetype)initWithOkhttp3InternalConnectionStreamAllocation:(Okhttp3InternalConnectionStreamAllocation *)capture$0
                                                      withBoolean:(jboolean)client
                                           withOkioBufferedSource:(id<OkioBufferedSource>)source
                                             withOkioBufferedSink:(id<OkioBufferedSink>)sink;

- (void)close;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalConnectionRealConnection_1)

__attribute__((unused)) static void Okhttp3InternalConnectionRealConnection_1_initWithOkhttp3InternalConnectionStreamAllocation_withBoolean_withOkioBufferedSource_withOkioBufferedSink_(Okhttp3InternalConnectionRealConnection_1 *self, Okhttp3InternalConnectionStreamAllocation *capture$0, jboolean client, id<OkioBufferedSource> source, id<OkioBufferedSink> sink);

__attribute__((unused)) static Okhttp3InternalConnectionRealConnection_1 *new_Okhttp3InternalConnectionRealConnection_1_initWithOkhttp3InternalConnectionStreamAllocation_withBoolean_withOkioBufferedSource_withOkioBufferedSink_(Okhttp3InternalConnectionStreamAllocation *capture$0, jboolean client, id<OkioBufferedSource> source, id<OkioBufferedSink> sink) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalConnectionRealConnection_1 *create_Okhttp3InternalConnectionRealConnection_1_initWithOkhttp3InternalConnectionStreamAllocation_withBoolean_withOkioBufferedSource_withOkioBufferedSink_(Okhttp3InternalConnectionStreamAllocation *capture$0, jboolean client, id<OkioBufferedSource> source, id<OkioBufferedSink> sink);

@implementation Okhttp3InternalConnectionRealConnection

- (instancetype)initWithOkhttp3ConnectionPool:(Okhttp3ConnectionPool *)connectionPool
                             withOkhttp3Route:(Okhttp3Route *)route {
  Okhttp3InternalConnectionRealConnection_initWithOkhttp3ConnectionPool_withOkhttp3Route_(self, connectionPool, route);
  return self;
}

+ (Okhttp3InternalConnectionRealConnection *)testConnectionWithOkhttp3ConnectionPool:(Okhttp3ConnectionPool *)connectionPool
                                                                    withOkhttp3Route:(Okhttp3Route *)route
                                                                   withJavaNetSocket:(JavaNetSocket *)socket
                                                                            withLong:(jlong)idleAtNanos {
  return Okhttp3InternalConnectionRealConnection_testConnectionWithOkhttp3ConnectionPool_withOkhttp3Route_withJavaNetSocket_withLong_(connectionPool, route, socket, idleAtNanos);
}

- (void)connectWithInt:(jint)connectTimeout
               withInt:(jint)readTimeout
               withInt:(jint)writeTimeout
           withBoolean:(jboolean)connectionRetryEnabled {
  if (protocol_ != nil) @throw create_JavaLangIllegalStateException_initWithNSString_(@"already connected");
  Okhttp3InternalConnectionRouteException *routeException = nil;
  id<JavaUtilList> connectionSpecs = [((Okhttp3Address *) nil_chk([((Okhttp3Route *) nil_chk(route_)) address])) connectionSpecs];
  Okhttp3InternalConnectionConnectionSpecSelector *connectionSpecSelector = create_Okhttp3InternalConnectionConnectionSpecSelector_initWithJavaUtilList_(connectionSpecs);
  if ([((Okhttp3Address *) nil_chk([route_ address])) sslSocketFactory] == nil) {
    if (![((id<JavaUtilList>) nil_chk(connectionSpecs)) containsWithId:JreLoadStatic(Okhttp3ConnectionSpec, CLEARTEXT)]) {
      @throw create_Okhttp3InternalConnectionRouteException_initWithJavaIoIOException_(create_JavaNetUnknownServiceException_initWithNSString_(@"CLEARTEXT communication not enabled for client"));
    }
    NSString *host = [((Okhttp3HttpUrl *) nil_chk([((Okhttp3Address *) nil_chk([route_ address])) url])) host];
    if (![((Okhttp3InternalPlatformPlatform *) nil_chk(Okhttp3InternalPlatformPlatform_get())) isCleartextTrafficPermittedWithNSString:host]) {
      @throw create_Okhttp3InternalConnectionRouteException_initWithJavaIoIOException_(create_JavaNetUnknownServiceException_initWithNSString_(JreStrcat("$$$", @"CLEARTEXT communication to ", host, @" not permitted by network security policy")));
    }
  }
  while (true) {
    @try {
      if ([route_ requiresTunnel]) {
        Okhttp3InternalConnectionRealConnection_connectTunnelWithInt_withInt_withInt_(self, connectTimeout, readTimeout, writeTimeout);
      }
      else {
        Okhttp3InternalConnectionRealConnection_connectSocketWithInt_withInt_(self, connectTimeout, readTimeout);
      }
      Okhttp3InternalConnectionRealConnection_establishProtocolWithOkhttp3InternalConnectionConnectionSpecSelector_(self, connectionSpecSelector);
      break;
    }
    @catch (JavaIoIOException *e) {
      Okhttp3InternalUtil_closeQuietlyWithJavaNetSocket_(socket_);
      Okhttp3InternalUtil_closeQuietlyWithJavaNetSocket_(rawSocket_);
      JreStrongAssign(&socket_, nil);
      JreStrongAssign(&rawSocket_, nil);
      JreStrongAssign(&source_, nil);
      JreStrongAssign(&sink_, nil);
      JreStrongAssign(&handshake_, nil);
      JreStrongAssign(&protocol_, nil);
      JreStrongAssign(&http2Connection_, nil);
      if (routeException == nil) {
        routeException = create_Okhttp3InternalConnectionRouteException_initWithJavaIoIOException_(e);
      }
      else {
        [routeException addConnectExceptionWithJavaIoIOException:e];
      }
      if (!connectionRetryEnabled || ![connectionSpecSelector connectionFailedWithJavaIoIOException:e]) {
        @throw routeException;
      }
    }
  }
  if (http2Connection_ != nil) {
    @synchronized(connectionPool_) {
      allocationLimit_ = [http2Connection_ maxConcurrentStreams];
    }
  }
}

- (void)connectTunnelWithInt:(jint)connectTimeout
                     withInt:(jint)readTimeout
                     withInt:(jint)writeTimeout {
  Okhttp3InternalConnectionRealConnection_connectTunnelWithInt_withInt_withInt_(self, connectTimeout, readTimeout, writeTimeout);
}

- (void)connectSocketWithInt:(jint)connectTimeout
                     withInt:(jint)readTimeout {
  Okhttp3InternalConnectionRealConnection_connectSocketWithInt_withInt_(self, connectTimeout, readTimeout);
}

- (void)establishProtocolWithOkhttp3InternalConnectionConnectionSpecSelector:(Okhttp3InternalConnectionConnectionSpecSelector *)connectionSpecSelector {
  Okhttp3InternalConnectionRealConnection_establishProtocolWithOkhttp3InternalConnectionConnectionSpecSelector_(self, connectionSpecSelector);
}

- (void)connectTlsWithOkhttp3InternalConnectionConnectionSpecSelector:(Okhttp3InternalConnectionConnectionSpecSelector *)connectionSpecSelector {
  Okhttp3InternalConnectionRealConnection_connectTlsWithOkhttp3InternalConnectionConnectionSpecSelector_(self, connectionSpecSelector);
}

- (Okhttp3Request *)createTunnelWithInt:(jint)readTimeout
                                withInt:(jint)writeTimeout
                     withOkhttp3Request:(Okhttp3Request *)tunnelRequest
                     withOkhttp3HttpUrl:(Okhttp3HttpUrl *)url {
  return Okhttp3InternalConnectionRealConnection_createTunnelWithInt_withInt_withOkhttp3Request_withOkhttp3HttpUrl_(self, readTimeout, writeTimeout, tunnelRequest, url);
}

- (Okhttp3Request *)createTunnelRequest {
  return Okhttp3InternalConnectionRealConnection_createTunnelRequest(self);
}

- (jboolean)isEligibleWithOkhttp3Address:(Okhttp3Address *)address {
  return [((id<JavaUtilList>) nil_chk(allocations_)) size] < allocationLimit_ && [((Okhttp3Address *) nil_chk(address)) isEqual:[((Okhttp3Route *) nil_chk([self route])) address]] && !noNewStreams_;
}

- (id<Okhttp3InternalHttpHttpCodec>)newCodecWithOkhttp3OkHttpClient:(Okhttp3OkHttpClient *)client
                      withOkhttp3InternalConnectionStreamAllocation:(Okhttp3InternalConnectionStreamAllocation *)streamAllocation {
  if (http2Connection_ != nil) {
    return create_Okhttp3InternalHttp2Http2Codec_initWithOkhttp3OkHttpClient_withOkhttp3InternalConnectionStreamAllocation_withOkhttp3InternalHttp2Http2Connection_(client, streamAllocation, http2Connection_);
  }
  else {
    [((JavaNetSocket *) nil_chk(socket_)) setSoTimeoutWithInt:[((Okhttp3OkHttpClient *) nil_chk(client)) readTimeoutMillis]];
    [((OkioTimeout *) nil_chk([((id<OkioBufferedSource>) nil_chk(source_)) timeout])) timeoutWithLong:[client readTimeoutMillis] withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [((OkioTimeout *) nil_chk([((id<OkioBufferedSink>) nil_chk(sink_)) timeout])) timeoutWithLong:[client writeTimeoutMillis] withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    return create_Okhttp3InternalHttp1Http1Codec_initWithOkhttp3OkHttpClient_withOkhttp3InternalConnectionStreamAllocation_withOkioBufferedSource_withOkioBufferedSink_(client, streamAllocation, source_, sink_);
  }
}

- (Okhttp3InternalWsRealWebSocket_Streams *)newWebSocketStreamsWithOkhttp3InternalConnectionStreamAllocation:(Okhttp3InternalConnectionStreamAllocation *)streamAllocation {
  return create_Okhttp3InternalConnectionRealConnection_1_initWithOkhttp3InternalConnectionStreamAllocation_withBoolean_withOkioBufferedSource_withOkioBufferedSink_(streamAllocation, true, source_, sink_);
}

- (Okhttp3Route *)route {
  return route_;
}

- (void)cancel {
  Okhttp3InternalUtil_closeQuietlyWithJavaNetSocket_(rawSocket_);
}

- (JavaNetSocket *)socket {
  return socket_;
}

- (jboolean)isHealthyWithBoolean:(jboolean)doExtensiveChecks {
  if ([((JavaNetSocket *) nil_chk(socket_)) isClosed] || [((JavaNetSocket *) nil_chk(socket_)) isInputShutdown] || [((JavaNetSocket *) nil_chk(socket_)) isOutputShutdown]) {
    return false;
  }
  if (http2Connection_ != nil) {
    return ![http2Connection_ isShutdown];
  }
  if (doExtensiveChecks) {
    @try {
      jint readTimeout = [((JavaNetSocket *) nil_chk(socket_)) getSoTimeout];
      @try {
        [((JavaNetSocket *) nil_chk(socket_)) setSoTimeoutWithInt:1];
        if ([((id<OkioBufferedSource>) nil_chk(source_)) exhausted]) {
          return false;
        }
        return true;
      }
      @finally {
        [((JavaNetSocket *) nil_chk(socket_)) setSoTimeoutWithInt:readTimeout];
      }
    }
    @catch (JavaNetSocketTimeoutException *ignored) {
    }
    @catch (JavaIoIOException *e) {
      return false;
    }
  }
  return true;
}

- (void)onStreamWithOkhttp3InternalHttp2Http2Stream:(Okhttp3InternalHttp2Http2Stream *)stream {
  [((Okhttp3InternalHttp2Http2Stream *) nil_chk(stream)) closeWithOkhttp3InternalHttp2ErrorCode:JreLoadEnum(Okhttp3InternalHttp2ErrorCode, REFUSED_STREAM)];
}

- (void)onSettingsWithOkhttp3InternalHttp2Http2Connection:(Okhttp3InternalHttp2Http2Connection *)connection {
  @synchronized(connectionPool_) {
    allocationLimit_ = [((Okhttp3InternalHttp2Http2Connection *) nil_chk(connection)) maxConcurrentStreams];
  }
}

- (Okhttp3Handshake *)handshake {
  return handshake_;
}

- (jboolean)isMultiplexed {
  return http2Connection_ != nil;
}

- (Okhttp3Protocol *)protocol {
  return protocol_;
}

- (NSString *)description {
  return JreStrcat("$$CI$@$@$@$@C", @"Connection{", [((Okhttp3HttpUrl *) nil_chk([((Okhttp3Address *) nil_chk([((Okhttp3Route *) nil_chk(route_)) address])) url])) host], ':', [((Okhttp3HttpUrl *) nil_chk([((Okhttp3Address *) nil_chk([route_ address])) url])) port], @", proxy=", [route_ proxy], @" hostAddress=", [route_ socketAddress], @" cipherSuite=", (handshake_ != nil ? [handshake_ cipherSuite] : (id) @"none"), @" protocol=", protocol_, '}');
}

- (void)dealloc {
  RELEASE_(connectionPool_);
  RELEASE_(route_);
  RELEASE_(rawSocket_);
  RELEASE_(socket_);
  RELEASE_(handshake_);
  RELEASE_(protocol_);
  RELEASE_(http2Connection_);
  RELEASE_(source_);
  RELEASE_(sink_);
  RELEASE_(allocations_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalConnectionRealConnection;", 0x9, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, 7, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, 7, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, 7, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 11, 7, -1, -1, -1 },
    { NULL, "LOkhttp3Request;", 0x2, 13, 14, 7, -1, -1, -1 },
    { NULL, "LOkhttp3Request;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalHttpHttpCodec;", 0x1, 17, 18, 19, -1, -1, -1 },
    { NULL, "LOkhttp3InternalWsRealWebSocket_Streams;", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Route;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetSocket;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 25, 7, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Handshake;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Protocol;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 28, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3ConnectionPool:withOkhttp3Route:);
  methods[1].selector = @selector(testConnectionWithOkhttp3ConnectionPool:withOkhttp3Route:withJavaNetSocket:withLong:);
  methods[2].selector = @selector(connectWithInt:withInt:withInt:withBoolean:);
  methods[3].selector = @selector(connectTunnelWithInt:withInt:withInt:);
  methods[4].selector = @selector(connectSocketWithInt:withInt:);
  methods[5].selector = @selector(establishProtocolWithOkhttp3InternalConnectionConnectionSpecSelector:);
  methods[6].selector = @selector(connectTlsWithOkhttp3InternalConnectionConnectionSpecSelector:);
  methods[7].selector = @selector(createTunnelWithInt:withInt:withOkhttp3Request:withOkhttp3HttpUrl:);
  methods[8].selector = @selector(createTunnelRequest);
  methods[9].selector = @selector(isEligibleWithOkhttp3Address:);
  methods[10].selector = @selector(newCodecWithOkhttp3OkHttpClient:withOkhttp3InternalConnectionStreamAllocation:);
  methods[11].selector = @selector(newWebSocketStreamsWithOkhttp3InternalConnectionStreamAllocation:);
  methods[12].selector = @selector(route);
  methods[13].selector = @selector(cancel);
  methods[14].selector = @selector(socket);
  methods[15].selector = @selector(isHealthyWithBoolean:);
  methods[16].selector = @selector(onStreamWithOkhttp3InternalHttp2Http2Stream:);
  methods[17].selector = @selector(onSettingsWithOkhttp3InternalHttp2Http2Connection:);
  methods[18].selector = @selector(handshake);
  methods[19].selector = @selector(isMultiplexed);
  methods[20].selector = @selector(protocol);
  methods[21].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "connectionPool_", "LOkhttp3ConnectionPool;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "route_", "LOkhttp3Route;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "rawSocket_", "LJavaNetSocket;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "socket_", "LJavaNetSocket;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "handshake_", "LOkhttp3Handshake;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "protocol_", "LOkhttp3Protocol;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "http2Connection_", "LOkhttp3InternalHttp2Http2Connection;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "source_", "LOkioBufferedSource;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sink_", "LOkioBufferedSink;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "noNewStreams_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "successCount_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "allocationLimit_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "allocations_", "LJavaUtilList;", .constantValue.asLong = 0, 0x11, -1, -1, 29, -1 },
    { "idleAtNanos_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3ConnectionPool;LOkhttp3Route;", "testConnection", "LOkhttp3ConnectionPool;LOkhttp3Route;LJavaNetSocket;J", "connect", "IIIZ", "connectTunnel", "III", "LJavaIoIOException;", "connectSocket", "II", "establishProtocol", "LOkhttp3InternalConnectionConnectionSpecSelector;", "connectTls", "createTunnel", "IILOkhttp3Request;LOkhttp3HttpUrl;", "isEligible", "LOkhttp3Address;", "newCodec", "LOkhttp3OkHttpClient;LOkhttp3InternalConnectionStreamAllocation;", "LJavaNetSocketException;", "newWebSocketStreams", "LOkhttp3InternalConnectionStreamAllocation;", "isHealthy", "Z", "onStream", "LOkhttp3InternalHttp2Http2Stream;", "onSettings", "LOkhttp3InternalHttp2Http2Connection;", "toString", "Ljava/util/List<Ljava/lang/ref/Reference<Lokhttp3/internal/connection/StreamAllocation;>;>;" };
  static const J2ObjcClassInfo _Okhttp3InternalConnectionRealConnection = { "RealConnection", "okhttp3.internal.connection", ptrTable, methods, fields, 7, 0x11, 22, 14, -1, -1, -1, -1, -1 };
  return &_Okhttp3InternalConnectionRealConnection;
}

@end

void Okhttp3InternalConnectionRealConnection_initWithOkhttp3ConnectionPool_withOkhttp3Route_(Okhttp3InternalConnectionRealConnection *self, Okhttp3ConnectionPool *connectionPool, Okhttp3Route *route) {
  Okhttp3InternalHttp2Http2Connection_Listener_init(self);
  self->allocationLimit_ = 1;
  JreStrongAssignAndConsume(&self->allocations_, new_JavaUtilArrayList_init());
  self->idleAtNanos_ = JavaLangLong_MAX_VALUE;
  JreStrongAssign(&self->connectionPool_, connectionPool);
  JreStrongAssign(&self->route_, route);
}

Okhttp3InternalConnectionRealConnection *new_Okhttp3InternalConnectionRealConnection_initWithOkhttp3ConnectionPool_withOkhttp3Route_(Okhttp3ConnectionPool *connectionPool, Okhttp3Route *route) {
  J2OBJC_NEW_IMPL(Okhttp3InternalConnectionRealConnection, initWithOkhttp3ConnectionPool_withOkhttp3Route_, connectionPool, route)
}

Okhttp3InternalConnectionRealConnection *create_Okhttp3InternalConnectionRealConnection_initWithOkhttp3ConnectionPool_withOkhttp3Route_(Okhttp3ConnectionPool *connectionPool, Okhttp3Route *route) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalConnectionRealConnection, initWithOkhttp3ConnectionPool_withOkhttp3Route_, connectionPool, route)
}

Okhttp3InternalConnectionRealConnection *Okhttp3InternalConnectionRealConnection_testConnectionWithOkhttp3ConnectionPool_withOkhttp3Route_withJavaNetSocket_withLong_(Okhttp3ConnectionPool *connectionPool, Okhttp3Route *route, JavaNetSocket *socket, jlong idleAtNanos) {
  Okhttp3InternalConnectionRealConnection_initialize();
  Okhttp3InternalConnectionRealConnection *result = create_Okhttp3InternalConnectionRealConnection_initWithOkhttp3ConnectionPool_withOkhttp3Route_(connectionPool, route);
  JreStrongAssign(&result->socket_, socket);
  result->idleAtNanos_ = idleAtNanos;
  return result;
}

void Okhttp3InternalConnectionRealConnection_connectTunnelWithInt_withInt_withInt_(Okhttp3InternalConnectionRealConnection *self, jint connectTimeout, jint readTimeout, jint writeTimeout) {
  Okhttp3Request *tunnelRequest = Okhttp3InternalConnectionRealConnection_createTunnelRequest(self);
  Okhttp3HttpUrl *url = [((Okhttp3Request *) nil_chk(tunnelRequest)) url];
  jint attemptedConnections = 0;
  jint maxAttempts = 21;
  while (true) {
    if (++attemptedConnections > maxAttempts) {
      @throw create_JavaNetProtocolException_initWithNSString_(JreStrcat("$I", @"Too many tunnel connections attempted: ", maxAttempts));
    }
    Okhttp3InternalConnectionRealConnection_connectSocketWithInt_withInt_(self, connectTimeout, readTimeout);
    tunnelRequest = Okhttp3InternalConnectionRealConnection_createTunnelWithInt_withInt_withOkhttp3Request_withOkhttp3HttpUrl_(self, readTimeout, writeTimeout, tunnelRequest, url);
    if (tunnelRequest == nil) break;
    Okhttp3InternalUtil_closeQuietlyWithJavaNetSocket_(self->rawSocket_);
    JreStrongAssign(&self->rawSocket_, nil);
    JreStrongAssign(&self->sink_, nil);
    JreStrongAssign(&self->source_, nil);
  }
}

void Okhttp3InternalConnectionRealConnection_connectSocketWithInt_withInt_(Okhttp3InternalConnectionRealConnection *self, jint connectTimeout, jint readTimeout) {
  JavaNetProxy *proxy = [((Okhttp3Route *) nil_chk(self->route_)) proxy];
  Okhttp3Address *address = [self->route_ address];
  JreStrongAssign(&self->rawSocket_, [((JavaNetProxy *) nil_chk(proxy)) type] == JreLoadEnum(JavaNetProxy_Type, DIRECT) || [proxy type] == JreLoadEnum(JavaNetProxy_Type, HTTP) ? [((JavaxNetSocketFactory *) nil_chk([((Okhttp3Address *) nil_chk(address)) socketFactory])) createSocket] : create_JavaNetSocket_initWithJavaNetProxy_(proxy));
  [self->rawSocket_ setSoTimeoutWithInt:readTimeout];
  @try {
    [((Okhttp3InternalPlatformPlatform *) nil_chk(Okhttp3InternalPlatformPlatform_get())) connectSocketWithJavaNetSocket:self->rawSocket_ withJavaNetInetSocketAddress:[self->route_ socketAddress] withInt:connectTimeout];
  }
  @catch (JavaNetConnectException *e) {
    JavaNetConnectException *ce = create_JavaNetConnectException_initWithNSString_(JreStrcat("$@", @"Failed to connect to ", [self->route_ socketAddress]));
    [ce initCauseWithNSException:e];
    @throw ce;
  }
  JreStrongAssign(&self->source_, OkioOkio_bufferWithOkioSource_(OkioOkio_sourceWithJavaNetSocket_(self->rawSocket_)));
  JreStrongAssign(&self->sink_, OkioOkio_bufferWithOkioSink_(OkioOkio_sinkWithJavaNetSocket_(self->rawSocket_)));
}

void Okhttp3InternalConnectionRealConnection_establishProtocolWithOkhttp3InternalConnectionConnectionSpecSelector_(Okhttp3InternalConnectionRealConnection *self, Okhttp3InternalConnectionConnectionSpecSelector *connectionSpecSelector) {
  if ([((Okhttp3Address *) nil_chk([((Okhttp3Route *) nil_chk(self->route_)) address])) sslSocketFactory] == nil) {
    JreStrongAssign(&self->protocol_, JreLoadEnum(Okhttp3Protocol, HTTP_1_1));
    JreStrongAssign(&self->socket_, self->rawSocket_);
    return;
  }
  Okhttp3InternalConnectionRealConnection_connectTlsWithOkhttp3InternalConnectionConnectionSpecSelector_(self, connectionSpecSelector);
  if (self->protocol_ == JreLoadEnum(Okhttp3Protocol, HTTP_2)) {
    [((JavaNetSocket *) nil_chk(self->socket_)) setSoTimeoutWithInt:0];
    JreStrongAssign(&self->http2Connection_, [((Okhttp3InternalHttp2Http2Connection_Builder *) nil_chk([((Okhttp3InternalHttp2Http2Connection_Builder *) nil_chk([create_Okhttp3InternalHttp2Http2Connection_Builder_initWithBoolean_(true) socketWithJavaNetSocket:self->socket_ withNSString:[((Okhttp3HttpUrl *) nil_chk([((Okhttp3Address *) nil_chk([self->route_ address])) url])) host] withOkioBufferedSource:self->source_ withOkioBufferedSink:self->sink_])) listenerWithOkhttp3InternalHttp2Http2Connection_Listener:self])) build]);
    [((Okhttp3InternalHttp2Http2Connection *) nil_chk(self->http2Connection_)) start];
  }
}

void Okhttp3InternalConnectionRealConnection_connectTlsWithOkhttp3InternalConnectionConnectionSpecSelector_(Okhttp3InternalConnectionRealConnection *self, Okhttp3InternalConnectionConnectionSpecSelector *connectionSpecSelector) {
  Okhttp3Address *address = [((Okhttp3Route *) nil_chk(self->route_)) address];
  JavaxNetSslSSLSocketFactory *sslSocketFactory = [((Okhttp3Address *) nil_chk(address)) sslSocketFactory];
  jboolean success = false;
  JavaxNetSslSSLSocket *sslSocket = nil;
  @try {
    sslSocket = (JavaxNetSslSSLSocket *) cast_chk([((JavaxNetSslSSLSocketFactory *) nil_chk(sslSocketFactory)) createSocketWithJavaNetSocket:self->rawSocket_ withNSString:[((Okhttp3HttpUrl *) nil_chk([address url])) host] withInt:[((Okhttp3HttpUrl *) nil_chk([address url])) port] withBoolean:true], [JavaxNetSslSSLSocket class]);
    Okhttp3ConnectionSpec *connectionSpec = [((Okhttp3InternalConnectionConnectionSpecSelector *) nil_chk(connectionSpecSelector)) configureSecureSocketWithJavaxNetSslSSLSocket:sslSocket];
    if ([((Okhttp3ConnectionSpec *) nil_chk(connectionSpec)) supportsTlsExtensions]) {
      [((Okhttp3InternalPlatformPlatform *) nil_chk(Okhttp3InternalPlatformPlatform_get())) configureTlsExtensionsWithJavaxNetSslSSLSocket:sslSocket withNSString:[((Okhttp3HttpUrl *) nil_chk([address url])) host] withJavaUtilList:[address protocols]];
    }
    [((JavaxNetSslSSLSocket *) nil_chk(sslSocket)) startHandshake];
    Okhttp3Handshake *unverifiedHandshake = Okhttp3Handshake_getWithJavaxNetSslSSLSession_([sslSocket getSession]);
    if (![((id<JavaxNetSslHostnameVerifier>) nil_chk([address hostnameVerifier])) verifyWithNSString:[((Okhttp3HttpUrl *) nil_chk([address url])) host] withJavaxNetSslSSLSession:[sslSocket getSession]]) {
      JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk([((Okhttp3Handshake *) nil_chk(unverifiedHandshake)) peerCertificates])) getWithInt:0], [JavaSecurityCertX509Certificate class]);
      @throw create_JavaxNetSslSSLPeerUnverifiedException_initWithNSString_(JreStrcat("$$$$$$$@", @"Hostname ", [((Okhttp3HttpUrl *) nil_chk([address url])) host], @" not verified:\n    certificate: ", Okhttp3CertificatePinner_pinWithJavaSecurityCertCertificate_(cert), @"\n    DN: ", [((id<JavaSecurityPrincipal>) nil_chk([((JavaSecurityCertX509Certificate *) nil_chk(cert)) getSubjectDN])) getName], @"\n    subjectAltNames: ", Okhttp3InternalTlsOkHostnameVerifier_allSubjectAltNamesWithJavaSecurityCertX509Certificate_(cert)));
    }
    [((Okhttp3CertificatePinner *) nil_chk([address certificatePinner])) checkWithNSString:[((Okhttp3HttpUrl *) nil_chk([address url])) host] withJavaUtilList:[((Okhttp3Handshake *) nil_chk(unverifiedHandshake)) peerCertificates]];
    NSString *maybeProtocol = [connectionSpec supportsTlsExtensions] ? [((Okhttp3InternalPlatformPlatform *) nil_chk(Okhttp3InternalPlatformPlatform_get())) getSelectedProtocolWithJavaxNetSslSSLSocket:sslSocket] : nil;
    JreStrongAssign(&self->socket_, sslSocket);
    JreStrongAssign(&self->source_, OkioOkio_bufferWithOkioSource_(OkioOkio_sourceWithJavaNetSocket_(self->socket_)));
    JreStrongAssign(&self->sink_, OkioOkio_bufferWithOkioSink_(OkioOkio_sinkWithJavaNetSocket_(self->socket_)));
    JreStrongAssign(&self->handshake_, unverifiedHandshake);
    JreStrongAssign(&self->protocol_, maybeProtocol != nil ? Okhttp3Protocol_getWithNSString_(maybeProtocol) : JreLoadEnum(Okhttp3Protocol, HTTP_1_1));
    success = true;
  }
  @catch (JavaLangAssertionError *e) {
    if (Okhttp3InternalUtil_isAndroidGetsocknameErrorWithJavaLangAssertionError_(e)) @throw create_JavaIoIOException_initWithNSException_(e);
    @throw e;
  }
  @finally {
    if (sslSocket != nil) {
      [((Okhttp3InternalPlatformPlatform *) nil_chk(Okhttp3InternalPlatformPlatform_get())) afterHandshakeWithJavaxNetSslSSLSocket:sslSocket];
    }
    if (!success) {
      Okhttp3InternalUtil_closeQuietlyWithJavaNetSocket_(sslSocket);
    }
  }
}

Okhttp3Request *Okhttp3InternalConnectionRealConnection_createTunnelWithInt_withInt_withOkhttp3Request_withOkhttp3HttpUrl_(Okhttp3InternalConnectionRealConnection *self, jint readTimeout, jint writeTimeout, Okhttp3Request *tunnelRequest, Okhttp3HttpUrl *url) {
  NSString *requestLine = JreStrcat("$$$", @"CONNECT ", Okhttp3InternalUtil_hostHeaderWithOkhttp3HttpUrl_withBoolean_(url, true), @" HTTP/1.1");
  while (true) {
    Okhttp3InternalHttp1Http1Codec *tunnelConnection = create_Okhttp3InternalHttp1Http1Codec_initWithOkhttp3OkHttpClient_withOkhttp3InternalConnectionStreamAllocation_withOkioBufferedSource_withOkioBufferedSink_(nil, nil, self->source_, self->sink_);
    [((OkioTimeout *) nil_chk([((id<OkioBufferedSource>) nil_chk(self->source_)) timeout])) timeoutWithLong:readTimeout withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [((OkioTimeout *) nil_chk([((id<OkioBufferedSink>) nil_chk(self->sink_)) timeout])) timeoutWithLong:writeTimeout withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    [tunnelConnection writeRequestWithOkhttp3Headers:[((Okhttp3Request *) nil_chk(tunnelRequest)) headers] withNSString:requestLine];
    [tunnelConnection finishRequest];
    Okhttp3Response *response = [((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([tunnelConnection readResponseHeadersWithBoolean:false])) requestWithOkhttp3Request:tunnelRequest])) build];
    jlong contentLength = Okhttp3InternalHttpHttpHeaders_contentLengthWithOkhttp3Response_(response);
    if (contentLength == -1LL) {
      contentLength = 0LL;
    }
    id<OkioSource> body = [tunnelConnection newFixedLengthSourceWithLong:contentLength];
    Okhttp3InternalUtil_skipAllWithOkioSource_withInt_withJavaUtilConcurrentTimeUnit_(body, JavaLangInteger_MAX_VALUE, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS));
    [((id<OkioSource>) nil_chk(body)) close];
    switch ([((Okhttp3Response *) nil_chk(response)) code]) {
      case JavaNetHttpURLConnection_HTTP_OK:
      if (![((OkioBuffer *) nil_chk([((id<OkioBufferedSource>) nil_chk(self->source_)) buffer])) exhausted] || ![((OkioBuffer *) nil_chk([((id<OkioBufferedSink>) nil_chk(self->sink_)) buffer])) exhausted]) {
        @throw create_JavaIoIOException_initWithNSString_(@"TLS tunnel buffered too many bytes!");
      }
      return nil;
      case JavaNetHttpURLConnection_HTTP_PROXY_AUTH:
      tunnelRequest = [((id<Okhttp3Authenticator>) nil_chk([((Okhttp3Address *) nil_chk([((Okhttp3Route *) nil_chk(self->route_)) address])) proxyAuthenticator])) authenticateWithOkhttp3Route:self->route_ withOkhttp3Response:response];
      if (tunnelRequest == nil) @throw create_JavaIoIOException_initWithNSString_(@"Failed to authenticate with proxy");
      if ([@"close" java_equalsIgnoreCase:[response headerWithNSString:@"Connection"]]) {
        return tunnelRequest;
      }
      break;
      default:
      @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"Unexpected response code for CONNECT: ", [response code]));
    }
  }
}

Okhttp3Request *Okhttp3InternalConnectionRealConnection_createTunnelRequest(Okhttp3InternalConnectionRealConnection *self) {
  return [((Okhttp3Request_Builder *) nil_chk([((Okhttp3Request_Builder *) nil_chk([((Okhttp3Request_Builder *) nil_chk([((Okhttp3Request_Builder *) nil_chk([create_Okhttp3Request_Builder_init() urlWithOkhttp3HttpUrl:[((Okhttp3Address *) nil_chk([((Okhttp3Route *) nil_chk(self->route_)) address])) url]])) headerWithNSString:@"Host" withNSString:Okhttp3InternalUtil_hostHeaderWithOkhttp3HttpUrl_withBoolean_([((Okhttp3Address *) nil_chk([self->route_ address])) url], true)])) headerWithNSString:@"Proxy-Connection" withNSString:@"Keep-Alive"])) headerWithNSString:@"User-Agent" withNSString:Okhttp3InternalVersion_userAgent()])) build];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalConnectionRealConnection)

@implementation Okhttp3InternalConnectionRealConnection_1

- (instancetype)initWithOkhttp3InternalConnectionStreamAllocation:(Okhttp3InternalConnectionStreamAllocation *)capture$0
                                                      withBoolean:(jboolean)client
                                           withOkioBufferedSource:(id<OkioBufferedSource>)source
                                             withOkioBufferedSink:(id<OkioBufferedSink>)sink {
  Okhttp3InternalConnectionRealConnection_1_initWithOkhttp3InternalConnectionStreamAllocation_withBoolean_withOkioBufferedSource_withOkioBufferedSink_(self, capture$0, client, source, sink);
  return self;
}

- (void)close {
  [((Okhttp3InternalConnectionStreamAllocation *) nil_chk(val$streamAllocation_)) streamFinishedWithBoolean:true withOkhttp3InternalHttpHttpCodec:[val$streamAllocation_ codec]];
}

- (void)dealloc {
  RELEASE_(val$streamAllocation_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalConnectionStreamAllocation:withBoolean:withOkioBufferedSource:withOkioBufferedSink:);
  methods[1].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$streamAllocation_", "LOkhttp3InternalConnectionStreamAllocation;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ZLOkioBufferedSource;LOkioBufferedSink;", "LJavaIoIOException;", "LOkhttp3InternalConnectionRealConnection;", "newWebSocketStreamsWithOkhttp3InternalConnectionStreamAllocation:" };
  static const J2ObjcClassInfo _Okhttp3InternalConnectionRealConnection_1 = { "", "okhttp3.internal.connection", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, 3, -1, -1 };
  return &_Okhttp3InternalConnectionRealConnection_1;
}

@end

void Okhttp3InternalConnectionRealConnection_1_initWithOkhttp3InternalConnectionStreamAllocation_withBoolean_withOkioBufferedSource_withOkioBufferedSink_(Okhttp3InternalConnectionRealConnection_1 *self, Okhttp3InternalConnectionStreamAllocation *capture$0, jboolean client, id<OkioBufferedSource> source, id<OkioBufferedSink> sink) {
  JreStrongAssign(&self->val$streamAllocation_, capture$0);
  Okhttp3InternalWsRealWebSocket_Streams_initWithBoolean_withOkioBufferedSource_withOkioBufferedSink_(self, client, source, sink);
}

Okhttp3InternalConnectionRealConnection_1 *new_Okhttp3InternalConnectionRealConnection_1_initWithOkhttp3InternalConnectionStreamAllocation_withBoolean_withOkioBufferedSource_withOkioBufferedSink_(Okhttp3InternalConnectionStreamAllocation *capture$0, jboolean client, id<OkioBufferedSource> source, id<OkioBufferedSink> sink) {
  J2OBJC_NEW_IMPL(Okhttp3InternalConnectionRealConnection_1, initWithOkhttp3InternalConnectionStreamAllocation_withBoolean_withOkioBufferedSource_withOkioBufferedSink_, capture$0, client, source, sink)
}

Okhttp3InternalConnectionRealConnection_1 *create_Okhttp3InternalConnectionRealConnection_1_initWithOkhttp3InternalConnectionStreamAllocation_withBoolean_withOkioBufferedSource_withOkioBufferedSink_(Okhttp3InternalConnectionStreamAllocation *capture$0, jboolean client, id<OkioBufferedSource> source, id<OkioBufferedSink> sink) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalConnectionRealConnection_1, initWithOkhttp3InternalConnectionStreamAllocation_withBoolean_withOkioBufferedSource_withOkioBufferedSink_, capture$0, client, source, sink)
}
