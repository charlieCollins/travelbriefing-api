//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okhttp3/internal/connection/StreamAllocation.java
//

#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/ref/Reference.h"
#include "java/lang/ref/WeakReference.h"
#include "java/net/Socket.h"
#include "java/util/List.h"
#include "okhttp3/Address.h"
#include "okhttp3/ConnectionPool.h"
#include "okhttp3/OkHttpClient.h"
#include "okhttp3/Route.h"
#include "okhttp3/internal/Internal.h"
#include "okhttp3/internal/Util.h"
#include "okhttp3/internal/connection/RealConnection.h"
#include "okhttp3/internal/connection/RouteDatabase.h"
#include "okhttp3/internal/connection/RouteException.h"
#include "okhttp3/internal/connection/RouteSelector.h"
#include "okhttp3/internal/connection/StreamAllocation.h"
#include "okhttp3/internal/http/HttpCodec.h"
#include "okhttp3/internal/http2/ConnectionShutdownException.h"
#include "okhttp3/internal/http2/ErrorCode.h"
#include "okhttp3/internal/http2/StreamResetException.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface Okhttp3InternalConnectionStreamAllocation () {
 @public
  Okhttp3Route *route_;
  Okhttp3ConnectionPool *connectionPool_;
  id callStackTrace_;
  Okhttp3InternalConnectionRouteSelector *routeSelector_;
  jint refusedStreamCount_;
  Okhttp3InternalConnectionRealConnection *connection_;
  jboolean released_;
  jboolean canceled_;
  id<Okhttp3InternalHttpHttpCodec> codec_;
}

- (Okhttp3InternalConnectionRealConnection *)findHealthyConnectionWithInt:(jint)connectTimeout
                                                                  withInt:(jint)readTimeout
                                                                  withInt:(jint)writeTimeout
                                                              withBoolean:(jboolean)connectionRetryEnabled
                                                              withBoolean:(jboolean)doExtensiveHealthChecks;

- (Okhttp3InternalConnectionRealConnection *)findConnectionWithInt:(jint)connectTimeout
                                                           withInt:(jint)readTimeout
                                                           withInt:(jint)writeTimeout
                                                       withBoolean:(jboolean)connectionRetryEnabled;

- (Okhttp3InternalConnectionRouteDatabase *)routeDatabase;

- (JavaNetSocket *)deallocateWithBoolean:(jboolean)noNewStreams
                             withBoolean:(jboolean)released
                             withBoolean:(jboolean)streamFinished;

- (void)release__WithOkhttp3InternalConnectionRealConnection:(Okhttp3InternalConnectionRealConnection *)connection;

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionStreamAllocation, route_, Okhttp3Route *)
J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionStreamAllocation, connectionPool_, Okhttp3ConnectionPool *)
J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionStreamAllocation, callStackTrace_, id)
J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionStreamAllocation, routeSelector_, Okhttp3InternalConnectionRouteSelector *)
J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionStreamAllocation, connection_, Okhttp3InternalConnectionRealConnection *)
J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionStreamAllocation, codec_, id<Okhttp3InternalHttpHttpCodec>)

__attribute__((unused)) static Okhttp3InternalConnectionRealConnection *Okhttp3InternalConnectionStreamAllocation_findHealthyConnectionWithInt_withInt_withInt_withBoolean_withBoolean_(Okhttp3InternalConnectionStreamAllocation *self, jint connectTimeout, jint readTimeout, jint writeTimeout, jboolean connectionRetryEnabled, jboolean doExtensiveHealthChecks);

__attribute__((unused)) static Okhttp3InternalConnectionRealConnection *Okhttp3InternalConnectionStreamAllocation_findConnectionWithInt_withInt_withInt_withBoolean_(Okhttp3InternalConnectionStreamAllocation *self, jint connectTimeout, jint readTimeout, jint writeTimeout, jboolean connectionRetryEnabled);

__attribute__((unused)) static Okhttp3InternalConnectionRouteDatabase *Okhttp3InternalConnectionStreamAllocation_routeDatabase(Okhttp3InternalConnectionStreamAllocation *self);

__attribute__((unused)) static JavaNetSocket *Okhttp3InternalConnectionStreamAllocation_deallocateWithBoolean_withBoolean_withBoolean_(Okhttp3InternalConnectionStreamAllocation *self, jboolean noNewStreams, jboolean released, jboolean streamFinished);

__attribute__((unused)) static void Okhttp3InternalConnectionStreamAllocation_release__WithOkhttp3InternalConnectionRealConnection_(Okhttp3InternalConnectionStreamAllocation *self, Okhttp3InternalConnectionRealConnection *connection);

@implementation Okhttp3InternalConnectionStreamAllocation

- (instancetype)initWithOkhttp3ConnectionPool:(Okhttp3ConnectionPool *)connectionPool
                           withOkhttp3Address:(Okhttp3Address *)address
                                       withId:(id)callStackTrace {
  Okhttp3InternalConnectionStreamAllocation_initWithOkhttp3ConnectionPool_withOkhttp3Address_withId_(self, connectionPool, address, callStackTrace);
  return self;
}

- (id<Okhttp3InternalHttpHttpCodec>)newStreamWithOkhttp3OkHttpClient:(Okhttp3OkHttpClient *)client
                                                         withBoolean:(jboolean)doExtensiveHealthChecks {
  jint connectTimeout = [((Okhttp3OkHttpClient *) nil_chk(client)) connectTimeoutMillis];
  jint readTimeout = [client readTimeoutMillis];
  jint writeTimeout = [client writeTimeoutMillis];
  jboolean connectionRetryEnabled = [client retryOnConnectionFailure];
  @try {
    Okhttp3InternalConnectionRealConnection *resultConnection = Okhttp3InternalConnectionStreamAllocation_findHealthyConnectionWithInt_withInt_withInt_withBoolean_withBoolean_(self, connectTimeout, readTimeout, writeTimeout, connectionRetryEnabled, doExtensiveHealthChecks);
    id<Okhttp3InternalHttpHttpCodec> resultCodec = [((Okhttp3InternalConnectionRealConnection *) nil_chk(resultConnection)) newCodecWithOkhttp3OkHttpClient:client withOkhttp3InternalConnectionStreamAllocation:self];
    @synchronized(connectionPool_) {
      JreStrongAssign(&codec_, resultCodec);
      return resultCodec;
    }
  }
  @catch (JavaIoIOException *e) {
    @throw create_Okhttp3InternalConnectionRouteException_initWithJavaIoIOException_(e);
  }
}

- (Okhttp3InternalConnectionRealConnection *)findHealthyConnectionWithInt:(jint)connectTimeout
                                                                  withInt:(jint)readTimeout
                                                                  withInt:(jint)writeTimeout
                                                              withBoolean:(jboolean)connectionRetryEnabled
                                                              withBoolean:(jboolean)doExtensiveHealthChecks {
  return Okhttp3InternalConnectionStreamAllocation_findHealthyConnectionWithInt_withInt_withInt_withBoolean_withBoolean_(self, connectTimeout, readTimeout, writeTimeout, connectionRetryEnabled, doExtensiveHealthChecks);
}

- (Okhttp3InternalConnectionRealConnection *)findConnectionWithInt:(jint)connectTimeout
                                                           withInt:(jint)readTimeout
                                                           withInt:(jint)writeTimeout
                                                       withBoolean:(jboolean)connectionRetryEnabled {
  return Okhttp3InternalConnectionStreamAllocation_findConnectionWithInt_withInt_withInt_withBoolean_(self, connectTimeout, readTimeout, writeTimeout, connectionRetryEnabled);
}

- (void)streamFinishedWithBoolean:(jboolean)noNewStreams
 withOkhttp3InternalHttpHttpCodec:(id<Okhttp3InternalHttpHttpCodec>)codec {
  JavaNetSocket *socket;
  @synchronized(connectionPool_) {
    if (codec == nil || codec != self->codec_) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$@", @"expected ", self->codec_, @" but was ", codec));
    }
    if (!noNewStreams) {
      ((Okhttp3InternalConnectionRealConnection *) nil_chk(connection_))->successCount_++;
    }
    socket = Okhttp3InternalConnectionStreamAllocation_deallocateWithBoolean_withBoolean_withBoolean_(self, noNewStreams, false, true);
  }
  Okhttp3InternalUtil_closeQuietlyWithJavaNetSocket_(socket);
}

- (id<Okhttp3InternalHttpHttpCodec>)codec {
  @synchronized(connectionPool_) {
    return codec_;
  }
}

- (Okhttp3InternalConnectionRouteDatabase *)routeDatabase {
  return Okhttp3InternalConnectionStreamAllocation_routeDatabase(self);
}

- (Okhttp3InternalConnectionRealConnection *)connection {
  @synchronized(self) {
    return connection_;
  }
}

- (void)release__ {
  JavaNetSocket *socket;
  @synchronized(connectionPool_) {
    socket = Okhttp3InternalConnectionStreamAllocation_deallocateWithBoolean_withBoolean_withBoolean_(self, false, true, false);
  }
  Okhttp3InternalUtil_closeQuietlyWithJavaNetSocket_(socket);
}

- (void)noNewStreams {
  JavaNetSocket *socket;
  @synchronized(connectionPool_) {
    socket = Okhttp3InternalConnectionStreamAllocation_deallocateWithBoolean_withBoolean_withBoolean_(self, true, false, false);
  }
  Okhttp3InternalUtil_closeQuietlyWithJavaNetSocket_(socket);
}

- (JavaNetSocket *)deallocateWithBoolean:(jboolean)noNewStreams
                             withBoolean:(jboolean)released
                             withBoolean:(jboolean)streamFinished {
  return Okhttp3InternalConnectionStreamAllocation_deallocateWithBoolean_withBoolean_withBoolean_(self, noNewStreams, released, streamFinished);
}

- (void)cancel {
  id<Okhttp3InternalHttpHttpCodec> codecToCancel;
  Okhttp3InternalConnectionRealConnection *connectionToCancel;
  @synchronized(connectionPool_) {
    canceled_ = true;
    codecToCancel = codec_;
    connectionToCancel = connection_;
  }
  if (codecToCancel != nil) {
    [codecToCancel cancel];
  }
  else if (connectionToCancel != nil) {
    [connectionToCancel cancel];
  }
}

- (void)streamFailedWithJavaIoIOException:(JavaIoIOException *)e {
  JavaNetSocket *socket;
  jboolean noNewStreams = false;
  @synchronized(connectionPool_) {
    if ([e isKindOfClass:[Okhttp3InternalHttp2StreamResetException class]]) {
      Okhttp3InternalHttp2StreamResetException *streamResetException = (Okhttp3InternalHttp2StreamResetException *) cast_chk(e, [Okhttp3InternalHttp2StreamResetException class]);
      if (((Okhttp3InternalHttp2StreamResetException *) nil_chk(streamResetException))->errorCode_ == JreLoadEnum(Okhttp3InternalHttp2ErrorCode, REFUSED_STREAM)) {
        refusedStreamCount_++;
      }
      if (streamResetException->errorCode_ != JreLoadEnum(Okhttp3InternalHttp2ErrorCode, REFUSED_STREAM) || refusedStreamCount_ > 1) {
        noNewStreams = true;
        JreStrongAssign(&route_, nil);
      }
    }
    else if (connection_ != nil && (![connection_ isMultiplexed] || [e isKindOfClass:[Okhttp3InternalHttp2ConnectionShutdownException class]])) {
      noNewStreams = true;
      if (connection_->successCount_ == 0) {
        if (route_ != nil && e != nil) {
          [((Okhttp3InternalConnectionRouteSelector *) nil_chk(routeSelector_)) connectFailedWithOkhttp3Route:route_ withJavaIoIOException:e];
        }
        JreStrongAssign(&route_, nil);
      }
    }
    socket = Okhttp3InternalConnectionStreamAllocation_deallocateWithBoolean_withBoolean_withBoolean_(self, noNewStreams, false, true);
  }
  Okhttp3InternalUtil_closeQuietlyWithJavaNetSocket_(socket);
}

- (void)acquireWithOkhttp3InternalConnectionRealConnection:(Okhttp3InternalConnectionRealConnection *)connection {
  JreAssert(((JavaLangThread_holdsLockWithId_(connectionPool_))), (@"okhttp3/internal/connection/StreamAllocation.java:340 condition failed: assert (Thread.holdsLock(connectionPool));"));
  if (self->connection_ != nil) @throw create_JavaLangIllegalStateException_init();
  JreStrongAssign(&self->connection_, connection);
  [((id<JavaUtilList>) nil_chk(((Okhttp3InternalConnectionRealConnection *) nil_chk(connection))->allocations_)) addWithId:create_Okhttp3InternalConnectionStreamAllocation_StreamAllocationReference_initWithOkhttp3InternalConnectionStreamAllocation_withId_(self, callStackTrace_)];
}

- (void)release__WithOkhttp3InternalConnectionRealConnection:(Okhttp3InternalConnectionRealConnection *)connection {
  Okhttp3InternalConnectionStreamAllocation_release__WithOkhttp3InternalConnectionRealConnection_(self, connection);
}

- (JavaNetSocket *)releaseAndAcquireWithOkhttp3InternalConnectionRealConnection:(Okhttp3InternalConnectionRealConnection *)newConnection {
  JreAssert(((JavaLangThread_holdsLockWithId_(connectionPool_))), (@"okhttp3/internal/connection/StreamAllocation.java:368 condition failed: assert (Thread.holdsLock(connectionPool));"));
  if (codec_ != nil || [((id<JavaUtilList>) nil_chk(((Okhttp3InternalConnectionRealConnection *) nil_chk(connection_))->allocations_)) size] != 1) @throw create_JavaLangIllegalStateException_init();
  JavaLangRefReference *onlyAllocation = [((id<JavaUtilList>) nil_chk(((Okhttp3InternalConnectionRealConnection *) nil_chk(connection_))->allocations_)) getWithInt:0];
  JavaNetSocket *socket = Okhttp3InternalConnectionStreamAllocation_deallocateWithBoolean_withBoolean_withBoolean_(self, true, false, false);
  JreStrongAssign(&self->connection_, newConnection);
  [((Okhttp3InternalConnectionRealConnection *) nil_chk(newConnection))->allocations_ addWithId:onlyAllocation];
  return socket;
}

- (jboolean)hasMoreRoutes {
  return route_ != nil || [((Okhttp3InternalConnectionRouteSelector *) nil_chk(routeSelector_)) hasNext];
}

- (NSString *)description {
  Okhttp3InternalConnectionRealConnection *connection = [self connection];
  return connection != nil ? [connection description] : [((Okhttp3Address *) nil_chk(address_)) description];
}

- (void)dealloc {
  RELEASE_(address_);
  RELEASE_(route_);
  RELEASE_(connectionPool_);
  RELEASE_(callStackTrace_);
  RELEASE_(routeSelector_);
  RELEASE_(connection_);
  RELEASE_(codec_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalHttpHttpCodec;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalConnectionRealConnection;", 0x2, 3, 4, 5, -1, -1, -1 },
    { NULL, "LOkhttp3InternalConnectionRealConnection;", 0x2, 6, 7, 5, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalHttpHttpCodec;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalConnectionRouteDatabase;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3InternalConnectionRealConnection;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetSocket;", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 15, -1, -1, -1, -1 },
    { NULL, "LJavaNetSocket;", 0x1, 16, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 17, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3ConnectionPool:withOkhttp3Address:withId:);
  methods[1].selector = @selector(newStreamWithOkhttp3OkHttpClient:withBoolean:);
  methods[2].selector = @selector(findHealthyConnectionWithInt:withInt:withInt:withBoolean:withBoolean:);
  methods[3].selector = @selector(findConnectionWithInt:withInt:withInt:withBoolean:);
  methods[4].selector = @selector(streamFinishedWithBoolean:withOkhttp3InternalHttpHttpCodec:);
  methods[5].selector = @selector(codec);
  methods[6].selector = @selector(routeDatabase);
  methods[7].selector = @selector(connection);
  methods[8].selector = @selector(release__);
  methods[9].selector = @selector(noNewStreams);
  methods[10].selector = @selector(deallocateWithBoolean:withBoolean:withBoolean:);
  methods[11].selector = @selector(cancel);
  methods[12].selector = @selector(streamFailedWithJavaIoIOException:);
  methods[13].selector = @selector(acquireWithOkhttp3InternalConnectionRealConnection:);
  methods[14].selector = @selector(release__WithOkhttp3InternalConnectionRealConnection:);
  methods[15].selector = @selector(releaseAndAcquireWithOkhttp3InternalConnectionRealConnection:);
  methods[16].selector = @selector(hasMoreRoutes);
  methods[17].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "address_", "LOkhttp3Address;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "route_", "LOkhttp3Route;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "connectionPool_", "LOkhttp3ConnectionPool;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "callStackTrace_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "routeSelector_", "LOkhttp3InternalConnectionRouteSelector;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "refusedStreamCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "connection_", "LOkhttp3InternalConnectionRealConnection;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "released_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "canceled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "codec_", "LOkhttp3InternalHttpHttpCodec;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3ConnectionPool;LOkhttp3Address;LNSObject;", "newStream", "LOkhttp3OkHttpClient;Z", "findHealthyConnection", "IIIZZ", "LJavaIoIOException;", "findConnection", "IIIZ", "streamFinished", "ZLOkhttp3InternalHttpHttpCodec;", "release", "deallocate", "ZZZ", "streamFailed", "acquire", "LOkhttp3InternalConnectionRealConnection;", "releaseAndAcquire", "toString", "LOkhttp3InternalConnectionStreamAllocation_StreamAllocationReference;" };
  static const J2ObjcClassInfo _Okhttp3InternalConnectionStreamAllocation = { "StreamAllocation", "okhttp3.internal.connection", ptrTable, methods, fields, 7, 0x11, 18, 10, -1, 18, -1, -1, -1 };
  return &_Okhttp3InternalConnectionStreamAllocation;
}

@end

void Okhttp3InternalConnectionStreamAllocation_initWithOkhttp3ConnectionPool_withOkhttp3Address_withId_(Okhttp3InternalConnectionStreamAllocation *self, Okhttp3ConnectionPool *connectionPool, Okhttp3Address *address, id callStackTrace) {
  NSObject_init(self);
  JreStrongAssign(&self->connectionPool_, connectionPool);
  JreStrongAssign(&self->address_, address);
  JreStrongAssignAndConsume(&self->routeSelector_, new_Okhttp3InternalConnectionRouteSelector_initWithOkhttp3Address_withOkhttp3InternalConnectionRouteDatabase_(address, Okhttp3InternalConnectionStreamAllocation_routeDatabase(self)));
  JreStrongAssign(&self->callStackTrace_, callStackTrace);
}

Okhttp3InternalConnectionStreamAllocation *new_Okhttp3InternalConnectionStreamAllocation_initWithOkhttp3ConnectionPool_withOkhttp3Address_withId_(Okhttp3ConnectionPool *connectionPool, Okhttp3Address *address, id callStackTrace) {
  J2OBJC_NEW_IMPL(Okhttp3InternalConnectionStreamAllocation, initWithOkhttp3ConnectionPool_withOkhttp3Address_withId_, connectionPool, address, callStackTrace)
}

Okhttp3InternalConnectionStreamAllocation *create_Okhttp3InternalConnectionStreamAllocation_initWithOkhttp3ConnectionPool_withOkhttp3Address_withId_(Okhttp3ConnectionPool *connectionPool, Okhttp3Address *address, id callStackTrace) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalConnectionStreamAllocation, initWithOkhttp3ConnectionPool_withOkhttp3Address_withId_, connectionPool, address, callStackTrace)
}

Okhttp3InternalConnectionRealConnection *Okhttp3InternalConnectionStreamAllocation_findHealthyConnectionWithInt_withInt_withInt_withBoolean_withBoolean_(Okhttp3InternalConnectionStreamAllocation *self, jint connectTimeout, jint readTimeout, jint writeTimeout, jboolean connectionRetryEnabled, jboolean doExtensiveHealthChecks) {
  while (true) {
    Okhttp3InternalConnectionRealConnection *candidate = Okhttp3InternalConnectionStreamAllocation_findConnectionWithInt_withInt_withInt_withBoolean_(self, connectTimeout, readTimeout, writeTimeout, connectionRetryEnabled);
    @synchronized(self->connectionPool_) {
      if (((Okhttp3InternalConnectionRealConnection *) nil_chk(candidate))->successCount_ == 0) {
        return candidate;
      }
    }
    if (![candidate isHealthyWithBoolean:doExtensiveHealthChecks]) {
      [self noNewStreams];
      continue;
    }
    return candidate;
  }
}

Okhttp3InternalConnectionRealConnection *Okhttp3InternalConnectionStreamAllocation_findConnectionWithInt_withInt_withInt_withBoolean_(Okhttp3InternalConnectionStreamAllocation *self, jint connectTimeout, jint readTimeout, jint writeTimeout, jboolean connectionRetryEnabled) {
  Okhttp3Route *selectedRoute;
  @synchronized(self->connectionPool_) {
    if (self->released_) @throw create_JavaLangIllegalStateException_initWithNSString_(@"released");
    if (self->codec_ != nil) @throw create_JavaLangIllegalStateException_initWithNSString_(@"codec != null");
    if (self->canceled_) @throw create_JavaIoIOException_initWithNSString_(@"Canceled");
    Okhttp3InternalConnectionRealConnection *allocatedConnection = self->connection_;
    if (allocatedConnection != nil && !allocatedConnection->noNewStreams_) {
      return allocatedConnection;
    }
    [((Okhttp3InternalInternal *) nil_chk(JreLoadStatic(Okhttp3InternalInternal, instance))) getWithOkhttp3ConnectionPool:self->connectionPool_ withOkhttp3Address:self->address_ withOkhttp3InternalConnectionStreamAllocation:self];
    if (self->connection_ != nil) {
      return self->connection_;
    }
    selectedRoute = self->route_;
  }
  if (selectedRoute == nil) {
    selectedRoute = [((Okhttp3InternalConnectionRouteSelector *) nil_chk(self->routeSelector_)) next];
  }
  Okhttp3InternalConnectionRealConnection *result;
  @synchronized(self->connectionPool_) {
    JreStrongAssign(&self->route_, selectedRoute);
    self->refusedStreamCount_ = 0;
    result = create_Okhttp3InternalConnectionRealConnection_initWithOkhttp3ConnectionPool_withOkhttp3Route_(self->connectionPool_, selectedRoute);
    [self acquireWithOkhttp3InternalConnectionRealConnection:result];
    if (self->canceled_) @throw create_JavaIoIOException_initWithNSString_(@"Canceled");
  }
  [result connectWithInt:connectTimeout withInt:readTimeout withInt:writeTimeout withBoolean:connectionRetryEnabled];
  [((Okhttp3InternalConnectionRouteDatabase *) nil_chk(Okhttp3InternalConnectionStreamAllocation_routeDatabase(self))) connectedWithOkhttp3Route:[result route]];
  JavaNetSocket *socket = nil;
  @synchronized(self->connectionPool_) {
    [((Okhttp3InternalInternal *) nil_chk(JreLoadStatic(Okhttp3InternalInternal, instance))) putWithOkhttp3ConnectionPool:self->connectionPool_ withOkhttp3InternalConnectionRealConnection:result];
    if ([result isMultiplexed]) {
      socket = [((Okhttp3InternalInternal *) nil_chk(JreLoadStatic(Okhttp3InternalInternal, instance))) deduplicateWithOkhttp3ConnectionPool:self->connectionPool_ withOkhttp3Address:self->address_ withOkhttp3InternalConnectionStreamAllocation:self];
      result = self->connection_;
    }
  }
  Okhttp3InternalUtil_closeQuietlyWithJavaNetSocket_(socket);
  return result;
}

Okhttp3InternalConnectionRouteDatabase *Okhttp3InternalConnectionStreamAllocation_routeDatabase(Okhttp3InternalConnectionStreamAllocation *self) {
  return [((Okhttp3InternalInternal *) nil_chk(JreLoadStatic(Okhttp3InternalInternal, instance))) routeDatabaseWithOkhttp3ConnectionPool:self->connectionPool_];
}

JavaNetSocket *Okhttp3InternalConnectionStreamAllocation_deallocateWithBoolean_withBoolean_withBoolean_(Okhttp3InternalConnectionStreamAllocation *self, jboolean noNewStreams, jboolean released, jboolean streamFinished) {
  JreAssert(((JavaLangThread_holdsLockWithId_(self->connectionPool_))), (@"okhttp3/internal/connection/StreamAllocation.java:259 condition failed: assert (Thread.holdsLock(connectionPool));"));
  if (streamFinished) {
    JreStrongAssign(&self->codec_, nil);
  }
  if (released) {
    self->released_ = true;
  }
  JavaNetSocket *socket = nil;
  if (self->connection_ != nil) {
    if (noNewStreams) {
      self->connection_->noNewStreams_ = true;
    }
    if (self->codec_ == nil && (self->released_ || self->connection_->noNewStreams_)) {
      Okhttp3InternalConnectionStreamAllocation_release__WithOkhttp3InternalConnectionRealConnection_(self, self->connection_);
      if ([((id<JavaUtilList>) nil_chk(((Okhttp3InternalConnectionRealConnection *) nil_chk(self->connection_))->allocations_)) isEmpty]) {
        ((Okhttp3InternalConnectionRealConnection *) nil_chk(self->connection_))->idleAtNanos_ = JavaLangSystem_nanoTime();
        if ([((Okhttp3InternalInternal *) nil_chk(JreLoadStatic(Okhttp3InternalInternal, instance))) connectionBecameIdleWithOkhttp3ConnectionPool:self->connectionPool_ withOkhttp3InternalConnectionRealConnection:self->connection_]) {
          socket = [((Okhttp3InternalConnectionRealConnection *) nil_chk(self->connection_)) socket];
        }
      }
      JreStrongAssign(&self->connection_, nil);
    }
  }
  return socket;
}

void Okhttp3InternalConnectionStreamAllocation_release__WithOkhttp3InternalConnectionRealConnection_(Okhttp3InternalConnectionStreamAllocation *self, Okhttp3InternalConnectionRealConnection *connection) {
  for (jint i = 0, size = [((id<JavaUtilList>) nil_chk(((Okhttp3InternalConnectionRealConnection *) nil_chk(connection))->allocations_)) size]; i < size; i++) {
    JavaLangRefReference *reference = [connection->allocations_ getWithInt:i];
    if ([((JavaLangRefReference *) nil_chk(reference)) get] == self) {
      [connection->allocations_ removeWithInt:i];
      return;
    }
  }
  @throw create_JavaLangIllegalStateException_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalConnectionStreamAllocation)

@implementation Okhttp3InternalConnectionStreamAllocation_StreamAllocationReference

- (instancetype)initWithOkhttp3InternalConnectionStreamAllocation:(Okhttp3InternalConnectionStreamAllocation *)referent
                                                           withId:(id)callStackTrace {
  Okhttp3InternalConnectionStreamAllocation_StreamAllocationReference_initWithOkhttp3InternalConnectionStreamAllocation_withId_(self, referent, callStackTrace);
  return self;
}

- (void)dealloc {
  JreCheckFinalize(self, [Okhttp3InternalConnectionStreamAllocation_StreamAllocationReference class]);
  RELEASE_(callStackTrace_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalConnectionStreamAllocation:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "callStackTrace_", "LNSObject;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3InternalConnectionStreamAllocation;LNSObject;", "LOkhttp3InternalConnectionStreamAllocation;", "Ljava/lang/ref/WeakReference<Lokhttp3/internal/connection/StreamAllocation;>;" };
  static const J2ObjcClassInfo _Okhttp3InternalConnectionStreamAllocation_StreamAllocationReference = { "StreamAllocationReference", "okhttp3.internal.connection", ptrTable, methods, fields, 7, 0x19, 1, 1, 1, -1, -1, 2, -1 };
  return &_Okhttp3InternalConnectionStreamAllocation_StreamAllocationReference;
}

@end

void Okhttp3InternalConnectionStreamAllocation_StreamAllocationReference_initWithOkhttp3InternalConnectionStreamAllocation_withId_(Okhttp3InternalConnectionStreamAllocation_StreamAllocationReference *self, Okhttp3InternalConnectionStreamAllocation *referent, id callStackTrace) {
  JavaLangRefWeakReference_initWithId_(self, referent);
  JreStrongAssign(&self->callStackTrace_, callStackTrace);
}

Okhttp3InternalConnectionStreamAllocation_StreamAllocationReference *new_Okhttp3InternalConnectionStreamAllocation_StreamAllocationReference_initWithOkhttp3InternalConnectionStreamAllocation_withId_(Okhttp3InternalConnectionStreamAllocation *referent, id callStackTrace) {
  J2OBJC_NEW_IMPL(Okhttp3InternalConnectionStreamAllocation_StreamAllocationReference, initWithOkhttp3InternalConnectionStreamAllocation_withId_, referent, callStackTrace)
}

Okhttp3InternalConnectionStreamAllocation_StreamAllocationReference *create_Okhttp3InternalConnectionStreamAllocation_StreamAllocationReference_initWithOkhttp3InternalConnectionStreamAllocation_withId_(Okhttp3InternalConnectionStreamAllocation *referent, id callStackTrace) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalConnectionStreamAllocation_StreamAllocationReference, initWithOkhttp3InternalConnectionStreamAllocation_withId_, referent, callStackTrace)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalConnectionStreamAllocation_StreamAllocationReference)
