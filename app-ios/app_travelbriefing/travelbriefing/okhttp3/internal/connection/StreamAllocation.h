//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okhttp3/internal/connection/StreamAllocation.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Okhttp3InternalConnectionStreamAllocation")
#ifdef RESTRICT_Okhttp3InternalConnectionStreamAllocation
#define INCLUDE_ALL_Okhttp3InternalConnectionStreamAllocation 0
#else
#define INCLUDE_ALL_Okhttp3InternalConnectionStreamAllocation 1
#endif
#undef RESTRICT_Okhttp3InternalConnectionStreamAllocation

#if !defined (Okhttp3InternalConnectionStreamAllocation_) && (INCLUDE_ALL_Okhttp3InternalConnectionStreamAllocation || defined(INCLUDE_Okhttp3InternalConnectionStreamAllocation))
#define Okhttp3InternalConnectionStreamAllocation_

@class JavaIoIOException;
@class JavaNetSocket;
@class Okhttp3Address;
@class Okhttp3ConnectionPool;
@class Okhttp3InternalConnectionRealConnection;
@class Okhttp3OkHttpClient;
@protocol Okhttp3InternalHttpHttpCodec;

@interface Okhttp3InternalConnectionStreamAllocation : NSObject {
 @public
  Okhttp3Address *address_;
}

#pragma mark Public

- (instancetype)initWithOkhttp3ConnectionPool:(Okhttp3ConnectionPool *)connectionPool
                           withOkhttp3Address:(Okhttp3Address *)address
                                       withId:(id)callStackTrace;

- (void)acquireWithOkhttp3InternalConnectionRealConnection:(Okhttp3InternalConnectionRealConnection *)connection;

- (void)cancel;

- (id<Okhttp3InternalHttpHttpCodec>)codec;

- (Okhttp3InternalConnectionRealConnection *)connection;

- (jboolean)hasMoreRoutes;

- (id<Okhttp3InternalHttpHttpCodec>)newStreamWithOkhttp3OkHttpClient:(Okhttp3OkHttpClient *)client
                                                         withBoolean:(jboolean)doExtensiveHealthChecks OBJC_METHOD_FAMILY_NONE;

- (void)noNewStreams;

- (void)release__;

- (JavaNetSocket *)releaseAndAcquireWithOkhttp3InternalConnectionRealConnection:(Okhttp3InternalConnectionRealConnection *)newConnection;

- (void)streamFailedWithJavaIoIOException:(JavaIoIOException *)e;

- (void)streamFinishedWithBoolean:(jboolean)noNewStreams
 withOkhttp3InternalHttpHttpCodec:(id<Okhttp3InternalHttpHttpCodec>)codec;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalConnectionStreamAllocation)

J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionStreamAllocation, address_, Okhttp3Address *)

FOUNDATION_EXPORT void Okhttp3InternalConnectionStreamAllocation_initWithOkhttp3ConnectionPool_withOkhttp3Address_withId_(Okhttp3InternalConnectionStreamAllocation *self, Okhttp3ConnectionPool *connectionPool, Okhttp3Address *address, id callStackTrace);

FOUNDATION_EXPORT Okhttp3InternalConnectionStreamAllocation *new_Okhttp3InternalConnectionStreamAllocation_initWithOkhttp3ConnectionPool_withOkhttp3Address_withId_(Okhttp3ConnectionPool *connectionPool, Okhttp3Address *address, id callStackTrace) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3InternalConnectionStreamAllocation *create_Okhttp3InternalConnectionStreamAllocation_initWithOkhttp3ConnectionPool_withOkhttp3Address_withId_(Okhttp3ConnectionPool *connectionPool, Okhttp3Address *address, id callStackTrace);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalConnectionStreamAllocation)

#endif

#if !defined (Okhttp3InternalConnectionStreamAllocation_StreamAllocationReference_) && (INCLUDE_ALL_Okhttp3InternalConnectionStreamAllocation || defined(INCLUDE_Okhttp3InternalConnectionStreamAllocation_StreamAllocationReference))
#define Okhttp3InternalConnectionStreamAllocation_StreamAllocationReference_

#define RESTRICT_JavaLangRefWeakReference 1
#define INCLUDE_JavaLangRefWeakReference 1
#include "java/lang/ref/WeakReference.h"

@class Okhttp3InternalConnectionStreamAllocation;

@interface Okhttp3InternalConnectionStreamAllocation_StreamAllocationReference : JavaLangRefWeakReference {
 @public
  id callStackTrace_;
}

#pragma mark Public

- (Okhttp3InternalConnectionStreamAllocation *)get;

#pragma mark Package-Private

- (instancetype)initWithOkhttp3InternalConnectionStreamAllocation:(Okhttp3InternalConnectionStreamAllocation *)referent
                                                           withId:(id)callStackTrace;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalConnectionStreamAllocation_StreamAllocationReference)

J2OBJC_FIELD_SETTER(Okhttp3InternalConnectionStreamAllocation_StreamAllocationReference, callStackTrace_, id)

FOUNDATION_EXPORT void Okhttp3InternalConnectionStreamAllocation_StreamAllocationReference_initWithOkhttp3InternalConnectionStreamAllocation_withId_(Okhttp3InternalConnectionStreamAllocation_StreamAllocationReference *self, Okhttp3InternalConnectionStreamAllocation *referent, id callStackTrace);

FOUNDATION_EXPORT Okhttp3InternalConnectionStreamAllocation_StreamAllocationReference *new_Okhttp3InternalConnectionStreamAllocation_StreamAllocationReference_initWithOkhttp3InternalConnectionStreamAllocation_withId_(Okhttp3InternalConnectionStreamAllocation *referent, id callStackTrace) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3InternalConnectionStreamAllocation_StreamAllocationReference *create_Okhttp3InternalConnectionStreamAllocation_StreamAllocationReference_initWithOkhttp3InternalConnectionStreamAllocation_withId_(Okhttp3InternalConnectionStreamAllocation *referent, id callStackTrace);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalConnectionStreamAllocation_StreamAllocationReference)

#endif

#pragma pop_macro("INCLUDE_ALL_Okhttp3InternalConnectionStreamAllocation")
