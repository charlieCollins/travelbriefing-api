//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okhttp3/internal/http1/Http1Codec.java
//

#include "J2ObjC_source.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/net/ProtocolException.h"
#include "java/net/Proxy.h"
#include "java/util/concurrent/TimeUnit.h"
#include "okhttp3/CookieJar.h"
#include "okhttp3/Headers.h"
#include "okhttp3/HttpUrl.h"
#include "okhttp3/OkHttpClient.h"
#include "okhttp3/Protocol.h"
#include "okhttp3/Request.h"
#include "okhttp3/Response.h"
#include "okhttp3/ResponseBody.h"
#include "okhttp3/Route.h"
#include "okhttp3/internal/Internal.h"
#include "okhttp3/internal/Util.h"
#include "okhttp3/internal/connection/RealConnection.h"
#include "okhttp3/internal/connection/StreamAllocation.h"
#include "okhttp3/internal/http/HttpCodec.h"
#include "okhttp3/internal/http/HttpHeaders.h"
#include "okhttp3/internal/http/RealResponseBody.h"
#include "okhttp3/internal/http/RequestLine.h"
#include "okhttp3/internal/http/StatusLine.h"
#include "okhttp3/internal/http1/Http1Codec.h"
#include "okio/Buffer.h"
#include "okio/BufferedSink.h"
#include "okio/BufferedSource.h"
#include "okio/ForwardingTimeout.h"
#include "okio/Okio.h"
#include "okio/Sink.h"
#include "okio/Source.h"
#include "okio/Timeout.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface Okhttp3InternalHttp1Http1Codec ()

- (id<OkioSource>)getTransferStreamWithOkhttp3Response:(Okhttp3Response *)response;

@end

inline jint Okhttp3InternalHttp1Http1Codec_get_STATE_IDLE();
#define Okhttp3InternalHttp1Http1Codec_STATE_IDLE 0
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3InternalHttp1Http1Codec, STATE_IDLE, jint)

inline jint Okhttp3InternalHttp1Http1Codec_get_STATE_OPEN_REQUEST_BODY();
#define Okhttp3InternalHttp1Http1Codec_STATE_OPEN_REQUEST_BODY 1
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3InternalHttp1Http1Codec, STATE_OPEN_REQUEST_BODY, jint)

inline jint Okhttp3InternalHttp1Http1Codec_get_STATE_WRITING_REQUEST_BODY();
#define Okhttp3InternalHttp1Http1Codec_STATE_WRITING_REQUEST_BODY 2
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3InternalHttp1Http1Codec, STATE_WRITING_REQUEST_BODY, jint)

inline jint Okhttp3InternalHttp1Http1Codec_get_STATE_READ_RESPONSE_HEADERS();
#define Okhttp3InternalHttp1Http1Codec_STATE_READ_RESPONSE_HEADERS 3
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3InternalHttp1Http1Codec, STATE_READ_RESPONSE_HEADERS, jint)

inline jint Okhttp3InternalHttp1Http1Codec_get_STATE_OPEN_RESPONSE_BODY();
#define Okhttp3InternalHttp1Http1Codec_STATE_OPEN_RESPONSE_BODY 4
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3InternalHttp1Http1Codec, STATE_OPEN_RESPONSE_BODY, jint)

inline jint Okhttp3InternalHttp1Http1Codec_get_STATE_READING_RESPONSE_BODY();
#define Okhttp3InternalHttp1Http1Codec_STATE_READING_RESPONSE_BODY 5
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3InternalHttp1Http1Codec, STATE_READING_RESPONSE_BODY, jint)

inline jint Okhttp3InternalHttp1Http1Codec_get_STATE_CLOSED();
#define Okhttp3InternalHttp1Http1Codec_STATE_CLOSED 6
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3InternalHttp1Http1Codec, STATE_CLOSED, jint)

__attribute__((unused)) static id<OkioSource> Okhttp3InternalHttp1Http1Codec_getTransferStreamWithOkhttp3Response_(Okhttp3InternalHttp1Http1Codec *self, Okhttp3Response *response);

@interface Okhttp3InternalHttp1Http1Codec_FixedLengthSink : NSObject < OkioSink > {
 @public
  Okhttp3InternalHttp1Http1Codec *this$0_;
  OkioForwardingTimeout *timeout_;
  jboolean closed_;
  jlong bytesRemaining_;
}

- (instancetype)initWithOkhttp3InternalHttp1Http1Codec:(Okhttp3InternalHttp1Http1Codec *)outer$
                                              withLong:(jlong)bytesRemaining;

- (OkioTimeout *)timeout;

- (void)writeWithOkioBuffer:(OkioBuffer *)source
                   withLong:(jlong)byteCount;

- (void)flush;

- (void)close;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalHttp1Http1Codec_FixedLengthSink)

J2OBJC_FIELD_SETTER(Okhttp3InternalHttp1Http1Codec_FixedLengthSink, timeout_, OkioForwardingTimeout *)

__attribute__((unused)) static void Okhttp3InternalHttp1Http1Codec_FixedLengthSink_initWithOkhttp3InternalHttp1Http1Codec_withLong_(Okhttp3InternalHttp1Http1Codec_FixedLengthSink *self, Okhttp3InternalHttp1Http1Codec *outer$, jlong bytesRemaining);

__attribute__((unused)) static Okhttp3InternalHttp1Http1Codec_FixedLengthSink *new_Okhttp3InternalHttp1Http1Codec_FixedLengthSink_initWithOkhttp3InternalHttp1Http1Codec_withLong_(Okhttp3InternalHttp1Http1Codec *outer$, jlong bytesRemaining) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalHttp1Http1Codec_FixedLengthSink *create_Okhttp3InternalHttp1Http1Codec_FixedLengthSink_initWithOkhttp3InternalHttp1Http1Codec_withLong_(Okhttp3InternalHttp1Http1Codec *outer$, jlong bytesRemaining);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalHttp1Http1Codec_FixedLengthSink)

@interface Okhttp3InternalHttp1Http1Codec_ChunkedSink : NSObject < OkioSink > {
 @public
  Okhttp3InternalHttp1Http1Codec *this$0_;
  OkioForwardingTimeout *timeout_;
  jboolean closed_;
}

- (instancetype)initWithOkhttp3InternalHttp1Http1Codec:(Okhttp3InternalHttp1Http1Codec *)outer$;

- (OkioTimeout *)timeout;

- (void)writeWithOkioBuffer:(OkioBuffer *)source
                   withLong:(jlong)byteCount;

- (void)flush;

- (void)close;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalHttp1Http1Codec_ChunkedSink)

J2OBJC_FIELD_SETTER(Okhttp3InternalHttp1Http1Codec_ChunkedSink, timeout_, OkioForwardingTimeout *)

__attribute__((unused)) static void Okhttp3InternalHttp1Http1Codec_ChunkedSink_initWithOkhttp3InternalHttp1Http1Codec_(Okhttp3InternalHttp1Http1Codec_ChunkedSink *self, Okhttp3InternalHttp1Http1Codec *outer$);

__attribute__((unused)) static Okhttp3InternalHttp1Http1Codec_ChunkedSink *new_Okhttp3InternalHttp1Http1Codec_ChunkedSink_initWithOkhttp3InternalHttp1Http1Codec_(Okhttp3InternalHttp1Http1Codec *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalHttp1Http1Codec_ChunkedSink *create_Okhttp3InternalHttp1Http1Codec_ChunkedSink_initWithOkhttp3InternalHttp1Http1Codec_(Okhttp3InternalHttp1Http1Codec *outer$);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalHttp1Http1Codec_ChunkedSink)

@interface Okhttp3InternalHttp1Http1Codec_AbstractSource : NSObject < OkioSource > {
 @public
  Okhttp3InternalHttp1Http1Codec *this$0_;
  OkioForwardingTimeout *timeout_;
  jboolean closed_;
}

- (instancetype)initWithOkhttp3InternalHttp1Http1Codec:(Okhttp3InternalHttp1Http1Codec *)outer$;

- (OkioTimeout *)timeout;

- (void)endOfInputWithBoolean:(jboolean)reuseConnection;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalHttp1Http1Codec_AbstractSource)

J2OBJC_FIELD_SETTER(Okhttp3InternalHttp1Http1Codec_AbstractSource, timeout_, OkioForwardingTimeout *)

__attribute__((unused)) static void Okhttp3InternalHttp1Http1Codec_AbstractSource_initWithOkhttp3InternalHttp1Http1Codec_(Okhttp3InternalHttp1Http1Codec_AbstractSource *self, Okhttp3InternalHttp1Http1Codec *outer$);

__attribute__((unused)) static void Okhttp3InternalHttp1Http1Codec_AbstractSource_endOfInputWithBoolean_(Okhttp3InternalHttp1Http1Codec_AbstractSource *self, jboolean reuseConnection);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalHttp1Http1Codec_AbstractSource)

@interface Okhttp3InternalHttp1Http1Codec_FixedLengthSource : Okhttp3InternalHttp1Http1Codec_AbstractSource {
 @public
  Okhttp3InternalHttp1Http1Codec *this$1_;
  jlong bytesRemaining_;
}

- (instancetype)initWithOkhttp3InternalHttp1Http1Codec:(Okhttp3InternalHttp1Http1Codec *)outer$
                                              withLong:(jlong)length;

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount;

- (void)close;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalHttp1Http1Codec_FixedLengthSource)

__attribute__((unused)) static void Okhttp3InternalHttp1Http1Codec_FixedLengthSource_initWithOkhttp3InternalHttp1Http1Codec_withLong_(Okhttp3InternalHttp1Http1Codec_FixedLengthSource *self, Okhttp3InternalHttp1Http1Codec *outer$, jlong length);

__attribute__((unused)) static Okhttp3InternalHttp1Http1Codec_FixedLengthSource *new_Okhttp3InternalHttp1Http1Codec_FixedLengthSource_initWithOkhttp3InternalHttp1Http1Codec_withLong_(Okhttp3InternalHttp1Http1Codec *outer$, jlong length) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalHttp1Http1Codec_FixedLengthSource *create_Okhttp3InternalHttp1Http1Codec_FixedLengthSource_initWithOkhttp3InternalHttp1Http1Codec_withLong_(Okhttp3InternalHttp1Http1Codec *outer$, jlong length);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalHttp1Http1Codec_FixedLengthSource)

@interface Okhttp3InternalHttp1Http1Codec_ChunkedSource : Okhttp3InternalHttp1Http1Codec_AbstractSource {
 @public
  Okhttp3InternalHttp1Http1Codec *this$1_;
  Okhttp3HttpUrl *url_;
  jlong bytesRemainingInChunk_;
  jboolean hasMoreChunks_;
}

- (instancetype)initWithOkhttp3InternalHttp1Http1Codec:(Okhttp3InternalHttp1Http1Codec *)outer$
                                    withOkhttp3HttpUrl:(Okhttp3HttpUrl *)url;

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount;

- (void)readChunkSize;

- (void)close;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalHttp1Http1Codec_ChunkedSource)

J2OBJC_FIELD_SETTER(Okhttp3InternalHttp1Http1Codec_ChunkedSource, url_, Okhttp3HttpUrl *)

inline jlong Okhttp3InternalHttp1Http1Codec_ChunkedSource_get_NO_CHUNK_YET();
#define Okhttp3InternalHttp1Http1Codec_ChunkedSource_NO_CHUNK_YET -1LL
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3InternalHttp1Http1Codec_ChunkedSource, NO_CHUNK_YET, jlong)

__attribute__((unused)) static void Okhttp3InternalHttp1Http1Codec_ChunkedSource_initWithOkhttp3InternalHttp1Http1Codec_withOkhttp3HttpUrl_(Okhttp3InternalHttp1Http1Codec_ChunkedSource *self, Okhttp3InternalHttp1Http1Codec *outer$, Okhttp3HttpUrl *url);

__attribute__((unused)) static Okhttp3InternalHttp1Http1Codec_ChunkedSource *new_Okhttp3InternalHttp1Http1Codec_ChunkedSource_initWithOkhttp3InternalHttp1Http1Codec_withOkhttp3HttpUrl_(Okhttp3InternalHttp1Http1Codec *outer$, Okhttp3HttpUrl *url) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalHttp1Http1Codec_ChunkedSource *create_Okhttp3InternalHttp1Http1Codec_ChunkedSource_initWithOkhttp3InternalHttp1Http1Codec_withOkhttp3HttpUrl_(Okhttp3InternalHttp1Http1Codec *outer$, Okhttp3HttpUrl *url);

__attribute__((unused)) static void Okhttp3InternalHttp1Http1Codec_ChunkedSource_readChunkSize(Okhttp3InternalHttp1Http1Codec_ChunkedSource *self);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalHttp1Http1Codec_ChunkedSource)

@interface Okhttp3InternalHttp1Http1Codec_UnknownLengthSource : Okhttp3InternalHttp1Http1Codec_AbstractSource {
 @public
  Okhttp3InternalHttp1Http1Codec *this$1_;
  jboolean inputExhausted_;
}

- (instancetype)initWithOkhttp3InternalHttp1Http1Codec:(Okhttp3InternalHttp1Http1Codec *)outer$;

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount;

- (void)close;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalHttp1Http1Codec_UnknownLengthSource)

__attribute__((unused)) static void Okhttp3InternalHttp1Http1Codec_UnknownLengthSource_initWithOkhttp3InternalHttp1Http1Codec_(Okhttp3InternalHttp1Http1Codec_UnknownLengthSource *self, Okhttp3InternalHttp1Http1Codec *outer$);

__attribute__((unused)) static Okhttp3InternalHttp1Http1Codec_UnknownLengthSource *new_Okhttp3InternalHttp1Http1Codec_UnknownLengthSource_initWithOkhttp3InternalHttp1Http1Codec_(Okhttp3InternalHttp1Http1Codec *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalHttp1Http1Codec_UnknownLengthSource *create_Okhttp3InternalHttp1Http1Codec_UnknownLengthSource_initWithOkhttp3InternalHttp1Http1Codec_(Okhttp3InternalHttp1Http1Codec *outer$);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalHttp1Http1Codec_UnknownLengthSource)

@implementation Okhttp3InternalHttp1Http1Codec

- (instancetype)initWithOkhttp3OkHttpClient:(Okhttp3OkHttpClient *)client
withOkhttp3InternalConnectionStreamAllocation:(Okhttp3InternalConnectionStreamAllocation *)streamAllocation
                     withOkioBufferedSource:(id<OkioBufferedSource>)source
                       withOkioBufferedSink:(id<OkioBufferedSink>)sink {
  Okhttp3InternalHttp1Http1Codec_initWithOkhttp3OkHttpClient_withOkhttp3InternalConnectionStreamAllocation_withOkioBufferedSource_withOkioBufferedSink_(self, client, streamAllocation, source, sink);
  return self;
}

- (id<OkioSink>)createRequestBodyWithOkhttp3Request:(Okhttp3Request *)request
                                           withLong:(jlong)contentLength {
  if ([@"chunked" java_equalsIgnoreCase:[((Okhttp3Request *) nil_chk(request)) headerWithNSString:@"Transfer-Encoding"]]) {
    return [self newChunkedSink];
  }
  if (contentLength != -1) {
    return [self newFixedLengthSinkWithLong:contentLength];
  }
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"Cannot stream a request body without chunked encoding or a known content length!");
}

- (void)cancel {
  Okhttp3InternalConnectionRealConnection *connection = [((Okhttp3InternalConnectionStreamAllocation *) nil_chk(streamAllocation_)) connection];
  if (connection != nil) [connection cancel];
}

- (void)writeRequestHeadersWithOkhttp3Request:(Okhttp3Request *)request {
  NSString *requestLine = Okhttp3InternalHttpRequestLine_getWithOkhttp3Request_withJavaNetProxy_Type_(request, [((JavaNetProxy *) nil_chk([((Okhttp3Route *) nil_chk([((Okhttp3InternalConnectionRealConnection *) nil_chk([((Okhttp3InternalConnectionStreamAllocation *) nil_chk(streamAllocation_)) connection])) route])) proxy])) type]);
  [self writeRequestWithOkhttp3Headers:[((Okhttp3Request *) nil_chk(request)) headers] withNSString:requestLine];
}

- (Okhttp3ResponseBody *)openResponseBodyWithOkhttp3Response:(Okhttp3Response *)response {
  id<OkioSource> source = Okhttp3InternalHttp1Http1Codec_getTransferStreamWithOkhttp3Response_(self, response);
  return create_Okhttp3InternalHttpRealResponseBody_initWithOkhttp3Headers_withOkioBufferedSource_([((Okhttp3Response *) nil_chk(response)) headers], OkioOkio_bufferWithOkioSource_(source));
}

- (id<OkioSource>)getTransferStreamWithOkhttp3Response:(Okhttp3Response *)response {
  return Okhttp3InternalHttp1Http1Codec_getTransferStreamWithOkhttp3Response_(self, response);
}

- (jboolean)isClosed {
  return state_ == Okhttp3InternalHttp1Http1Codec_STATE_CLOSED;
}

- (void)flushRequest {
  [((id<OkioBufferedSink>) nil_chk(sink_)) flush];
}

- (void)finishRequest {
  [((id<OkioBufferedSink>) nil_chk(sink_)) flush];
}

- (void)writeRequestWithOkhttp3Headers:(Okhttp3Headers *)headers
                          withNSString:(NSString *)requestLine {
  if (state_ != Okhttp3InternalHttp1Http1Codec_STATE_IDLE) @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"state: ", state_));
  [((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk(sink_)) writeUtf8WithNSString:requestLine])) writeUtf8WithNSString:@"\x0d\n"];
  for (jint i = 0, size = [((Okhttp3Headers *) nil_chk(headers)) size]; i < size; i++) {
    [((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk([((id<OkioBufferedSink>) nil_chk([sink_ writeUtf8WithNSString:[headers nameWithInt:i]])) writeUtf8WithNSString:@": "])) writeUtf8WithNSString:[headers valueWithInt:i]])) writeUtf8WithNSString:@"\x0d\n"];
  }
  [sink_ writeUtf8WithNSString:@"\x0d\n"];
  state_ = Okhttp3InternalHttp1Http1Codec_STATE_OPEN_REQUEST_BODY;
}

- (Okhttp3Response_Builder *)readResponseHeadersWithBoolean:(jboolean)expectContinue {
  if (state_ != Okhttp3InternalHttp1Http1Codec_STATE_OPEN_REQUEST_BODY && state_ != Okhttp3InternalHttp1Http1Codec_STATE_READ_RESPONSE_HEADERS) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"state: ", state_));
  }
  @try {
    Okhttp3InternalHttpStatusLine *statusLine = Okhttp3InternalHttpStatusLine_parseWithNSString_([((id<OkioBufferedSource>) nil_chk(source_)) readUtf8LineStrict]);
    Okhttp3Response_Builder *responseBuilder = [((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([((Okhttp3Response_Builder *) nil_chk([create_Okhttp3Response_Builder_init() protocolWithOkhttp3Protocol:((Okhttp3InternalHttpStatusLine *) nil_chk(statusLine))->protocol_])) codeWithInt:statusLine->code_])) messageWithNSString:statusLine->message_])) headersWithOkhttp3Headers:[self readHeaders]];
    if (expectContinue && statusLine->code_ == Okhttp3InternalHttpStatusLine_HTTP_CONTINUE) {
      return nil;
    }
    state_ = Okhttp3InternalHttp1Http1Codec_STATE_OPEN_RESPONSE_BODY;
    return responseBuilder;
  }
  @catch (JavaIoEOFException *e) {
    JavaIoIOException *exception = create_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"unexpected end of stream on ", streamAllocation_));
    [exception initCauseWithNSException:e];
    @throw exception;
  }
}

- (Okhttp3Headers *)readHeaders {
  Okhttp3Headers_Builder *headers = create_Okhttp3Headers_Builder_init();
  for (NSString *line; ((jint) [(line = [((id<OkioBufferedSource>) nil_chk(source_)) readUtf8LineStrict]) length]) != 0; ) {
    [((Okhttp3InternalInternal *) nil_chk(JreLoadStatic(Okhttp3InternalInternal, instance))) addLenientWithOkhttp3Headers_Builder:headers withNSString:line];
  }
  return [headers build];
}

- (id<OkioSink>)newChunkedSink {
  if (state_ != Okhttp3InternalHttp1Http1Codec_STATE_OPEN_REQUEST_BODY) @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"state: ", state_));
  state_ = Okhttp3InternalHttp1Http1Codec_STATE_WRITING_REQUEST_BODY;
  return create_Okhttp3InternalHttp1Http1Codec_ChunkedSink_initWithOkhttp3InternalHttp1Http1Codec_(self);
}

- (id<OkioSink>)newFixedLengthSinkWithLong:(jlong)contentLength {
  if (state_ != Okhttp3InternalHttp1Http1Codec_STATE_OPEN_REQUEST_BODY) @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"state: ", state_));
  state_ = Okhttp3InternalHttp1Http1Codec_STATE_WRITING_REQUEST_BODY;
  return create_Okhttp3InternalHttp1Http1Codec_FixedLengthSink_initWithOkhttp3InternalHttp1Http1Codec_withLong_(self, contentLength);
}

- (id<OkioSource>)newFixedLengthSourceWithLong:(jlong)length {
  if (state_ != Okhttp3InternalHttp1Http1Codec_STATE_OPEN_RESPONSE_BODY) @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"state: ", state_));
  state_ = Okhttp3InternalHttp1Http1Codec_STATE_READING_RESPONSE_BODY;
  return create_Okhttp3InternalHttp1Http1Codec_FixedLengthSource_initWithOkhttp3InternalHttp1Http1Codec_withLong_(self, length);
}

- (id<OkioSource>)newChunkedSourceWithOkhttp3HttpUrl:(Okhttp3HttpUrl *)url {
  if (state_ != Okhttp3InternalHttp1Http1Codec_STATE_OPEN_RESPONSE_BODY) @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"state: ", state_));
  state_ = Okhttp3InternalHttp1Http1Codec_STATE_READING_RESPONSE_BODY;
  return create_Okhttp3InternalHttp1Http1Codec_ChunkedSource_initWithOkhttp3InternalHttp1Http1Codec_withOkhttp3HttpUrl_(self, url);
}

- (id<OkioSource>)newUnknownLengthSource {
  if (state_ != Okhttp3InternalHttp1Http1Codec_STATE_OPEN_RESPONSE_BODY) @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"state: ", state_));
  if (streamAllocation_ == nil) @throw create_JavaLangIllegalStateException_initWithNSString_(@"streamAllocation == null");
  state_ = Okhttp3InternalHttp1Http1Codec_STATE_READING_RESPONSE_BODY;
  [streamAllocation_ noNewStreams];
  return create_Okhttp3InternalHttp1Http1Codec_UnknownLengthSource_initWithOkhttp3InternalHttp1Http1Codec_(self);
}

- (void)detachTimeoutWithOkioForwardingTimeout:(OkioForwardingTimeout *)timeout {
  OkioTimeout *oldDelegate = [((OkioForwardingTimeout *) nil_chk(timeout)) delegate];
  [timeout setDelegateWithOkioTimeout:JreLoadStatic(OkioTimeout, NONE)];
  [((OkioTimeout *) nil_chk(oldDelegate)) clearDeadline];
  [oldDelegate clearTimeout];
}

- (void)dealloc {
  RELEASE_(client_);
  RELEASE_(streamAllocation_);
  RELEASE_(source_);
  RELEASE_(sink_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOkioSink;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "LOkhttp3ResponseBody;", 0x1, 6, 7, 5, -1, -1, -1 },
    { NULL, "LOkioSource;", 0x2, 8, 7, 5, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, 5, -1, -1, -1 },
    { NULL, "LOkhttp3Response_Builder;", 0x1, 11, 12, 5, -1, -1, -1 },
    { NULL, "LOkhttp3Headers;", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "LOkioSink;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkioSink;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LOkioSource;", 0x1, 15, 14, 5, -1, -1, -1 },
    { NULL, "LOkioSource;", 0x1, 16, 17, 5, -1, -1, -1 },
    { NULL, "LOkioSource;", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "V", 0x0, 18, 19, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3OkHttpClient:withOkhttp3InternalConnectionStreamAllocation:withOkioBufferedSource:withOkioBufferedSink:);
  methods[1].selector = @selector(createRequestBodyWithOkhttp3Request:withLong:);
  methods[2].selector = @selector(cancel);
  methods[3].selector = @selector(writeRequestHeadersWithOkhttp3Request:);
  methods[4].selector = @selector(openResponseBodyWithOkhttp3Response:);
  methods[5].selector = @selector(getTransferStreamWithOkhttp3Response:);
  methods[6].selector = @selector(isClosed);
  methods[7].selector = @selector(flushRequest);
  methods[8].selector = @selector(finishRequest);
  methods[9].selector = @selector(writeRequestWithOkhttp3Headers:withNSString:);
  methods[10].selector = @selector(readResponseHeadersWithBoolean:);
  methods[11].selector = @selector(readHeaders);
  methods[12].selector = @selector(newChunkedSink);
  methods[13].selector = @selector(newFixedLengthSinkWithLong:);
  methods[14].selector = @selector(newFixedLengthSourceWithLong:);
  methods[15].selector = @selector(newChunkedSourceWithOkhttp3HttpUrl:);
  methods[16].selector = @selector(newUnknownLengthSource);
  methods[17].selector = @selector(detachTimeoutWithOkioForwardingTimeout:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "STATE_IDLE", "I", .constantValue.asInt = Okhttp3InternalHttp1Http1Codec_STATE_IDLE, 0x1a, -1, -1, -1, -1 },
    { "STATE_OPEN_REQUEST_BODY", "I", .constantValue.asInt = Okhttp3InternalHttp1Http1Codec_STATE_OPEN_REQUEST_BODY, 0x1a, -1, -1, -1, -1 },
    { "STATE_WRITING_REQUEST_BODY", "I", .constantValue.asInt = Okhttp3InternalHttp1Http1Codec_STATE_WRITING_REQUEST_BODY, 0x1a, -1, -1, -1, -1 },
    { "STATE_READ_RESPONSE_HEADERS", "I", .constantValue.asInt = Okhttp3InternalHttp1Http1Codec_STATE_READ_RESPONSE_HEADERS, 0x1a, -1, -1, -1, -1 },
    { "STATE_OPEN_RESPONSE_BODY", "I", .constantValue.asInt = Okhttp3InternalHttp1Http1Codec_STATE_OPEN_RESPONSE_BODY, 0x1a, -1, -1, -1, -1 },
    { "STATE_READING_RESPONSE_BODY", "I", .constantValue.asInt = Okhttp3InternalHttp1Http1Codec_STATE_READING_RESPONSE_BODY, 0x1a, -1, -1, -1, -1 },
    { "STATE_CLOSED", "I", .constantValue.asInt = Okhttp3InternalHttp1Http1Codec_STATE_CLOSED, 0x1a, -1, -1, -1, -1 },
    { "client_", "LOkhttp3OkHttpClient;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "streamAllocation_", "LOkhttp3InternalConnectionStreamAllocation;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "source_", "LOkioBufferedSource;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "sink_", "LOkioBufferedSink;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "state_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3OkHttpClient;LOkhttp3InternalConnectionStreamAllocation;LOkioBufferedSource;LOkioBufferedSink;", "createRequestBody", "LOkhttp3Request;J", "writeRequestHeaders", "LOkhttp3Request;", "LJavaIoIOException;", "openResponseBody", "LOkhttp3Response;", "getTransferStream", "writeRequest", "LOkhttp3Headers;LNSString;", "readResponseHeaders", "Z", "newFixedLengthSink", "J", "newFixedLengthSource", "newChunkedSource", "LOkhttp3HttpUrl;", "detachTimeout", "LOkioForwardingTimeout;", "LOkhttp3InternalHttp1Http1Codec_FixedLengthSink;LOkhttp3InternalHttp1Http1Codec_ChunkedSink;LOkhttp3InternalHttp1Http1Codec_AbstractSource;LOkhttp3InternalHttp1Http1Codec_FixedLengthSource;LOkhttp3InternalHttp1Http1Codec_ChunkedSource;LOkhttp3InternalHttp1Http1Codec_UnknownLengthSource;" };
  static const J2ObjcClassInfo _Okhttp3InternalHttp1Http1Codec = { "Http1Codec", "okhttp3.internal.http1", ptrTable, methods, fields, 7, 0x11, 18, 12, -1, 20, -1, -1, -1 };
  return &_Okhttp3InternalHttp1Http1Codec;
}

@end

void Okhttp3InternalHttp1Http1Codec_initWithOkhttp3OkHttpClient_withOkhttp3InternalConnectionStreamAllocation_withOkioBufferedSource_withOkioBufferedSink_(Okhttp3InternalHttp1Http1Codec *self, Okhttp3OkHttpClient *client, Okhttp3InternalConnectionStreamAllocation *streamAllocation, id<OkioBufferedSource> source, id<OkioBufferedSink> sink) {
  NSObject_init(self);
  self->state_ = Okhttp3InternalHttp1Http1Codec_STATE_IDLE;
  JreStrongAssign(&self->client_, client);
  JreStrongAssign(&self->streamAllocation_, streamAllocation);
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->sink_, sink);
}

Okhttp3InternalHttp1Http1Codec *new_Okhttp3InternalHttp1Http1Codec_initWithOkhttp3OkHttpClient_withOkhttp3InternalConnectionStreamAllocation_withOkioBufferedSource_withOkioBufferedSink_(Okhttp3OkHttpClient *client, Okhttp3InternalConnectionStreamAllocation *streamAllocation, id<OkioBufferedSource> source, id<OkioBufferedSink> sink) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttp1Http1Codec, initWithOkhttp3OkHttpClient_withOkhttp3InternalConnectionStreamAllocation_withOkioBufferedSource_withOkioBufferedSink_, client, streamAllocation, source, sink)
}

Okhttp3InternalHttp1Http1Codec *create_Okhttp3InternalHttp1Http1Codec_initWithOkhttp3OkHttpClient_withOkhttp3InternalConnectionStreamAllocation_withOkioBufferedSource_withOkioBufferedSink_(Okhttp3OkHttpClient *client, Okhttp3InternalConnectionStreamAllocation *streamAllocation, id<OkioBufferedSource> source, id<OkioBufferedSink> sink) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttp1Http1Codec, initWithOkhttp3OkHttpClient_withOkhttp3InternalConnectionStreamAllocation_withOkioBufferedSource_withOkioBufferedSink_, client, streamAllocation, source, sink)
}

id<OkioSource> Okhttp3InternalHttp1Http1Codec_getTransferStreamWithOkhttp3Response_(Okhttp3InternalHttp1Http1Codec *self, Okhttp3Response *response) {
  if (!Okhttp3InternalHttpHttpHeaders_hasBodyWithOkhttp3Response_(response)) {
    return [self newFixedLengthSourceWithLong:0];
  }
  if ([@"chunked" java_equalsIgnoreCase:[((Okhttp3Response *) nil_chk(response)) headerWithNSString:@"Transfer-Encoding"]]) {
    return [self newChunkedSourceWithOkhttp3HttpUrl:[((Okhttp3Request *) nil_chk([response request])) url]];
  }
  jlong contentLength = Okhttp3InternalHttpHttpHeaders_contentLengthWithOkhttp3Response_(response);
  if (contentLength != -1) {
    return [self newFixedLengthSourceWithLong:contentLength];
  }
  return [self newUnknownLengthSource];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalHttp1Http1Codec)

@implementation Okhttp3InternalHttp1Http1Codec_FixedLengthSink

- (instancetype)initWithOkhttp3InternalHttp1Http1Codec:(Okhttp3InternalHttp1Http1Codec *)outer$
                                              withLong:(jlong)bytesRemaining {
  Okhttp3InternalHttp1Http1Codec_FixedLengthSink_initWithOkhttp3InternalHttp1Http1Codec_withLong_(self, outer$, bytesRemaining);
  return self;
}

- (OkioTimeout *)timeout {
  return timeout_;
}

- (void)writeWithOkioBuffer:(OkioBuffer *)source
                   withLong:(jlong)byteCount {
  if (closed_) @throw create_JavaLangIllegalStateException_initWithNSString_(@"closed");
  Okhttp3InternalUtil_checkOffsetAndCountWithLong_withLong_withLong_([((OkioBuffer *) nil_chk(source)) size], 0, byteCount);
  if (byteCount > bytesRemaining_) {
    @throw create_JavaNetProtocolException_initWithNSString_(JreStrcat("$J$J", @"expected ", bytesRemaining_, @" bytes but received ", byteCount));
  }
  [((id<OkioBufferedSink>) nil_chk(this$0_->sink_)) writeWithOkioBuffer:source withLong:byteCount];
  bytesRemaining_ -= byteCount;
}

- (void)flush {
  if (closed_) return;
  [((id<OkioBufferedSink>) nil_chk(this$0_->sink_)) flush];
}

- (void)close {
  if (closed_) return;
  closed_ = true;
  if (bytesRemaining_ > 0) @throw create_JavaNetProtocolException_initWithNSString_(@"unexpected end of stream");
  [this$0_ detachTimeoutWithOkioForwardingTimeout:timeout_];
  this$0_->state_ = Okhttp3InternalHttp1Http1Codec_STATE_READ_RESPONSE_HEADERS;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(timeout_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOkioTimeout;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalHttp1Http1Codec:withLong:);
  methods[1].selector = @selector(timeout);
  methods[2].selector = @selector(writeWithOkioBuffer:withLong:);
  methods[3].selector = @selector(flush);
  methods[4].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3InternalHttp1Http1Codec;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "timeout_", "LOkioForwardingTimeout;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "closed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bytesRemaining_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "J", "write", "LOkioBuffer;J", "LJavaIoIOException;", "LOkhttp3InternalHttp1Http1Codec;" };
  static const J2ObjcClassInfo _Okhttp3InternalHttp1Http1Codec_FixedLengthSink = { "FixedLengthSink", "okhttp3.internal.http1", ptrTable, methods, fields, 7, 0x12, 5, 4, 4, -1, -1, -1, -1 };
  return &_Okhttp3InternalHttp1Http1Codec_FixedLengthSink;
}

@end

void Okhttp3InternalHttp1Http1Codec_FixedLengthSink_initWithOkhttp3InternalHttp1Http1Codec_withLong_(Okhttp3InternalHttp1Http1Codec_FixedLengthSink *self, Okhttp3InternalHttp1Http1Codec *outer$, jlong bytesRemaining) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->timeout_, new_OkioForwardingTimeout_initWithOkioTimeout_([((id<OkioBufferedSink>) nil_chk(outer$->sink_)) timeout]));
  self->bytesRemaining_ = bytesRemaining;
}

Okhttp3InternalHttp1Http1Codec_FixedLengthSink *new_Okhttp3InternalHttp1Http1Codec_FixedLengthSink_initWithOkhttp3InternalHttp1Http1Codec_withLong_(Okhttp3InternalHttp1Http1Codec *outer$, jlong bytesRemaining) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttp1Http1Codec_FixedLengthSink, initWithOkhttp3InternalHttp1Http1Codec_withLong_, outer$, bytesRemaining)
}

Okhttp3InternalHttp1Http1Codec_FixedLengthSink *create_Okhttp3InternalHttp1Http1Codec_FixedLengthSink_initWithOkhttp3InternalHttp1Http1Codec_withLong_(Okhttp3InternalHttp1Http1Codec *outer$, jlong bytesRemaining) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttp1Http1Codec_FixedLengthSink, initWithOkhttp3InternalHttp1Http1Codec_withLong_, outer$, bytesRemaining)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalHttp1Http1Codec_FixedLengthSink)

@implementation Okhttp3InternalHttp1Http1Codec_ChunkedSink

- (instancetype)initWithOkhttp3InternalHttp1Http1Codec:(Okhttp3InternalHttp1Http1Codec *)outer$ {
  Okhttp3InternalHttp1Http1Codec_ChunkedSink_initWithOkhttp3InternalHttp1Http1Codec_(self, outer$);
  return self;
}

- (OkioTimeout *)timeout {
  return timeout_;
}

- (void)writeWithOkioBuffer:(OkioBuffer *)source
                   withLong:(jlong)byteCount {
  if (closed_) @throw create_JavaLangIllegalStateException_initWithNSString_(@"closed");
  if (byteCount == 0) return;
  [((id<OkioBufferedSink>) nil_chk(this$0_->sink_)) writeHexadecimalUnsignedLongWithLong:byteCount];
  [this$0_->sink_ writeUtf8WithNSString:@"\x0d\n"];
  [this$0_->sink_ writeWithOkioBuffer:source withLong:byteCount];
  [this$0_->sink_ writeUtf8WithNSString:@"\x0d\n"];
}

- (void)flush {
  @synchronized(self) {
    if (closed_) return;
    [((id<OkioBufferedSink>) nil_chk(this$0_->sink_)) flush];
  }
}

- (void)close {
  @synchronized(self) {
    if (closed_) return;
    closed_ = true;
    [((id<OkioBufferedSink>) nil_chk(this$0_->sink_)) writeUtf8WithNSString:@"0\x0d\n\x0d\n"];
    [this$0_ detachTimeoutWithOkioForwardingTimeout:timeout_];
    this$0_->state_ = Okhttp3InternalHttp1Http1Codec_STATE_READ_RESPONSE_HEADERS;
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(timeout_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkioTimeout;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalHttp1Http1Codec:);
  methods[1].selector = @selector(timeout);
  methods[2].selector = @selector(writeWithOkioBuffer:withLong:);
  methods[3].selector = @selector(flush);
  methods[4].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3InternalHttp1Http1Codec;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "timeout_", "LOkioForwardingTimeout;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "closed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "write", "LOkioBuffer;J", "LJavaIoIOException;", "LOkhttp3InternalHttp1Http1Codec;" };
  static const J2ObjcClassInfo _Okhttp3InternalHttp1Http1Codec_ChunkedSink = { "ChunkedSink", "okhttp3.internal.http1", ptrTable, methods, fields, 7, 0x12, 5, 3, 3, -1, -1, -1, -1 };
  return &_Okhttp3InternalHttp1Http1Codec_ChunkedSink;
}

@end

void Okhttp3InternalHttp1Http1Codec_ChunkedSink_initWithOkhttp3InternalHttp1Http1Codec_(Okhttp3InternalHttp1Http1Codec_ChunkedSink *self, Okhttp3InternalHttp1Http1Codec *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->timeout_, new_OkioForwardingTimeout_initWithOkioTimeout_([((id<OkioBufferedSink>) nil_chk(outer$->sink_)) timeout]));
}

Okhttp3InternalHttp1Http1Codec_ChunkedSink *new_Okhttp3InternalHttp1Http1Codec_ChunkedSink_initWithOkhttp3InternalHttp1Http1Codec_(Okhttp3InternalHttp1Http1Codec *outer$) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttp1Http1Codec_ChunkedSink, initWithOkhttp3InternalHttp1Http1Codec_, outer$)
}

Okhttp3InternalHttp1Http1Codec_ChunkedSink *create_Okhttp3InternalHttp1Http1Codec_ChunkedSink_initWithOkhttp3InternalHttp1Http1Codec_(Okhttp3InternalHttp1Http1Codec *outer$) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttp1Http1Codec_ChunkedSink, initWithOkhttp3InternalHttp1Http1Codec_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalHttp1Http1Codec_ChunkedSink)

@implementation Okhttp3InternalHttp1Http1Codec_AbstractSource

- (instancetype)initWithOkhttp3InternalHttp1Http1Codec:(Okhttp3InternalHttp1Http1Codec *)outer$ {
  Okhttp3InternalHttp1Http1Codec_AbstractSource_initWithOkhttp3InternalHttp1Http1Codec_(self, outer$);
  return self;
}

- (OkioTimeout *)timeout {
  return timeout_;
}

- (void)endOfInputWithBoolean:(jboolean)reuseConnection {
  Okhttp3InternalHttp1Http1Codec_AbstractSource_endOfInputWithBoolean_(self, reuseConnection);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(timeout_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkioTimeout;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalHttp1Http1Codec:);
  methods[1].selector = @selector(timeout);
  methods[2].selector = @selector(endOfInputWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3InternalHttp1Http1Codec;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "timeout_", "LOkioForwardingTimeout;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "closed_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "endOfInput", "Z", "LJavaIoIOException;", "LOkhttp3InternalHttp1Http1Codec;" };
  static const J2ObjcClassInfo _Okhttp3InternalHttp1Http1Codec_AbstractSource = { "AbstractSource", "okhttp3.internal.http1", ptrTable, methods, fields, 7, 0x402, 3, 3, 3, -1, -1, -1, -1 };
  return &_Okhttp3InternalHttp1Http1Codec_AbstractSource;
}

@end

void Okhttp3InternalHttp1Http1Codec_AbstractSource_initWithOkhttp3InternalHttp1Http1Codec_(Okhttp3InternalHttp1Http1Codec_AbstractSource *self, Okhttp3InternalHttp1Http1Codec *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->timeout_, new_OkioForwardingTimeout_initWithOkioTimeout_([((id<OkioBufferedSource>) nil_chk(outer$->source_)) timeout]));
}

void Okhttp3InternalHttp1Http1Codec_AbstractSource_endOfInputWithBoolean_(Okhttp3InternalHttp1Http1Codec_AbstractSource *self, jboolean reuseConnection) {
  if (self->this$0_->state_ == Okhttp3InternalHttp1Http1Codec_STATE_CLOSED) return;
  if (self->this$0_->state_ != Okhttp3InternalHttp1Http1Codec_STATE_READING_RESPONSE_BODY) @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"state: ", self->this$0_->state_));
  [self->this$0_ detachTimeoutWithOkioForwardingTimeout:self->timeout_];
  self->this$0_->state_ = Okhttp3InternalHttp1Http1Codec_STATE_CLOSED;
  if (self->this$0_->streamAllocation_ != nil) {
    [self->this$0_->streamAllocation_ streamFinishedWithBoolean:!reuseConnection withOkhttp3InternalHttpHttpCodec:self->this$0_];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalHttp1Http1Codec_AbstractSource)

@implementation Okhttp3InternalHttp1Http1Codec_FixedLengthSource

- (instancetype)initWithOkhttp3InternalHttp1Http1Codec:(Okhttp3InternalHttp1Http1Codec *)outer$
                                              withLong:(jlong)length {
  Okhttp3InternalHttp1Http1Codec_FixedLengthSource_initWithOkhttp3InternalHttp1Http1Codec_withLong_(self, outer$, length);
  return self;
}

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount {
  if (byteCount < 0) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J", @"byteCount < 0: ", byteCount));
  if (closed_) @throw create_JavaLangIllegalStateException_initWithNSString_(@"closed");
  if (bytesRemaining_ == 0) return -1;
  jlong read = [((id<OkioBufferedSource>) nil_chk(this$1_->source_)) readWithOkioBuffer:sink withLong:JavaLangMath_minWithLong_withLong_(bytesRemaining_, byteCount)];
  if (read == -1) {
    Okhttp3InternalHttp1Http1Codec_AbstractSource_endOfInputWithBoolean_(self, false);
    @throw create_JavaNetProtocolException_initWithNSString_(@"unexpected end of stream");
  }
  bytesRemaining_ -= read;
  if (bytesRemaining_ == 0) {
    Okhttp3InternalHttp1Http1Codec_AbstractSource_endOfInputWithBoolean_(self, true);
  }
  return read;
}

- (void)close {
  if (closed_) return;
  if (bytesRemaining_ != 0 && !Okhttp3InternalUtil_discardWithOkioSource_withInt_withJavaUtilConcurrentTimeUnit_(self, Okhttp3InternalHttpHttpCodec_DISCARD_STREAM_TIMEOUT_MILLIS, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS))) {
    Okhttp3InternalHttp1Http1Codec_AbstractSource_endOfInputWithBoolean_(self, false);
  }
  closed_ = true;
}

- (void)dealloc {
  RELEASE_(this$1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "J", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalHttp1Http1Codec:withLong:);
  methods[1].selector = @selector(readWithOkioBuffer:withLong:);
  methods[2].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$1_", "LOkhttp3InternalHttp1Http1Codec;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "bytesRemaining_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "J", "LJavaIoIOException;", "read", "LOkioBuffer;J", "LOkhttp3InternalHttp1Http1Codec;" };
  static const J2ObjcClassInfo _Okhttp3InternalHttp1Http1Codec_FixedLengthSource = { "FixedLengthSource", "okhttp3.internal.http1", ptrTable, methods, fields, 7, 0x2, 3, 2, 4, -1, -1, -1, -1 };
  return &_Okhttp3InternalHttp1Http1Codec_FixedLengthSource;
}

@end

void Okhttp3InternalHttp1Http1Codec_FixedLengthSource_initWithOkhttp3InternalHttp1Http1Codec_withLong_(Okhttp3InternalHttp1Http1Codec_FixedLengthSource *self, Okhttp3InternalHttp1Http1Codec *outer$, jlong length) {
  JreStrongAssign(&self->this$1_, outer$);
  Okhttp3InternalHttp1Http1Codec_AbstractSource_initWithOkhttp3InternalHttp1Http1Codec_(self, outer$);
  self->bytesRemaining_ = length;
  if (self->bytesRemaining_ == 0) {
    Okhttp3InternalHttp1Http1Codec_AbstractSource_endOfInputWithBoolean_(self, true);
  }
}

Okhttp3InternalHttp1Http1Codec_FixedLengthSource *new_Okhttp3InternalHttp1Http1Codec_FixedLengthSource_initWithOkhttp3InternalHttp1Http1Codec_withLong_(Okhttp3InternalHttp1Http1Codec *outer$, jlong length) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttp1Http1Codec_FixedLengthSource, initWithOkhttp3InternalHttp1Http1Codec_withLong_, outer$, length)
}

Okhttp3InternalHttp1Http1Codec_FixedLengthSource *create_Okhttp3InternalHttp1Http1Codec_FixedLengthSource_initWithOkhttp3InternalHttp1Http1Codec_withLong_(Okhttp3InternalHttp1Http1Codec *outer$, jlong length) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttp1Http1Codec_FixedLengthSource, initWithOkhttp3InternalHttp1Http1Codec_withLong_, outer$, length)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalHttp1Http1Codec_FixedLengthSource)

@implementation Okhttp3InternalHttp1Http1Codec_ChunkedSource

- (instancetype)initWithOkhttp3InternalHttp1Http1Codec:(Okhttp3InternalHttp1Http1Codec *)outer$
                                    withOkhttp3HttpUrl:(Okhttp3HttpUrl *)url {
  Okhttp3InternalHttp1Http1Codec_ChunkedSource_initWithOkhttp3InternalHttp1Http1Codec_withOkhttp3HttpUrl_(self, outer$, url);
  return self;
}

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount {
  if (byteCount < 0) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J", @"byteCount < 0: ", byteCount));
  if (closed_) @throw create_JavaLangIllegalStateException_initWithNSString_(@"closed");
  if (!hasMoreChunks_) return -1;
  if (bytesRemainingInChunk_ == 0 || bytesRemainingInChunk_ == Okhttp3InternalHttp1Http1Codec_ChunkedSource_NO_CHUNK_YET) {
    Okhttp3InternalHttp1Http1Codec_ChunkedSource_readChunkSize(self);
    if (!hasMoreChunks_) return -1;
  }
  jlong read = [((id<OkioBufferedSource>) nil_chk(this$1_->source_)) readWithOkioBuffer:sink withLong:JavaLangMath_minWithLong_withLong_(byteCount, bytesRemainingInChunk_)];
  if (read == -1) {
    Okhttp3InternalHttp1Http1Codec_AbstractSource_endOfInputWithBoolean_(self, false);
    @throw create_JavaNetProtocolException_initWithNSString_(@"unexpected end of stream");
  }
  bytesRemainingInChunk_ -= read;
  return read;
}

- (void)readChunkSize {
  Okhttp3InternalHttp1Http1Codec_ChunkedSource_readChunkSize(self);
}

- (void)close {
  if (closed_) return;
  if (hasMoreChunks_ && !Okhttp3InternalUtil_discardWithOkioSource_withInt_withJavaUtilConcurrentTimeUnit_(self, Okhttp3InternalHttpHttpCodec_DISCARD_STREAM_TIMEOUT_MILLIS, JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS))) {
    Okhttp3InternalHttp1Http1Codec_AbstractSource_endOfInputWithBoolean_(self, false);
  }
  closed_ = true;
}

- (void)dealloc {
  RELEASE_(this$1_);
  RELEASE_(url_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalHttp1Http1Codec:withOkhttp3HttpUrl:);
  methods[1].selector = @selector(readWithOkioBuffer:withLong:);
  methods[2].selector = @selector(readChunkSize);
  methods[3].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$1_", "LOkhttp3InternalHttp1Http1Codec;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "NO_CHUNK_YET", "J", .constantValue.asLong = Okhttp3InternalHttp1Http1Codec_ChunkedSource_NO_CHUNK_YET, 0x1a, -1, -1, -1, -1 },
    { "url_", "LOkhttp3HttpUrl;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bytesRemainingInChunk_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hasMoreChunks_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3HttpUrl;", "read", "LOkioBuffer;J", "LJavaIoIOException;", "LOkhttp3InternalHttp1Http1Codec;" };
  static const J2ObjcClassInfo _Okhttp3InternalHttp1Http1Codec_ChunkedSource = { "ChunkedSource", "okhttp3.internal.http1", ptrTable, methods, fields, 7, 0x2, 4, 5, 4, -1, -1, -1, -1 };
  return &_Okhttp3InternalHttp1Http1Codec_ChunkedSource;
}

@end

void Okhttp3InternalHttp1Http1Codec_ChunkedSource_initWithOkhttp3InternalHttp1Http1Codec_withOkhttp3HttpUrl_(Okhttp3InternalHttp1Http1Codec_ChunkedSource *self, Okhttp3InternalHttp1Http1Codec *outer$, Okhttp3HttpUrl *url) {
  JreStrongAssign(&self->this$1_, outer$);
  Okhttp3InternalHttp1Http1Codec_AbstractSource_initWithOkhttp3InternalHttp1Http1Codec_(self, outer$);
  self->bytesRemainingInChunk_ = Okhttp3InternalHttp1Http1Codec_ChunkedSource_NO_CHUNK_YET;
  self->hasMoreChunks_ = true;
  JreStrongAssign(&self->url_, url);
}

Okhttp3InternalHttp1Http1Codec_ChunkedSource *new_Okhttp3InternalHttp1Http1Codec_ChunkedSource_initWithOkhttp3InternalHttp1Http1Codec_withOkhttp3HttpUrl_(Okhttp3InternalHttp1Http1Codec *outer$, Okhttp3HttpUrl *url) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttp1Http1Codec_ChunkedSource, initWithOkhttp3InternalHttp1Http1Codec_withOkhttp3HttpUrl_, outer$, url)
}

Okhttp3InternalHttp1Http1Codec_ChunkedSource *create_Okhttp3InternalHttp1Http1Codec_ChunkedSource_initWithOkhttp3InternalHttp1Http1Codec_withOkhttp3HttpUrl_(Okhttp3InternalHttp1Http1Codec *outer$, Okhttp3HttpUrl *url) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttp1Http1Codec_ChunkedSource, initWithOkhttp3InternalHttp1Http1Codec_withOkhttp3HttpUrl_, outer$, url)
}

void Okhttp3InternalHttp1Http1Codec_ChunkedSource_readChunkSize(Okhttp3InternalHttp1Http1Codec_ChunkedSource *self) {
  if (self->bytesRemainingInChunk_ != Okhttp3InternalHttp1Http1Codec_ChunkedSource_NO_CHUNK_YET) {
    [((id<OkioBufferedSource>) nil_chk(self->this$1_->source_)) readUtf8LineStrict];
  }
  @try {
    self->bytesRemainingInChunk_ = [((id<OkioBufferedSource>) nil_chk(self->this$1_->source_)) readHexadecimalUnsignedLong];
    NSString *extensions = [((NSString *) nil_chk([self->this$1_->source_ readUtf8LineStrict])) java_trim];
    if (self->bytesRemainingInChunk_ < 0 || (![((NSString *) nil_chk(extensions)) java_isEmpty] && ![extensions hasPrefix:@";"])) {
      @throw create_JavaNetProtocolException_initWithNSString_(JreStrcat("$J$C", @"expected chunk size and optional extensions but was \"", self->bytesRemainingInChunk_, extensions, '"'));
    }
  }
  @catch (JavaLangNumberFormatException *e) {
    @throw create_JavaNetProtocolException_initWithNSString_([((JavaLangNumberFormatException *) nil_chk(e)) getMessage]);
  }
  if (self->bytesRemainingInChunk_ == 0LL) {
    self->hasMoreChunks_ = false;
    Okhttp3InternalHttpHttpHeaders_receiveHeadersWithOkhttp3CookieJar_withOkhttp3HttpUrl_withOkhttp3Headers_([((Okhttp3OkHttpClient *) nil_chk(self->this$1_->client_)) cookieJar], self->url_, [self->this$1_ readHeaders]);
    Okhttp3InternalHttp1Http1Codec_AbstractSource_endOfInputWithBoolean_(self, true);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalHttp1Http1Codec_ChunkedSource)

@implementation Okhttp3InternalHttp1Http1Codec_UnknownLengthSource

- (instancetype)initWithOkhttp3InternalHttp1Http1Codec:(Okhttp3InternalHttp1Http1Codec *)outer$ {
  Okhttp3InternalHttp1Http1Codec_UnknownLengthSource_initWithOkhttp3InternalHttp1Http1Codec_(self, outer$);
  return self;
}

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount {
  if (byteCount < 0) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J", @"byteCount < 0: ", byteCount));
  if (closed_) @throw create_JavaLangIllegalStateException_initWithNSString_(@"closed");
  if (inputExhausted_) return -1;
  jlong read = [((id<OkioBufferedSource>) nil_chk(this$1_->source_)) readWithOkioBuffer:sink withLong:byteCount];
  if (read == -1) {
    inputExhausted_ = true;
    Okhttp3InternalHttp1Http1Codec_AbstractSource_endOfInputWithBoolean_(self, true);
    return -1;
  }
  return read;
}

- (void)close {
  if (closed_) return;
  if (!inputExhausted_) {
    Okhttp3InternalHttp1Http1Codec_AbstractSource_endOfInputWithBoolean_(self, false);
  }
  closed_ = true;
}

- (void)dealloc {
  RELEASE_(this$1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalHttp1Http1Codec:);
  methods[1].selector = @selector(readWithOkioBuffer:withLong:);
  methods[2].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$1_", "LOkhttp3InternalHttp1Http1Codec;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "inputExhausted_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "read", "LOkioBuffer;J", "LJavaIoIOException;", "LOkhttp3InternalHttp1Http1Codec;" };
  static const J2ObjcClassInfo _Okhttp3InternalHttp1Http1Codec_UnknownLengthSource = { "UnknownLengthSource", "okhttp3.internal.http1", ptrTable, methods, fields, 7, 0x2, 3, 2, 3, -1, -1, -1, -1 };
  return &_Okhttp3InternalHttp1Http1Codec_UnknownLengthSource;
}

@end

void Okhttp3InternalHttp1Http1Codec_UnknownLengthSource_initWithOkhttp3InternalHttp1Http1Codec_(Okhttp3InternalHttp1Http1Codec_UnknownLengthSource *self, Okhttp3InternalHttp1Http1Codec *outer$) {
  JreStrongAssign(&self->this$1_, outer$);
  Okhttp3InternalHttp1Http1Codec_AbstractSource_initWithOkhttp3InternalHttp1Http1Codec_(self, outer$);
}

Okhttp3InternalHttp1Http1Codec_UnknownLengthSource *new_Okhttp3InternalHttp1Http1Codec_UnknownLengthSource_initWithOkhttp3InternalHttp1Http1Codec_(Okhttp3InternalHttp1Http1Codec *outer$) {
  J2OBJC_NEW_IMPL(Okhttp3InternalHttp1Http1Codec_UnknownLengthSource, initWithOkhttp3InternalHttp1Http1Codec_, outer$)
}

Okhttp3InternalHttp1Http1Codec_UnknownLengthSource *create_Okhttp3InternalHttp1Http1Codec_UnknownLengthSource_initWithOkhttp3InternalHttp1Http1Codec_(Okhttp3InternalHttp1Http1Codec *outer$) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalHttp1Http1Codec_UnknownLengthSource, initWithOkhttp3InternalHttp1Http1Codec_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalHttp1Http1Codec_UnknownLengthSource)
