//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okhttp3/internal/ws/WebSocketProtocol.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/AssertionError.h"
#include "java/lang/IllegalArgumentException.h"
#include "okhttp3/internal/ws/WebSocketProtocol.h"
#include "okio/ByteString.h"

@interface Okhttp3InternalWsWebSocketProtocol ()

- (instancetype)init;

@end

__attribute__((unused)) static void Okhttp3InternalWsWebSocketProtocol_init(Okhttp3InternalWsWebSocketProtocol *self);

__attribute__((unused)) static Okhttp3InternalWsWebSocketProtocol *new_Okhttp3InternalWsWebSocketProtocol_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalWsWebSocketProtocol *create_Okhttp3InternalWsWebSocketProtocol_init();

NSString *Okhttp3InternalWsWebSocketProtocol_ACCEPT_MAGIC = @"258EAFA5-E914-47DA-95CA-C5AB0DC85B11";

@implementation Okhttp3InternalWsWebSocketProtocol

+ (void)toggleMaskWithByteArray:(IOSByteArray *)buffer
                       withLong:(jlong)byteCount
                  withByteArray:(IOSByteArray *)key
                       withLong:(jlong)frameBytesRead {
  Okhttp3InternalWsWebSocketProtocol_toggleMaskWithByteArray_withLong_withByteArray_withLong_(buffer, byteCount, key, frameBytesRead);
}

+ (NSString *)closeCodeExceptionMessageWithInt:(jint)code {
  return Okhttp3InternalWsWebSocketProtocol_closeCodeExceptionMessageWithInt_(code);
}

+ (void)validateCloseCodeWithInt:(jint)code {
  Okhttp3InternalWsWebSocketProtocol_validateCloseCodeWithInt_(code);
}

+ (NSString *)acceptHeaderWithNSString:(NSString *)key {
  return Okhttp3InternalWsWebSocketProtocol_acceptHeaderWithNSString_(key);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Okhttp3InternalWsWebSocketProtocol_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 4, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(toggleMaskWithByteArray:withLong:withByteArray:withLong:);
  methods[1].selector = @selector(closeCodeExceptionMessageWithInt:);
  methods[2].selector = @selector(validateCloseCodeWithInt:);
  methods[3].selector = @selector(acceptHeaderWithNSString:);
  methods[4].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ACCEPT_MAGIC", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 7, -1, -1 },
    { "B0_FLAG_FIN", "I", .constantValue.asInt = Okhttp3InternalWsWebSocketProtocol_B0_FLAG_FIN, 0x18, -1, -1, -1, -1 },
    { "B0_FLAG_RSV1", "I", .constantValue.asInt = Okhttp3InternalWsWebSocketProtocol_B0_FLAG_RSV1, 0x18, -1, -1, -1, -1 },
    { "B0_FLAG_RSV2", "I", .constantValue.asInt = Okhttp3InternalWsWebSocketProtocol_B0_FLAG_RSV2, 0x18, -1, -1, -1, -1 },
    { "B0_FLAG_RSV3", "I", .constantValue.asInt = Okhttp3InternalWsWebSocketProtocol_B0_FLAG_RSV3, 0x18, -1, -1, -1, -1 },
    { "B0_MASK_OPCODE", "I", .constantValue.asInt = Okhttp3InternalWsWebSocketProtocol_B0_MASK_OPCODE, 0x18, -1, -1, -1, -1 },
    { "OPCODE_FLAG_CONTROL", "I", .constantValue.asInt = Okhttp3InternalWsWebSocketProtocol_OPCODE_FLAG_CONTROL, 0x18, -1, -1, -1, -1 },
    { "B1_FLAG_MASK", "I", .constantValue.asInt = Okhttp3InternalWsWebSocketProtocol_B1_FLAG_MASK, 0x18, -1, -1, -1, -1 },
    { "B1_MASK_LENGTH", "I", .constantValue.asInt = Okhttp3InternalWsWebSocketProtocol_B1_MASK_LENGTH, 0x18, -1, -1, -1, -1 },
    { "OPCODE_CONTINUATION", "I", .constantValue.asInt = Okhttp3InternalWsWebSocketProtocol_OPCODE_CONTINUATION, 0x18, -1, -1, -1, -1 },
    { "OPCODE_TEXT", "I", .constantValue.asInt = Okhttp3InternalWsWebSocketProtocol_OPCODE_TEXT, 0x18, -1, -1, -1, -1 },
    { "OPCODE_BINARY", "I", .constantValue.asInt = Okhttp3InternalWsWebSocketProtocol_OPCODE_BINARY, 0x18, -1, -1, -1, -1 },
    { "OPCODE_CONTROL_CLOSE", "I", .constantValue.asInt = Okhttp3InternalWsWebSocketProtocol_OPCODE_CONTROL_CLOSE, 0x18, -1, -1, -1, -1 },
    { "OPCODE_CONTROL_PING", "I", .constantValue.asInt = Okhttp3InternalWsWebSocketProtocol_OPCODE_CONTROL_PING, 0x18, -1, -1, -1, -1 },
    { "OPCODE_CONTROL_PONG", "I", .constantValue.asInt = Okhttp3InternalWsWebSocketProtocol_OPCODE_CONTROL_PONG, 0x18, -1, -1, -1, -1 },
    { "PAYLOAD_BYTE_MAX", "J", .constantValue.asLong = Okhttp3InternalWsWebSocketProtocol_PAYLOAD_BYTE_MAX, 0x18, -1, -1, -1, -1 },
    { "CLOSE_MESSAGE_MAX", "J", .constantValue.asLong = Okhttp3InternalWsWebSocketProtocol_CLOSE_MESSAGE_MAX, 0x18, -1, -1, -1, -1 },
    { "PAYLOAD_SHORT", "I", .constantValue.asInt = Okhttp3InternalWsWebSocketProtocol_PAYLOAD_SHORT, 0x18, -1, -1, -1, -1 },
    { "PAYLOAD_SHORT_MAX", "J", .constantValue.asLong = Okhttp3InternalWsWebSocketProtocol_PAYLOAD_SHORT_MAX, 0x18, -1, -1, -1, -1 },
    { "PAYLOAD_LONG", "I", .constantValue.asInt = Okhttp3InternalWsWebSocketProtocol_PAYLOAD_LONG, 0x18, -1, -1, -1, -1 },
    { "CLOSE_CLIENT_GOING_AWAY", "I", .constantValue.asInt = Okhttp3InternalWsWebSocketProtocol_CLOSE_CLIENT_GOING_AWAY, 0x18, -1, -1, -1, -1 },
    { "CLOSE_PROTOCOL_EXCEPTION", "I", .constantValue.asInt = Okhttp3InternalWsWebSocketProtocol_CLOSE_PROTOCOL_EXCEPTION, 0x18, -1, -1, -1, -1 },
    { "CLOSE_NO_STATUS_CODE", "I", .constantValue.asInt = Okhttp3InternalWsWebSocketProtocol_CLOSE_NO_STATUS_CODE, 0x18, -1, -1, -1, -1 },
    { "CLOSE_ABNORMAL_TERMINATION", "I", .constantValue.asInt = Okhttp3InternalWsWebSocketProtocol_CLOSE_ABNORMAL_TERMINATION, 0x18, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "toggleMask", "[BJ[BJ", "closeCodeExceptionMessage", "I", "validateCloseCode", "acceptHeader", "LNSString;", &Okhttp3InternalWsWebSocketProtocol_ACCEPT_MAGIC };
  static const J2ObjcClassInfo _Okhttp3InternalWsWebSocketProtocol = { "WebSocketProtocol", "okhttp3.internal.ws", ptrTable, methods, fields, 7, 0x11, 5, 24, -1, -1, -1, -1, -1 };
  return &_Okhttp3InternalWsWebSocketProtocol;
}

@end

void Okhttp3InternalWsWebSocketProtocol_toggleMaskWithByteArray_withLong_withByteArray_withLong_(IOSByteArray *buffer, jlong byteCount, IOSByteArray *key, jlong frameBytesRead) {
  Okhttp3InternalWsWebSocketProtocol_initialize();
  jint keyLength = ((IOSByteArray *) nil_chk(key))->size_;
  for (jint i = 0; i < byteCount; i++, frameBytesRead++) {
    jint keyIndex = (jint) (frameBytesRead % keyLength);
    *IOSByteArray_GetRef(nil_chk(buffer), i) = (jbyte) (IOSByteArray_Get(buffer, i) ^ IOSByteArray_Get(key, keyIndex));
  }
}

NSString *Okhttp3InternalWsWebSocketProtocol_closeCodeExceptionMessageWithInt_(jint code) {
  Okhttp3InternalWsWebSocketProtocol_initialize();
  if (code < 1000 || code >= 5000) {
    return JreStrcat("$I", @"Code must be in range [1000,5000): ", code);
  }
  else if ((code >= 1004 && code <= 1006) || (code >= 1012 && code <= 2999)) {
    return JreStrcat("$I$", @"Code ", code, @" is reserved and may not be used.");
  }
  else {
    return nil;
  }
}

void Okhttp3InternalWsWebSocketProtocol_validateCloseCodeWithInt_(jint code) {
  Okhttp3InternalWsWebSocketProtocol_initialize();
  NSString *message = Okhttp3InternalWsWebSocketProtocol_closeCodeExceptionMessageWithInt_(code);
  if (message != nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(message);
}

NSString *Okhttp3InternalWsWebSocketProtocol_acceptHeaderWithNSString_(NSString *key) {
  Okhttp3InternalWsWebSocketProtocol_initialize();
  return [((OkioByteString *) nil_chk([((OkioByteString *) nil_chk(OkioByteString_encodeUtf8WithNSString_(JreStrcat("$$", key, Okhttp3InternalWsWebSocketProtocol_ACCEPT_MAGIC)))) sha1])) base64];
}

void Okhttp3InternalWsWebSocketProtocol_init(Okhttp3InternalWsWebSocketProtocol *self) {
  NSObject_init(self);
  @throw create_JavaLangAssertionError_initWithId_(@"No instances.");
}

Okhttp3InternalWsWebSocketProtocol *new_Okhttp3InternalWsWebSocketProtocol_init() {
  J2OBJC_NEW_IMPL(Okhttp3InternalWsWebSocketProtocol, init)
}

Okhttp3InternalWsWebSocketProtocol *create_Okhttp3InternalWsWebSocketProtocol_init() {
  J2OBJC_CREATE_IMPL(Okhttp3InternalWsWebSocketProtocol, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalWsWebSocketProtocol)
