//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okhttp3/internal/ws/RealWebSocket.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Okhttp3InternalWsRealWebSocket")
#ifdef RESTRICT_Okhttp3InternalWsRealWebSocket
#define INCLUDE_ALL_Okhttp3InternalWsRealWebSocket 0
#else
#define INCLUDE_ALL_Okhttp3InternalWsRealWebSocket 1
#endif
#undef RESTRICT_Okhttp3InternalWsRealWebSocket

#if !defined (Okhttp3InternalWsRealWebSocket_) && (INCLUDE_ALL_Okhttp3InternalWsRealWebSocket || defined(INCLUDE_Okhttp3InternalWsRealWebSocket))
#define Okhttp3InternalWsRealWebSocket_

#define RESTRICT_Okhttp3WebSocket 1
#define INCLUDE_Okhttp3WebSocket 1
#include "okhttp3/WebSocket.h"

#define RESTRICT_Okhttp3InternalWsWebSocketReader 1
#define INCLUDE_Okhttp3InternalWsWebSocketReader_FrameCallback 1
#include "okhttp3/internal/ws/WebSocketReader.h"

@class JavaLangException;
@class JavaUtilConcurrentTimeUnit;
@class JavaUtilRandom;
@class Okhttp3InternalWsRealWebSocket_Streams;
@class Okhttp3OkHttpClient;
@class Okhttp3Request;
@class Okhttp3Response;
@class Okhttp3WebSocketListener;
@class OkioByteString;

@interface Okhttp3InternalWsRealWebSocket : NSObject < Okhttp3WebSocket, Okhttp3InternalWsWebSocketReader_FrameCallback > {
 @public
  Okhttp3WebSocketListener *listener_;
  jint pingCount_;
  jint pongCount_;
}

#pragma mark Public

- (instancetype)initWithOkhttp3Request:(Okhttp3Request *)request
          withOkhttp3WebSocketListener:(Okhttp3WebSocketListener *)listener
                    withJavaUtilRandom:(JavaUtilRandom *)random;

- (void)cancel;

- (jboolean)closeWithInt:(jint)code
            withNSString:(NSString *)reason;

- (void)connectWithOkhttp3OkHttpClient:(Okhttp3OkHttpClient *)client;

- (void)failWebSocketWithJavaLangException:(JavaLangException *)e
                       withOkhttp3Response:(Okhttp3Response *)response;

- (void)initReaderAndWriterWithNSString:(NSString *)name
                               withLong:(jlong)pingIntervalMillis
withOkhttp3InternalWsRealWebSocket_Streams:(Okhttp3InternalWsRealWebSocket_Streams *)streams OBJC_METHOD_FAMILY_NONE;

- (void)loopReader;

- (void)onReadCloseWithInt:(jint)code
              withNSString:(NSString *)reason;

- (void)onReadMessageWithOkioByteString:(OkioByteString *)bytes;

- (void)onReadMessageWithNSString:(NSString *)text;

- (void)onReadPingWithOkioByteString:(OkioByteString *)payload;

- (void)onReadPongWithOkioByteString:(OkioByteString *)buffer;

- (jlong)queueSize;

- (Okhttp3Request *)request;

- (jboolean)sendWithOkioByteString:(OkioByteString *)bytes;

- (jboolean)sendWithNSString:(NSString *)text;

#pragma mark Package-Private

- (void)awaitTerminationWithInt:(jint)timeout
 withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeUnit;

- (void)checkResponseWithOkhttp3Response:(Okhttp3Response *)response;

- (jboolean)closeWithInt:(jint)code
            withNSString:(NSString *)reason
                withLong:(jlong)cancelAfterCloseMillis;

- (jint)pingCount;

- (jboolean)pongWithOkioByteString:(OkioByteString *)payload;

- (jint)pongCount;

- (jboolean)processNextFrame;

- (void)tearDown;

- (jboolean)writeOneFrame;

- (void)writePingFrame;

@end

J2OBJC_STATIC_INIT(Okhttp3InternalWsRealWebSocket)

J2OBJC_FIELD_SETTER(Okhttp3InternalWsRealWebSocket, listener_, Okhttp3WebSocketListener *)

FOUNDATION_EXPORT void Okhttp3InternalWsRealWebSocket_initWithOkhttp3Request_withOkhttp3WebSocketListener_withJavaUtilRandom_(Okhttp3InternalWsRealWebSocket *self, Okhttp3Request *request, Okhttp3WebSocketListener *listener, JavaUtilRandom *random);

FOUNDATION_EXPORT Okhttp3InternalWsRealWebSocket *new_Okhttp3InternalWsRealWebSocket_initWithOkhttp3Request_withOkhttp3WebSocketListener_withJavaUtilRandom_(Okhttp3Request *request, Okhttp3WebSocketListener *listener, JavaUtilRandom *random) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3InternalWsRealWebSocket *create_Okhttp3InternalWsRealWebSocket_initWithOkhttp3Request_withOkhttp3WebSocketListener_withJavaUtilRandom_(Okhttp3Request *request, Okhttp3WebSocketListener *listener, JavaUtilRandom *random);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalWsRealWebSocket)

#endif

#if !defined (Okhttp3InternalWsRealWebSocket_Message_) && (INCLUDE_ALL_Okhttp3InternalWsRealWebSocket || defined(INCLUDE_Okhttp3InternalWsRealWebSocket_Message))
#define Okhttp3InternalWsRealWebSocket_Message_

@class OkioByteString;

@interface Okhttp3InternalWsRealWebSocket_Message : NSObject {
 @public
  jint formatOpcode_;
  OkioByteString *data_;
}

#pragma mark Package-Private

- (instancetype)initWithInt:(jint)formatOpcode
         withOkioByteString:(OkioByteString *)data;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalWsRealWebSocket_Message)

J2OBJC_FIELD_SETTER(Okhttp3InternalWsRealWebSocket_Message, data_, OkioByteString *)

FOUNDATION_EXPORT void Okhttp3InternalWsRealWebSocket_Message_initWithInt_withOkioByteString_(Okhttp3InternalWsRealWebSocket_Message *self, jint formatOpcode, OkioByteString *data);

FOUNDATION_EXPORT Okhttp3InternalWsRealWebSocket_Message *new_Okhttp3InternalWsRealWebSocket_Message_initWithInt_withOkioByteString_(jint formatOpcode, OkioByteString *data) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3InternalWsRealWebSocket_Message *create_Okhttp3InternalWsRealWebSocket_Message_initWithInt_withOkioByteString_(jint formatOpcode, OkioByteString *data);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalWsRealWebSocket_Message)

#endif

#if !defined (Okhttp3InternalWsRealWebSocket_Close_) && (INCLUDE_ALL_Okhttp3InternalWsRealWebSocket || defined(INCLUDE_Okhttp3InternalWsRealWebSocket_Close))
#define Okhttp3InternalWsRealWebSocket_Close_

@class OkioByteString;

@interface Okhttp3InternalWsRealWebSocket_Close : NSObject {
 @public
  jint code_;
  OkioByteString *reason_;
  jlong cancelAfterCloseMillis_;
}

#pragma mark Package-Private

- (instancetype)initWithInt:(jint)code
         withOkioByteString:(OkioByteString *)reason
                   withLong:(jlong)cancelAfterCloseMillis;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalWsRealWebSocket_Close)

J2OBJC_FIELD_SETTER(Okhttp3InternalWsRealWebSocket_Close, reason_, OkioByteString *)

FOUNDATION_EXPORT void Okhttp3InternalWsRealWebSocket_Close_initWithInt_withOkioByteString_withLong_(Okhttp3InternalWsRealWebSocket_Close *self, jint code, OkioByteString *reason, jlong cancelAfterCloseMillis);

FOUNDATION_EXPORT Okhttp3InternalWsRealWebSocket_Close *new_Okhttp3InternalWsRealWebSocket_Close_initWithInt_withOkioByteString_withLong_(jint code, OkioByteString *reason, jlong cancelAfterCloseMillis) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3InternalWsRealWebSocket_Close *create_Okhttp3InternalWsRealWebSocket_Close_initWithInt_withOkioByteString_withLong_(jint code, OkioByteString *reason, jlong cancelAfterCloseMillis);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalWsRealWebSocket_Close)

#endif

#if !defined (Okhttp3InternalWsRealWebSocket_Streams_) && (INCLUDE_ALL_Okhttp3InternalWsRealWebSocket || defined(INCLUDE_Okhttp3InternalWsRealWebSocket_Streams))
#define Okhttp3InternalWsRealWebSocket_Streams_

#define RESTRICT_JavaIoCloseable 1
#define INCLUDE_JavaIoCloseable 1
#include "java/io/Closeable.h"

@protocol OkioBufferedSink;
@protocol OkioBufferedSource;

@interface Okhttp3InternalWsRealWebSocket_Streams : NSObject < JavaIoCloseable > {
 @public
  jboolean client_;
  id<OkioBufferedSource> source_;
  id<OkioBufferedSink> sink_;
}

#pragma mark Public

- (instancetype)initWithBoolean:(jboolean)client
         withOkioBufferedSource:(id<OkioBufferedSource>)source
           withOkioBufferedSink:(id<OkioBufferedSink>)sink;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalWsRealWebSocket_Streams)

J2OBJC_FIELD_SETTER(Okhttp3InternalWsRealWebSocket_Streams, source_, id<OkioBufferedSource>)
J2OBJC_FIELD_SETTER(Okhttp3InternalWsRealWebSocket_Streams, sink_, id<OkioBufferedSink>)

FOUNDATION_EXPORT void Okhttp3InternalWsRealWebSocket_Streams_initWithBoolean_withOkioBufferedSource_withOkioBufferedSink_(Okhttp3InternalWsRealWebSocket_Streams *self, jboolean client, id<OkioBufferedSource> source, id<OkioBufferedSink> sink);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalWsRealWebSocket_Streams)

#endif

#if !defined (Okhttp3InternalWsRealWebSocket_CancelRunnable_) && (INCLUDE_ALL_Okhttp3InternalWsRealWebSocket || defined(INCLUDE_Okhttp3InternalWsRealWebSocket_CancelRunnable))
#define Okhttp3InternalWsRealWebSocket_CancelRunnable_

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class Okhttp3InternalWsRealWebSocket;

@interface Okhttp3InternalWsRealWebSocket_CancelRunnable : NSObject < JavaLangRunnable >

#pragma mark Public

- (void)run;

#pragma mark Package-Private

- (instancetype)initWithOkhttp3InternalWsRealWebSocket:(Okhttp3InternalWsRealWebSocket *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalWsRealWebSocket_CancelRunnable)

FOUNDATION_EXPORT void Okhttp3InternalWsRealWebSocket_CancelRunnable_initWithOkhttp3InternalWsRealWebSocket_(Okhttp3InternalWsRealWebSocket_CancelRunnable *self, Okhttp3InternalWsRealWebSocket *outer$);

FOUNDATION_EXPORT Okhttp3InternalWsRealWebSocket_CancelRunnable *new_Okhttp3InternalWsRealWebSocket_CancelRunnable_initWithOkhttp3InternalWsRealWebSocket_(Okhttp3InternalWsRealWebSocket *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT Okhttp3InternalWsRealWebSocket_CancelRunnable *create_Okhttp3InternalWsRealWebSocket_CancelRunnable_initWithOkhttp3InternalWsRealWebSocket_(Okhttp3InternalWsRealWebSocket *outer$);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalWsRealWebSocket_CancelRunnable)

#endif

#pragma pop_macro("INCLUDE_ALL_Okhttp3InternalWsRealWebSocket")
