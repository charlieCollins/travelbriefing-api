//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okhttp3/internal/ws/RealWebSocket.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Runnable.h"
#include "java/lang/Thread.h"
#include "java/net/ProtocolException.h"
#include "java/net/Socket.h"
#include "java/util/ArrayDeque.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Random.h"
#include "java/util/concurrent/ScheduledExecutorService.h"
#include "java/util/concurrent/ScheduledFuture.h"
#include "java/util/concurrent/ScheduledThreadPoolExecutor.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/util/concurrent/TimeUnit.h"
#include "okhttp3/Call.h"
#include "okhttp3/Callback.h"
#include "okhttp3/HttpUrl.h"
#include "okhttp3/OkHttpClient.h"
#include "okhttp3/Protocol.h"
#include "okhttp3/Request.h"
#include "okhttp3/Response.h"
#include "okhttp3/WebSocketListener.h"
#include "okhttp3/internal/Internal.h"
#include "okhttp3/internal/Util.h"
#include "okhttp3/internal/connection/RealConnection.h"
#include "okhttp3/internal/connection/StreamAllocation.h"
#include "okhttp3/internal/ws/RealWebSocket.h"
#include "okhttp3/internal/ws/WebSocketProtocol.h"
#include "okhttp3/internal/ws/WebSocketReader.h"
#include "okhttp3/internal/ws/WebSocketWriter.h"
#include "okio/BufferedSink.h"
#include "okio/BufferedSource.h"
#include "okio/ByteString.h"
#include "okio/Okio.h"
#include "okio/Sink.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface Okhttp3InternalWsRealWebSocket () {
 @public
  Okhttp3Request *originalRequest_;
  JavaUtilRandom *random_;
  NSString *key_;
  id<Okhttp3Call> call_;
  id<JavaLangRunnable> writerRunnable_;
  Okhttp3InternalWsWebSocketReader *reader_;
  Okhttp3InternalWsWebSocketWriter *writer_;
  id<JavaUtilConcurrentScheduledExecutorService> executor_;
  Okhttp3InternalWsRealWebSocket_Streams *streams_;
  JavaUtilArrayDeque *pongQueue_;
  JavaUtilArrayDeque *messageAndCloseQueue_;
  jlong queueSize_;
  jboolean enqueuedClose_;
  id<JavaUtilConcurrentScheduledFuture> cancelFuture_;
  jint receivedCloseCode_;
  NSString *receivedCloseReason_;
  jboolean failed_;
}

- (jboolean)sendWithOkioByteString:(OkioByteString *)data
                           withInt:(jint)formatOpcode;

- (void)runWriter;

@end

J2OBJC_FIELD_SETTER(Okhttp3InternalWsRealWebSocket, originalRequest_, Okhttp3Request *)
J2OBJC_FIELD_SETTER(Okhttp3InternalWsRealWebSocket, random_, JavaUtilRandom *)
J2OBJC_FIELD_SETTER(Okhttp3InternalWsRealWebSocket, key_, NSString *)
J2OBJC_FIELD_SETTER(Okhttp3InternalWsRealWebSocket, call_, id<Okhttp3Call>)
J2OBJC_FIELD_SETTER(Okhttp3InternalWsRealWebSocket, writerRunnable_, id<JavaLangRunnable>)
J2OBJC_FIELD_SETTER(Okhttp3InternalWsRealWebSocket, reader_, Okhttp3InternalWsWebSocketReader *)
J2OBJC_FIELD_SETTER(Okhttp3InternalWsRealWebSocket, writer_, Okhttp3InternalWsWebSocketWriter *)
J2OBJC_FIELD_SETTER(Okhttp3InternalWsRealWebSocket, executor_, id<JavaUtilConcurrentScheduledExecutorService>)
J2OBJC_FIELD_SETTER(Okhttp3InternalWsRealWebSocket, streams_, Okhttp3InternalWsRealWebSocket_Streams *)
J2OBJC_FIELD_SETTER(Okhttp3InternalWsRealWebSocket, pongQueue_, JavaUtilArrayDeque *)
J2OBJC_FIELD_SETTER(Okhttp3InternalWsRealWebSocket, messageAndCloseQueue_, JavaUtilArrayDeque *)
J2OBJC_FIELD_SETTER(Okhttp3InternalWsRealWebSocket, cancelFuture_, id<JavaUtilConcurrentScheduledFuture>)
J2OBJC_FIELD_SETTER(Okhttp3InternalWsRealWebSocket, receivedCloseReason_, NSString *)

inline id<JavaUtilList> Okhttp3InternalWsRealWebSocket_get_ONLY_HTTP1();
static id<JavaUtilList> Okhttp3InternalWsRealWebSocket_ONLY_HTTP1;
J2OBJC_STATIC_FIELD_OBJ_FINAL(Okhttp3InternalWsRealWebSocket, ONLY_HTTP1, id<JavaUtilList>)

inline jlong Okhttp3InternalWsRealWebSocket_get_MAX_QUEUE_SIZE();
#define Okhttp3InternalWsRealWebSocket_MAX_QUEUE_SIZE 16777216LL
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3InternalWsRealWebSocket, MAX_QUEUE_SIZE, jlong)

inline jlong Okhttp3InternalWsRealWebSocket_get_CANCEL_AFTER_CLOSE_MILLIS();
#define Okhttp3InternalWsRealWebSocket_CANCEL_AFTER_CLOSE_MILLIS 60000LL
J2OBJC_STATIC_FIELD_CONSTANT(Okhttp3InternalWsRealWebSocket, CANCEL_AFTER_CLOSE_MILLIS, jlong)

__attribute__((unused)) static jboolean Okhttp3InternalWsRealWebSocket_sendWithOkioByteString_withInt_(Okhttp3InternalWsRealWebSocket *self, OkioByteString *data, jint formatOpcode);

__attribute__((unused)) static void Okhttp3InternalWsRealWebSocket_runWriter(Okhttp3InternalWsRealWebSocket *self);

@interface Okhttp3InternalWsRealWebSocket_1 : NSObject < JavaLangRunnable > {
 @public
  Okhttp3InternalWsRealWebSocket *this$0_;
}

- (instancetype)initWithOkhttp3InternalWsRealWebSocket:(Okhttp3InternalWsRealWebSocket *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalWsRealWebSocket_1)

__attribute__((unused)) static void Okhttp3InternalWsRealWebSocket_1_initWithOkhttp3InternalWsRealWebSocket_(Okhttp3InternalWsRealWebSocket_1 *self, Okhttp3InternalWsRealWebSocket *outer$);

__attribute__((unused)) static Okhttp3InternalWsRealWebSocket_1 *new_Okhttp3InternalWsRealWebSocket_1_initWithOkhttp3InternalWsRealWebSocket_(Okhttp3InternalWsRealWebSocket *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalWsRealWebSocket_1 *create_Okhttp3InternalWsRealWebSocket_1_initWithOkhttp3InternalWsRealWebSocket_(Okhttp3InternalWsRealWebSocket *outer$);

@interface Okhttp3InternalWsRealWebSocket_2 : NSObject < Okhttp3Callback > {
 @public
  Okhttp3InternalWsRealWebSocket *this$0_;
  Okhttp3Request *val$request_;
  jint val$pingIntervalMillis_;
}

- (instancetype)initWithOkhttp3InternalWsRealWebSocket:(Okhttp3InternalWsRealWebSocket *)outer$
                                    withOkhttp3Request:(Okhttp3Request *)capture$0
                                               withInt:(jint)capture$1;

- (void)onResponseWithOkhttp3Call:(id<Okhttp3Call>)call
              withOkhttp3Response:(Okhttp3Response *)response;

- (void)onFailureWithOkhttp3Call:(id<Okhttp3Call>)call
           withJavaIoIOException:(JavaIoIOException *)e;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalWsRealWebSocket_2)

__attribute__((unused)) static void Okhttp3InternalWsRealWebSocket_2_initWithOkhttp3InternalWsRealWebSocket_withOkhttp3Request_withInt_(Okhttp3InternalWsRealWebSocket_2 *self, Okhttp3InternalWsRealWebSocket *outer$, Okhttp3Request *capture$0, jint capture$1);

__attribute__((unused)) static Okhttp3InternalWsRealWebSocket_2 *new_Okhttp3InternalWsRealWebSocket_2_initWithOkhttp3InternalWsRealWebSocket_withOkhttp3Request_withInt_(Okhttp3InternalWsRealWebSocket *outer$, Okhttp3Request *capture$0, jint capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalWsRealWebSocket_2 *create_Okhttp3InternalWsRealWebSocket_2_initWithOkhttp3InternalWsRealWebSocket_withOkhttp3Request_withInt_(Okhttp3InternalWsRealWebSocket *outer$, Okhttp3Request *capture$0, jint capture$1);

@interface Okhttp3InternalWsRealWebSocket_PingRunnable : NSObject < JavaLangRunnable > {
 @public
  Okhttp3InternalWsRealWebSocket *this$0_;
}

- (instancetype)initWithOkhttp3InternalWsRealWebSocket:(Okhttp3InternalWsRealWebSocket *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(Okhttp3InternalWsRealWebSocket_PingRunnable)

__attribute__((unused)) static void Okhttp3InternalWsRealWebSocket_PingRunnable_initWithOkhttp3InternalWsRealWebSocket_(Okhttp3InternalWsRealWebSocket_PingRunnable *self, Okhttp3InternalWsRealWebSocket *outer$);

__attribute__((unused)) static Okhttp3InternalWsRealWebSocket_PingRunnable *new_Okhttp3InternalWsRealWebSocket_PingRunnable_initWithOkhttp3InternalWsRealWebSocket_(Okhttp3InternalWsRealWebSocket *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static Okhttp3InternalWsRealWebSocket_PingRunnable *create_Okhttp3InternalWsRealWebSocket_PingRunnable_initWithOkhttp3InternalWsRealWebSocket_(Okhttp3InternalWsRealWebSocket *outer$);

J2OBJC_TYPE_LITERAL_HEADER(Okhttp3InternalWsRealWebSocket_PingRunnable)

@interface Okhttp3InternalWsRealWebSocket_CancelRunnable () {
 @public
  Okhttp3InternalWsRealWebSocket *this$0_;
}

@end

J2OBJC_INITIALIZED_DEFN(Okhttp3InternalWsRealWebSocket)

@implementation Okhttp3InternalWsRealWebSocket

- (instancetype)initWithOkhttp3Request:(Okhttp3Request *)request
          withOkhttp3WebSocketListener:(Okhttp3WebSocketListener *)listener
                    withJavaUtilRandom:(JavaUtilRandom *)random {
  Okhttp3InternalWsRealWebSocket_initWithOkhttp3Request_withOkhttp3WebSocketListener_withJavaUtilRandom_(self, request, listener, random);
  return self;
}

- (Okhttp3Request *)request {
  return originalRequest_;
}

- (jlong)queueSize {
  @synchronized(self) {
    return queueSize_;
  }
}

- (void)cancel {
  [((id<Okhttp3Call>) nil_chk(call_)) cancel];
}

- (void)connectWithOkhttp3OkHttpClient:(Okhttp3OkHttpClient *)client {
  client = [((Okhttp3OkHttpClient_Builder *) nil_chk([((Okhttp3OkHttpClient_Builder *) nil_chk([((Okhttp3OkHttpClient *) nil_chk(client)) newBuilder])) protocolsWithJavaUtilList:Okhttp3InternalWsRealWebSocket_ONLY_HTTP1])) build];
  jint pingIntervalMillis = [((Okhttp3OkHttpClient *) nil_chk(client)) pingIntervalMillis];
  Okhttp3Request *request = [((Okhttp3Request_Builder *) nil_chk([((Okhttp3Request_Builder *) nil_chk([((Okhttp3Request_Builder *) nil_chk([((Okhttp3Request_Builder *) nil_chk([((Okhttp3Request_Builder *) nil_chk([((Okhttp3Request *) nil_chk(originalRequest_)) newBuilder])) headerWithNSString:@"Upgrade" withNSString:@"websocket"])) headerWithNSString:@"Connection" withNSString:@"Upgrade"])) headerWithNSString:@"Sec-WebSocket-Key" withNSString:key_])) headerWithNSString:@"Sec-WebSocket-Version" withNSString:@"13"])) build];
  JreStrongAssign(&call_, [((Okhttp3InternalInternal *) nil_chk(JreLoadStatic(Okhttp3InternalInternal, instance))) newWebSocketCallWithOkhttp3OkHttpClient:client withOkhttp3Request:request]);
  [((id<Okhttp3Call>) nil_chk(call_)) enqueueWithOkhttp3Callback:create_Okhttp3InternalWsRealWebSocket_2_initWithOkhttp3InternalWsRealWebSocket_withOkhttp3Request_withInt_(self, request, pingIntervalMillis)];
}

- (void)checkResponseWithOkhttp3Response:(Okhttp3Response *)response {
  if ([((Okhttp3Response *) nil_chk(response)) code] != 101) {
    @throw create_JavaNetProtocolException_initWithNSString_(JreStrcat("$IC$C", @"Expected HTTP 101 response but was '", [response code], ' ', [response message], '\''));
  }
  NSString *headerConnection = [response headerWithNSString:@"Connection"];
  if (![@"Upgrade" java_equalsIgnoreCase:headerConnection]) {
    @throw create_JavaNetProtocolException_initWithNSString_(JreStrcat("$$C", @"Expected 'Connection' header value 'Upgrade' but was '", headerConnection, '\''));
  }
  NSString *headerUpgrade = [response headerWithNSString:@"Upgrade"];
  if (![@"websocket" java_equalsIgnoreCase:headerUpgrade]) {
    @throw create_JavaNetProtocolException_initWithNSString_(JreStrcat("$$C", @"Expected 'Upgrade' header value 'websocket' but was '", headerUpgrade, '\''));
  }
  NSString *headerAccept = [response headerWithNSString:@"Sec-WebSocket-Accept"];
  NSString *acceptExpected = [((OkioByteString *) nil_chk([((OkioByteString *) nil_chk(OkioByteString_encodeUtf8WithNSString_(JreStrcat("$$", key_, Okhttp3InternalWsWebSocketProtocol_ACCEPT_MAGIC)))) sha1])) base64];
  if (![((NSString *) nil_chk(acceptExpected)) isEqual:headerAccept]) {
    @throw create_JavaNetProtocolException_initWithNSString_(JreStrcat("$$$$C", @"Expected 'Sec-WebSocket-Accept' header value '", acceptExpected, @"' but was '", headerAccept, '\''));
  }
}

- (void)initReaderAndWriterWithNSString:(NSString *)name
                               withLong:(jlong)pingIntervalMillis
withOkhttp3InternalWsRealWebSocket_Streams:(Okhttp3InternalWsRealWebSocket_Streams *)streams {
  @synchronized(self) {
    JreStrongAssign(&self->streams_, streams);
    JreStrongAssignAndConsume(&self->writer_, new_Okhttp3InternalWsWebSocketWriter_initWithBoolean_withOkioBufferedSink_withJavaUtilRandom_(((Okhttp3InternalWsRealWebSocket_Streams *) nil_chk(streams))->client_, streams->sink_, random_));
    JreStrongAssignAndConsume(&self->executor_, new_JavaUtilConcurrentScheduledThreadPoolExecutor_initWithInt_withJavaUtilConcurrentThreadFactory_(1, Okhttp3InternalUtil_threadFactoryWithNSString_withBoolean_(name, false)));
    if (pingIntervalMillis != 0) {
      [executor_ scheduleAtFixedRateWithJavaLangRunnable:create_Okhttp3InternalWsRealWebSocket_PingRunnable_initWithOkhttp3InternalWsRealWebSocket_(self) withLong:pingIntervalMillis withLong:pingIntervalMillis withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    }
    if (![((JavaUtilArrayDeque *) nil_chk(messageAndCloseQueue_)) isEmpty]) {
      Okhttp3InternalWsRealWebSocket_runWriter(self);
    }
  }
  JreStrongAssignAndConsume(&reader_, new_Okhttp3InternalWsWebSocketReader_initWithBoolean_withOkioBufferedSource_withOkhttp3InternalWsWebSocketReader_FrameCallback_(streams->client_, streams->source_, self));
}

- (void)loopReader {
  while (receivedCloseCode_ == -1) {
    [((Okhttp3InternalWsWebSocketReader *) nil_chk(reader_)) processNextFrame];
  }
}

- (jboolean)processNextFrame {
  @try {
    [((Okhttp3InternalWsWebSocketReader *) nil_chk(reader_)) processNextFrame];
    return receivedCloseCode_ == -1;
  }
  @catch (JavaLangException *e) {
    [self failWebSocketWithJavaLangException:e withOkhttp3Response:nil];
    return false;
  }
}

- (void)awaitTerminationWithInt:(jint)timeout
 withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)timeUnit {
  [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(executor_)) awaitTerminationWithLong:timeout withJavaUtilConcurrentTimeUnit:timeUnit];
}

- (void)tearDown {
  if (cancelFuture_ != nil) {
    [cancelFuture_ cancelWithBoolean:false];
  }
  [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(executor_)) shutdown];
  [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(executor_)) awaitTerminationWithLong:10 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
}

- (jint)pingCount {
  @synchronized(self) {
    return pingCount_;
  }
}

- (jint)pongCount {
  @synchronized(self) {
    return pongCount_;
  }
}

- (void)onReadMessageWithNSString:(NSString *)text {
  [((Okhttp3WebSocketListener *) nil_chk(listener_)) onMessageWithOkhttp3WebSocket:self withNSString:text];
}

- (void)onReadMessageWithOkioByteString:(OkioByteString *)bytes {
  [((Okhttp3WebSocketListener *) nil_chk(listener_)) onMessageWithOkhttp3WebSocket:self withOkioByteString:bytes];
}

- (void)onReadPingWithOkioByteString:(OkioByteString *)payload {
  @synchronized(self) {
    if (failed_ || (enqueuedClose_ && [((JavaUtilArrayDeque *) nil_chk(messageAndCloseQueue_)) isEmpty])) return;
    [((JavaUtilArrayDeque *) nil_chk(pongQueue_)) addWithId:payload];
    Okhttp3InternalWsRealWebSocket_runWriter(self);
    pingCount_++;
  }
}

- (void)onReadPongWithOkioByteString:(OkioByteString *)buffer {
  @synchronized(self) {
    pongCount_++;
  }
}

- (void)onReadCloseWithInt:(jint)code
              withNSString:(NSString *)reason {
  if (code == -1) @throw create_JavaLangIllegalArgumentException_init();
  Okhttp3InternalWsRealWebSocket_Streams *toClose = nil;
  @synchronized(self) {
    if (receivedCloseCode_ != -1) @throw create_JavaLangIllegalStateException_initWithNSString_(@"already closed");
    receivedCloseCode_ = code;
    JreStrongAssign(&receivedCloseReason_, reason);
    if (enqueuedClose_ && [((JavaUtilArrayDeque *) nil_chk(messageAndCloseQueue_)) isEmpty]) {
      toClose = self->streams_;
      JreStrongAssign(&self->streams_, nil);
      if (cancelFuture_ != nil) [cancelFuture_ cancelWithBoolean:false];
      [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(self->executor_)) shutdown];
    }
  }
  @try {
    [((Okhttp3WebSocketListener *) nil_chk(listener_)) onClosingWithOkhttp3WebSocket:self withInt:code withNSString:reason];
    if (toClose != nil) {
      [listener_ onClosedWithOkhttp3WebSocket:self withInt:code withNSString:reason];
    }
  }
  @finally {
    Okhttp3InternalUtil_closeQuietlyWithJavaIoCloseable_(toClose);
  }
}

- (jboolean)sendWithNSString:(NSString *)text {
  if (text == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"text == null");
  return Okhttp3InternalWsRealWebSocket_sendWithOkioByteString_withInt_(self, OkioByteString_encodeUtf8WithNSString_(text), Okhttp3InternalWsWebSocketProtocol_OPCODE_TEXT);
}

- (jboolean)sendWithOkioByteString:(OkioByteString *)bytes {
  if (bytes == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"bytes == null");
  return Okhttp3InternalWsRealWebSocket_sendWithOkioByteString_withInt_(self, bytes, Okhttp3InternalWsWebSocketProtocol_OPCODE_BINARY);
}

- (jboolean)sendWithOkioByteString:(OkioByteString *)data
                           withInt:(jint)formatOpcode {
  return Okhttp3InternalWsRealWebSocket_sendWithOkioByteString_withInt_(self, data, formatOpcode);
}

- (jboolean)pongWithOkioByteString:(OkioByteString *)payload {
  @synchronized(self) {
    if (failed_ || (enqueuedClose_ && [((JavaUtilArrayDeque *) nil_chk(messageAndCloseQueue_)) isEmpty])) return false;
    [((JavaUtilArrayDeque *) nil_chk(pongQueue_)) addWithId:payload];
    Okhttp3InternalWsRealWebSocket_runWriter(self);
    return true;
  }
}

- (jboolean)closeWithInt:(jint)code
            withNSString:(NSString *)reason {
  return [self closeWithInt:code withNSString:reason withLong:Okhttp3InternalWsRealWebSocket_CANCEL_AFTER_CLOSE_MILLIS];
}

- (jboolean)closeWithInt:(jint)code
            withNSString:(NSString *)reason
                withLong:(jlong)cancelAfterCloseMillis {
  @synchronized(self) {
    Okhttp3InternalWsWebSocketProtocol_validateCloseCodeWithInt_(code);
    OkioByteString *reasonBytes = nil;
    if (reason != nil) {
      reasonBytes = OkioByteString_encodeUtf8WithNSString_(reason);
      if ([((OkioByteString *) nil_chk(reasonBytes)) size] > Okhttp3InternalWsWebSocketProtocol_CLOSE_MESSAGE_MAX) {
        @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J$$", @"reason.size() > ", Okhttp3InternalWsWebSocketProtocol_CLOSE_MESSAGE_MAX, @": ", reason));
      }
    }
    if (failed_ || enqueuedClose_) return false;
    enqueuedClose_ = true;
    [((JavaUtilArrayDeque *) nil_chk(messageAndCloseQueue_)) addWithId:create_Okhttp3InternalWsRealWebSocket_Close_initWithInt_withOkioByteString_withLong_(code, reasonBytes, cancelAfterCloseMillis)];
    Okhttp3InternalWsRealWebSocket_runWriter(self);
    return true;
  }
}

- (void)runWriter {
  Okhttp3InternalWsRealWebSocket_runWriter(self);
}

- (jboolean)writeOneFrame {
  Okhttp3InternalWsWebSocketWriter *writer;
  OkioByteString *pong;
  id messageOrClose = nil;
  jint receivedCloseCode = -1;
  NSString *receivedCloseReason = nil;
  Okhttp3InternalWsRealWebSocket_Streams *streamsToClose = nil;
  @synchronized(self) {
    if (failed_) {
      return false;
    }
    writer = self->writer_;
    pong = [((JavaUtilArrayDeque *) nil_chk(pongQueue_)) poll];
    if (pong == nil) {
      messageOrClose = [((JavaUtilArrayDeque *) nil_chk(messageAndCloseQueue_)) poll];
      if ([messageOrClose isKindOfClass:[Okhttp3InternalWsRealWebSocket_Close class]]) {
        receivedCloseCode = self->receivedCloseCode_;
        receivedCloseReason = self->receivedCloseReason_;
        if (receivedCloseCode != -1) {
          streamsToClose = self->streams_;
          JreStrongAssign(&self->streams_, nil);
          [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(self->executor_)) shutdown];
        }
        else {
          JreStrongAssign(&cancelFuture_, [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(executor_)) scheduleWithJavaLangRunnable:create_Okhttp3InternalWsRealWebSocket_CancelRunnable_initWithOkhttp3InternalWsRealWebSocket_(self) withLong:((Okhttp3InternalWsRealWebSocket_Close *) nil_chk(((Okhttp3InternalWsRealWebSocket_Close *) cast_chk(messageOrClose, [Okhttp3InternalWsRealWebSocket_Close class]))))->cancelAfterCloseMillis_ withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)]);
        }
      }
      else if (messageOrClose == nil) {
        return false;
      }
    }
  }
  @try {
    if (pong != nil) {
      [((Okhttp3InternalWsWebSocketWriter *) nil_chk(writer)) writePongWithOkioByteString:pong];
    }
    else if ([messageOrClose isKindOfClass:[Okhttp3InternalWsRealWebSocket_Message class]]) {
      OkioByteString *data = ((Okhttp3InternalWsRealWebSocket_Message *) nil_chk(((Okhttp3InternalWsRealWebSocket_Message *) cast_chk(messageOrClose, [Okhttp3InternalWsRealWebSocket_Message class]))))->data_;
      id<OkioBufferedSink> sink = OkioOkio_bufferWithOkioSink_([((Okhttp3InternalWsWebSocketWriter *) nil_chk(writer)) newMessageSinkWithInt:((Okhttp3InternalWsRealWebSocket_Message *) nil_chk(((Okhttp3InternalWsRealWebSocket_Message *) cast_chk(messageOrClose, [Okhttp3InternalWsRealWebSocket_Message class]))))->formatOpcode_ withLong:[((OkioByteString *) nil_chk(data)) size]]);
      [((id<OkioBufferedSink>) nil_chk(sink)) writeWithOkioByteString:data];
      [sink close];
      @synchronized(self) {
        queueSize_ -= [data size];
      }
    }
    else if ([messageOrClose isKindOfClass:[Okhttp3InternalWsRealWebSocket_Close class]]) {
      Okhttp3InternalWsRealWebSocket_Close *close = (Okhttp3InternalWsRealWebSocket_Close *) cast_chk(messageOrClose, [Okhttp3InternalWsRealWebSocket_Close class]);
      [((Okhttp3InternalWsWebSocketWriter *) nil_chk(writer)) writeCloseWithInt:((Okhttp3InternalWsRealWebSocket_Close *) nil_chk(close))->code_ withOkioByteString:close->reason_];
      if (streamsToClose != nil) {
        [((Okhttp3WebSocketListener *) nil_chk(listener_)) onClosedWithOkhttp3WebSocket:self withInt:receivedCloseCode withNSString:receivedCloseReason];
      }
    }
    else {
      @throw create_JavaLangAssertionError_init();
    }
    return true;
  }
  @finally {
    Okhttp3InternalUtil_closeQuietlyWithJavaIoCloseable_(streamsToClose);
  }
}

- (void)writePingFrame {
  Okhttp3InternalWsWebSocketWriter *writer;
  @synchronized(self) {
    if (failed_) return;
    writer = self->writer_;
  }
  @try {
    [((Okhttp3InternalWsWebSocketWriter *) nil_chk(writer)) writePingWithOkioByteString:JreLoadStatic(OkioByteString, EMPTY)];
  }
  @catch (JavaIoIOException *e) {
    [self failWebSocketWithJavaLangException:e withOkhttp3Response:nil];
  }
}

- (void)failWebSocketWithJavaLangException:(JavaLangException *)e
                       withOkhttp3Response:(Okhttp3Response *)response {
  Okhttp3InternalWsRealWebSocket_Streams *streamsToClose;
  @synchronized(self) {
    if (failed_) return;
    failed_ = true;
    streamsToClose = self->streams_;
    JreStrongAssign(&self->streams_, nil);
    if (cancelFuture_ != nil) [cancelFuture_ cancelWithBoolean:false];
    if (executor_ != nil) [executor_ shutdown];
  }
  @try {
    [((Okhttp3WebSocketListener *) nil_chk(listener_)) onFailureWithOkhttp3WebSocket:self withNSException:e withOkhttp3Response:response];
  }
  @finally {
    Okhttp3InternalUtil_closeQuietlyWithJavaIoCloseable_(streamsToClose);
  }
}

- (void)dealloc {
  RELEASE_(originalRequest_);
  RELEASE_(listener_);
  RELEASE_(random_);
  RELEASE_(key_);
  RELEASE_(call_);
  RELEASE_(writerRunnable_);
  RELEASE_(reader_);
  RELEASE_(writer_);
  RELEASE_(executor_);
  RELEASE_(streams_);
  RELEASE_(pongQueue_);
  RELEASE_(messageAndCloseQueue_);
  RELEASE_(cancelFuture_);
  RELEASE_(receivedCloseReason_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOkhttp3Request;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, 5, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 8, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, 8, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 10, 11, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 11, -1, -1, -1 },
    { NULL, "I", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 14, 8, -1, -1, -1 },
    { NULL, "V", 0x21, 15, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 16, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 19, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 19, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x22, 19, 20, -1, -1, -1, -1 },
    { NULL, "Z", 0x20, 21, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 22, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x20, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, 8, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 25, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3Request:withOkhttp3WebSocketListener:withJavaUtilRandom:);
  methods[1].selector = @selector(request);
  methods[2].selector = @selector(queueSize);
  methods[3].selector = @selector(cancel);
  methods[4].selector = @selector(connectWithOkhttp3OkHttpClient:);
  methods[5].selector = @selector(checkResponseWithOkhttp3Response:);
  methods[6].selector = @selector(initReaderAndWriterWithNSString:withLong:withOkhttp3InternalWsRealWebSocket_Streams:);
  methods[7].selector = @selector(loopReader);
  methods[8].selector = @selector(processNextFrame);
  methods[9].selector = @selector(awaitTerminationWithInt:withJavaUtilConcurrentTimeUnit:);
  methods[10].selector = @selector(tearDown);
  methods[11].selector = @selector(pingCount);
  methods[12].selector = @selector(pongCount);
  methods[13].selector = @selector(onReadMessageWithNSString:);
  methods[14].selector = @selector(onReadMessageWithOkioByteString:);
  methods[15].selector = @selector(onReadPingWithOkioByteString:);
  methods[16].selector = @selector(onReadPongWithOkioByteString:);
  methods[17].selector = @selector(onReadCloseWithInt:withNSString:);
  methods[18].selector = @selector(sendWithNSString:);
  methods[19].selector = @selector(sendWithOkioByteString:);
  methods[20].selector = @selector(sendWithOkioByteString:withInt:);
  methods[21].selector = @selector(pongWithOkioByteString:);
  methods[22].selector = @selector(closeWithInt:withNSString:);
  methods[23].selector = @selector(closeWithInt:withNSString:withLong:);
  methods[24].selector = @selector(runWriter);
  methods[25].selector = @selector(writeOneFrame);
  methods[26].selector = @selector(writePingFrame);
  methods[27].selector = @selector(failWebSocketWithJavaLangException:withOkhttp3Response:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ONLY_HTTP1", "LJavaUtilList;", .constantValue.asLong = 0, 0x1a, -1, 26, 27, -1 },
    { "MAX_QUEUE_SIZE", "J", .constantValue.asLong = Okhttp3InternalWsRealWebSocket_MAX_QUEUE_SIZE, 0x1a, -1, -1, -1, -1 },
    { "CANCEL_AFTER_CLOSE_MILLIS", "J", .constantValue.asLong = Okhttp3InternalWsRealWebSocket_CANCEL_AFTER_CLOSE_MILLIS, 0x1a, -1, -1, -1, -1 },
    { "originalRequest_", "LOkhttp3Request;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "listener_", "LOkhttp3WebSocketListener;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "random_", "LJavaUtilRandom;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "key_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "call_", "LOkhttp3Call;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "writerRunnable_", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "reader_", "LOkhttp3InternalWsWebSocketReader;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "writer_", "LOkhttp3InternalWsWebSocketWriter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "executor_", "LJavaUtilConcurrentScheduledExecutorService;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "streams_", "LOkhttp3InternalWsRealWebSocket_Streams;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pongQueue_", "LJavaUtilArrayDeque;", .constantValue.asLong = 0, 0x12, -1, -1, 28, -1 },
    { "messageAndCloseQueue_", "LJavaUtilArrayDeque;", .constantValue.asLong = 0, 0x12, -1, -1, 29, -1 },
    { "queueSize_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "enqueuedClose_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cancelFuture_", "LJavaUtilConcurrentScheduledFuture;", .constantValue.asLong = 0, 0x2, -1, -1, 30, -1 },
    { "receivedCloseCode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "receivedCloseReason_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "failed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pingCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "pongCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3Request;LOkhttp3WebSocketListener;LJavaUtilRandom;", "connect", "LOkhttp3OkHttpClient;", "checkResponse", "LOkhttp3Response;", "LJavaNetProtocolException;", "initReaderAndWriter", "LNSString;JLOkhttp3InternalWsRealWebSocket_Streams;", "LJavaIoIOException;", "awaitTermination", "ILJavaUtilConcurrentTimeUnit;", "LJavaLangInterruptedException;", "onReadMessage", "LNSString;", "LOkioByteString;", "onReadPing", "onReadPong", "onReadClose", "ILNSString;", "send", "LOkioByteString;I", "pong", "close", "ILNSString;J", "failWebSocket", "LJavaLangException;LOkhttp3Response;", &Okhttp3InternalWsRealWebSocket_ONLY_HTTP1, "Ljava/util/List<Lokhttp3/Protocol;>;", "Ljava/util/ArrayDeque<Lokio/ByteString;>;", "Ljava/util/ArrayDeque<Ljava/lang/Object;>;", "Ljava/util/concurrent/ScheduledFuture<*>;", "LOkhttp3InternalWsRealWebSocket_PingRunnable;LOkhttp3InternalWsRealWebSocket_Message;LOkhttp3InternalWsRealWebSocket_Close;LOkhttp3InternalWsRealWebSocket_Streams;LOkhttp3InternalWsRealWebSocket_CancelRunnable;" };
  static const J2ObjcClassInfo _Okhttp3InternalWsRealWebSocket = { "RealWebSocket", "okhttp3.internal.ws", ptrTable, methods, fields, 7, 0x11, 28, 23, -1, 31, -1, -1, -1 };
  return &_Okhttp3InternalWsRealWebSocket;
}

+ (void)initialize {
  if (self == [Okhttp3InternalWsRealWebSocket class]) {
    JreStrongAssign(&Okhttp3InternalWsRealWebSocket_ONLY_HTTP1, JavaUtilCollections_singletonListWithId_(JreLoadEnum(Okhttp3Protocol, HTTP_1_1)));
    J2OBJC_SET_INITIALIZED(Okhttp3InternalWsRealWebSocket)
  }
}

@end

void Okhttp3InternalWsRealWebSocket_initWithOkhttp3Request_withOkhttp3WebSocketListener_withJavaUtilRandom_(Okhttp3InternalWsRealWebSocket *self, Okhttp3Request *request, Okhttp3WebSocketListener *listener, JavaUtilRandom *random) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->pongQueue_, new_JavaUtilArrayDeque_init());
  JreStrongAssignAndConsume(&self->messageAndCloseQueue_, new_JavaUtilArrayDeque_init());
  self->receivedCloseCode_ = -1;
  if (![@"GET" isEqual:[((Okhttp3Request *) nil_chk(request)) method]]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Request must be GET: ", [request method]));
  }
  JreStrongAssign(&self->originalRequest_, request);
  JreStrongAssign(&self->listener_, listener);
  JreStrongAssign(&self->random_, random);
  IOSByteArray *nonce = [IOSByteArray arrayWithLength:16];
  [((JavaUtilRandom *) nil_chk(random)) nextBytesWithByteArray:nonce];
  JreStrongAssign(&self->key_, [((OkioByteString *) nil_chk(OkioByteString_ofWithByteArray_(nonce))) base64]);
  JreStrongAssignAndConsume(&self->writerRunnable_, new_Okhttp3InternalWsRealWebSocket_1_initWithOkhttp3InternalWsRealWebSocket_(self));
}

Okhttp3InternalWsRealWebSocket *new_Okhttp3InternalWsRealWebSocket_initWithOkhttp3Request_withOkhttp3WebSocketListener_withJavaUtilRandom_(Okhttp3Request *request, Okhttp3WebSocketListener *listener, JavaUtilRandom *random) {
  J2OBJC_NEW_IMPL(Okhttp3InternalWsRealWebSocket, initWithOkhttp3Request_withOkhttp3WebSocketListener_withJavaUtilRandom_, request, listener, random)
}

Okhttp3InternalWsRealWebSocket *create_Okhttp3InternalWsRealWebSocket_initWithOkhttp3Request_withOkhttp3WebSocketListener_withJavaUtilRandom_(Okhttp3Request *request, Okhttp3WebSocketListener *listener, JavaUtilRandom *random) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalWsRealWebSocket, initWithOkhttp3Request_withOkhttp3WebSocketListener_withJavaUtilRandom_, request, listener, random)
}

jboolean Okhttp3InternalWsRealWebSocket_sendWithOkioByteString_withInt_(Okhttp3InternalWsRealWebSocket *self, OkioByteString *data, jint formatOpcode) {
  @synchronized(self) {
    if (self->failed_ || self->enqueuedClose_) return false;
    if (self->queueSize_ + [((OkioByteString *) nil_chk(data)) size] > Okhttp3InternalWsRealWebSocket_MAX_QUEUE_SIZE) {
      [self closeWithInt:Okhttp3InternalWsWebSocketProtocol_CLOSE_CLIENT_GOING_AWAY withNSString:nil];
      return false;
    }
    self->queueSize_ += [data size];
    [((JavaUtilArrayDeque *) nil_chk(self->messageAndCloseQueue_)) addWithId:create_Okhttp3InternalWsRealWebSocket_Message_initWithInt_withOkioByteString_(formatOpcode, data)];
    Okhttp3InternalWsRealWebSocket_runWriter(self);
    return true;
  }
}

void Okhttp3InternalWsRealWebSocket_runWriter(Okhttp3InternalWsRealWebSocket *self) {
  JreAssert(((JavaLangThread_holdsLockWithId_(self))), (@"okhttp3/internal/ws/RealWebSocket.java:420 condition failed: assert (Thread.holdsLock(this));"));
  if (self->executor_ != nil) {
    [self->executor_ executeWithJavaLangRunnable:self->writerRunnable_];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalWsRealWebSocket)

@implementation Okhttp3InternalWsRealWebSocket_1

- (instancetype)initWithOkhttp3InternalWsRealWebSocket:(Okhttp3InternalWsRealWebSocket *)outer$ {
  Okhttp3InternalWsRealWebSocket_1_initWithOkhttp3InternalWsRealWebSocket_(self, outer$);
  return self;
}

- (void)run {
  @try {
    while ([this$0_ writeOneFrame]) {
    }
  }
  @catch (JavaIoIOException *e) {
    [this$0_ failWebSocketWithJavaLangException:e withOkhttp3Response:nil];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalWsRealWebSocket:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3InternalWsRealWebSocket;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3InternalWsRealWebSocket;", "initWithOkhttp3Request:withOkhttp3WebSocketListener:withJavaUtilRandom:" };
  static const J2ObjcClassInfo _Okhttp3InternalWsRealWebSocket_1 = { "", "okhttp3.internal.ws", ptrTable, methods, fields, 7, 0x8018, 2, 1, 0, -1, 1, -1, -1 };
  return &_Okhttp3InternalWsRealWebSocket_1;
}

@end

void Okhttp3InternalWsRealWebSocket_1_initWithOkhttp3InternalWsRealWebSocket_(Okhttp3InternalWsRealWebSocket_1 *self, Okhttp3InternalWsRealWebSocket *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

Okhttp3InternalWsRealWebSocket_1 *new_Okhttp3InternalWsRealWebSocket_1_initWithOkhttp3InternalWsRealWebSocket_(Okhttp3InternalWsRealWebSocket *outer$) {
  J2OBJC_NEW_IMPL(Okhttp3InternalWsRealWebSocket_1, initWithOkhttp3InternalWsRealWebSocket_, outer$)
}

Okhttp3InternalWsRealWebSocket_1 *create_Okhttp3InternalWsRealWebSocket_1_initWithOkhttp3InternalWsRealWebSocket_(Okhttp3InternalWsRealWebSocket *outer$) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalWsRealWebSocket_1, initWithOkhttp3InternalWsRealWebSocket_, outer$)
}

@implementation Okhttp3InternalWsRealWebSocket_2

- (instancetype)initWithOkhttp3InternalWsRealWebSocket:(Okhttp3InternalWsRealWebSocket *)outer$
                                    withOkhttp3Request:(Okhttp3Request *)capture$0
                                               withInt:(jint)capture$1 {
  Okhttp3InternalWsRealWebSocket_2_initWithOkhttp3InternalWsRealWebSocket_withOkhttp3Request_withInt_(self, outer$, capture$0, capture$1);
  return self;
}

- (void)onResponseWithOkhttp3Call:(id<Okhttp3Call>)call
              withOkhttp3Response:(Okhttp3Response *)response {
  @try {
    [this$0_ checkResponseWithOkhttp3Response:response];
  }
  @catch (JavaNetProtocolException *e) {
    [this$0_ failWebSocketWithJavaLangException:e withOkhttp3Response:response];
    Okhttp3InternalUtil_closeQuietlyWithJavaIoCloseable_(response);
    return;
  }
  Okhttp3InternalConnectionStreamAllocation *streamAllocation = [((Okhttp3InternalInternal *) nil_chk(JreLoadStatic(Okhttp3InternalInternal, instance))) streamAllocationWithOkhttp3Call:call];
  [((Okhttp3InternalConnectionStreamAllocation *) nil_chk(streamAllocation)) noNewStreams];
  Okhttp3InternalWsRealWebSocket_Streams *streams = [((Okhttp3InternalConnectionRealConnection *) nil_chk([streamAllocation connection])) newWebSocketStreamsWithOkhttp3InternalConnectionStreamAllocation:streamAllocation];
  @try {
    [((Okhttp3WebSocketListener *) nil_chk(this$0_->listener_)) onOpenWithOkhttp3WebSocket:this$0_ withOkhttp3Response:response];
    NSString *name = JreStrcat("$$", @"OkHttp WebSocket ", [((Okhttp3HttpUrl *) nil_chk([((Okhttp3Request *) nil_chk(val$request_)) url])) redact]);
    [this$0_ initReaderAndWriterWithNSString:name withLong:val$pingIntervalMillis_ withOkhttp3InternalWsRealWebSocket_Streams:streams];
    [((JavaNetSocket *) nil_chk([((Okhttp3InternalConnectionRealConnection *) nil_chk([streamAllocation connection])) socket])) setSoTimeoutWithInt:0];
    [this$0_ loopReader];
  }
  @catch (JavaLangException *e) {
    [this$0_ failWebSocketWithJavaLangException:e withOkhttp3Response:nil];
  }
}

- (void)onFailureWithOkhttp3Call:(id<Okhttp3Call>)call
           withJavaIoIOException:(JavaIoIOException *)e {
  [this$0_ failWebSocketWithJavaLangException:e withOkhttp3Response:nil];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$request_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalWsRealWebSocket:withOkhttp3Request:withInt:);
  methods[1].selector = @selector(onResponseWithOkhttp3Call:withOkhttp3Response:);
  methods[2].selector = @selector(onFailureWithOkhttp3Call:withJavaIoIOException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3InternalWsRealWebSocket;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$request_", "LOkhttp3Request;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$pingIntervalMillis_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onResponse", "LOkhttp3Call;LOkhttp3Response;", "onFailure", "LOkhttp3Call;LJavaIoIOException;", "LOkhttp3InternalWsRealWebSocket;", "connectWithOkhttp3OkHttpClient:" };
  static const J2ObjcClassInfo _Okhttp3InternalWsRealWebSocket_2 = { "", "okhttp3.internal.ws", ptrTable, methods, fields, 7, 0x8018, 3, 3, 4, -1, 5, -1, -1 };
  return &_Okhttp3InternalWsRealWebSocket_2;
}

@end

void Okhttp3InternalWsRealWebSocket_2_initWithOkhttp3InternalWsRealWebSocket_withOkhttp3Request_withInt_(Okhttp3InternalWsRealWebSocket_2 *self, Okhttp3InternalWsRealWebSocket *outer$, Okhttp3Request *capture$0, jint capture$1) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$request_, capture$0);
  self->val$pingIntervalMillis_ = capture$1;
  NSObject_init(self);
}

Okhttp3InternalWsRealWebSocket_2 *new_Okhttp3InternalWsRealWebSocket_2_initWithOkhttp3InternalWsRealWebSocket_withOkhttp3Request_withInt_(Okhttp3InternalWsRealWebSocket *outer$, Okhttp3Request *capture$0, jint capture$1) {
  J2OBJC_NEW_IMPL(Okhttp3InternalWsRealWebSocket_2, initWithOkhttp3InternalWsRealWebSocket_withOkhttp3Request_withInt_, outer$, capture$0, capture$1)
}

Okhttp3InternalWsRealWebSocket_2 *create_Okhttp3InternalWsRealWebSocket_2_initWithOkhttp3InternalWsRealWebSocket_withOkhttp3Request_withInt_(Okhttp3InternalWsRealWebSocket *outer$, Okhttp3Request *capture$0, jint capture$1) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalWsRealWebSocket_2, initWithOkhttp3InternalWsRealWebSocket_withOkhttp3Request_withInt_, outer$, capture$0, capture$1)
}

@implementation Okhttp3InternalWsRealWebSocket_PingRunnable

- (instancetype)initWithOkhttp3InternalWsRealWebSocket:(Okhttp3InternalWsRealWebSocket *)outer$ {
  Okhttp3InternalWsRealWebSocket_PingRunnable_initWithOkhttp3InternalWsRealWebSocket_(self, outer$);
  return self;
}

- (void)run {
  [this$0_ writePingFrame];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalWsRealWebSocket:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3InternalWsRealWebSocket;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3InternalWsRealWebSocket;" };
  static const J2ObjcClassInfo _Okhttp3InternalWsRealWebSocket_PingRunnable = { "PingRunnable", "okhttp3.internal.ws", ptrTable, methods, fields, 7, 0x12, 2, 1, 0, -1, -1, -1, -1 };
  return &_Okhttp3InternalWsRealWebSocket_PingRunnable;
}

@end

void Okhttp3InternalWsRealWebSocket_PingRunnable_initWithOkhttp3InternalWsRealWebSocket_(Okhttp3InternalWsRealWebSocket_PingRunnable *self, Okhttp3InternalWsRealWebSocket *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

Okhttp3InternalWsRealWebSocket_PingRunnable *new_Okhttp3InternalWsRealWebSocket_PingRunnable_initWithOkhttp3InternalWsRealWebSocket_(Okhttp3InternalWsRealWebSocket *outer$) {
  J2OBJC_NEW_IMPL(Okhttp3InternalWsRealWebSocket_PingRunnable, initWithOkhttp3InternalWsRealWebSocket_, outer$)
}

Okhttp3InternalWsRealWebSocket_PingRunnable *create_Okhttp3InternalWsRealWebSocket_PingRunnable_initWithOkhttp3InternalWsRealWebSocket_(Okhttp3InternalWsRealWebSocket *outer$) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalWsRealWebSocket_PingRunnable, initWithOkhttp3InternalWsRealWebSocket_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalWsRealWebSocket_PingRunnable)

@implementation Okhttp3InternalWsRealWebSocket_Message

- (instancetype)initWithInt:(jint)formatOpcode
         withOkioByteString:(OkioByteString *)data {
  Okhttp3InternalWsRealWebSocket_Message_initWithInt_withOkioByteString_(self, formatOpcode, data);
  return self;
}

- (void)dealloc {
  RELEASE_(data_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withOkioByteString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "formatOpcode_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "data_", "LOkioByteString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILOkioByteString;", "LOkhttp3InternalWsRealWebSocket;" };
  static const J2ObjcClassInfo _Okhttp3InternalWsRealWebSocket_Message = { "Message", "okhttp3.internal.ws", ptrTable, methods, fields, 7, 0x18, 1, 2, 1, -1, -1, -1, -1 };
  return &_Okhttp3InternalWsRealWebSocket_Message;
}

@end

void Okhttp3InternalWsRealWebSocket_Message_initWithInt_withOkioByteString_(Okhttp3InternalWsRealWebSocket_Message *self, jint formatOpcode, OkioByteString *data) {
  NSObject_init(self);
  self->formatOpcode_ = formatOpcode;
  JreStrongAssign(&self->data_, data);
}

Okhttp3InternalWsRealWebSocket_Message *new_Okhttp3InternalWsRealWebSocket_Message_initWithInt_withOkioByteString_(jint formatOpcode, OkioByteString *data) {
  J2OBJC_NEW_IMPL(Okhttp3InternalWsRealWebSocket_Message, initWithInt_withOkioByteString_, formatOpcode, data)
}

Okhttp3InternalWsRealWebSocket_Message *create_Okhttp3InternalWsRealWebSocket_Message_initWithInt_withOkioByteString_(jint formatOpcode, OkioByteString *data) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalWsRealWebSocket_Message, initWithInt_withOkioByteString_, formatOpcode, data)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalWsRealWebSocket_Message)

@implementation Okhttp3InternalWsRealWebSocket_Close

- (instancetype)initWithInt:(jint)code
         withOkioByteString:(OkioByteString *)reason
                   withLong:(jlong)cancelAfterCloseMillis {
  Okhttp3InternalWsRealWebSocket_Close_initWithInt_withOkioByteString_withLong_(self, code, reason, cancelAfterCloseMillis);
  return self;
}

- (void)dealloc {
  RELEASE_(reason_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withOkioByteString:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "code_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "reason_", "LOkioByteString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "cancelAfterCloseMillis_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILOkioByteString;J", "LOkhttp3InternalWsRealWebSocket;" };
  static const J2ObjcClassInfo _Okhttp3InternalWsRealWebSocket_Close = { "Close", "okhttp3.internal.ws", ptrTable, methods, fields, 7, 0x18, 1, 3, 1, -1, -1, -1, -1 };
  return &_Okhttp3InternalWsRealWebSocket_Close;
}

@end

void Okhttp3InternalWsRealWebSocket_Close_initWithInt_withOkioByteString_withLong_(Okhttp3InternalWsRealWebSocket_Close *self, jint code, OkioByteString *reason, jlong cancelAfterCloseMillis) {
  NSObject_init(self);
  self->code_ = code;
  JreStrongAssign(&self->reason_, reason);
  self->cancelAfterCloseMillis_ = cancelAfterCloseMillis;
}

Okhttp3InternalWsRealWebSocket_Close *new_Okhttp3InternalWsRealWebSocket_Close_initWithInt_withOkioByteString_withLong_(jint code, OkioByteString *reason, jlong cancelAfterCloseMillis) {
  J2OBJC_NEW_IMPL(Okhttp3InternalWsRealWebSocket_Close, initWithInt_withOkioByteString_withLong_, code, reason, cancelAfterCloseMillis)
}

Okhttp3InternalWsRealWebSocket_Close *create_Okhttp3InternalWsRealWebSocket_Close_initWithInt_withOkioByteString_withLong_(jint code, OkioByteString *reason, jlong cancelAfterCloseMillis) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalWsRealWebSocket_Close, initWithInt_withOkioByteString_withLong_, code, reason, cancelAfterCloseMillis)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalWsRealWebSocket_Close)

@implementation Okhttp3InternalWsRealWebSocket_Streams

- (instancetype)initWithBoolean:(jboolean)client
         withOkioBufferedSource:(id<OkioBufferedSource>)source
           withOkioBufferedSink:(id<OkioBufferedSink>)sink {
  Okhttp3InternalWsRealWebSocket_Streams_initWithBoolean_withOkioBufferedSource_withOkioBufferedSink_(self, client, source, sink);
  return self;
}

- (void)dealloc {
  RELEASE_(source_);
  RELEASE_(sink_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithBoolean:withOkioBufferedSource:withOkioBufferedSink:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "client_", "Z", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "source_", "LOkioBufferedSource;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "sink_", "LOkioBufferedSink;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ZLOkioBufferedSource;LOkioBufferedSink;", "LOkhttp3InternalWsRealWebSocket;" };
  static const J2ObjcClassInfo _Okhttp3InternalWsRealWebSocket_Streams = { "Streams", "okhttp3.internal.ws", ptrTable, methods, fields, 7, 0x409, 1, 3, 1, -1, -1, -1, -1 };
  return &_Okhttp3InternalWsRealWebSocket_Streams;
}

@end

void Okhttp3InternalWsRealWebSocket_Streams_initWithBoolean_withOkioBufferedSource_withOkioBufferedSink_(Okhttp3InternalWsRealWebSocket_Streams *self, jboolean client, id<OkioBufferedSource> source, id<OkioBufferedSink> sink) {
  NSObject_init(self);
  self->client_ = client;
  JreStrongAssign(&self->source_, source);
  JreStrongAssign(&self->sink_, sink);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalWsRealWebSocket_Streams)

@implementation Okhttp3InternalWsRealWebSocket_CancelRunnable

- (instancetype)initWithOkhttp3InternalWsRealWebSocket:(Okhttp3InternalWsRealWebSocket *)outer$ {
  Okhttp3InternalWsRealWebSocket_CancelRunnable_initWithOkhttp3InternalWsRealWebSocket_(self, outer$);
  return self;
}

- (void)run {
  [this$0_ cancel];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3InternalWsRealWebSocket:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOkhttp3InternalWsRealWebSocket;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3InternalWsRealWebSocket;" };
  static const J2ObjcClassInfo _Okhttp3InternalWsRealWebSocket_CancelRunnable = { "CancelRunnable", "okhttp3.internal.ws", ptrTable, methods, fields, 7, 0x10, 2, 1, 0, -1, -1, -1, -1 };
  return &_Okhttp3InternalWsRealWebSocket_CancelRunnable;
}

@end

void Okhttp3InternalWsRealWebSocket_CancelRunnable_initWithOkhttp3InternalWsRealWebSocket_(Okhttp3InternalWsRealWebSocket_CancelRunnable *self, Okhttp3InternalWsRealWebSocket *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

Okhttp3InternalWsRealWebSocket_CancelRunnable *new_Okhttp3InternalWsRealWebSocket_CancelRunnable_initWithOkhttp3InternalWsRealWebSocket_(Okhttp3InternalWsRealWebSocket *outer$) {
  J2OBJC_NEW_IMPL(Okhttp3InternalWsRealWebSocket_CancelRunnable, initWithOkhttp3InternalWsRealWebSocket_, outer$)
}

Okhttp3InternalWsRealWebSocket_CancelRunnable *create_Okhttp3InternalWsRealWebSocket_CancelRunnable_initWithOkhttp3InternalWsRealWebSocket_(Okhttp3InternalWsRealWebSocket *outer$) {
  J2OBJC_CREATE_IMPL(Okhttp3InternalWsRealWebSocket_CancelRunnable, initWithOkhttp3InternalWsRealWebSocket_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Okhttp3InternalWsRealWebSocket_CancelRunnable)
