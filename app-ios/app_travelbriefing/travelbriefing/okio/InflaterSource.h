//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okio/InflaterSource.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OkioInflaterSource")
#ifdef RESTRICT_OkioInflaterSource
#define INCLUDE_ALL_OkioInflaterSource 0
#else
#define INCLUDE_ALL_OkioInflaterSource 1
#endif
#undef RESTRICT_OkioInflaterSource

#if !defined (OkioInflaterSource_) && (INCLUDE_ALL_OkioInflaterSource || defined(INCLUDE_OkioInflaterSource))
#define OkioInflaterSource_

#define RESTRICT_OkioSource 1
#define INCLUDE_OkioSource 1
#include "okio/Source.h"

@class JavaUtilZipInflater;
@class OkioBuffer;
@class OkioTimeout;
@protocol OkioBufferedSource;

@interface OkioInflaterSource : NSObject < OkioSource >

#pragma mark Public

- (instancetype)initWithOkioSource:(id<OkioSource>)source
           withJavaUtilZipInflater:(JavaUtilZipInflater *)inflater;

- (void)close;

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount;

- (jboolean)refill;

- (OkioTimeout *)timeout;

#pragma mark Package-Private

- (instancetype)initWithOkioBufferedSource:(id<OkioBufferedSource>)source
                   withJavaUtilZipInflater:(JavaUtilZipInflater *)inflater;

@end

J2OBJC_EMPTY_STATIC_INIT(OkioInflaterSource)

FOUNDATION_EXPORT void OkioInflaterSource_initWithOkioSource_withJavaUtilZipInflater_(OkioInflaterSource *self, id<OkioSource> source, JavaUtilZipInflater *inflater);

FOUNDATION_EXPORT OkioInflaterSource *new_OkioInflaterSource_initWithOkioSource_withJavaUtilZipInflater_(id<OkioSource> source, JavaUtilZipInflater *inflater) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OkioInflaterSource *create_OkioInflaterSource_initWithOkioSource_withJavaUtilZipInflater_(id<OkioSource> source, JavaUtilZipInflater *inflater);

FOUNDATION_EXPORT void OkioInflaterSource_initWithOkioBufferedSource_withJavaUtilZipInflater_(OkioInflaterSource *self, id<OkioBufferedSource> source, JavaUtilZipInflater *inflater);

FOUNDATION_EXPORT OkioInflaterSource *new_OkioInflaterSource_initWithOkioBufferedSource_withJavaUtilZipInflater_(id<OkioBufferedSource> source, JavaUtilZipInflater *inflater) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OkioInflaterSource *create_OkioInflaterSource_initWithOkioBufferedSource_withJavaUtilZipInflater_(id<OkioBufferedSource> source, JavaUtilZipInflater *inflater);

J2OBJC_TYPE_LITERAL_HEADER(OkioInflaterSource)

#endif

#pragma pop_macro("INCLUDE_ALL_OkioInflaterSource")
