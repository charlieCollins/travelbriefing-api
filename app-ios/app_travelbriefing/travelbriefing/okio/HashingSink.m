//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okio/HashingSink.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/AssertionError.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/MessageDigest.h"
#include "java/security/NoSuchAlgorithmException.h"
#include "javax/crypto/Mac.h"
#include "javax/crypto/spec/SecretKeySpec.h"
#include "okio/Buffer.h"
#include "okio/ByteString.h"
#include "okio/ForwardingSink.h"
#include "okio/HashingSink.h"
#include "okio/Segment.h"
#include "okio/Sink.h"
#include "okio/Util.h"

@interface OkioHashingSink () {
 @public
  JavaSecurityMessageDigest *messageDigest_;
  JavaxCryptoMac *mac_;
}

- (instancetype)initWithOkioSink:(id<OkioSink>)sink
                    withNSString:(NSString *)algorithm;

- (instancetype)initWithOkioSink:(id<OkioSink>)sink
              withOkioByteString:(OkioByteString *)key
                    withNSString:(NSString *)algorithm;

@end

J2OBJC_FIELD_SETTER(OkioHashingSink, messageDigest_, JavaSecurityMessageDigest *)
J2OBJC_FIELD_SETTER(OkioHashingSink, mac_, JavaxCryptoMac *)

__attribute__((unused)) static void OkioHashingSink_initWithOkioSink_withNSString_(OkioHashingSink *self, id<OkioSink> sink, NSString *algorithm);

__attribute__((unused)) static OkioHashingSink *new_OkioHashingSink_initWithOkioSink_withNSString_(id<OkioSink> sink, NSString *algorithm) NS_RETURNS_RETAINED;

__attribute__((unused)) static OkioHashingSink *create_OkioHashingSink_initWithOkioSink_withNSString_(id<OkioSink> sink, NSString *algorithm);

__attribute__((unused)) static void OkioHashingSink_initWithOkioSink_withOkioByteString_withNSString_(OkioHashingSink *self, id<OkioSink> sink, OkioByteString *key, NSString *algorithm);

__attribute__((unused)) static OkioHashingSink *new_OkioHashingSink_initWithOkioSink_withOkioByteString_withNSString_(id<OkioSink> sink, OkioByteString *key, NSString *algorithm) NS_RETURNS_RETAINED;

__attribute__((unused)) static OkioHashingSink *create_OkioHashingSink_initWithOkioSink_withOkioByteString_withNSString_(id<OkioSink> sink, OkioByteString *key, NSString *algorithm);

@implementation OkioHashingSink

+ (OkioHashingSink *)md5WithOkioSink:(id<OkioSink>)sink {
  return OkioHashingSink_md5WithOkioSink_(sink);
}

+ (OkioHashingSink *)sha1WithOkioSink:(id<OkioSink>)sink {
  return OkioHashingSink_sha1WithOkioSink_(sink);
}

+ (OkioHashingSink *)sha256WithOkioSink:(id<OkioSink>)sink {
  return OkioHashingSink_sha256WithOkioSink_(sink);
}

+ (OkioHashingSink *)hmacSha1WithOkioSink:(id<OkioSink>)sink
                       withOkioByteString:(OkioByteString *)key {
  return OkioHashingSink_hmacSha1WithOkioSink_withOkioByteString_(sink, key);
}

+ (OkioHashingSink *)hmacSha256WithOkioSink:(id<OkioSink>)sink
                         withOkioByteString:(OkioByteString *)key {
  return OkioHashingSink_hmacSha256WithOkioSink_withOkioByteString_(sink, key);
}

- (instancetype)initWithOkioSink:(id<OkioSink>)sink
                    withNSString:(NSString *)algorithm {
  OkioHashingSink_initWithOkioSink_withNSString_(self, sink, algorithm);
  return self;
}

- (instancetype)initWithOkioSink:(id<OkioSink>)sink
              withOkioByteString:(OkioByteString *)key
                    withNSString:(NSString *)algorithm {
  OkioHashingSink_initWithOkioSink_withOkioByteString_withNSString_(self, sink, key, algorithm);
  return self;
}

- (void)writeWithOkioBuffer:(OkioBuffer *)source
                   withLong:(jlong)byteCount {
  OkioUtil_checkOffsetAndCountWithLong_withLong_withLong_(((OkioBuffer *) nil_chk(source))->size_, 0, byteCount);
  jlong hashedCount = 0;
  for (OkioSegment *s = source->head_; hashedCount < byteCount; s = s->next_) {
    jint toHash = (jint) JavaLangMath_minWithLong_withLong_(byteCount - hashedCount, ((OkioSegment *) nil_chk(s))->limit_ - s->pos_);
    if (messageDigest_ != nil) {
      [messageDigest_ updateWithByteArray:s->data_ withInt:s->pos_ withInt:toHash];
    }
    else {
      [((JavaxCryptoMac *) nil_chk(mac_)) updateWithByteArray:s->data_ withInt:s->pos_ withInt:toHash];
    }
    hashedCount += toHash;
  }
  [super writeWithOkioBuffer:source withLong:byteCount];
}

- (OkioByteString *)hash__ {
  IOSByteArray *result = messageDigest_ != nil ? [messageDigest_ digest] : [((JavaxCryptoMac *) nil_chk(mac_)) doFinal];
  return OkioByteString_ofWithByteArray_(result);
}

- (void)dealloc {
  RELEASE_(messageDigest_);
  RELEASE_(mac_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOkioHashingSink;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOkioHashingSink;", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "LOkioHashingSink;", 0x9, 3, 1, -1, -1, -1, -1 },
    { NULL, "LOkioHashingSink;", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOkioHashingSink;", 0x9, 6, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 7, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, 11, -1, -1, -1 },
    { NULL, "LOkioByteString;", 0x1, 12, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(md5WithOkioSink:);
  methods[1].selector = @selector(sha1WithOkioSink:);
  methods[2].selector = @selector(sha256WithOkioSink:);
  methods[3].selector = @selector(hmacSha1WithOkioSink:withOkioByteString:);
  methods[4].selector = @selector(hmacSha256WithOkioSink:withOkioByteString:);
  methods[5].selector = @selector(initWithOkioSink:withNSString:);
  methods[6].selector = @selector(initWithOkioSink:withOkioByteString:withNSString:);
  methods[7].selector = @selector(writeWithOkioBuffer:withLong:);
  methods[8].selector = @selector(hash__);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "messageDigest_", "LJavaSecurityMessageDigest;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mac_", "LJavaxCryptoMac;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "md5", "LOkioSink;", "sha1", "sha256", "hmacSha1", "LOkioSink;LOkioByteString;", "hmacSha256", "LOkioSink;LNSString;", "LOkioSink;LOkioByteString;LNSString;", "write", "LOkioBuffer;J", "LJavaIoIOException;", "hash" };
  static const J2ObjcClassInfo _OkioHashingSink = { "HashingSink", "okio", ptrTable, methods, fields, 7, 0x11, 9, 2, -1, -1, -1, -1, -1 };
  return &_OkioHashingSink;
}

@end

OkioHashingSink *OkioHashingSink_md5WithOkioSink_(id<OkioSink> sink) {
  OkioHashingSink_initialize();
  return create_OkioHashingSink_initWithOkioSink_withNSString_(sink, @"MD5");
}

OkioHashingSink *OkioHashingSink_sha1WithOkioSink_(id<OkioSink> sink) {
  OkioHashingSink_initialize();
  return create_OkioHashingSink_initWithOkioSink_withNSString_(sink, @"SHA-1");
}

OkioHashingSink *OkioHashingSink_sha256WithOkioSink_(id<OkioSink> sink) {
  OkioHashingSink_initialize();
  return create_OkioHashingSink_initWithOkioSink_withNSString_(sink, @"SHA-256");
}

OkioHashingSink *OkioHashingSink_hmacSha1WithOkioSink_withOkioByteString_(id<OkioSink> sink, OkioByteString *key) {
  OkioHashingSink_initialize();
  return create_OkioHashingSink_initWithOkioSink_withOkioByteString_withNSString_(sink, key, @"HmacSHA1");
}

OkioHashingSink *OkioHashingSink_hmacSha256WithOkioSink_withOkioByteString_(id<OkioSink> sink, OkioByteString *key) {
  OkioHashingSink_initialize();
  return create_OkioHashingSink_initWithOkioSink_withOkioByteString_withNSString_(sink, key, @"HmacSHA256");
}

void OkioHashingSink_initWithOkioSink_withNSString_(OkioHashingSink *self, id<OkioSink> sink, NSString *algorithm) {
  OkioForwardingSink_initWithOkioSink_(self, sink);
  @try {
    JreStrongAssign(&self->messageDigest_, JavaSecurityMessageDigest_getInstanceWithNSString_(algorithm));
    JreStrongAssign(&self->mac_, nil);
  }
  @catch (JavaSecurityNoSuchAlgorithmException *e) {
    @throw create_JavaLangAssertionError_init();
  }
}

OkioHashingSink *new_OkioHashingSink_initWithOkioSink_withNSString_(id<OkioSink> sink, NSString *algorithm) {
  J2OBJC_NEW_IMPL(OkioHashingSink, initWithOkioSink_withNSString_, sink, algorithm)
}

OkioHashingSink *create_OkioHashingSink_initWithOkioSink_withNSString_(id<OkioSink> sink, NSString *algorithm) {
  J2OBJC_CREATE_IMPL(OkioHashingSink, initWithOkioSink_withNSString_, sink, algorithm)
}

void OkioHashingSink_initWithOkioSink_withOkioByteString_withNSString_(OkioHashingSink *self, id<OkioSink> sink, OkioByteString *key, NSString *algorithm) {
  OkioForwardingSink_initWithOkioSink_(self, sink);
  @try {
    JreStrongAssign(&self->mac_, JavaxCryptoMac_getInstanceWithNSString_(algorithm));
    [((JavaxCryptoMac *) nil_chk(self->mac_)) init__WithJavaSecurityKey:create_JavaxCryptoSpecSecretKeySpec_initWithByteArray_withNSString_([((OkioByteString *) nil_chk(key)) toByteArray], algorithm)];
    JreStrongAssign(&self->messageDigest_, nil);
  }
  @catch (JavaSecurityNoSuchAlgorithmException *e) {
    @throw create_JavaLangAssertionError_init();
  }
  @catch (JavaSecurityInvalidKeyException *e) {
    @throw create_JavaLangIllegalArgumentException_initWithNSException_(e);
  }
}

OkioHashingSink *new_OkioHashingSink_initWithOkioSink_withOkioByteString_withNSString_(id<OkioSink> sink, OkioByteString *key, NSString *algorithm) {
  J2OBJC_NEW_IMPL(OkioHashingSink, initWithOkioSink_withOkioByteString_withNSString_, sink, key, algorithm)
}

OkioHashingSink *create_OkioHashingSink_initWithOkioSink_withOkioByteString_withNSString_(id<OkioSink> sink, OkioByteString *key, NSString *algorithm) {
  J2OBJC_CREATE_IMPL(OkioHashingSink, initWithOkioSink_withOkioByteString_withNSString_, sink, key, algorithm)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OkioHashingSink)
