//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/okio/Okio.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InterruptedIOException.h"
#include "java/io/OutputStream.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/net/Socket.h"
#include "java/net/SocketTimeoutException.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "okio/AsyncTimeout.h"
#include "okio/Buffer.h"
#include "okio/BufferedSink.h"
#include "okio/BufferedSource.h"
#include "okio/Okio.h"
#include "okio/RealBufferedSink.h"
#include "okio/RealBufferedSource.h"
#include "okio/Segment.h"
#include "okio/SegmentPool.h"
#include "okio/Sink.h"
#include "okio/Source.h"
#include "okio/Timeout.h"
#include "okio/Util.h"

@interface OkioOkio ()

- (instancetype)init;

+ (id<OkioSink>)sinkWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                           withOkioTimeout:(OkioTimeout *)timeout;

+ (id<OkioSource>)sourceWithJavaIoInputStream:(JavaIoInputStream *)inArg
                              withOkioTimeout:(OkioTimeout *)timeout;

+ (OkioAsyncTimeout *)timeoutWithJavaNetSocket:(JavaNetSocket *)socket;

@end

__attribute__((unused)) static void OkioOkio_init(OkioOkio *self);

__attribute__((unused)) static OkioOkio *new_OkioOkio_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OkioOkio *create_OkioOkio_init();

__attribute__((unused)) static id<OkioSink> OkioOkio_sinkWithJavaIoOutputStream_withOkioTimeout_(JavaIoOutputStream *outArg, OkioTimeout *timeout);

__attribute__((unused)) static id<OkioSource> OkioOkio_sourceWithJavaIoInputStream_withOkioTimeout_(JavaIoInputStream *inArg, OkioTimeout *timeout);

__attribute__((unused)) static OkioAsyncTimeout *OkioOkio_timeoutWithJavaNetSocket_(JavaNetSocket *socket);

@interface OkioOkio_1 : NSObject < OkioSink > {
 @public
  OkioTimeout *val$timeout_;
  JavaIoOutputStream *val$out_;
}

- (instancetype)initWithOkioTimeout:(OkioTimeout *)capture$0
             withJavaIoOutputStream:(JavaIoOutputStream *)capture$1;

- (void)writeWithOkioBuffer:(OkioBuffer *)source
                   withLong:(jlong)byteCount;

- (void)flush;

- (void)close;

- (OkioTimeout *)timeout;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OkioOkio_1)

__attribute__((unused)) static void OkioOkio_1_initWithOkioTimeout_withJavaIoOutputStream_(OkioOkio_1 *self, OkioTimeout *capture$0, JavaIoOutputStream *capture$1);

__attribute__((unused)) static OkioOkio_1 *new_OkioOkio_1_initWithOkioTimeout_withJavaIoOutputStream_(OkioTimeout *capture$0, JavaIoOutputStream *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static OkioOkio_1 *create_OkioOkio_1_initWithOkioTimeout_withJavaIoOutputStream_(OkioTimeout *capture$0, JavaIoOutputStream *capture$1);

@interface OkioOkio_2 : NSObject < OkioSource > {
 @public
  OkioTimeout *val$timeout_;
  JavaIoInputStream *val$in_;
}

- (instancetype)initWithOkioTimeout:(OkioTimeout *)capture$0
              withJavaIoInputStream:(JavaIoInputStream *)capture$1;

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount;

- (void)close;

- (OkioTimeout *)timeout;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OkioOkio_2)

__attribute__((unused)) static void OkioOkio_2_initWithOkioTimeout_withJavaIoInputStream_(OkioOkio_2 *self, OkioTimeout *capture$0, JavaIoInputStream *capture$1);

__attribute__((unused)) static OkioOkio_2 *new_OkioOkio_2_initWithOkioTimeout_withJavaIoInputStream_(OkioTimeout *capture$0, JavaIoInputStream *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static OkioOkio_2 *create_OkioOkio_2_initWithOkioTimeout_withJavaIoInputStream_(OkioTimeout *capture$0, JavaIoInputStream *capture$1);

@interface OkioOkio_3 : NSObject < OkioSink >

- (instancetype)init;

- (void)writeWithOkioBuffer:(OkioBuffer *)source
                   withLong:(jlong)byteCount;

- (void)flush;

- (OkioTimeout *)timeout;

- (void)close;

@end

J2OBJC_EMPTY_STATIC_INIT(OkioOkio_3)

__attribute__((unused)) static void OkioOkio_3_init(OkioOkio_3 *self);

__attribute__((unused)) static OkioOkio_3 *new_OkioOkio_3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OkioOkio_3 *create_OkioOkio_3_init();

@interface OkioOkio_4 : OkioAsyncTimeout {
 @public
  JavaNetSocket *val$socket_;
}

- (instancetype)initWithJavaNetSocket:(JavaNetSocket *)capture$0;

- (JavaIoIOException *)newTimeoutExceptionWithJavaIoIOException:(JavaIoIOException *)cause OBJC_METHOD_FAMILY_NONE;

- (void)timedOut;

@end

J2OBJC_EMPTY_STATIC_INIT(OkioOkio_4)

__attribute__((unused)) static void OkioOkio_4_initWithJavaNetSocket_(OkioOkio_4 *self, JavaNetSocket *capture$0);

__attribute__((unused)) static OkioOkio_4 *new_OkioOkio_4_initWithJavaNetSocket_(JavaNetSocket *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OkioOkio_4 *create_OkioOkio_4_initWithJavaNetSocket_(JavaNetSocket *capture$0);

J2OBJC_INITIALIZED_DEFN(OkioOkio)

JavaUtilLoggingLogger *OkioOkio_logger;

@implementation OkioOkio

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OkioOkio_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<OkioBufferedSource>)bufferWithOkioSource:(id<OkioSource>)source {
  return OkioOkio_bufferWithOkioSource_(source);
}

+ (id<OkioBufferedSink>)bufferWithOkioSink:(id<OkioSink>)sink {
  return OkioOkio_bufferWithOkioSink_(sink);
}

+ (id<OkioSink>)sinkWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  return OkioOkio_sinkWithJavaIoOutputStream_(outArg);
}

+ (id<OkioSink>)sinkWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                           withOkioTimeout:(OkioTimeout *)timeout {
  return OkioOkio_sinkWithJavaIoOutputStream_withOkioTimeout_(outArg, timeout);
}

+ (id<OkioSink>)sinkWithJavaNetSocket:(JavaNetSocket *)socket {
  return OkioOkio_sinkWithJavaNetSocket_(socket);
}

+ (id<OkioSource>)sourceWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return OkioOkio_sourceWithJavaIoInputStream_(inArg);
}

+ (id<OkioSource>)sourceWithJavaIoInputStream:(JavaIoInputStream *)inArg
                              withOkioTimeout:(OkioTimeout *)timeout {
  return OkioOkio_sourceWithJavaIoInputStream_withOkioTimeout_(inArg, timeout);
}

+ (id<OkioSource>)sourceWithJavaIoFile:(JavaIoFile *)file {
  return OkioOkio_sourceWithJavaIoFile_(file);
}

+ (id<OkioSink>)sinkWithJavaIoFile:(JavaIoFile *)file {
  return OkioOkio_sinkWithJavaIoFile_(file);
}

+ (id<OkioSink>)appendingSinkWithJavaIoFile:(JavaIoFile *)file {
  return OkioOkio_appendingSinkWithJavaIoFile_(file);
}

+ (id<OkioSink>)blackhole {
  return OkioOkio_blackhole();
}

+ (id<OkioSource>)sourceWithJavaNetSocket:(JavaNetSocket *)socket {
  return OkioOkio_sourceWithJavaNetSocket_(socket);
}

+ (OkioAsyncTimeout *)timeoutWithJavaNetSocket:(JavaNetSocket *)socket {
  return OkioOkio_timeoutWithJavaNetSocket_(socket);
}

+ (jboolean)isAndroidGetsocknameErrorWithJavaLangAssertionError:(JavaLangAssertionError *)e {
  return OkioOkio_isAndroidGetsocknameErrorWithJavaLangAssertionError_(e);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkioBufferedSource;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOkioBufferedSink;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "LOkioSink;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOkioSink;", 0xa, 3, 5, -1, -1, -1, -1 },
    { NULL, "LOkioSink;", 0x9, 3, 6, 7, -1, -1, -1 },
    { NULL, "LOkioSource;", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOkioSource;", 0xa, 8, 10, -1, -1, -1, -1 },
    { NULL, "LOkioSource;", 0x9, 8, 11, 12, -1, -1, -1 },
    { NULL, "LOkioSink;", 0x9, 3, 11, 12, -1, -1, -1 },
    { NULL, "LOkioSink;", 0x9, 13, 11, 12, -1, -1, -1 },
    { NULL, "LOkioSink;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkioSource;", 0x9, 8, 6, 7, -1, -1, -1 },
    { NULL, "LOkioAsyncTimeout;", 0xa, 14, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 15, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(bufferWithOkioSource:);
  methods[2].selector = @selector(bufferWithOkioSink:);
  methods[3].selector = @selector(sinkWithJavaIoOutputStream:);
  methods[4].selector = @selector(sinkWithJavaIoOutputStream:withOkioTimeout:);
  methods[5].selector = @selector(sinkWithJavaNetSocket:);
  methods[6].selector = @selector(sourceWithJavaIoInputStream:);
  methods[7].selector = @selector(sourceWithJavaIoInputStream:withOkioTimeout:);
  methods[8].selector = @selector(sourceWithJavaIoFile:);
  methods[9].selector = @selector(sinkWithJavaIoFile:);
  methods[10].selector = @selector(appendingSinkWithJavaIoFile:);
  methods[11].selector = @selector(blackhole);
  methods[12].selector = @selector(sourceWithJavaNetSocket:);
  methods[13].selector = @selector(timeoutWithJavaNetSocket:);
  methods[14].selector = @selector(isAndroidGetsocknameErrorWithJavaLangAssertionError:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x18, -1, 17, -1, -1 },
  };
  static const void *ptrTable[] = { "buffer", "LOkioSource;", "LOkioSink;", "sink", "LJavaIoOutputStream;", "LJavaIoOutputStream;LOkioTimeout;", "LJavaNetSocket;", "LJavaIoIOException;", "source", "LJavaIoInputStream;", "LJavaIoInputStream;LOkioTimeout;", "LJavaIoFile;", "LJavaIoFileNotFoundException;", "appendingSink", "timeout", "isAndroidGetsocknameError", "LJavaLangAssertionError;", &OkioOkio_logger };
  static const J2ObjcClassInfo _OkioOkio = { "Okio", "okio", ptrTable, methods, fields, 7, 0x11, 15, 1, -1, -1, -1, -1, -1 };
  return &_OkioOkio;
}

+ (void)initialize {
  if (self == [OkioOkio class]) {
    JreStrongAssign(&OkioOkio_logger, JavaUtilLoggingLogger_getLoggerWithNSString_([OkioOkio_class_() getName]));
    J2OBJC_SET_INITIALIZED(OkioOkio)
  }
}

@end

void OkioOkio_init(OkioOkio *self) {
  NSObject_init(self);
}

OkioOkio *new_OkioOkio_init() {
  J2OBJC_NEW_IMPL(OkioOkio, init)
}

OkioOkio *create_OkioOkio_init() {
  J2OBJC_CREATE_IMPL(OkioOkio, init)
}

id<OkioBufferedSource> OkioOkio_bufferWithOkioSource_(id<OkioSource> source) {
  OkioOkio_initialize();
  return create_OkioRealBufferedSource_initWithOkioSource_(source);
}

id<OkioBufferedSink> OkioOkio_bufferWithOkioSink_(id<OkioSink> sink) {
  OkioOkio_initialize();
  return create_OkioRealBufferedSink_initWithOkioSink_(sink);
}

id<OkioSink> OkioOkio_sinkWithJavaIoOutputStream_(JavaIoOutputStream *outArg) {
  OkioOkio_initialize();
  return OkioOkio_sinkWithJavaIoOutputStream_withOkioTimeout_(outArg, create_OkioTimeout_init());
}

id<OkioSink> OkioOkio_sinkWithJavaIoOutputStream_withOkioTimeout_(JavaIoOutputStream *outArg, OkioTimeout *timeout) {
  OkioOkio_initialize();
  if (outArg == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"out == null");
  if (timeout == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"timeout == null");
  return create_OkioOkio_1_initWithOkioTimeout_withJavaIoOutputStream_(timeout, outArg);
}

id<OkioSink> OkioOkio_sinkWithJavaNetSocket_(JavaNetSocket *socket) {
  OkioOkio_initialize();
  if (socket == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"socket == null");
  OkioAsyncTimeout *timeout = OkioOkio_timeoutWithJavaNetSocket_(socket);
  id<OkioSink> sink = OkioOkio_sinkWithJavaIoOutputStream_withOkioTimeout_([socket getOutputStream], timeout);
  return [((OkioAsyncTimeout *) nil_chk(timeout)) sinkWithOkioSink:sink];
}

id<OkioSource> OkioOkio_sourceWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  OkioOkio_initialize();
  return OkioOkio_sourceWithJavaIoInputStream_withOkioTimeout_(inArg, create_OkioTimeout_init());
}

id<OkioSource> OkioOkio_sourceWithJavaIoInputStream_withOkioTimeout_(JavaIoInputStream *inArg, OkioTimeout *timeout) {
  OkioOkio_initialize();
  if (inArg == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"in == null");
  if (timeout == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"timeout == null");
  return create_OkioOkio_2_initWithOkioTimeout_withJavaIoInputStream_(timeout, inArg);
}

id<OkioSource> OkioOkio_sourceWithJavaIoFile_(JavaIoFile *file) {
  OkioOkio_initialize();
  if (file == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"file == null");
  return OkioOkio_sourceWithJavaIoInputStream_(create_JavaIoFileInputStream_initWithJavaIoFile_(file));
}

id<OkioSink> OkioOkio_sinkWithJavaIoFile_(JavaIoFile *file) {
  OkioOkio_initialize();
  if (file == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"file == null");
  return OkioOkio_sinkWithJavaIoOutputStream_(create_JavaIoFileOutputStream_initWithJavaIoFile_(file));
}

id<OkioSink> OkioOkio_appendingSinkWithJavaIoFile_(JavaIoFile *file) {
  OkioOkio_initialize();
  if (file == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"file == null");
  return OkioOkio_sinkWithJavaIoOutputStream_(create_JavaIoFileOutputStream_initWithJavaIoFile_withBoolean_(file, true));
}

id<OkioSink> OkioOkio_blackhole() {
  OkioOkio_initialize();
  return create_OkioOkio_3_init();
}

id<OkioSource> OkioOkio_sourceWithJavaNetSocket_(JavaNetSocket *socket) {
  OkioOkio_initialize();
  if (socket == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"socket == null");
  OkioAsyncTimeout *timeout = OkioOkio_timeoutWithJavaNetSocket_(socket);
  id<OkioSource> source = OkioOkio_sourceWithJavaIoInputStream_withOkioTimeout_([socket getInputStream], timeout);
  return [((OkioAsyncTimeout *) nil_chk(timeout)) sourceWithOkioSource:source];
}

OkioAsyncTimeout *OkioOkio_timeoutWithJavaNetSocket_(JavaNetSocket *socket) {
  OkioOkio_initialize();
  return create_OkioOkio_4_initWithJavaNetSocket_(socket);
}

jboolean OkioOkio_isAndroidGetsocknameErrorWithJavaLangAssertionError_(JavaLangAssertionError *e) {
  OkioOkio_initialize();
  return [((JavaLangAssertionError *) nil_chk(e)) getCause] != nil && [e getMessage] != nil && [((NSString *) nil_chk([e getMessage])) java_contains:@"getsockname failed"];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OkioOkio)

@implementation OkioOkio_1

- (instancetype)initWithOkioTimeout:(OkioTimeout *)capture$0
             withJavaIoOutputStream:(JavaIoOutputStream *)capture$1 {
  OkioOkio_1_initWithOkioTimeout_withJavaIoOutputStream_(self, capture$0, capture$1);
  return self;
}

- (void)writeWithOkioBuffer:(OkioBuffer *)source
                   withLong:(jlong)byteCount {
  OkioUtil_checkOffsetAndCountWithLong_withLong_withLong_(((OkioBuffer *) nil_chk(source))->size_, 0, byteCount);
  while (byteCount > 0) {
    [((OkioTimeout *) nil_chk(val$timeout_)) throwIfReached];
    OkioSegment *head = source->head_;
    jint toCopy = (jint) JavaLangMath_minWithLong_withLong_(byteCount, ((OkioSegment *) nil_chk(head))->limit_ - head->pos_);
    [((JavaIoOutputStream *) nil_chk(val$out_)) writeWithByteArray:head->data_ withInt:head->pos_ withInt:toCopy];
    head->pos_ += toCopy;
    byteCount -= toCopy;
    source->size_ -= toCopy;
    if (head->pos_ == head->limit_) {
      JreStrongAssign(&source->head_, [head pop]);
      OkioSegmentPool_recycleWithOkioSegment_(head);
    }
  }
}

- (void)flush {
  [((JavaIoOutputStream *) nil_chk(val$out_)) flush];
}

- (void)close {
  [((JavaIoOutputStream *) nil_chk(val$out_)) close];
}

- (OkioTimeout *)timeout {
  return val$timeout_;
}

- (NSString *)description {
  return JreStrcat("$@C", @"sink(", val$out_, ')');
}

- (void)dealloc {
  RELEASE_(val$timeout_);
  RELEASE_(val$out_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOkioTimeout;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkioTimeout:withJavaIoOutputStream:);
  methods[1].selector = @selector(writeWithOkioBuffer:withLong:);
  methods[2].selector = @selector(flush);
  methods[3].selector = @selector(close);
  methods[4].selector = @selector(timeout);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$timeout_", "LOkioTimeout;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$out_", "LJavaIoOutputStream;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "write", "LOkioBuffer;J", "LJavaIoIOException;", "toString", "LOkioOkio;", "sinkWithJavaIoOutputStream:withOkioTimeout:" };
  static const J2ObjcClassInfo _OkioOkio_1 = { "", "okio", ptrTable, methods, fields, 7, 0x8018, 6, 2, 4, -1, 5, -1, -1 };
  return &_OkioOkio_1;
}

@end

void OkioOkio_1_initWithOkioTimeout_withJavaIoOutputStream_(OkioOkio_1 *self, OkioTimeout *capture$0, JavaIoOutputStream *capture$1) {
  JreStrongAssign(&self->val$timeout_, capture$0);
  JreStrongAssign(&self->val$out_, capture$1);
  NSObject_init(self);
}

OkioOkio_1 *new_OkioOkio_1_initWithOkioTimeout_withJavaIoOutputStream_(OkioTimeout *capture$0, JavaIoOutputStream *capture$1) {
  J2OBJC_NEW_IMPL(OkioOkio_1, initWithOkioTimeout_withJavaIoOutputStream_, capture$0, capture$1)
}

OkioOkio_1 *create_OkioOkio_1_initWithOkioTimeout_withJavaIoOutputStream_(OkioTimeout *capture$0, JavaIoOutputStream *capture$1) {
  J2OBJC_CREATE_IMPL(OkioOkio_1, initWithOkioTimeout_withJavaIoOutputStream_, capture$0, capture$1)
}

@implementation OkioOkio_2

- (instancetype)initWithOkioTimeout:(OkioTimeout *)capture$0
              withJavaIoInputStream:(JavaIoInputStream *)capture$1 {
  OkioOkio_2_initWithOkioTimeout_withJavaIoInputStream_(self, capture$0, capture$1);
  return self;
}

- (jlong)readWithOkioBuffer:(OkioBuffer *)sink
                   withLong:(jlong)byteCount {
  if (byteCount < 0) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J", @"byteCount < 0: ", byteCount));
  if (byteCount == 0) return 0;
  @try {
    [((OkioTimeout *) nil_chk(val$timeout_)) throwIfReached];
    OkioSegment *tail = [((OkioBuffer *) nil_chk(sink)) writableSegmentWithInt:1];
    jint maxToCopy = (jint) JavaLangMath_minWithLong_withLong_(byteCount, OkioSegment_SIZE - ((OkioSegment *) nil_chk(tail))->limit_);
    jint bytesRead = [((JavaIoInputStream *) nil_chk(val$in_)) readWithByteArray:tail->data_ withInt:tail->limit_ withInt:maxToCopy];
    if (bytesRead == -1) return -1;
    tail->limit_ += bytesRead;
    sink->size_ += bytesRead;
    return bytesRead;
  }
  @catch (JavaLangAssertionError *e) {
    if (OkioOkio_isAndroidGetsocknameErrorWithJavaLangAssertionError_(e)) @throw create_JavaIoIOException_initWithNSException_(e);
    @throw e;
  }
}

- (void)close {
  [((JavaIoInputStream *) nil_chk(val$in_)) close];
}

- (OkioTimeout *)timeout {
  return val$timeout_;
}

- (NSString *)description {
  return JreStrcat("$@C", @"source(", val$in_, ')');
}

- (void)dealloc {
  RELEASE_(val$timeout_);
  RELEASE_(val$in_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOkioTimeout;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkioTimeout:withJavaIoInputStream:);
  methods[1].selector = @selector(readWithOkioBuffer:withLong:);
  methods[2].selector = @selector(close);
  methods[3].selector = @selector(timeout);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$timeout_", "LOkioTimeout;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$in_", "LJavaIoInputStream;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "read", "LOkioBuffer;J", "LJavaIoIOException;", "toString", "LOkioOkio;", "sourceWithJavaIoInputStream:withOkioTimeout:" };
  static const J2ObjcClassInfo _OkioOkio_2 = { "", "okio", ptrTable, methods, fields, 7, 0x8018, 5, 2, 4, -1, 5, -1, -1 };
  return &_OkioOkio_2;
}

@end

void OkioOkio_2_initWithOkioTimeout_withJavaIoInputStream_(OkioOkio_2 *self, OkioTimeout *capture$0, JavaIoInputStream *capture$1) {
  JreStrongAssign(&self->val$timeout_, capture$0);
  JreStrongAssign(&self->val$in_, capture$1);
  NSObject_init(self);
}

OkioOkio_2 *new_OkioOkio_2_initWithOkioTimeout_withJavaIoInputStream_(OkioTimeout *capture$0, JavaIoInputStream *capture$1) {
  J2OBJC_NEW_IMPL(OkioOkio_2, initWithOkioTimeout_withJavaIoInputStream_, capture$0, capture$1)
}

OkioOkio_2 *create_OkioOkio_2_initWithOkioTimeout_withJavaIoInputStream_(OkioTimeout *capture$0, JavaIoInputStream *capture$1) {
  J2OBJC_CREATE_IMPL(OkioOkio_2, initWithOkioTimeout_withJavaIoInputStream_, capture$0, capture$1)
}

@implementation OkioOkio_3

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OkioOkio_3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)writeWithOkioBuffer:(OkioBuffer *)source
                   withLong:(jlong)byteCount {
  [((OkioBuffer *) nil_chk(source)) skipWithLong:byteCount];
}

- (void)flush {
}

- (OkioTimeout *)timeout {
  return JreLoadStatic(OkioTimeout, NONE);
}

- (void)close {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOkioTimeout;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(writeWithOkioBuffer:withLong:);
  methods[2].selector = @selector(flush);
  methods[3].selector = @selector(timeout);
  methods[4].selector = @selector(close);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "write", "LOkioBuffer;J", "LJavaIoIOException;", "LOkioOkio;", "blackhole" };
  static const J2ObjcClassInfo _OkioOkio_3 = { "", "okio", ptrTable, methods, NULL, 7, 0x8018, 5, 0, 3, -1, 4, -1, -1 };
  return &_OkioOkio_3;
}

@end

void OkioOkio_3_init(OkioOkio_3 *self) {
  NSObject_init(self);
}

OkioOkio_3 *new_OkioOkio_3_init() {
  J2OBJC_NEW_IMPL(OkioOkio_3, init)
}

OkioOkio_3 *create_OkioOkio_3_init() {
  J2OBJC_CREATE_IMPL(OkioOkio_3, init)
}

@implementation OkioOkio_4

- (instancetype)initWithJavaNetSocket:(JavaNetSocket *)capture$0 {
  OkioOkio_4_initWithJavaNetSocket_(self, capture$0);
  return self;
}

- (JavaIoIOException *)newTimeoutExceptionWithJavaIoIOException:(JavaIoIOException *)cause {
  JavaIoInterruptedIOException *ioe = create_JavaNetSocketTimeoutException_initWithNSString_(@"timeout");
  if (cause != nil) {
    [ioe initCauseWithNSException:cause];
  }
  return ioe;
}

- (void)timedOut {
  @try {
    [((JavaNetSocket *) nil_chk(val$socket_)) close];
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(OkioOkio, logger))) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$@", @"Failed to close timed out socket ", val$socket_) withNSException:e];
  }
  @catch (JavaLangAssertionError *e) {
    if (OkioOkio_isAndroidGetsocknameErrorWithJavaLangAssertionError_(e)) {
      [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(OkioOkio, logger))) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$@", @"Failed to close timed out socket ", val$socket_) withNSException:e];
    }
    else {
      @throw e;
    }
  }
}

- (void)dealloc {
  RELEASE_(val$socket_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoIOException;", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaNetSocket:);
  methods[1].selector = @selector(newTimeoutExceptionWithJavaIoIOException:);
  methods[2].selector = @selector(timedOut);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$socket_", "LJavaNetSocket;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "newTimeoutException", "LJavaIoIOException;", "LOkioOkio;", "timeoutWithJavaNetSocket:" };
  static const J2ObjcClassInfo _OkioOkio_4 = { "", "okio", ptrTable, methods, fields, 7, 0x8018, 3, 1, 2, -1, 3, -1, -1 };
  return &_OkioOkio_4;
}

@end

void OkioOkio_4_initWithJavaNetSocket_(OkioOkio_4 *self, JavaNetSocket *capture$0) {
  JreStrongAssign(&self->val$socket_, capture$0);
  OkioAsyncTimeout_init(self);
}

OkioOkio_4 *new_OkioOkio_4_initWithJavaNetSocket_(JavaNetSocket *capture$0) {
  J2OBJC_NEW_IMPL(OkioOkio_4, initWithJavaNetSocket_, capture$0)
}

OkioOkio_4 *create_OkioOkio_4_initWithJavaNetSocket_(JavaNetSocket *capture$0) {
  J2OBJC_CREATE_IMPL(OkioOkio_4, initWithJavaNetSocket_, capture$0)
}
