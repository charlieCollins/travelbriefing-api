//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/retrofit2/Retrofit.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/reflect/InvocationHandler.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Proxy.h"
#include "java/lang/reflect/Type.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/Executor.h"
#include "okhttp3/Call.h"
#include "okhttp3/HttpUrl.h"
#include "okhttp3/OkHttpClient.h"
#include "retrofit2/BuiltInConverters.h"
#include "retrofit2/CallAdapter.h"
#include "retrofit2/Converter.h"
#include "retrofit2/OkHttpCall.h"
#include "retrofit2/Platform.h"
#include "retrofit2/Retrofit.h"
#include "retrofit2/ServiceMethod.h"
#include "retrofit2/Utils.h"

@interface Retrofit2Retrofit () {
 @public
  id<JavaUtilMap> serviceMethodCache_;
}

- (void)eagerlyValidateMethodsWithIOSClass:(IOSClass *)service;

@end

J2OBJC_FIELD_SETTER(Retrofit2Retrofit, serviceMethodCache_, id<JavaUtilMap>)

__attribute__((unused)) static void Retrofit2Retrofit_eagerlyValidateMethodsWithIOSClass_(Retrofit2Retrofit *self, IOSClass *service);

@interface Retrofit2Retrofit_1 : NSObject < JavaLangReflectInvocationHandler > {
 @public
  Retrofit2Retrofit *this$0_;
  IOSClass *val$service_;
  Retrofit2Platform *platform_;
}

- (instancetype)initWithRetrofit2Retrofit:(Retrofit2Retrofit *)outer$
                             withIOSClass:(IOSClass *)capture$0;

- (id)invokeWithId:(id)proxy
withJavaLangReflectMethod:(JavaLangReflectMethod *)method
 withNSObjectArray:(IOSObjectArray *)args;

@end

J2OBJC_EMPTY_STATIC_INIT(Retrofit2Retrofit_1)

J2OBJC_FIELD_SETTER(Retrofit2Retrofit_1, platform_, Retrofit2Platform *)

__attribute__((unused)) static void Retrofit2Retrofit_1_initWithRetrofit2Retrofit_withIOSClass_(Retrofit2Retrofit_1 *self, Retrofit2Retrofit *outer$, IOSClass *capture$0);

__attribute__((unused)) static Retrofit2Retrofit_1 *new_Retrofit2Retrofit_1_initWithRetrofit2Retrofit_withIOSClass_(Retrofit2Retrofit *outer$, IOSClass *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static Retrofit2Retrofit_1 *create_Retrofit2Retrofit_1_initWithRetrofit2Retrofit_withIOSClass_(Retrofit2Retrofit *outer$, IOSClass *capture$0);

@interface Retrofit2Retrofit_Builder () {
 @public
  Retrofit2Platform *platform_;
  id<Okhttp3Call_Factory> callFactory_;
  Okhttp3HttpUrl *baseUrl_;
  id<JavaUtilList> converterFactories_;
  id<JavaUtilList> adapterFactories_;
  id<JavaUtilConcurrentExecutor> callbackExecutor_;
  jboolean validateEagerly_;
}

@end

J2OBJC_FIELD_SETTER(Retrofit2Retrofit_Builder, platform_, Retrofit2Platform *)
J2OBJC_FIELD_SETTER(Retrofit2Retrofit_Builder, callFactory_, id<Okhttp3Call_Factory>)
J2OBJC_FIELD_SETTER(Retrofit2Retrofit_Builder, baseUrl_, Okhttp3HttpUrl *)
J2OBJC_FIELD_SETTER(Retrofit2Retrofit_Builder, converterFactories_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(Retrofit2Retrofit_Builder, adapterFactories_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(Retrofit2Retrofit_Builder, callbackExecutor_, id<JavaUtilConcurrentExecutor>)

@implementation Retrofit2Retrofit

- (instancetype)initWithOkhttp3Call_Factory:(id<Okhttp3Call_Factory>)callFactory
                         withOkhttp3HttpUrl:(Okhttp3HttpUrl *)baseUrl
                           withJavaUtilList:(id<JavaUtilList>)converterFactories
                           withJavaUtilList:(id<JavaUtilList>)adapterFactories
             withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)callbackExecutor
                                withBoolean:(jboolean)validateEagerly {
  Retrofit2Retrofit_initWithOkhttp3Call_Factory_withOkhttp3HttpUrl_withJavaUtilList_withJavaUtilList_withJavaUtilConcurrentExecutor_withBoolean_(self, callFactory, baseUrl, converterFactories, adapterFactories, callbackExecutor, validateEagerly);
  return self;
}

- (id)createWithIOSClass:(IOSClass *)service {
  Retrofit2Utils_validateServiceInterfaceWithIOSClass_(service);
  if (validateEagerly_) {
    Retrofit2Retrofit_eagerlyValidateMethodsWithIOSClass_(self, service);
  }
  return JavaLangReflectProxy_newProxyInstanceWithJavaLangClassLoader_withIOSClassArray_withJavaLangReflectInvocationHandler_([((IOSClass *) nil_chk(service)) getClassLoader], [IOSObjectArray arrayWithObjects:(id[]){ service } count:1 type:IOSClass_class_()], create_Retrofit2Retrofit_1_initWithRetrofit2Retrofit_withIOSClass_(self, service));
}

- (void)eagerlyValidateMethodsWithIOSClass:(IOSClass *)service {
  Retrofit2Retrofit_eagerlyValidateMethodsWithIOSClass_(self, service);
}

- (Retrofit2ServiceMethod *)loadServiceMethodWithJavaLangReflectMethod:(JavaLangReflectMethod *)method {
  Retrofit2ServiceMethod *result = [((id<JavaUtilMap>) nil_chk(serviceMethodCache_)) getWithId:method];
  if (result != nil) return result;
  @synchronized(serviceMethodCache_) {
    result = [serviceMethodCache_ getWithId:method];
    if (result == nil) {
      result = [create_Retrofit2ServiceMethod_Builder_initWithRetrofit2Retrofit_withJavaLangReflectMethod_(self, method) build];
      [serviceMethodCache_ putWithId:method withId:result];
    }
  }
  return result;
}

- (id<Okhttp3Call_Factory>)callFactory {
  return callFactory_;
}

- (Okhttp3HttpUrl *)baseUrl {
  return baseUrl_;
}

- (id<JavaUtilList>)callAdapterFactories {
  return adapterFactories_;
}

- (id<Retrofit2CallAdapter>)callAdapterWithJavaLangReflectType:(id<JavaLangReflectType>)returnType
                         withJavaLangAnnotationAnnotationArray:(IOSObjectArray *)annotations {
  return [self nextCallAdapterWithRetrofit2CallAdapter_Factory:nil withJavaLangReflectType:returnType withJavaLangAnnotationAnnotationArray:annotations];
}

- (id<Retrofit2CallAdapter>)nextCallAdapterWithRetrofit2CallAdapter_Factory:(Retrofit2CallAdapter_Factory *)skipPast
                                                    withJavaLangReflectType:(id<JavaLangReflectType>)returnType
                                      withJavaLangAnnotationAnnotationArray:(IOSObjectArray *)annotations {
  Retrofit2Utils_checkNotNullWithId_withNSString_(returnType, @"returnType == null");
  Retrofit2Utils_checkNotNullWithId_withNSString_(annotations, @"annotations == null");
  jint start = [((id<JavaUtilList>) nil_chk(adapterFactories_)) indexOfWithId:skipPast] + 1;
  for (jint i = start, count = [adapterFactories_ size]; i < count; i++) {
    id<Retrofit2CallAdapter> adapter = [((Retrofit2CallAdapter_Factory *) nil_chk([adapterFactories_ getWithInt:i])) getWithJavaLangReflectType:returnType withJavaLangAnnotationAnnotationArray:annotations withRetrofit2Retrofit:self];
    if (adapter != nil) {
      return adapter;
    }
  }
  JavaLangStringBuilder *builder = [((JavaLangStringBuilder *) nil_chk([create_JavaLangStringBuilder_initWithNSString_(@"Could not locate call adapter for ") appendWithId:returnType])) appendWithNSString:@".\n"];
  if (skipPast != nil) {
    [((JavaLangStringBuilder *) nil_chk(builder)) appendWithNSString:@"  Skipped:"];
    for (jint i = 0; i < start; i++) {
      [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:@"\n   * "])) appendWithNSString:[[((Retrofit2CallAdapter_Factory *) nil_chk([adapterFactories_ getWithInt:i])) java_getClass] getName]];
    }
    [builder appendWithChar:0x000a];
  }
  [((JavaLangStringBuilder *) nil_chk(builder)) appendWithNSString:@"  Tried:"];
  for (jint i = start, count = [adapterFactories_ size]; i < count; i++) {
    [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:@"\n   * "])) appendWithNSString:[[((Retrofit2CallAdapter_Factory *) nil_chk([adapterFactories_ getWithInt:i])) java_getClass] getName]];
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_([builder description]);
}

- (id<JavaUtilList>)converterFactories {
  return converterFactories_;
}

- (id<Retrofit2Converter>)requestBodyConverterWithJavaLangReflectType:(id<JavaLangReflectType>)type
                                withJavaLangAnnotationAnnotationArray:(IOSObjectArray *)parameterAnnotations
                                withJavaLangAnnotationAnnotationArray:(IOSObjectArray *)methodAnnotations {
  return [self nextRequestBodyConverterWithRetrofit2Converter_Factory:nil withJavaLangReflectType:type withJavaLangAnnotationAnnotationArray:parameterAnnotations withJavaLangAnnotationAnnotationArray:methodAnnotations];
}

- (id<Retrofit2Converter>)nextRequestBodyConverterWithRetrofit2Converter_Factory:(Retrofit2Converter_Factory *)skipPast
                                                         withJavaLangReflectType:(id<JavaLangReflectType>)type
                                           withJavaLangAnnotationAnnotationArray:(IOSObjectArray *)parameterAnnotations
                                           withJavaLangAnnotationAnnotationArray:(IOSObjectArray *)methodAnnotations {
  Retrofit2Utils_checkNotNullWithId_withNSString_(type, @"type == null");
  Retrofit2Utils_checkNotNullWithId_withNSString_(parameterAnnotations, @"parameterAnnotations == null");
  Retrofit2Utils_checkNotNullWithId_withNSString_(methodAnnotations, @"methodAnnotations == null");
  jint start = [((id<JavaUtilList>) nil_chk(converterFactories_)) indexOfWithId:skipPast] + 1;
  for (jint i = start, count = [converterFactories_ size]; i < count; i++) {
    Retrofit2Converter_Factory *factory = [converterFactories_ getWithInt:i];
    id<Retrofit2Converter> converter = [((Retrofit2Converter_Factory *) nil_chk(factory)) requestBodyConverterWithJavaLangReflectType:type withJavaLangAnnotationAnnotationArray:parameterAnnotations withJavaLangAnnotationAnnotationArray:methodAnnotations withRetrofit2Retrofit:self];
    if (converter != nil) {
      return converter;
    }
  }
  JavaLangStringBuilder *builder = [((JavaLangStringBuilder *) nil_chk([create_JavaLangStringBuilder_initWithNSString_(@"Could not locate RequestBody converter for ") appendWithId:type])) appendWithNSString:@".\n"];
  if (skipPast != nil) {
    [((JavaLangStringBuilder *) nil_chk(builder)) appendWithNSString:@"  Skipped:"];
    for (jint i = 0; i < start; i++) {
      [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:@"\n   * "])) appendWithNSString:[[((Retrofit2Converter_Factory *) nil_chk([converterFactories_ getWithInt:i])) java_getClass] getName]];
    }
    [builder appendWithChar:0x000a];
  }
  [((JavaLangStringBuilder *) nil_chk(builder)) appendWithNSString:@"  Tried:"];
  for (jint i = start, count = [converterFactories_ size]; i < count; i++) {
    [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:@"\n   * "])) appendWithNSString:[[((Retrofit2Converter_Factory *) nil_chk([converterFactories_ getWithInt:i])) java_getClass] getName]];
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_([builder description]);
}

- (id<Retrofit2Converter>)responseBodyConverterWithJavaLangReflectType:(id<JavaLangReflectType>)type
                                 withJavaLangAnnotationAnnotationArray:(IOSObjectArray *)annotations {
  return [self nextResponseBodyConverterWithRetrofit2Converter_Factory:nil withJavaLangReflectType:type withJavaLangAnnotationAnnotationArray:annotations];
}

- (id<Retrofit2Converter>)nextResponseBodyConverterWithRetrofit2Converter_Factory:(Retrofit2Converter_Factory *)skipPast
                                                          withJavaLangReflectType:(id<JavaLangReflectType>)type
                                            withJavaLangAnnotationAnnotationArray:(IOSObjectArray *)annotations {
  Retrofit2Utils_checkNotNullWithId_withNSString_(type, @"type == null");
  Retrofit2Utils_checkNotNullWithId_withNSString_(annotations, @"annotations == null");
  jint start = [((id<JavaUtilList>) nil_chk(converterFactories_)) indexOfWithId:skipPast] + 1;
  for (jint i = start, count = [converterFactories_ size]; i < count; i++) {
    id<Retrofit2Converter> converter = [((Retrofit2Converter_Factory *) nil_chk([converterFactories_ getWithInt:i])) responseBodyConverterWithJavaLangReflectType:type withJavaLangAnnotationAnnotationArray:annotations withRetrofit2Retrofit:self];
    if (converter != nil) {
      return converter;
    }
  }
  JavaLangStringBuilder *builder = [((JavaLangStringBuilder *) nil_chk([create_JavaLangStringBuilder_initWithNSString_(@"Could not locate ResponseBody converter for ") appendWithId:type])) appendWithNSString:@".\n"];
  if (skipPast != nil) {
    [((JavaLangStringBuilder *) nil_chk(builder)) appendWithNSString:@"  Skipped:"];
    for (jint i = 0; i < start; i++) {
      [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:@"\n   * "])) appendWithNSString:[[((Retrofit2Converter_Factory *) nil_chk([converterFactories_ getWithInt:i])) java_getClass] getName]];
    }
    [builder appendWithChar:0x000a];
  }
  [((JavaLangStringBuilder *) nil_chk(builder)) appendWithNSString:@"  Tried:"];
  for (jint i = start, count = [converterFactories_ size]; i < count; i++) {
    [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:@"\n   * "])) appendWithNSString:[[((Retrofit2Converter_Factory *) nil_chk([converterFactories_ getWithInt:i])) java_getClass] getName]];
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_([builder description]);
}

- (id<Retrofit2Converter>)stringConverterWithJavaLangReflectType:(id<JavaLangReflectType>)type
                           withJavaLangAnnotationAnnotationArray:(IOSObjectArray *)annotations {
  Retrofit2Utils_checkNotNullWithId_withNSString_(type, @"type == null");
  Retrofit2Utils_checkNotNullWithId_withNSString_(annotations, @"annotations == null");
  for (jint i = 0, count = [((id<JavaUtilList>) nil_chk(converterFactories_)) size]; i < count; i++) {
    id<Retrofit2Converter> converter = [((Retrofit2Converter_Factory *) nil_chk([converterFactories_ getWithInt:i])) stringConverterWithJavaLangReflectType:type withJavaLangAnnotationAnnotationArray:annotations withRetrofit2Retrofit:self];
    if (converter != nil) {
      return converter;
    }
  }
  return JreLoadStatic(Retrofit2BuiltInConverters_ToStringConverter, INSTANCE);
}

- (id<JavaUtilConcurrentExecutor>)callbackExecutor {
  return callbackExecutor_;
}

- (Retrofit2Retrofit_Builder *)newBuilder {
  return create_Retrofit2Retrofit_Builder_initWithRetrofit2Retrofit_(self);
}

- (void)dealloc {
  RELEASE_(serviceMethodCache_);
  RELEASE_(callFactory_);
  RELEASE_(baseUrl_);
  RELEASE_(converterFactories_);
  RELEASE_(adapterFactories_);
  RELEASE_(callbackExecutor_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x2, 5, 3, -1, 6, -1, -1 },
    { NULL, "LRetrofit2ServiceMethod;", 0x0, 7, 8, -1, 9, -1, -1 },
    { NULL, "LOkhttp3Call_Factory;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOkhttp3HttpUrl;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "LRetrofit2CallAdapter;", 0x1, 11, 12, -1, 13, -1, -1 },
    { NULL, "LRetrofit2CallAdapter;", 0x1, 14, 15, -1, 16, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 17, -1, -1 },
    { NULL, "LRetrofit2Converter;", 0x1, 18, 19, -1, 20, -1, -1 },
    { NULL, "LRetrofit2Converter;", 0x1, 21, 22, -1, 23, -1, -1 },
    { NULL, "LRetrofit2Converter;", 0x1, 24, 12, -1, 25, -1, -1 },
    { NULL, "LRetrofit2Converter;", 0x1, 26, 27, -1, 28, -1, -1 },
    { NULL, "LRetrofit2Converter;", 0x1, 29, 12, -1, 30, -1, -1 },
    { NULL, "LJavaUtilConcurrentExecutor;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LRetrofit2Retrofit_Builder;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOkhttp3Call_Factory:withOkhttp3HttpUrl:withJavaUtilList:withJavaUtilList:withJavaUtilConcurrentExecutor:withBoolean:);
  methods[1].selector = @selector(createWithIOSClass:);
  methods[2].selector = @selector(eagerlyValidateMethodsWithIOSClass:);
  methods[3].selector = @selector(loadServiceMethodWithJavaLangReflectMethod:);
  methods[4].selector = @selector(callFactory);
  methods[5].selector = @selector(baseUrl);
  methods[6].selector = @selector(callAdapterFactories);
  methods[7].selector = @selector(callAdapterWithJavaLangReflectType:withJavaLangAnnotationAnnotationArray:);
  methods[8].selector = @selector(nextCallAdapterWithRetrofit2CallAdapter_Factory:withJavaLangReflectType:withJavaLangAnnotationAnnotationArray:);
  methods[9].selector = @selector(converterFactories);
  methods[10].selector = @selector(requestBodyConverterWithJavaLangReflectType:withJavaLangAnnotationAnnotationArray:withJavaLangAnnotationAnnotationArray:);
  methods[11].selector = @selector(nextRequestBodyConverterWithRetrofit2Converter_Factory:withJavaLangReflectType:withJavaLangAnnotationAnnotationArray:withJavaLangAnnotationAnnotationArray:);
  methods[12].selector = @selector(responseBodyConverterWithJavaLangReflectType:withJavaLangAnnotationAnnotationArray:);
  methods[13].selector = @selector(nextResponseBodyConverterWithRetrofit2Converter_Factory:withJavaLangReflectType:withJavaLangAnnotationAnnotationArray:);
  methods[14].selector = @selector(stringConverterWithJavaLangReflectType:withJavaLangAnnotationAnnotationArray:);
  methods[15].selector = @selector(callbackExecutor);
  methods[16].selector = @selector(newBuilder);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serviceMethodCache_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 31, -1 },
    { "callFactory_", "LOkhttp3Call_Factory;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "baseUrl_", "LOkhttp3HttpUrl;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "converterFactories_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 32, -1 },
    { "adapterFactories_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 33, -1 },
    { "callbackExecutor_", "LJavaUtilConcurrentExecutor;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "validateEagerly_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOkhttp3Call_Factory;LOkhttp3HttpUrl;LJavaUtilList;LJavaUtilList;LJavaUtilConcurrentExecutor;Z", "(Lokhttp3/Call$Factory;Lokhttp3/HttpUrl;Ljava/util/List<Lretrofit2/Converter$Factory;>;Ljava/util/List<Lretrofit2/CallAdapter$Factory;>;Ljava/util/concurrent/Executor;Z)V", "create", "LIOSClass;", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)TT;", "eagerlyValidateMethods", "(Ljava/lang/Class<*>;)V", "loadServiceMethod", "LJavaLangReflectMethod;", "(Ljava/lang/reflect/Method;)Lretrofit2/ServiceMethod<**>;", "()Ljava/util/List<Lretrofit2/CallAdapter$Factory;>;", "callAdapter", "LJavaLangReflectType;[LJavaLangAnnotationAnnotation;", "(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/CallAdapter<**>;", "nextCallAdapter", "LRetrofit2CallAdapter_Factory;LJavaLangReflectType;[LJavaLangAnnotationAnnotation;", "(Lretrofit2/CallAdapter$Factory;Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/CallAdapter<**>;", "()Ljava/util/List<Lretrofit2/Converter$Factory;>;", "requestBodyConverter", "LJavaLangReflectType;[LJavaLangAnnotationAnnotation;[LJavaLangAnnotationAnnotation;", "<T:Ljava/lang/Object;>(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter<TT;Lokhttp3/RequestBody;>;", "nextRequestBodyConverter", "LRetrofit2Converter_Factory;LJavaLangReflectType;[LJavaLangAnnotationAnnotation;[LJavaLangAnnotationAnnotation;", "<T:Ljava/lang/Object;>(Lretrofit2/Converter$Factory;Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter<TT;Lokhttp3/RequestBody;>;", "responseBodyConverter", "<T:Ljava/lang/Object;>(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter<Lokhttp3/ResponseBody;TT;>;", "nextResponseBodyConverter", "LRetrofit2Converter_Factory;LJavaLangReflectType;[LJavaLangAnnotationAnnotation;", "<T:Ljava/lang/Object;>(Lretrofit2/Converter$Factory;Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter<Lokhttp3/ResponseBody;TT;>;", "stringConverter", "<T:Ljava/lang/Object;>(Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;)Lretrofit2/Converter<TT;Ljava/lang/String;>;", "Ljava/util/Map<Ljava/lang/reflect/Method;Lretrofit2/ServiceMethod<**>;>;", "Ljava/util/List<Lretrofit2/Converter$Factory;>;", "Ljava/util/List<Lretrofit2/CallAdapter$Factory;>;", "LRetrofit2Retrofit_Builder;" };
  static const J2ObjcClassInfo _Retrofit2Retrofit = { "Retrofit", "retrofit2", ptrTable, methods, fields, 7, 0x11, 17, 7, -1, 34, -1, -1, -1 };
  return &_Retrofit2Retrofit;
}

@end

void Retrofit2Retrofit_initWithOkhttp3Call_Factory_withOkhttp3HttpUrl_withJavaUtilList_withJavaUtilList_withJavaUtilConcurrentExecutor_withBoolean_(Retrofit2Retrofit *self, id<Okhttp3Call_Factory> callFactory, Okhttp3HttpUrl *baseUrl, id<JavaUtilList> converterFactories, id<JavaUtilList> adapterFactories, id<JavaUtilConcurrentExecutor> callbackExecutor, jboolean validateEagerly) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->serviceMethodCache_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssign(&self->callFactory_, callFactory);
  JreStrongAssign(&self->baseUrl_, baseUrl);
  JreStrongAssign(&self->converterFactories_, JavaUtilCollections_unmodifiableListWithJavaUtilList_(converterFactories));
  JreStrongAssign(&self->adapterFactories_, JavaUtilCollections_unmodifiableListWithJavaUtilList_(adapterFactories));
  JreStrongAssign(&self->callbackExecutor_, callbackExecutor);
  self->validateEagerly_ = validateEagerly;
}

Retrofit2Retrofit *new_Retrofit2Retrofit_initWithOkhttp3Call_Factory_withOkhttp3HttpUrl_withJavaUtilList_withJavaUtilList_withJavaUtilConcurrentExecutor_withBoolean_(id<Okhttp3Call_Factory> callFactory, Okhttp3HttpUrl *baseUrl, id<JavaUtilList> converterFactories, id<JavaUtilList> adapterFactories, id<JavaUtilConcurrentExecutor> callbackExecutor, jboolean validateEagerly) {
  J2OBJC_NEW_IMPL(Retrofit2Retrofit, initWithOkhttp3Call_Factory_withOkhttp3HttpUrl_withJavaUtilList_withJavaUtilList_withJavaUtilConcurrentExecutor_withBoolean_, callFactory, baseUrl, converterFactories, adapterFactories, callbackExecutor, validateEagerly)
}

Retrofit2Retrofit *create_Retrofit2Retrofit_initWithOkhttp3Call_Factory_withOkhttp3HttpUrl_withJavaUtilList_withJavaUtilList_withJavaUtilConcurrentExecutor_withBoolean_(id<Okhttp3Call_Factory> callFactory, Okhttp3HttpUrl *baseUrl, id<JavaUtilList> converterFactories, id<JavaUtilList> adapterFactories, id<JavaUtilConcurrentExecutor> callbackExecutor, jboolean validateEagerly) {
  J2OBJC_CREATE_IMPL(Retrofit2Retrofit, initWithOkhttp3Call_Factory_withOkhttp3HttpUrl_withJavaUtilList_withJavaUtilList_withJavaUtilConcurrentExecutor_withBoolean_, callFactory, baseUrl, converterFactories, adapterFactories, callbackExecutor, validateEagerly)
}

void Retrofit2Retrofit_eagerlyValidateMethodsWithIOSClass_(Retrofit2Retrofit *self, IOSClass *service) {
  Retrofit2Platform *platform = Retrofit2Platform_get();
  {
    IOSObjectArray *a__ = [((IOSClass *) nil_chk(service)) getDeclaredMethods];
    JavaLangReflectMethod * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaLangReflectMethod * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaLangReflectMethod *method = *b__++;
      if (![((Retrofit2Platform *) nil_chk(platform)) isDefaultMethodWithJavaLangReflectMethod:method]) {
        [self loadServiceMethodWithJavaLangReflectMethod:method];
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Retrofit2Retrofit)

@implementation Retrofit2Retrofit_1

- (instancetype)initWithRetrofit2Retrofit:(Retrofit2Retrofit *)outer$
                             withIOSClass:(IOSClass *)capture$0 {
  Retrofit2Retrofit_1_initWithRetrofit2Retrofit_withIOSClass_(self, outer$, capture$0);
  return self;
}

- (id)invokeWithId:(id)proxy
withJavaLangReflectMethod:(JavaLangReflectMethod *)method
 withNSObjectArray:(IOSObjectArray *)args {
  if ([((JavaLangReflectMethod *) nil_chk(method)) getDeclaringClass] == NSObject_class_()) {
    return [method invokeWithId:self withNSObjectArray:args];
  }
  if ([((Retrofit2Platform *) nil_chk(platform_)) isDefaultMethodWithJavaLangReflectMethod:method]) {
    return [platform_ invokeDefaultMethodWithJavaLangReflectMethod:method withIOSClass:val$service_ withId:proxy withNSObjectArray:args];
  }
  Retrofit2ServiceMethod *serviceMethod = [this$0_ loadServiceMethodWithJavaLangReflectMethod:method];
  Retrofit2OkHttpCall *okHttpCall = create_Retrofit2OkHttpCall_initWithRetrofit2ServiceMethod_withNSObjectArray_(serviceMethod, args);
  return [((id<Retrofit2CallAdapter>) nil_chk(((Retrofit2ServiceMethod *) nil_chk(serviceMethod))->callAdapter_)) adaptWithRetrofit2Call:okHttpCall];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$service_);
  RELEASE_(platform_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRetrofit2Retrofit:withIOSClass:);
  methods[1].selector = @selector(invokeWithId:withJavaLangReflectMethod:withNSObjectArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LRetrofit2Retrofit;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$service_", "LIOSClass;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
    { "platform_", "LRetrofit2Platform;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "invoke", "LNSObject;LJavaLangReflectMethod;[LNSObject;", "LNSException;", "Ljava/lang/Class<TT;>;", "LRetrofit2Retrofit;", "createWithIOSClass:" };
  static const J2ObjcClassInfo _Retrofit2Retrofit_1 = { "", "retrofit2", ptrTable, methods, fields, 7, 0x8018, 2, 3, 4, -1, 5, -1, -1 };
  return &_Retrofit2Retrofit_1;
}

@end

void Retrofit2Retrofit_1_initWithRetrofit2Retrofit_withIOSClass_(Retrofit2Retrofit_1 *self, Retrofit2Retrofit *outer$, IOSClass *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$service_, capture$0);
  NSObject_init(self);
  JreStrongAssign(&self->platform_, Retrofit2Platform_get());
}

Retrofit2Retrofit_1 *new_Retrofit2Retrofit_1_initWithRetrofit2Retrofit_withIOSClass_(Retrofit2Retrofit *outer$, IOSClass *capture$0) {
  J2OBJC_NEW_IMPL(Retrofit2Retrofit_1, initWithRetrofit2Retrofit_withIOSClass_, outer$, capture$0)
}

Retrofit2Retrofit_1 *create_Retrofit2Retrofit_1_initWithRetrofit2Retrofit_withIOSClass_(Retrofit2Retrofit *outer$, IOSClass *capture$0) {
  J2OBJC_CREATE_IMPL(Retrofit2Retrofit_1, initWithRetrofit2Retrofit_withIOSClass_, outer$, capture$0)
}

@implementation Retrofit2Retrofit_Builder

- (instancetype)initWithRetrofit2Platform:(Retrofit2Platform *)platform {
  Retrofit2Retrofit_Builder_initWithRetrofit2Platform_(self, platform);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Retrofit2Retrofit_Builder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithRetrofit2Retrofit:(Retrofit2Retrofit *)retrofit {
  Retrofit2Retrofit_Builder_initWithRetrofit2Retrofit_(self, retrofit);
  return self;
}

- (Retrofit2Retrofit_Builder *)clientWithOkhttp3OkHttpClient:(Okhttp3OkHttpClient *)client {
  return [self callFactoryWithOkhttp3Call_Factory:Retrofit2Utils_checkNotNullWithId_withNSString_(client, @"client == null")];
}

- (Retrofit2Retrofit_Builder *)callFactoryWithOkhttp3Call_Factory:(id<Okhttp3Call_Factory>)factory {
  JreStrongAssign(&self->callFactory_, Retrofit2Utils_checkNotNullWithId_withNSString_(factory, @"factory == null"));
  return self;
}

- (Retrofit2Retrofit_Builder *)baseUrlWithNSString:(NSString *)baseUrl {
  Retrofit2Utils_checkNotNullWithId_withNSString_(baseUrl, @"baseUrl == null");
  Okhttp3HttpUrl *httpUrl = Okhttp3HttpUrl_parseWithNSString_(baseUrl);
  if (httpUrl == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Illegal URL: ", baseUrl));
  }
  return [self baseUrlWithOkhttp3HttpUrl:httpUrl];
}

- (Retrofit2Retrofit_Builder *)baseUrlWithOkhttp3HttpUrl:(Okhttp3HttpUrl *)baseUrl {
  Retrofit2Utils_checkNotNullWithId_withNSString_(baseUrl, @"baseUrl == null");
  id<JavaUtilList> pathSegments = [((Okhttp3HttpUrl *) nil_chk(baseUrl)) pathSegments];
  if (![@"" isEqual:[((id<JavaUtilList>) nil_chk(pathSegments)) getWithInt:[pathSegments size] - 1]]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"baseUrl must end in /: ", baseUrl));
  }
  JreStrongAssign(&self->baseUrl_, baseUrl);
  return self;
}

- (Retrofit2Retrofit_Builder *)addConverterFactoryWithRetrofit2Converter_Factory:(Retrofit2Converter_Factory *)factory {
  [((id<JavaUtilList>) nil_chk(converterFactories_)) addWithId:Retrofit2Utils_checkNotNullWithId_withNSString_(factory, @"factory == null")];
  return self;
}

- (Retrofit2Retrofit_Builder *)addCallAdapterFactoryWithRetrofit2CallAdapter_Factory:(Retrofit2CallAdapter_Factory *)factory {
  [((id<JavaUtilList>) nil_chk(adapterFactories_)) addWithId:Retrofit2Utils_checkNotNullWithId_withNSString_(factory, @"factory == null")];
  return self;
}

- (Retrofit2Retrofit_Builder *)callbackExecutorWithJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor {
  JreStrongAssign(&self->callbackExecutor_, Retrofit2Utils_checkNotNullWithId_withNSString_(executor, @"executor == null"));
  return self;
}

- (Retrofit2Retrofit_Builder *)validateEagerlyWithBoolean:(jboolean)validateEagerly {
  self->validateEagerly_ = validateEagerly;
  return self;
}

- (Retrofit2Retrofit *)build {
  if (baseUrl_ == nil) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Base URL required.");
  }
  id<Okhttp3Call_Factory> callFactory = self->callFactory_;
  if (callFactory == nil) {
    callFactory = create_Okhttp3OkHttpClient_init();
  }
  id<JavaUtilConcurrentExecutor> callbackExecutor = self->callbackExecutor_;
  if (callbackExecutor == nil) {
    callbackExecutor = [((Retrofit2Platform *) nil_chk(platform_)) defaultCallbackExecutor];
  }
  id<JavaUtilList> adapterFactories = create_JavaUtilArrayList_initWithJavaUtilCollection_(self->adapterFactories_);
  [adapterFactories addWithId:[((Retrofit2Platform *) nil_chk(platform_)) defaultCallAdapterFactoryWithJavaUtilConcurrentExecutor:callbackExecutor]];
  id<JavaUtilList> converterFactories = create_JavaUtilArrayList_initWithJavaUtilCollection_(self->converterFactories_);
  return create_Retrofit2Retrofit_initWithOkhttp3Call_Factory_withOkhttp3HttpUrl_withJavaUtilList_withJavaUtilList_withJavaUtilConcurrentExecutor_withBoolean_(callFactory, baseUrl_, converterFactories, adapterFactories, callbackExecutor, validateEagerly_);
}

- (void)dealloc {
  RELEASE_(platform_);
  RELEASE_(callFactory_);
  RELEASE_(baseUrl_);
  RELEASE_(converterFactories_);
  RELEASE_(adapterFactories_);
  RELEASE_(callbackExecutor_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "LRetrofit2Retrofit_Builder;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LRetrofit2Retrofit_Builder;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LRetrofit2Retrofit_Builder;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LRetrofit2Retrofit_Builder;", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "LRetrofit2Retrofit_Builder;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LRetrofit2Retrofit_Builder;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LRetrofit2Retrofit_Builder;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LRetrofit2Retrofit_Builder;", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LRetrofit2Retrofit;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithRetrofit2Platform:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithRetrofit2Retrofit:);
  methods[3].selector = @selector(clientWithOkhttp3OkHttpClient:);
  methods[4].selector = @selector(callFactoryWithOkhttp3Call_Factory:);
  methods[5].selector = @selector(baseUrlWithNSString:);
  methods[6].selector = @selector(baseUrlWithOkhttp3HttpUrl:);
  methods[7].selector = @selector(addConverterFactoryWithRetrofit2Converter_Factory:);
  methods[8].selector = @selector(addCallAdapterFactoryWithRetrofit2CallAdapter_Factory:);
  methods[9].selector = @selector(callbackExecutorWithJavaUtilConcurrentExecutor:);
  methods[10].selector = @selector(validateEagerlyWithBoolean:);
  methods[11].selector = @selector(build);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "platform_", "LRetrofit2Platform;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "callFactory_", "LOkhttp3Call_Factory;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "baseUrl_", "LOkhttp3HttpUrl;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "converterFactories_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 17, -1 },
    { "adapterFactories_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 18, -1 },
    { "callbackExecutor_", "LJavaUtilConcurrentExecutor;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "validateEagerly_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LRetrofit2Platform;", "LRetrofit2Retrofit;", "client", "LOkhttp3OkHttpClient;", "callFactory", "LOkhttp3Call_Factory;", "baseUrl", "LNSString;", "LOkhttp3HttpUrl;", "addConverterFactory", "LRetrofit2Converter_Factory;", "addCallAdapterFactory", "LRetrofit2CallAdapter_Factory;", "callbackExecutor", "LJavaUtilConcurrentExecutor;", "validateEagerly", "Z", "Ljava/util/List<Lretrofit2/Converter$Factory;>;", "Ljava/util/List<Lretrofit2/CallAdapter$Factory;>;" };
  static const J2ObjcClassInfo _Retrofit2Retrofit_Builder = { "Builder", "retrofit2", ptrTable, methods, fields, 7, 0x19, 12, 7, 1, -1, -1, -1, -1 };
  return &_Retrofit2Retrofit_Builder;
}

@end

void Retrofit2Retrofit_Builder_initWithRetrofit2Platform_(Retrofit2Retrofit_Builder *self, Retrofit2Platform *platform) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->converterFactories_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->adapterFactories_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->platform_, platform);
  [self->converterFactories_ addWithId:create_Retrofit2BuiltInConverters_init()];
}

Retrofit2Retrofit_Builder *new_Retrofit2Retrofit_Builder_initWithRetrofit2Platform_(Retrofit2Platform *platform) {
  J2OBJC_NEW_IMPL(Retrofit2Retrofit_Builder, initWithRetrofit2Platform_, platform)
}

Retrofit2Retrofit_Builder *create_Retrofit2Retrofit_Builder_initWithRetrofit2Platform_(Retrofit2Platform *platform) {
  J2OBJC_CREATE_IMPL(Retrofit2Retrofit_Builder, initWithRetrofit2Platform_, platform)
}

void Retrofit2Retrofit_Builder_init(Retrofit2Retrofit_Builder *self) {
  Retrofit2Retrofit_Builder_initWithRetrofit2Platform_(self, Retrofit2Platform_get());
}

Retrofit2Retrofit_Builder *new_Retrofit2Retrofit_Builder_init() {
  J2OBJC_NEW_IMPL(Retrofit2Retrofit_Builder, init)
}

Retrofit2Retrofit_Builder *create_Retrofit2Retrofit_Builder_init() {
  J2OBJC_CREATE_IMPL(Retrofit2Retrofit_Builder, init)
}

void Retrofit2Retrofit_Builder_initWithRetrofit2Retrofit_(Retrofit2Retrofit_Builder *self, Retrofit2Retrofit *retrofit) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->converterFactories_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->adapterFactories_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->platform_, Retrofit2Platform_get());
  JreStrongAssign(&self->callFactory_, ((Retrofit2Retrofit *) nil_chk(retrofit))->callFactory_);
  JreStrongAssign(&self->baseUrl_, retrofit->baseUrl_);
  [self->converterFactories_ addAllWithJavaUtilCollection:retrofit->converterFactories_];
  [self->adapterFactories_ addAllWithJavaUtilCollection:retrofit->adapterFactories_];
  [self->adapterFactories_ removeWithInt:[self->adapterFactories_ size] - 1];
  JreStrongAssign(&self->callbackExecutor_, retrofit->callbackExecutor_);
  self->validateEagerly_ = retrofit->validateEagerly_;
}

Retrofit2Retrofit_Builder *new_Retrofit2Retrofit_Builder_initWithRetrofit2Retrofit_(Retrofit2Retrofit *retrofit) {
  J2OBJC_NEW_IMPL(Retrofit2Retrofit_Builder, initWithRetrofit2Retrofit_, retrofit)
}

Retrofit2Retrofit_Builder *create_Retrofit2Retrofit_Builder_initWithRetrofit2Retrofit_(Retrofit2Retrofit *retrofit) {
  J2OBJC_CREATE_IMPL(Retrofit2Retrofit_Builder, initWithRetrofit2Retrofit_, retrofit)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Retrofit2Retrofit_Builder)
