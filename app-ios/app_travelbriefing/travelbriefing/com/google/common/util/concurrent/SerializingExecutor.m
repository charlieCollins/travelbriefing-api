//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../target/dependency/com/google/common/util/concurrent/SerializingExecutor.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/google/common/base/Preconditions.h"
#include "com/google/common/util/concurrent/SerializingExecutor.h"
#include "java/lang/Error.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayDeque.h"
#include "java/util/Deque.h"
#include "java/util/concurrent/Executor.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"

@interface ComGoogleCommonUtilConcurrentSerializingExecutor () {
 @public
  id<JavaUtilConcurrentExecutor> executor_;
  id<JavaUtilDeque> queue_;
  jboolean isWorkerRunning_;
  jint suspensions_;
  id internalLock_;
}

- (void)startQueueWorker;

@end

J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentSerializingExecutor, executor_, id<JavaUtilConcurrentExecutor>)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentSerializingExecutor, queue_, id<JavaUtilDeque>)
J2OBJC_FIELD_SETTER(ComGoogleCommonUtilConcurrentSerializingExecutor, internalLock_, id)

inline JavaUtilLoggingLogger *ComGoogleCommonUtilConcurrentSerializingExecutor_get_log();
static JavaUtilLoggingLogger *ComGoogleCommonUtilConcurrentSerializingExecutor_log;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComGoogleCommonUtilConcurrentSerializingExecutor, log, JavaUtilLoggingLogger *)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentSerializingExecutor_startQueueWorker(ComGoogleCommonUtilConcurrentSerializingExecutor *self);

@interface ComGoogleCommonUtilConcurrentSerializingExecutor_QueueWorker : NSObject < JavaLangRunnable > {
 @public
  ComGoogleCommonUtilConcurrentSerializingExecutor *this$0_;
}

- (instancetype)initWithComGoogleCommonUtilConcurrentSerializingExecutor:(ComGoogleCommonUtilConcurrentSerializingExecutor *)outer$;

- (void)run;

- (void)workOnQueue;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGoogleCommonUtilConcurrentSerializingExecutor_QueueWorker)

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentSerializingExecutor_QueueWorker_initWithComGoogleCommonUtilConcurrentSerializingExecutor_(ComGoogleCommonUtilConcurrentSerializingExecutor_QueueWorker *self, ComGoogleCommonUtilConcurrentSerializingExecutor *outer$);

__attribute__((unused)) static ComGoogleCommonUtilConcurrentSerializingExecutor_QueueWorker *new_ComGoogleCommonUtilConcurrentSerializingExecutor_QueueWorker_initWithComGoogleCommonUtilConcurrentSerializingExecutor_(ComGoogleCommonUtilConcurrentSerializingExecutor *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComGoogleCommonUtilConcurrentSerializingExecutor_QueueWorker *create_ComGoogleCommonUtilConcurrentSerializingExecutor_QueueWorker_initWithComGoogleCommonUtilConcurrentSerializingExecutor_(ComGoogleCommonUtilConcurrentSerializingExecutor *outer$);

__attribute__((unused)) static void ComGoogleCommonUtilConcurrentSerializingExecutor_QueueWorker_workOnQueue(ComGoogleCommonUtilConcurrentSerializingExecutor_QueueWorker *self);

J2OBJC_TYPE_LITERAL_HEADER(ComGoogleCommonUtilConcurrentSerializingExecutor_QueueWorker)

J2OBJC_INITIALIZED_DEFN(ComGoogleCommonUtilConcurrentSerializingExecutor)

@implementation ComGoogleCommonUtilConcurrentSerializingExecutor

- (instancetype)initWithJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)executor {
  ComGoogleCommonUtilConcurrentSerializingExecutor_initWithJavaUtilConcurrentExecutor_(self, executor);
  return self;
}

- (void)executeWithJavaLangRunnable:(id<JavaLangRunnable>)task {
  @synchronized(internalLock_) {
    [((id<JavaUtilDeque>) nil_chk(queue_)) addWithId:task];
  }
  ComGoogleCommonUtilConcurrentSerializingExecutor_startQueueWorker(self);
}

- (void)executeFirstWithJavaLangRunnable:(id<JavaLangRunnable>)task {
  @synchronized(internalLock_) {
    [((id<JavaUtilDeque>) nil_chk(queue_)) addFirstWithId:task];
  }
  ComGoogleCommonUtilConcurrentSerializingExecutor_startQueueWorker(self);
}

- (void)suspend {
  @synchronized(internalLock_) {
    suspensions_++;
  }
}

- (void)resume {
  @synchronized(internalLock_) {
    ComGoogleCommonBasePreconditions_checkStateWithBoolean_(suspensions_ > 0);
    suspensions_--;
  }
  ComGoogleCommonUtilConcurrentSerializingExecutor_startQueueWorker(self);
}

- (void)startQueueWorker {
  ComGoogleCommonUtilConcurrentSerializingExecutor_startQueueWorker(self);
}

- (void)dealloc {
  RELEASE_(executor_);
  RELEASE_(queue_);
  RELEASE_(internalLock_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilConcurrentExecutor:);
  methods[1].selector = @selector(executeWithJavaLangRunnable:);
  methods[2].selector = @selector(executeFirstWithJavaLangRunnable:);
  methods[3].selector = @selector(suspend);
  methods[4].selector = @selector(resume);
  methods[5].selector = @selector(startQueueWorker);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "log", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
    { "executor_", "LJavaUtilConcurrentExecutor;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "queue_", "LJavaUtilDeque;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
    { "isWorkerRunning_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "suspensions_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "internalLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilConcurrentExecutor;", "execute", "LJavaLangRunnable;", "executeFirst", &ComGoogleCommonUtilConcurrentSerializingExecutor_log, "Ljava/util/Deque<Ljava/lang/Runnable;>;", "LComGoogleCommonUtilConcurrentSerializingExecutor_QueueWorker;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentSerializingExecutor = { "SerializingExecutor", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x10, 6, 6, -1, 6, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentSerializingExecutor;
}

+ (void)initialize {
  if (self == [ComGoogleCommonUtilConcurrentSerializingExecutor class]) {
    JreStrongAssign(&ComGoogleCommonUtilConcurrentSerializingExecutor_log, JavaUtilLoggingLogger_getLoggerWithNSString_([ComGoogleCommonUtilConcurrentSerializingExecutor_class_() getName]));
    J2OBJC_SET_INITIALIZED(ComGoogleCommonUtilConcurrentSerializingExecutor)
  }
}

@end

void ComGoogleCommonUtilConcurrentSerializingExecutor_initWithJavaUtilConcurrentExecutor_(ComGoogleCommonUtilConcurrentSerializingExecutor *self, id<JavaUtilConcurrentExecutor> executor) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->queue_, new_JavaUtilArrayDeque_init());
  self->isWorkerRunning_ = false;
  self->suspensions_ = 0;
  JreStrongAssignAndConsume(&self->internalLock_, new_NSObject_init());
  JreStrongAssign(&self->executor_, ComGoogleCommonBasePreconditions_checkNotNullWithId_(executor));
}

ComGoogleCommonUtilConcurrentSerializingExecutor *new_ComGoogleCommonUtilConcurrentSerializingExecutor_initWithJavaUtilConcurrentExecutor_(id<JavaUtilConcurrentExecutor> executor) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentSerializingExecutor, initWithJavaUtilConcurrentExecutor_, executor)
}

ComGoogleCommonUtilConcurrentSerializingExecutor *create_ComGoogleCommonUtilConcurrentSerializingExecutor_initWithJavaUtilConcurrentExecutor_(id<JavaUtilConcurrentExecutor> executor) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentSerializingExecutor, initWithJavaUtilConcurrentExecutor_, executor)
}

void ComGoogleCommonUtilConcurrentSerializingExecutor_startQueueWorker(ComGoogleCommonUtilConcurrentSerializingExecutor *self) {
  @synchronized(self->internalLock_) {
    if ([((id<JavaUtilDeque>) nil_chk(self->queue_)) peek] == nil) {
      return;
    }
    if (self->suspensions_ > 0) {
      return;
    }
    if (self->isWorkerRunning_) {
      return;
    }
    self->isWorkerRunning_ = true;
  }
  jboolean executionRejected = true;
  @try {
    [((id<JavaUtilConcurrentExecutor>) nil_chk(self->executor_)) executeWithJavaLangRunnable:create_ComGoogleCommonUtilConcurrentSerializingExecutor_QueueWorker_initWithComGoogleCommonUtilConcurrentSerializingExecutor_(self)];
    executionRejected = false;
  }
  @finally {
    if (executionRejected) {
      @synchronized(self->internalLock_) {
        self->isWorkerRunning_ = false;
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentSerializingExecutor)

@implementation ComGoogleCommonUtilConcurrentSerializingExecutor_QueueWorker

- (instancetype)initWithComGoogleCommonUtilConcurrentSerializingExecutor:(ComGoogleCommonUtilConcurrentSerializingExecutor *)outer$ {
  ComGoogleCommonUtilConcurrentSerializingExecutor_QueueWorker_initWithComGoogleCommonUtilConcurrentSerializingExecutor_(self, outer$);
  return self;
}

- (void)run {
  @try {
    ComGoogleCommonUtilConcurrentSerializingExecutor_QueueWorker_workOnQueue(self);
  }
  @catch (JavaLangError *e) {
    @synchronized(this$0_->internalLock_) {
      this$0_->isWorkerRunning_ = false;
    }
    @throw e;
  }
}

- (void)workOnQueue {
  ComGoogleCommonUtilConcurrentSerializingExecutor_QueueWorker_workOnQueue(self);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithComGoogleCommonUtilConcurrentSerializingExecutor:);
  methods[1].selector = @selector(run);
  methods[2].selector = @selector(workOnQueue);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComGoogleCommonUtilConcurrentSerializingExecutor;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComGoogleCommonUtilConcurrentSerializingExecutor;" };
  static const J2ObjcClassInfo _ComGoogleCommonUtilConcurrentSerializingExecutor_QueueWorker = { "QueueWorker", "com.google.common.util.concurrent", ptrTable, methods, fields, 7, 0x12, 3, 1, 0, -1, -1, -1, -1 };
  return &_ComGoogleCommonUtilConcurrentSerializingExecutor_QueueWorker;
}

@end

void ComGoogleCommonUtilConcurrentSerializingExecutor_QueueWorker_initWithComGoogleCommonUtilConcurrentSerializingExecutor_(ComGoogleCommonUtilConcurrentSerializingExecutor_QueueWorker *self, ComGoogleCommonUtilConcurrentSerializingExecutor *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

ComGoogleCommonUtilConcurrentSerializingExecutor_QueueWorker *new_ComGoogleCommonUtilConcurrentSerializingExecutor_QueueWorker_initWithComGoogleCommonUtilConcurrentSerializingExecutor_(ComGoogleCommonUtilConcurrentSerializingExecutor *outer$) {
  J2OBJC_NEW_IMPL(ComGoogleCommonUtilConcurrentSerializingExecutor_QueueWorker, initWithComGoogleCommonUtilConcurrentSerializingExecutor_, outer$)
}

ComGoogleCommonUtilConcurrentSerializingExecutor_QueueWorker *create_ComGoogleCommonUtilConcurrentSerializingExecutor_QueueWorker_initWithComGoogleCommonUtilConcurrentSerializingExecutor_(ComGoogleCommonUtilConcurrentSerializingExecutor *outer$) {
  J2OBJC_CREATE_IMPL(ComGoogleCommonUtilConcurrentSerializingExecutor_QueueWorker, initWithComGoogleCommonUtilConcurrentSerializingExecutor_, outer$)
}

void ComGoogleCommonUtilConcurrentSerializingExecutor_QueueWorker_workOnQueue(ComGoogleCommonUtilConcurrentSerializingExecutor_QueueWorker *self) {
  while (true) {
    id<JavaLangRunnable> task = nil;
    @synchronized(self->this$0_->internalLock_) {
      if (self->this$0_->suspensions_ == 0) {
        task = [((id<JavaUtilDeque>) nil_chk(self->this$0_->queue_)) poll];
      }
      if (task == nil) {
        self->this$0_->isWorkerRunning_ = false;
        return;
      }
    }
    @try {
      [task run];
    }
    @catch (JavaLangRuntimeException *e) {
      [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(ComGoogleCommonUtilConcurrentSerializingExecutor, log))) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:JreStrcat("$@", @"Exception while executing runnable ", task) withNSException:e];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleCommonUtilConcurrentSerializingExecutor_QueueWorker)
